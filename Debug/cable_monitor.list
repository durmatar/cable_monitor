
cable_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000959c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bc4  0800974c  0800974c  0001974c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d310  0800d310  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800d310  0800d310  0001d310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d318  0800d318  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d318  0800d318  0001d318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d31c  0800d31c  0001d31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800d320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000244  0800d564  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800d564  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b94  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003599  00000000  00000000  00037e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026973  00000000  00000000  0003dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cbf  00000000  00000000  00064433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb25  00000000  00000000  0007c0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ac17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005850  00000000  00000000  0015ac6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000244 	.word	0x20000244
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009734 	.word	0x08009734

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000248 	.word	0x20000248
 80001ec:	08009734 	.word	0x08009734

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <GUI_TS_GetState>:
/** ***************************************************************************
 * @brief Wrapper for touch screen sate
 *
 * Enable use of BSP_TS_GetState() function with 180° rotated display
 *****************************************************************************/
void GUI_TS_GetState(TS_StateTypeDef* TS_State){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	//readout TS state
	BSP_TS_GetState(TS_State);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f004 fa3f 	bl	8004a14 <BSP_TS_GetState>
	//translate to correct coordinate system
	TS_State->X = BSP_LCD_GetXSize()-TS_State->X;
 8000596:	f003 f96b 	bl	8003870 <BSP_LCD_GetXSize>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	885b      	ldrh	r3, [r3, #2]
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	805a      	strh	r2, [r3, #2]
	//TS_State->Y = BSP_LCD_GetYSize()-TS_State->Y;
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <GUI_LCD_FillRect>:
/** ***************************************************************************
 * @brief Wrapper to draw filled rectangle
 *
 * Enable use of BSP_LCD_FillRect() function with 180° rotated display
 *****************************************************************************/
void GUI_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height){
 80005b2:	b590      	push	{r4, r7, lr}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4604      	mov	r4, r0
 80005ba:	4608      	mov	r0, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	461a      	mov	r2, r3
 80005c0:	4623      	mov	r3, r4
 80005c2:	80fb      	strh	r3, [r7, #6]
 80005c4:	4603      	mov	r3, r0
 80005c6:	80bb      	strh	r3, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]
 80005cc:	4613      	mov	r3, r2
 80005ce:	803b      	strh	r3, [r7, #0]
	//calculate diagonal corner coordinates and translate to other system
	Xpos = BSP_LCD_GetXSize()-(Xpos+Width);
 80005d0:	f003 f94e 	bl	8003870 <BSP_LCD_GetXSize>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	88f9      	ldrh	r1, [r7, #6]
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	440b      	add	r3, r1
 80005de:	b29b      	uxth	r3, r3
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	80fb      	strh	r3, [r7, #6]
	Ypos = BSP_LCD_GetYSize()-(Ypos+Height);
 80005e4:	f003 f950 	bl	8003888 <BSP_LCD_GetYSize>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	88b9      	ldrh	r1, [r7, #4]
 80005ee:	883b      	ldrh	r3, [r7, #0]
 80005f0:	440b      	add	r3, r1
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	80bb      	strh	r3, [r7, #4]
	//draw rectangular shape
	BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
 80005f8:	883b      	ldrh	r3, [r7, #0]
 80005fa:	887a      	ldrh	r2, [r7, #2]
 80005fc:	88b9      	ldrh	r1, [r7, #4]
 80005fe:	88f8      	ldrh	r0, [r7, #6]
 8000600:	f003 fd9e 	bl	8004140 <BSP_LCD_FillRect>
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}

0800060c <GUI_LCD_DrawRect>:
/** ***************************************************************************
 * @brief Wrapper to draw rectangle
 *
 * Enable use of BSP_LCD_DrawRect() function with 180° rotated display
 *****************************************************************************/
void GUI_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height){
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4604      	mov	r4, r0
 8000614:	4608      	mov	r0, r1
 8000616:	4611      	mov	r1, r2
 8000618:	461a      	mov	r2, r3
 800061a:	4623      	mov	r3, r4
 800061c:	80fb      	strh	r3, [r7, #6]
 800061e:	4603      	mov	r3, r0
 8000620:	80bb      	strh	r3, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	807b      	strh	r3, [r7, #2]
 8000626:	4613      	mov	r3, r2
 8000628:	803b      	strh	r3, [r7, #0]
	//calculate diagonal corner coordinates and translate to other system
	Xpos = BSP_LCD_GetXSize()-(Xpos+Width);
 800062a:	f003 f921 	bl	8003870 <BSP_LCD_GetXSize>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	88f9      	ldrh	r1, [r7, #6]
 8000634:	887b      	ldrh	r3, [r7, #2]
 8000636:	440b      	add	r3, r1
 8000638:	b29b      	uxth	r3, r3
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	80fb      	strh	r3, [r7, #6]
	Ypos = BSP_LCD_GetYSize()-(Ypos+Height);
 800063e:	f003 f923 	bl	8003888 <BSP_LCD_GetYSize>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	88b9      	ldrh	r1, [r7, #4]
 8000648:	883b      	ldrh	r3, [r7, #0]
 800064a:	440b      	add	r3, r1
 800064c:	b29b      	uxth	r3, r3
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	80bb      	strh	r3, [r7, #4]
	//draw rectangular shape
	BSP_LCD_DrawRect(Xpos, Ypos, Width, Height);
 8000652:	883b      	ldrh	r3, [r7, #0]
 8000654:	887a      	ldrh	r2, [r7, #2]
 8000656:	88b9      	ldrh	r1, [r7, #4]
 8000658:	88f8      	ldrh	r0, [r7, #6]
 800065a:	f003 fc55 	bl	8003f08 <BSP_LCD_DrawRect>
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bd90      	pop	{r4, r7, pc}
	...

08000668 <GUI_DrawHint>:

/** ***************************************************************************
 * @brief Draw hint
 *
 *****************************************************************************/
void GUI_DrawHint(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f003 f9a2 	bl	80039b8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000674:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000678:	f003 f986 	bl	8003988 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800067c:	481b      	ldr	r0, [pc, #108]	; (80006ec <GUI_DrawHint+0x84>)
 800067e:	f003 f9b5 	bl	80039ec <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Cable-Monitor", LEFT_MODE);
 8000682:	2303      	movs	r3, #3
 8000684:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <GUI_DrawHint+0x88>)
 8000686:	210a      	movs	r1, #10
 8000688:	2005      	movs	r0, #5
 800068a:	f003 fa35 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 800068e:	4819      	ldr	r0, [pc, #100]	; (80006f4 <GUI_DrawHint+0x8c>)
 8000690:	f003 f9ac 	bl	80039ec <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch on screen or", LEFT_MODE);
 8000694:	2303      	movs	r3, #3
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <GUI_DrawHint+0x90>)
 8000698:	213c      	movs	r1, #60	; 0x3c
 800069a:	2005      	movs	r0, #5
 800069c:	f003 fa2c 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"press blue button",LEFT_MODE);
 80006a0:	2303      	movs	r3, #3
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <GUI_DrawHint+0x94>)
 80006a4:	2150      	movs	r1, #80	; 0x50
 80006a6:	2005      	movs	r0, #5
 80006a8:	f003 fa26 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 100, (uint8_t *)"to proceed to", LEFT_MODE);
 80006ac:	2303      	movs	r3, #3
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <GUI_DrawHint+0x98>)
 80006b0:	2164      	movs	r1, #100	; 0x64
 80006b2:	2005      	movs	r0, #5
 80006b4:	f003 fa20 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 120, (uint8_t *)"the main sceen", LEFT_MODE);
 80006b8:	2303      	movs	r3, #3
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <GUI_DrawHint+0x9c>)
 80006bc:	2178      	movs	r1, #120	; 0x78
 80006be:	2005      	movs	r0, #5
 80006c0:	f003 fa1a 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 80006c4:	4810      	ldr	r0, [pc, #64]	; (8000708 <GUI_DrawHint+0xa0>)
 80006c6:	f003 f991 	bl	80039ec <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 290, (uint8_t *)"(c)bollhjon & durmatar", LEFT_MODE);
 80006ca:	2303      	movs	r3, #3
 80006cc:	4a0f      	ldr	r2, [pc, #60]	; (800070c <GUI_DrawHint+0xa4>)
 80006ce:	f44f 7191 	mov.w	r1, #290	; 0x122
 80006d2:	2005      	movs	r0, #5
 80006d4:	f003 fa10 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 305, (uint8_t *)"Version 20.12.2021", LEFT_MODE);
 80006d8:	2303      	movs	r3, #3
 80006da:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <GUI_DrawHint+0xa8>)
 80006dc:	f240 1131 	movw	r1, #305	; 0x131
 80006e0:	2005      	movs	r0, #5
 80006e2:	f003 fa09 	bl	8003af8 <BSP_LCD_DisplayStringAt>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200001b4 	.word	0x200001b4
 80006f0:	0800974c 	.word	0x0800974c
 80006f4:	200001c4 	.word	0x200001c4
 80006f8:	0800975c 	.word	0x0800975c
 80006fc:	08009770 	.word	0x08009770
 8000700:	08009784 	.word	0x08009784
 8000704:	08009794 	.word	0x08009794
 8000708:	200001cc 	.word	0x200001cc
 800070c:	080097a4 	.word	0x080097a4
 8000710:	080097bc 	.word	0x080097bc

08000714 <GUI_DrawModeSel>:

/** ***************************************************************************
 * @brief Draw Mode Selection
 *
 *****************************************************************************/
void GUI_DrawModeSel(void){
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b087      	sub	sp, #28
 8000718:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MODE_FONT);
 800071a:	4856      	ldr	r0, [pc, #344]	; (8000874 <GUI_DrawModeSel+0x160>)
 800071c:	f003 f966 	bl	80039ec <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MODE_Y;
 8000720:	f003 f8b2 	bl	8003888 <BSP_LCD_GetYSize>
 8000724:	4603      	mov	r3, r0
 8000726:	3b28      	subs	r3, #40	; 0x28
 8000728:	613b      	str	r3, [r7, #16]
	m = MODE_MARGIN;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MODE_ENTRY_COUNT;
 800072e:	f003 f89f 	bl	8003870 <BSP_LCD_GetXSize>
 8000732:	4603      	mov	r3, r0
 8000734:	4a50      	ldr	r2, [pc, #320]	; (8000878 <GUI_DrawModeSel+0x164>)
 8000736:	fba2 2303 	umull	r2, r3, r2, r3
 800073a:	085b      	lsrs	r3, r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
	h = MODE_HEIGHT;
 800073e:	2328      	movs	r3, #40	; 0x28
 8000740:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < MODE_ENTRY_COUNT; ++i) {
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e08c      	b.n	8000862 <GUI_DrawModeSel+0x14e>
		x = i*w;
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	fb02 f303 	mul.w	r3, r2, r3
 8000750:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MODE_entry[i].back_color);
 8000752:	494a      	ldr	r1, [pc, #296]	; (800087c <GUI_DrawModeSel+0x168>)
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3310      	adds	r3, #16
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f003 f90f 	bl	8003988 <BSP_LCD_SetTextColor>
		GUI_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b29a      	uxth	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	b29b      	uxth	r3, r3
 8000772:	4413      	add	r3, r2
 8000774:	b298      	uxth	r0, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	b29a      	uxth	r2, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	b29b      	uxth	r3, r3
 800077e:	4413      	add	r3, r2
 8000780:	b299      	uxth	r1, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	b29a      	uxth	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	b29b      	uxth	r3, r3
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	b29b      	uxth	r3, r3
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	b29c      	uxth	r4, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	b29a      	uxth	r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	b29b      	uxth	r3, r3
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	b29b      	uxth	r3, r3
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4622      	mov	r2, r4
 80007a4:	f7ff ff05 	bl	80005b2 <GUI_LCD_FillRect>
		BSP_LCD_SetTextColor(MODE_entry[i].frame_color);
 80007a8:	4934      	ldr	r1, [pc, #208]	; (800087c <GUI_DrawModeSel+0x168>)
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	440b      	add	r3, r1
 80007b6:	3314      	adds	r3, #20
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 f8e4 	bl	8003988 <BSP_LCD_SetTextColor>
		GUI_LCD_DrawRect(x+m, y+m, w-2*m, h-2*m);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	b298      	uxth	r0, r3
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	b299      	uxth	r1, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	b29c      	uxth	r4, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	4622      	mov	r2, r4
 80007fa:	f7ff ff07 	bl	800060c <GUI_LCD_DrawRect>
		BSP_LCD_SetBackColor(MODE_entry[i].back_color);
 80007fe:	491f      	ldr	r1, [pc, #124]	; (800087c <GUI_DrawModeSel+0x168>)
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	3310      	adds	r3, #16
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f003 f8d1 	bl	80039b8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000816:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800081a:	f003 f8b5 	bl	8003988 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m, y+6*m, (uint8_t*)MODE_entry[i].line, LEFT_MODE);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	b29b      	uxth	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	00d2      	lsls	r2, r2, #3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	4413      	add	r3, r2
 8000830:	b298      	uxth	r0, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	b29b      	uxth	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	0052      	lsls	r2, r2, #1
 800083a:	4413      	add	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	b29a      	uxth	r2, r3
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	b29b      	uxth	r3, r3
 8000844:	4413      	add	r3, r2
 8000846:	b299      	uxth	r1, r3
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <GUI_DrawModeSel+0x168>)
 8000854:	441a      	add	r2, r3
 8000856:	2303      	movs	r3, #3
 8000858:	f003 f94e 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	for (int i = 0; i < MODE_ENTRY_COUNT; ++i) {
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	3301      	adds	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	2b02      	cmp	r3, #2
 8000866:	f77f af6f 	ble.w	8000748 <GUI_DrawModeSel+0x34>
	}
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	200001bc 	.word	0x200001bc
 8000878:	aaaaaaab 	.word	0xaaaaaaab
 800087c:	20000000 	.word	0x20000000

08000880 <GUI_DrawTopMode>:
/** ***************************************************************************
 * @brief Draw Mode field to Top Bar
 *
 * Display selected Mode and green background if cable was detected
 *****************************************************************************/
void GUI_DrawTopMode(void){
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(TOP_FONT);
 8000886:	4875      	ldr	r0, [pc, #468]	; (8000a5c <GUI_DrawTopMode+0x1dc>)
 8000888:	f003 f8b0 	bl	80039ec <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	x = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
	y = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
	m = TOP_MARGIN;
 8000894:	2302      	movs	r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
	w = (BSP_LCD_GetXSize()/3);
 8000898:	f002 ffea 	bl	8003870 <BSP_LCD_GetXSize>
 800089c:	4603      	mov	r3, r0
 800089e:	4a70      	ldr	r2, [pc, #448]	; (8000a60 <GUI_DrawTopMode+0x1e0>)
 80008a0:	fba2 2303 	umull	r2, r3, r2, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
	h = TOP_HEIGHT;
 80008a8:	2328      	movs	r3, #40	; 0x28
 80008aa:	607b      	str	r3, [r7, #4]

	//Display framed mode and background green if cable detected
	if (GUI_cable_detected){
 80008ac:	4b6d      	ldr	r3, [pc, #436]	; (8000a64 <GUI_DrawTopMode+0x1e4>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d008      	beq.n	80008c6 <GUI_DrawTopMode+0x46>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
 80008b4:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 80008b8:	f003 f866 	bl	8003988 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGREEN);
 80008bc:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 80008c0:	f003 f87a 	bl	80039b8 <BSP_LCD_SetBackColor>
 80008c4:	e007      	b.n	80008d6 <GUI_DrawTopMode+0x56>
	} else {
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80008c6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ca:	f003 f85d 	bl	8003988 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80008ce:	f04f 30ff 	mov.w	r0, #4294967295
 80008d2:	f003 f871 	bl	80039b8 <BSP_LCD_SetBackColor>
	}
	GUI_LCD_FillRect(x+m, y+m, (w*2)-2*m, h-2*m);
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	4413      	add	r3, r2
 80008e0:	b298      	uxth	r0, r3
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	b299      	uxth	r1, r3
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	b29c      	uxth	r4, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	b29b      	uxth	r3, r3
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	b29b      	uxth	r3, r3
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	b29b      	uxth	r3, r3
 800090a:	4622      	mov	r2, r4
 800090c:	f7ff fe51 	bl	80005b2 <GUI_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000910:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000914:	f003 f838 	bl	8003988 <BSP_LCD_SetTextColor>
	GUI_LCD_DrawRect(x+m, y+m, (w*2)-2*m, h-2*m);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	b29a      	uxth	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	b29b      	uxth	r3, r3
 8000920:	4413      	add	r3, r2
 8000922:	b298      	uxth	r0, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	b29a      	uxth	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	b29b      	uxth	r3, r3
 800092c:	4413      	add	r3, r2
 800092e:	b299      	uxth	r1, r3
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	b29b      	uxth	r3, r3
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	b29c      	uxth	r4, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	b29a      	uxth	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	b29b      	uxth	r3, r3
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	b29b      	uxth	r3, r3
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	b29b      	uxth	r3, r3
 800094c:	4622      	mov	r2, r4
 800094e:	f7ff fe5d 	bl	800060c <GUI_LCD_DrawRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000952:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000956:	f003 f817 	bl	8003988 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(x+3*m, y+6*m, (uint8_t*)"Mode:", LEFT_MODE);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	b29b      	uxth	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	0052      	lsls	r2, r2, #1
 8000962:	4413      	add	r3, r2
 8000964:	b29a      	uxth	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	b29b      	uxth	r3, r3
 800096a:	4413      	add	r3, r2
 800096c:	b298      	uxth	r0, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	b29b      	uxth	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	0052      	lsls	r2, r2, #1
 8000976:	4413      	add	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	b29a      	uxth	r2, r3
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	b29b      	uxth	r3, r3
 8000980:	4413      	add	r3, r2
 8000982:	b299      	uxth	r1, r3
 8000984:	2303      	movs	r3, #3
 8000986:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <GUI_DrawTopMode+0x1e8>)
 8000988:	f003 f8b6 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 800098c:	4837      	ldr	r0, [pc, #220]	; (8000a6c <GUI_DrawTopMode+0x1ec>)
 800098e:	f002 fffb 	bl	8003988 <BSP_LCD_SetTextColor>
	//display current mode
	switch (GUI_mode) {
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <GUI_DrawTopMode+0x1f0>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d03e      	beq.n	8000a18 <GUI_DrawTopMode+0x198>
 800099a:	2b02      	cmp	r3, #2
 800099c:	dc58      	bgt.n	8000a50 <GUI_DrawTopMode+0x1d0>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <GUI_DrawTopMode+0x128>
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d01c      	beq.n	80009e0 <GUI_DrawTopMode+0x160>
			break;
		case MODE_LNPE:
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LNPE", LEFT_MODE);
			break;
		default:
			break;
 80009a6:	e053      	b.n	8000a50 <GUI_DrawTopMode+0x1d0>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"L", LEFT_MODE);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	0052      	lsls	r2, r2, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4413      	add	r3, r2
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	3354      	adds	r3, #84	; 0x54
 80009be:	b298      	uxth	r0, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	0052      	lsls	r2, r2, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b299      	uxth	r1, r3
 80009d6:	2303      	movs	r3, #3
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <GUI_DrawTopMode+0x1f4>)
 80009da:	f003 f88d 	bl	8003af8 <BSP_LCD_DisplayStringAt>
			break;
 80009de:	e038      	b.n	8000a52 <GUI_DrawTopMode+0x1d2>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LN", LEFT_MODE);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	461a      	mov	r2, r3
 80009e6:	0052      	lsls	r2, r2, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4413      	add	r3, r2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	3354      	adds	r3, #84	; 0x54
 80009f6:	b298      	uxth	r0, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b299      	uxth	r1, r3
 8000a0e:	2303      	movs	r3, #3
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <GUI_DrawTopMode+0x1f8>)
 8000a12:	f003 f871 	bl	8003af8 <BSP_LCD_DisplayStringAt>
			break;
 8000a16:	e01c      	b.n	8000a52 <GUI_DrawTopMode+0x1d2>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LNPE", LEFT_MODE);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4413      	add	r3, r2
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	3354      	adds	r3, #84	; 0x54
 8000a2e:	b298      	uxth	r0, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	0052      	lsls	r2, r2, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	b299      	uxth	r1, r3
 8000a46:	2303      	movs	r3, #3
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <GUI_DrawTopMode+0x1fc>)
 8000a4a:	f003 f855 	bl	8003af8 <BSP_LCD_DisplayStringAt>
			break;
 8000a4e:	e000      	b.n	8000a52 <GUI_DrawTopMode+0x1d2>
			break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	bf00      	nop
 8000a54:	371c      	adds	r7, #28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001bc 	.word	0x200001bc
 8000a60:	aaaaaaab 	.word	0xaaaaaaab
 8000a64:	20000260 	.word	0x20000260
 8000a68:	080097d0 	.word	0x080097d0
 8000a6c:	ff404040 	.word	0xff404040
 8000a70:	20000261 	.word	0x20000261
 8000a74:	080097d8 	.word	0x080097d8
 8000a78:	080097dc 	.word	0x080097dc
 8000a7c:	080097e0 	.word	0x080097e0

08000a80 <GUI_DrawTopOptions>:
/** ***************************************************************************
 * @brief Draw options field to top bar
 *
 * Draw options field in top bar
 *****************************************************************************/
void GUI_DrawTopOptions(void){
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(TOP_FONT);
 8000a86:	486a      	ldr	r0, [pc, #424]	; (8000c30 <GUI_DrawTopOptions+0x1b0>)
 8000a88:	f002 ffb0 	bl	80039ec <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	x = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
	y = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
	m = TOP_MARGIN;
 8000a94:	2302      	movs	r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
	w = (BSP_LCD_GetXSize()/3);
 8000a98:	f002 feea 	bl	8003870 <BSP_LCD_GetXSize>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a65      	ldr	r2, [pc, #404]	; (8000c34 <GUI_DrawTopOptions+0x1b4>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	085b      	lsrs	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
	h = TOP_HEIGHT;
 8000aa8:	2328      	movs	r3, #40	; 0x28
 8000aaa:	607b      	str	r3, [r7, #4]

	//display Options area
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8000aac:	4862      	ldr	r0, [pc, #392]	; (8000c38 <GUI_DrawTopOptions+0x1b8>)
 8000aae:	f002 ff6b 	bl	8003988 <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	4413      	add	r3, r2
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b299      	uxth	r1, r3
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	b29c      	uxth	r4, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4622      	mov	r2, r4
 8000af8:	f7ff fd5b 	bl	80005b2 <GUI_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 8000afc:	484e      	ldr	r0, [pc, #312]	; (8000c38 <GUI_DrawTopOptions+0x1b8>)
 8000afe:	f002 ff5b 	bl	80039b8 <BSP_LCD_SetBackColor>
	//display according to site state
	if (GUI_currentSite != SITE_OPTN) {
 8000b02:	4b4e      	ldr	r3, [pc, #312]	; (8000c3c <GUI_DrawTopOptions+0x1bc>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d047      	beq.n	8000b9a <GUI_DrawTopOptions+0x11a>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8000b0a:	484d      	ldr	r0, [pc, #308]	; (8000c40 <GUI_DrawTopOptions+0x1c0>)
 8000b0c:	f002 ff3c 	bl	8003988 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"OPTN", LEFT_MODE);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	4413      	add	r3, r2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b298      	uxth	r0, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	0052      	lsls	r2, r2, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	4413      	add	r3, r2
 8000b44:	b299      	uxth	r1, r3
 8000b46:	2303      	movs	r3, #3
 8000b48:	4a3e      	ldr	r2, [pc, #248]	; (8000c44 <GUI_DrawTopOptions+0x1c4>)
 8000b4a:	f002 ffd5 	bl	8003af8 <BSP_LCD_DisplayStringAt>
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	b298      	uxth	r0, r3
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	b299      	uxth	r1, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	b29c      	uxth	r4, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4622      	mov	r2, r4
 8000b94:	f7ff fd3a 	bl	800060c <GUI_LCD_DrawRect>
	} else {
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"BACK", LEFT_MODE);
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
	}
}
 8000b98:	e046      	b.n	8000c28 <GUI_DrawTopOptions+0x1a8>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000b9a:	482b      	ldr	r0, [pc, #172]	; (8000c48 <GUI_DrawTopOptions+0x1c8>)
 8000b9c:	f002 fef4 	bl	8003988 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"BACK", LEFT_MODE);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	00d2      	lsls	r2, r2, #3
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b298      	uxth	r0, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	0052      	lsls	r2, r2, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b299      	uxth	r1, r3
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <GUI_DrawTopOptions+0x1cc>)
 8000bda:	f002 ff8d 	bl	8003af8 <BSP_LCD_DisplayStringAt>
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	b298      	uxth	r0, r3
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4413      	add	r3, r2
 8000c00:	b299      	uxth	r1, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	b29c      	uxth	r4, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4622      	mov	r2, r4
 8000c24:	f7ff fcf2 	bl	800060c <GUI_LCD_DrawRect>
}
 8000c28:	bf00      	nop
 8000c2a:	371c      	adds	r7, #28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	200001bc 	.word	0x200001bc
 8000c34:	aaaaaaab 	.word	0xaaaaaaab
 8000c38:	ffd3d3d3 	.word	0xffd3d3d3
 8000c3c:	20000268 	.word	0x20000268
 8000c40:	ff404040 	.word	0xff404040
 8000c44:	080097e8 	.word	0x080097e8
 8000c48:	ffff0000 	.word	0xffff0000
 8000c4c:	080097f0 	.word	0x080097f0

08000c50 <GUI_ClearSite>:
/** ***************************************************************************
 * @brief Draw options field to top bar
 *
 * Draw options field in top bar
 *****************************************************************************/
void GUI_ClearSite(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f002 fe96 	bl	8003988 <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 40, 240, 240);
 8000c5c:	23f0      	movs	r3, #240	; 0xf0
 8000c5e:	22f0      	movs	r2, #240	; 0xf0
 8000c60:	2128      	movs	r1, #40	; 0x28
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fca5 	bl	80005b2 <GUI_LCD_FillRect>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <GUI_DrawMeasurement>:
 *
 * Always angle and distance, if measuring accuracy factor is greater than 1
 * also display standard deviation and accuracy factor, if distance is smaller
 * than 10mm display current
 *****************************************************************************/
void GUI_DrawMeasurement(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
	GUI_ClearSite();
 8000c72:	f7ff ffed 	bl	8000c50 <GUI_ClearSite>
	//display angle
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c76:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7a:	f002 fe85 	bl	8003988 <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 45, 240, 70);
 8000c7e:	2346      	movs	r3, #70	; 0x46
 8000c80:	22f0      	movs	r2, #240	; 0xf0
 8000c82:	212d      	movs	r1, #45	; 0x2d
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff fc94 	bl	80005b2 <GUI_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8e:	f002 fe93 	bl	80039b8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c92:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c96:	f002 fe77 	bl	8003988 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(120, 110, 50);
 8000c9a:	2232      	movs	r2, #50	; 0x32
 8000c9c:	216e      	movs	r1, #110	; 0x6e
 8000c9e:	2078      	movs	r0, #120	; 0x78
 8000ca0:	f003 f964 	bl	8003f6c <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f002 fe6e 	bl	8003988 <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 110, 240, 60);
 8000cac:	233c      	movs	r3, #60	; 0x3c
 8000cae:	22f0      	movs	r2, #240	; 0xf0
 8000cb0:	216e      	movs	r1, #110	; 0x6e
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff fc7d 	bl	80005b2 <GUI_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000cb8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000cbc:	f002 fe64 	bl	8003988 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(60, 110, 180, 110);
 8000cc0:	236e      	movs	r3, #110	; 0x6e
 8000cc2:	22b4      	movs	r2, #180	; 0xb4
 8000cc4:	216e      	movs	r1, #110	; 0x6e
 8000cc6:	203c      	movs	r0, #60	; 0x3c
 8000cc8:	f003 f854 	bl	8003d74 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(120, 50, 120, 110);
 8000ccc:	236e      	movs	r3, #110	; 0x6e
 8000cce:	2278      	movs	r2, #120	; 0x78
 8000cd0:	2132      	movs	r1, #50	; 0x32
 8000cd2:	2078      	movs	r0, #120	; 0x78
 8000cd4:	f003 f84e 	bl	8003d74 <BSP_LCD_DrawLine>
	//display angle direction
	if ((-46>GUI_angle)|(GUI_angle<46)) {
 8000cd8:	4b8b      	ldr	r3, [pc, #556]	; (8000f08 <GUI_DrawMeasurement+0x29c>)
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8000f0c <GUI_DrawMeasurement+0x2a0>
 8000ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cea:	bf4c      	ite	mi
 8000cec:	2301      	movmi	r3, #1
 8000cee:	2300      	movpl	r3, #0
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b85      	ldr	r3, [pc, #532]	; (8000f08 <GUI_DrawMeasurement+0x29c>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8000f10 <GUI_DrawMeasurement+0x2a4>
 8000cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d04:	bf4c      	ite	mi
 8000d06:	2301      	movmi	r3, #1
 8000d08:	2300      	movpl	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d04e      	beq.n	8000db2 <GUI_DrawMeasurement+0x146>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000d14:	487f      	ldr	r0, [pc, #508]	; (8000f14 <GUI_DrawMeasurement+0x2a8>)
 8000d16:	f002 fe37 	bl	8003988 <BSP_LCD_SetTextColor>
		uint16_t x,y;
		float dx,dy;
		dx = 0.888;
 8000d1a:	4b7f      	ldr	r3, [pc, #508]	; (8000f18 <GUI_DrawMeasurement+0x2ac>)
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
		dy = 0.333;
 8000d1e:	4b7f      	ldr	r3, [pc, #508]	; (8000f1c <GUI_DrawMeasurement+0x2b0>)
 8000d20:	623b      	str	r3, [r7, #32]
		if (GUI_angle>0) {
 8000d22:	4b79      	ldr	r3, [pc, #484]	; (8000f08 <GUI_DrawMeasurement+0x29c>)
 8000d24:	edd3 7a00 	vldr	s15, [r3]
 8000d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d30:	dd1c      	ble.n	8000d6c <GUI_DrawMeasurement+0x100>
			x=(uint16_t)(120+(int)(dx*GUI_angle));
 8000d32:	4b75      	ldr	r3, [pc, #468]	; (8000f08 <GUI_DrawMeasurement+0x29c>)
 8000d34:	ed93 7a00 	vldr	s14, [r3]
 8000d38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d44:	ee17 3a90 	vmov	r3, s15
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3378      	adds	r3, #120	; 0x78
 8000d4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			y=(uint16_t)(55+(int)(dy*GUI_angle));
 8000d4e:	4b6e      	ldr	r3, [pc, #440]	; (8000f08 <GUI_DrawMeasurement+0x29c>)
 8000d50:	ed93 7a00 	vldr	s14, [r3]
 8000d54:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d60:	ee17 3a90 	vmov	r3, s15
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3337      	adds	r3, #55	; 0x37
 8000d68:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000d6a:	e01c      	b.n	8000da6 <GUI_DrawMeasurement+0x13a>
		} else {
			x=(uint16_t)(120+(int)(dx*GUI_angle));
 8000d6c:	4b66      	ldr	r3, [pc, #408]	; (8000f08 <GUI_DrawMeasurement+0x29c>)
 8000d6e:	ed93 7a00 	vldr	s14, [r3]
 8000d72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d7e:	ee17 3a90 	vmov	r3, s15
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	3378      	adds	r3, #120	; 0x78
 8000d86:	85fb      	strh	r3, [r7, #46]	; 0x2e
			y=(uint16_t)(55-(int)(dy*GUI_angle));
 8000d88:	4b5f      	ldr	r3, [pc, #380]	; (8000f08 <GUI_DrawMeasurement+0x29c>)
 8000d8a:	ed93 7a00 	vldr	s14, [r3]
 8000d8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d9a:	ee17 3a90 	vmov	r3, s15
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 8000da4:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		BSP_LCD_DrawLine(120, 110, x, y);
 8000da6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000da8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000daa:	216e      	movs	r1, #110	; 0x6e
 8000dac:	2078      	movs	r0, #120	; 0x78
 8000dae:	f002 ffe1 	bl	8003d74 <BSP_LCD_DrawLine>
	}

	//Display Text
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000db2:	f04f 30ff 	mov.w	r0, #4294967295
 8000db6:	f002 fdff 	bl	80039b8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000dba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000dbe:	f002 fde3 	bl	8003988 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8000dc2:	4857      	ldr	r0, [pc, #348]	; (8000f20 <GUI_DrawMeasurement+0x2b4>)
 8000dc4:	f002 fe12 	bl	80039ec <BSP_LCD_SetFont>
	char text[25];
	uint32_t x = 30;
 8000dc8:	231e      	movs	r3, #30
 8000dca:	61fb      	str	r3, [r7, #28]
	uint32_t y = 125;
 8000dcc:	237d      	movs	r3, #125	; 0x7d
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
	//Angle
	snprintf(text,24,"Angle:    %4ddeg", (int)(GUI_angle));
 8000dd0:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <GUI_DrawMeasurement+0x29c>)
 8000dd2:	edd3 7a00 	vldr	s15, [r3]
 8000dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dda:	4638      	mov	r0, r7
 8000ddc:	ee17 3a90 	vmov	r3, s15
 8000de0:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <GUI_DrawMeasurement+0x2b8>)
 8000de2:	2118      	movs	r1, #24
 8000de4:	f008 f856 	bl	8008e94 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	b298      	uxth	r0, r3
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	b299      	uxth	r1, r3
 8000df0:	463a      	mov	r2, r7
 8000df2:	2303      	movs	r3, #3
 8000df4:	f002 fe80 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	y = y+30;
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	331e      	adds	r3, #30
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
	//Distance
	snprintf(text,24,"Distance: %4dmm", (int)(GUI_distance));
 8000dfe:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <GUI_DrawMeasurement+0x2bc>)
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e08:	4638      	mov	r0, r7
 8000e0a:	ee17 3a90 	vmov	r3, s15
 8000e0e:	4a47      	ldr	r2, [pc, #284]	; (8000f2c <GUI_DrawMeasurement+0x2c0>)
 8000e10:	2118      	movs	r1, #24
 8000e12:	f008 f83f 	bl	8008e94 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1c:	b299      	uxth	r1, r3
 8000e1e:	463a      	mov	r2, r7
 8000e20:	2303      	movs	r3, #3
 8000e22:	f002 fe69 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	if (GUI_measAccuracy > 1) {
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <GUI_DrawMeasurement+0x2c4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d92b      	bls.n	8000e86 <GUI_DrawMeasurement+0x21a>
		//Standard deviation
		y = y+20;
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	3314      	adds	r3, #20
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
		snprintf(text,24,"Std.Dev.: %4dmm", (int)(GUI_distanceDeviation));
 8000e34:	4b3f      	ldr	r3, [pc, #252]	; (8000f34 <GUI_DrawMeasurement+0x2c8>)
 8000e36:	edd3 7a00 	vldr	s15, [r3]
 8000e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3e:	4638      	mov	r0, r7
 8000e40:	ee17 3a90 	vmov	r3, s15
 8000e44:	4a3c      	ldr	r2, [pc, #240]	; (8000f38 <GUI_DrawMeasurement+0x2cc>)
 8000e46:	2118      	movs	r1, #24
 8000e48:	f008 f824 	bl	8008e94 <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	b298      	uxth	r0, r3
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	b299      	uxth	r1, r3
 8000e54:	463a      	mov	r2, r7
 8000e56:	2303      	movs	r3, #3
 8000e58:	f002 fe4e 	bl	8003af8 <BSP_LCD_DisplayStringAt>
		//Measurement count
		y = y+20;
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	3314      	adds	r3, #20
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
		BSP_LCD_SetFont(&Font16);
 8000e62:	482f      	ldr	r0, [pc, #188]	; (8000f20 <GUI_DrawMeasurement+0x2b4>)
 8000e64:	f002 fdc2 	bl	80039ec <BSP_LCD_SetFont>
		snprintf(text,24,"Accuracy: %4dx", (int)(GUI_measAccuracy));
 8000e68:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <GUI_DrawMeasurement+0x2c4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	4a33      	ldr	r2, [pc, #204]	; (8000f3c <GUI_DrawMeasurement+0x2d0>)
 8000e70:	2118      	movs	r1, #24
 8000e72:	f008 f80f 	bl	8008e94 <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	b298      	uxth	r0, r3
 8000e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	463a      	mov	r2, r7
 8000e80:	2303      	movs	r3, #3
 8000e82:	f002 fe39 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	}
	//Current
	if (GUI_distance <= 10) {
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <GUI_DrawMeasurement+0x2bc>)
 8000e88:	edd3 7a00 	vldr	s15, [r3]
 8000e8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e98:	d819      	bhi.n	8000ece <GUI_DrawMeasurement+0x262>
		y = y+30;
 8000e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9c:	331e      	adds	r3, #30
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
		BSP_LCD_SetFont(&Font16);
 8000ea0:	481f      	ldr	r0, [pc, #124]	; (8000f20 <GUI_DrawMeasurement+0x2b4>)
 8000ea2:	f002 fda3 	bl	80039ec <BSP_LCD_SetFont>
		snprintf(text,24,"Current:  %4dA", (int)(GUI_current));
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <GUI_DrawMeasurement+0x2d4>)
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	ee17 3a90 	vmov	r3, s15
 8000eb6:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <GUI_DrawMeasurement+0x2d8>)
 8000eb8:	2118      	movs	r1, #24
 8000eba:	f007 ffeb 	bl	8008e94 <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	b298      	uxth	r0, r3
 8000ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	463a      	mov	r2, r7
 8000ec8:	2303      	movs	r3, #3
 8000eca:	f002 fe15 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	}
	//Display measuring type
	y = y+30;
 8000ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed0:	331e      	adds	r3, #30
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (GUI_options[1].active==0) {
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <GUI_DrawMeasurement+0x2dc>)
 8000ed6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d108      	bne.n	8000ef0 <GUI_DrawMeasurement+0x284>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:   sng", LEFT_MODE);
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	b298      	uxth	r0, r3
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <GUI_DrawMeasurement+0x2e0>)
 8000eea:	f002 fe05 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	} else {
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:  cont", LEFT_MODE);
	}
}
 8000eee:	e007      	b.n	8000f00 <GUI_DrawMeasurement+0x294>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:  cont", LEFT_MODE);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	b298      	uxth	r0, r3
 8000ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	2303      	movs	r3, #3
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <GUI_DrawMeasurement+0x2e4>)
 8000efc:	f002 fdfc 	bl	8003af8 <BSP_LCD_DisplayStringAt>
}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000264 	.word	0x20000264
 8000f0c:	c2380000 	.word	0xc2380000
 8000f10:	42380000 	.word	0x42380000
 8000f14:	ffff0000 	.word	0xffff0000
 8000f18:	3f6353f8 	.word	0x3f6353f8
 8000f1c:	3eaa7efa 	.word	0x3eaa7efa
 8000f20:	200001c4 	.word	0x200001c4
 8000f24:	080097f8 	.word	0x080097f8
 8000f28:	2000004c 	.word	0x2000004c
 8000f2c:	0800980c 	.word	0x0800980c
 8000f30:	20000048 	.word	0x20000048
 8000f34:	20000050 	.word	0x20000050
 8000f38:	0800981c 	.word	0x0800981c
 8000f3c:	0800982c 	.word	0x0800982c
 8000f40:	20000054 	.word	0x20000054
 8000f44:	0800983c 	.word	0x0800983c
 8000f48:	20000068 	.word	0x20000068
 8000f4c:	0800984c 	.word	0x0800984c
 8000f50:	08009860 	.word	0x08009860

08000f54 <GUI_DrawOptions>:
 * Available settings:
 *  - Meassuring Accuracy (1x, 5x, 10x)
 *  - Continous Meassuring (single, continous)
 *  - Display values (analysed, raw)
 *****************************************************************************/
void GUI_DrawOptions(void){
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
	uint32_t x, y, m, w, h;
	x = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
	m = 4;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	60fb      	str	r3, [r7, #12]
	h = 40;
 8000f62:	2328      	movs	r3, #40	; 0x28
 8000f64:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; ++i) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e15c      	b.n	8001226 <GUI_DrawOptions+0x2d2>
		y=38+i*80;
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	3326      	adds	r3, #38	; 0x26
 8000f78:	607b      	str	r3, [r7, #4]
		w=240;
 8000f7a:	23f0      	movs	r3, #240	; 0xf0
 8000f7c:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8000f7e:	4889      	ldr	r0, [pc, #548]	; (80011a4 <GUI_DrawOptions+0x250>)
 8000f80:	f002 fd02 	bl	8003988 <BSP_LCD_SetTextColor>
		GUI_LCD_FillRect(x+m, y+m, w-2*m, 2*h-m);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b298      	uxth	r0, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4413      	add	r3, r2
 8000f9a:	b299      	uxth	r1, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	b29c      	uxth	r4, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4622      	mov	r2, r4
 8000fbe:	f7ff faf8 	bl	80005b2 <GUI_LCD_FillRect>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fc2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fc6:	f002 fcdf 	bl	8003988 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 8000fca:	4876      	ldr	r0, [pc, #472]	; (80011a4 <GUI_DrawOptions+0x250>)
 8000fcc:	f002 fcf4 	bl	80039b8 <BSP_LCD_SetBackColor>
		GUI_LCD_DrawRect(x+m, y+m, w-2*m, h);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	b298      	uxth	r0, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b299      	uxth	r1, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	f7ff fb06 	bl	800060c <GUI_LCD_DrawRect>
		BSP_LCD_SetFont(&Font20);
 8001000:	4869      	ldr	r0, [pc, #420]	; (80011a8 <GUI_DrawOptions+0x254>)
 8001002:	f002 fcf3 	bl	80039ec <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m, (uint8_t *)GUI_options[i].title, LEFT_MODE);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	b29b      	uxth	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	0052      	lsls	r2, r2, #1
 800100e:	4413      	add	r3, r2
 8001010:	b29a      	uxth	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b298      	uxth	r0, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	b29b      	uxth	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	0052      	lsls	r2, r2, #1
 8001022:	4413      	add	r3, r2
 8001024:	b29a      	uxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	b29b      	uxth	r3, r3
 800102a:	4413      	add	r3, r2
 800102c:	b299      	uxth	r1, r3
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	2246      	movs	r2, #70	; 0x46
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	4a5d      	ldr	r2, [pc, #372]	; (80011ac <GUI_DrawOptions+0x258>)
 8001038:	441a      	add	r2, r3
 800103a:	2303      	movs	r3, #3
 800103c:	f002 fd5c 	bl	8003af8 <BSP_LCD_DisplayStringAt>

		for (int j = 0; j < GUI_options[i].optnCount; ++j) {
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	e0df      	b.n	8001206 <GUI_DrawOptions+0x2b2>
			w = (240-2*m)/GUI_options[i].optnCount;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4957      	ldr	r1, [pc, #348]	; (80011ac <GUI_DrawOptions+0x258>)
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	2046      	movs	r0, #70	; 0x46
 8001054:	fb00 f202 	mul.w	r2, r0, r2
 8001058:	440a      	add	r2, r1
 800105a:	3242      	adds	r2, #66	; 0x42
 800105c:	8812      	ldrh	r2, [r2, #0]
 800105e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001062:	603b      	str	r3, [r7, #0]
			if (GUI_options[i].active == j) {
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <GUI_DrawOptions+0x258>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	2146      	movs	r1, #70	; 0x46
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	4413      	add	r3, r2
 8001070:	3340      	adds	r3, #64	; 0x40
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4293      	cmp	r3, r2
 800107a:	d12c      	bne.n	80010d6 <GUI_DrawOptions+0x182>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
 800107c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001080:	f002 fc82 	bl	8003988 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8001084:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001088:	f002 fc96 	bl	80039b8 <BSP_LCD_SetBackColor>
				GUI_LCD_FillRect(x+m+j*w, y+m+h, w, h-m);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	b29a      	uxth	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b29a      	uxth	r2, r3
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	b299      	uxth	r1, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	fb11 f303 	smulbb	r3, r1, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	b298      	uxth	r0, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	b299      	uxth	r1, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b29c      	uxth	r4, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4622      	mov	r2, r4
 80010d0:	f7ff fa6f 	bl	80005b2 <GUI_LCD_FillRect>
 80010d4:	e002      	b.n	80010dc <GUI_DrawOptions+0x188>
			} else {
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 80010d6:	4833      	ldr	r0, [pc, #204]	; (80011a4 <GUI_DrawOptions+0x250>)
 80010d8:	f002 fc6e 	bl	80039b8 <BSP_LCD_SetBackColor>
			}
			BSP_LCD_SetFont(&Font16);
 80010dc:	4834      	ldr	r0, [pc, #208]	; (80011b0 <GUI_DrawOptions+0x25c>)
 80010de:	f002 fc85 	bl	80039ec <BSP_LCD_SetFont>
			if ((j>0)&&(GUI_options[i].disabled)) {
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	dd0d      	ble.n	8001104 <GUI_DrawOptions+0x1b0>
 80010e8:	4a30      	ldr	r2, [pc, #192]	; (80011ac <GUI_DrawOptions+0x258>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2146      	movs	r1, #70	; 0x46
 80010ee:	fb01 f303 	mul.w	r3, r1, r3
 80010f2:	4413      	add	r3, r2
 80010f4:	3344      	adds	r3, #68	; 0x44
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <GUI_DrawOptions+0x1b0>
				BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 80010fc:	482d      	ldr	r0, [pc, #180]	; (80011b4 <GUI_DrawOptions+0x260>)
 80010fe:	f002 fc43 	bl	8003988 <BSP_LCD_SetTextColor>
 8001102:	e003      	b.n	800110c <GUI_DrawOptions+0x1b8>
			} else {
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001104:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001108:	f002 fc3e 	bl	8003988 <BSP_LCD_SetTextColor>
			}
			GUI_LCD_DrawRect(x+m+j*w, y+m+h, w, h-m);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	b29a      	uxth	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29a      	uxth	r2, r3
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	b299      	uxth	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b29b      	uxth	r3, r3
 8001120:	fb11 f303 	smulbb	r3, r1, r3
 8001124:	b29b      	uxth	r3, r3
 8001126:	4413      	add	r3, r2
 8001128:	b298      	uxth	r0, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	b29a      	uxth	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4413      	add	r3, r2
 8001134:	b29a      	uxth	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	b29b      	uxth	r3, r3
 800113a:	4413      	add	r3, r2
 800113c:	b299      	uxth	r1, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b29c      	uxth	r4, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	b29a      	uxth	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	b29b      	uxth	r3, r3
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	4622      	mov	r2, r4
 8001150:	f7ff fa5c 	bl	800060c <GUI_LCD_DrawRect>
			uint8_t * text;
			switch (j) {
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d01b      	beq.n	8001192 <GUI_DrawOptions+0x23e>
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b02      	cmp	r3, #2
 800115e:	dc2b      	bgt.n	80011b8 <GUI_DrawOptions+0x264>
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <GUI_DrawOptions+0x21a>
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d009      	beq.n	8001180 <GUI_DrawOptions+0x22c>
					break;
				case 2:
					text = (uint8_t *)GUI_options[i].optn2;
					break;
				default:
					break;
 800116c:	e024      	b.n	80011b8 <GUI_DrawOptions+0x264>
					text = (uint8_t *)GUI_options[i].optn0;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	2246      	movs	r2, #70	; 0x46
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	3310      	adds	r3, #16
 8001178:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <GUI_DrawOptions+0x258>)
 800117a:	4413      	add	r3, r2
 800117c:	617b      	str	r3, [r7, #20]
					break;
 800117e:	e01c      	b.n	80011ba <GUI_DrawOptions+0x266>
					text = (uint8_t *)GUI_options[i].optn1;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2246      	movs	r2, #70	; 0x46
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	3320      	adds	r3, #32
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <GUI_DrawOptions+0x258>)
 800118c:	4413      	add	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
					break;
 8001190:	e013      	b.n	80011ba <GUI_DrawOptions+0x266>
					text = (uint8_t *)GUI_options[i].optn2;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	2246      	movs	r2, #70	; 0x46
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	3330      	adds	r3, #48	; 0x30
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <GUI_DrawOptions+0x258>)
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
					break;
 80011a2:	e00a      	b.n	80011ba <GUI_DrawOptions+0x266>
 80011a4:	ffd3d3d3 	.word	0xffd3d3d3
 80011a8:	200001bc 	.word	0x200001bc
 80011ac:	20000068 	.word	0x20000068
 80011b0:	200001c4 	.word	0x200001c4
 80011b4:	ff404040 	.word	0xff404040
					break;
 80011b8:	bf00      	nop
			}
			BSP_LCD_DisplayStringAt(x+3*m+j*w, y+4*m+h, text, LEFT_MODE);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	b299      	uxth	r1, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	fb11 f303 	smulbb	r3, r1, r3
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b298      	uxth	r0, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b299      	uxth	r1, r3
 80011f8:	2303      	movs	r3, #3
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 fc7c 	bl	8003af8 <BSP_LCD_DisplayStringAt>
		for (int j = 0; j < GUI_options[i].optnCount; ++j) {
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	3301      	adds	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <GUI_DrawOptions+0x2e4>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2146      	movs	r1, #70	; 0x46
 800120c:	fb01 f303 	mul.w	r3, r1, r3
 8001210:	4413      	add	r3, r2
 8001212:	3342      	adds	r3, #66	; 0x42
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	4293      	cmp	r3, r2
 800121c:	f6ff af13 	blt.w	8001046 <GUI_DrawOptions+0xf2>
	for (int i = 0; i < 3; ++i) {
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3301      	adds	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b02      	cmp	r3, #2
 800122a:	f77f ae9f 	ble.w	8000f6c <GUI_DrawOptions+0x18>
		}
	}
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3724      	adds	r7, #36	; 0x24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	20000068 	.word	0x20000068

0800123c <GUI_DrawRaw>:
/** ***************************************************************************
 * @brief Display raw measurements
 *
 * Display raw amplitude values of all sensors
 *****************************************************************************/
void GUI_DrawRaw(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
	GUI_ClearSite();
 8001242:	f7ff fd05 	bl	8000c50 <GUI_ClearSite>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001246:	f04f 30ff 	mov.w	r0, #4294967295
 800124a:	f002 fbb5 	bl	80039b8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800124e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001252:	f002 fb99 	bl	8003988 <BSP_LCD_SetTextColor>

	char text[25];
	uint32_t x = 30;
 8001256:	231e      	movs	r3, #30
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t y = 60;
 800125a:	233c      	movs	r3, #60	; 0x3c
 800125c:	623b      	str	r3, [r7, #32]
	//Hall Sensors
	BSP_LCD_SetFont(&Font20);
 800125e:	4835      	ldr	r0, [pc, #212]	; (8001334 <GUI_DrawRaw+0xf8>)
 8001260:	f002 fbc4 	bl	80039ec <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Hall Sensors:", LEFT_MODE);
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	b298      	uxth	r0, r3
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	b299      	uxth	r1, r3
 800126c:	2303      	movs	r3, #3
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <GUI_DrawRaw+0xfc>)
 8001270:	f002 fc42 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	y = y+20;
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	3314      	adds	r3, #20
 8001278:	623b      	str	r3, [r7, #32]
	BSP_LCD_SetFont(&Font16);
 800127a:	4830      	ldr	r0, [pc, #192]	; (800133c <GUI_DrawRaw+0x100>)
 800127c:	f002 fbb6 	bl	80039ec <BSP_LCD_SetFont>
	snprintf(text,24,"Right:    %5d", (int)(GUI_rawHallRight));
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <GUI_DrawRaw+0x104>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	1d38      	adds	r0, r7, #4
 8001286:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <GUI_DrawRaw+0x108>)
 8001288:	2118      	movs	r1, #24
 800128a:	f007 fe03 	bl	8008e94 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	b298      	uxth	r0, r3
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	b299      	uxth	r1, r3
 8001296:	1d3a      	adds	r2, r7, #4
 8001298:	2303      	movs	r3, #3
 800129a:	f002 fc2d 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	y = y+20;
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	3314      	adds	r3, #20
 80012a2:	623b      	str	r3, [r7, #32]
	snprintf(text,24,"Left:     %5d", (int)(GUI_rawHallLeft));
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <GUI_DrawRaw+0x10c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	1d38      	adds	r0, r7, #4
 80012aa:	4a28      	ldr	r2, [pc, #160]	; (800134c <GUI_DrawRaw+0x110>)
 80012ac:	2118      	movs	r1, #24
 80012ae:	f007 fdf1 	bl	8008e94 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	b298      	uxth	r0, r3
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	b299      	uxth	r1, r3
 80012ba:	1d3a      	adds	r2, r7, #4
 80012bc:	2303      	movs	r3, #3
 80012be:	f002 fc1b 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	y = y+35;
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3323      	adds	r3, #35	; 0x23
 80012c6:	623b      	str	r3, [r7, #32]
	//WPC Sensors
	BSP_LCD_SetFont(&Font20);
 80012c8:	481a      	ldr	r0, [pc, #104]	; (8001334 <GUI_DrawRaw+0xf8>)
 80012ca:	f002 fb8f 	bl	80039ec <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"WPC Sensors:", LEFT_MODE);
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	b298      	uxth	r0, r3
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	b299      	uxth	r1, r3
 80012d6:	2303      	movs	r3, #3
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <GUI_DrawRaw+0x114>)
 80012da:	f002 fc0d 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	y = y+20;
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	3314      	adds	r3, #20
 80012e2:	623b      	str	r3, [r7, #32]
	BSP_LCD_SetFont(&Font16);
 80012e4:	4815      	ldr	r0, [pc, #84]	; (800133c <GUI_DrawRaw+0x100>)
 80012e6:	f002 fb81 	bl	80039ec <BSP_LCD_SetFont>
	snprintf(text,24,"Right:    %5d", (int)(GUI_rawWpcRight));
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <GUI_DrawRaw+0x118>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	1d38      	adds	r0, r7, #4
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <GUI_DrawRaw+0x108>)
 80012f2:	2118      	movs	r1, #24
 80012f4:	f007 fdce 	bl	8008e94 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	b298      	uxth	r0, r3
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	b299      	uxth	r1, r3
 8001300:	1d3a      	adds	r2, r7, #4
 8001302:	2303      	movs	r3, #3
 8001304:	f002 fbf8 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	y = y+20;
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	3314      	adds	r3, #20
 800130c:	623b      	str	r3, [r7, #32]
	snprintf(text,24,"Left:     %5d", (int)(GUI_rawWpcLeft));
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <GUI_DrawRaw+0x11c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1d38      	adds	r0, r7, #4
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <GUI_DrawRaw+0x110>)
 8001316:	2118      	movs	r1, #24
 8001318:	f007 fdbc 	bl	8008e94 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	b298      	uxth	r0, r3
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	b299      	uxth	r1, r3
 8001324:	1d3a      	adds	r2, r7, #4
 8001326:	2303      	movs	r3, #3
 8001328:	f002 fbe6 	bl	8003af8 <BSP_LCD_DisplayStringAt>
}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001bc 	.word	0x200001bc
 8001338:	08009874 	.word	0x08009874
 800133c:	200001c4 	.word	0x200001c4
 8001340:	2000005c 	.word	0x2000005c
 8001344:	08009884 	.word	0x08009884
 8001348:	20000058 	.word	0x20000058
 800134c:	08009894 	.word	0x08009894
 8001350:	080098a4 	.word	0x080098a4
 8001354:	20000064 	.word	0x20000064
 8001358:	20000060 	.word	0x20000060

0800135c <GUI_SiteHandler>:
 * @brief Manage LCD
 *
 * Read out GUI_inputs and display sites accordingly
 * This Function needs to be called every cycle
 *****************************************************************************/
void GUI_SiteHandler(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	GUI_TSHandler();
 8001360:	f000 f8d8 	bl	8001514 <GUI_TSHandler>
	//Init LCD with hint when no site is selected
	switch (GUI_currentSite) {
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <GUI_SiteHandler+0x1a0>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b05      	cmp	r3, #5
 800136a:	f200 80b2 	bhi.w	80014d2 <GUI_SiteHandler+0x176>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <GUI_SiteHandler+0x18>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	0800138d 	.word	0x0800138d
 8001378:	08001425 	.word	0x08001425
 800137c:	0800147d 	.word	0x0800147d
 8001380:	080014d3 	.word	0x080014d3
 8001384:	08001399 	.word	0x08001399
 8001388:	080013c7 	.word	0x080013c7
		case SITE_NONE:
			GUI_DrawHint();
 800138c:	f7ff f96c 	bl	8000668 <GUI_DrawHint>
			GUI_currentSite = SITE_HINT;
 8001390:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <GUI_SiteHandler+0x1a0>)
 8001392:	2204      	movs	r2, #4
 8001394:	701a      	strb	r2, [r3, #0]
			break;
 8001396:	e0a3      	b.n	80014e0 <GUI_SiteHandler+0x184>
		case SITE_HINT:
			if(GUI_inputBtn | GUI_inputTS){
 8001398:	4b59      	ldr	r3, [pc, #356]	; (8001500 <GUI_SiteHandler+0x1a4>)
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <GUI_SiteHandler+0x1a8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8096 	beq.w	80014d6 <GUI_SiteHandler+0x17a>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 80013aa:	f04f 30ff 	mov.w	r0, #4294967295
 80013ae:	f002 fb37 	bl	8003a20 <BSP_LCD_Clear>
				GUI_DrawTopMode();
 80013b2:	f7ff fa65 	bl	8000880 <GUI_DrawTopMode>
				GUI_DrawTopOptions();
 80013b6:	f7ff fb63 	bl	8000a80 <GUI_DrawTopOptions>
				GUI_DrawModeSel();
 80013ba:	f7ff f9ab 	bl	8000714 <GUI_DrawModeSel>
				GUI_currentSite = SITE_MAIN;
 80013be:	4b4f      	ldr	r3, [pc, #316]	; (80014fc <GUI_SiteHandler+0x1a0>)
 80013c0:	2205      	movs	r2, #5
 80013c2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80013c4:	e087      	b.n	80014d6 <GUI_SiteHandler+0x17a>
		case SITE_MAIN:
			if(GUI_inputTS){
 80013c6:	4b4f      	ldr	r3, [pc, #316]	; (8001504 <GUI_SiteHandler+0x1a8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d014      	beq.n	80013f8 <GUI_SiteHandler+0x9c>
				//Display updated mode or go to options
				if (GUI_TSinputType == TOUCH_MODE) {
 80013ce:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <GUI_SiteHandler+0x1ac>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d102      	bne.n	80013dc <GUI_SiteHandler+0x80>
					GUI_DrawTopMode();
 80013d6:	f7ff fa53 	bl	8000880 <GUI_DrawTopMode>
					GUI_DrawRaw();
					GUI_DrawTopMode();
				}
				GUI_currentSite = SITE_MEAS;
			}
			break;
 80013da:	e07e      	b.n	80014da <GUI_SiteHandler+0x17e>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <GUI_SiteHandler+0x1ac>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d17a      	bne.n	80014da <GUI_SiteHandler+0x17e>
					GUI_currentSite = SITE_OPTN;
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <GUI_SiteHandler+0x1a0>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 80013ea:	f7ff fc31 	bl	8000c50 <GUI_ClearSite>
					GUI_DrawOptions();
 80013ee:	f7ff fdb1 	bl	8000f54 <GUI_DrawOptions>
					GUI_DrawTopOptions();
 80013f2:	f7ff fb45 	bl	8000a80 <GUI_DrawTopOptions>
			break;
 80013f6:	e070      	b.n	80014da <GUI_SiteHandler+0x17e>
			} else if (GUI_inputMeasReady) {
 80013f8:	4b44      	ldr	r3, [pc, #272]	; (800150c <GUI_SiteHandler+0x1b0>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d06c      	beq.n	80014da <GUI_SiteHandler+0x17e>
				if(GUI_options[0].active==0){
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <GUI_SiteHandler+0x1b4>)
 8001402:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d104      	bne.n	8001414 <GUI_SiteHandler+0xb8>
					GUI_DrawMeasurement();
 800140a:	f7ff fc2f 	bl	8000c6c <GUI_DrawMeasurement>
					GUI_DrawTopMode();
 800140e:	f7ff fa37 	bl	8000880 <GUI_DrawTopMode>
 8001412:	e003      	b.n	800141c <GUI_SiteHandler+0xc0>
					GUI_DrawRaw();
 8001414:	f7ff ff12 	bl	800123c <GUI_DrawRaw>
					GUI_DrawTopMode();
 8001418:	f7ff fa32 	bl	8000880 <GUI_DrawTopMode>
				GUI_currentSite = SITE_MEAS;
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <GUI_SiteHandler+0x1a0>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
			break;
 8001422:	e05a      	b.n	80014da <GUI_SiteHandler+0x17e>
		case SITE_MEAS:
			if(GUI_inputTS){
 8001424:	4b37      	ldr	r3, [pc, #220]	; (8001504 <GUI_SiteHandler+0x1a8>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d014      	beq.n	8001456 <GUI_SiteHandler+0xfa>
				//Display updated mode or go to options
				if (GUI_TSinputType == TOUCH_MODE) {
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <GUI_SiteHandler+0x1ac>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d102      	bne.n	800143a <GUI_SiteHandler+0xde>
					GUI_DrawTopMode();
 8001434:	f7ff fa24 	bl	8000880 <GUI_DrawTopMode>
					//Raw
					GUI_DrawRaw();
					GUI_DrawTopMode();
				}
			}
			break;
 8001438:	e051      	b.n	80014de <GUI_SiteHandler+0x182>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <GUI_SiteHandler+0x1ac>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d14d      	bne.n	80014de <GUI_SiteHandler+0x182>
					GUI_currentSite = SITE_OPTN;
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <GUI_SiteHandler+0x1a0>)
 8001444:	2202      	movs	r2, #2
 8001446:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 8001448:	f7ff fc02 	bl	8000c50 <GUI_ClearSite>
					GUI_DrawOptions();
 800144c:	f7ff fd82 	bl	8000f54 <GUI_DrawOptions>
					GUI_DrawTopOptions();
 8001450:	f7ff fb16 	bl	8000a80 <GUI_DrawTopOptions>
			break;
 8001454:	e043      	b.n	80014de <GUI_SiteHandler+0x182>
			if (GUI_inputMeasReady) {
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <GUI_SiteHandler+0x1b0>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03f      	beq.n	80014de <GUI_SiteHandler+0x182>
				if(GUI_options[0].active==0){
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <GUI_SiteHandler+0x1b4>)
 8001460:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <GUI_SiteHandler+0x116>
					GUI_DrawMeasurement();
 8001468:	f7ff fc00 	bl	8000c6c <GUI_DrawMeasurement>
					GUI_DrawTopMode();
 800146c:	f7ff fa08 	bl	8000880 <GUI_DrawTopMode>
			break;
 8001470:	e035      	b.n	80014de <GUI_SiteHandler+0x182>
					GUI_DrawRaw();
 8001472:	f7ff fee3 	bl	800123c <GUI_DrawRaw>
					GUI_DrawTopMode();
 8001476:	f7ff fa03 	bl	8000880 <GUI_DrawTopMode>
			break;
 800147a:	e030      	b.n	80014de <GUI_SiteHandler+0x182>
		case SITE_OPTN:
			if(GUI_inputTS){
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <GUI_SiteHandler+0x1a8>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d026      	beq.n	80014d2 <GUI_SiteHandler+0x176>
			//Display updated mode, updated settings or go to main screen
				if (GUI_TSinputType == TOUCH_MODE) {
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <GUI_SiteHandler+0x1ac>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d102      	bne.n	8001492 <GUI_SiteHandler+0x136>
					GUI_DrawTopMode();
 800148c:	f7ff f9f8 	bl	8000880 <GUI_DrawTopMode>
				} else if (GUI_TSinputType == TOUCH_OPTN_CHANGE){
					GUI_DrawOptions();
				}
			}
		default:
			break;
 8001490:	e01f      	b.n	80014d2 <GUI_SiteHandler+0x176>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <GUI_SiteHandler+0x1ac>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d115      	bne.n	80014c6 <GUI_SiteHandler+0x16a>
					GUI_currentSite = SITE_MEAS;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <GUI_SiteHandler+0x1a0>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 80014a0:	f7ff fbd6 	bl	8000c50 <GUI_ClearSite>
					if(GUI_options[0].active==0){
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <GUI_SiteHandler+0x1b4>)
 80014a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d104      	bne.n	80014b8 <GUI_SiteHandler+0x15c>
						GUI_DrawMeasurement();
 80014ae:	f7ff fbdd 	bl	8000c6c <GUI_DrawMeasurement>
						GUI_DrawTopMode();
 80014b2:	f7ff f9e5 	bl	8000880 <GUI_DrawTopMode>
 80014b6:	e003      	b.n	80014c0 <GUI_SiteHandler+0x164>
						GUI_DrawRaw();
 80014b8:	f7ff fec0 	bl	800123c <GUI_DrawRaw>
						GUI_DrawTopMode();
 80014bc:	f7ff f9e0 	bl	8000880 <GUI_DrawTopMode>
					GUI_DrawTopOptions();
 80014c0:	f7ff fade 	bl	8000a80 <GUI_DrawTopOptions>
			break;
 80014c4:	e005      	b.n	80014d2 <GUI_SiteHandler+0x176>
				} else if (GUI_TSinputType == TOUCH_OPTN_CHANGE){
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <GUI_SiteHandler+0x1ac>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d101      	bne.n	80014d2 <GUI_SiteHandler+0x176>
					GUI_DrawOptions();
 80014ce:	f7ff fd41 	bl	8000f54 <GUI_DrawOptions>
			break;
 80014d2:	bf00      	nop
 80014d4:	e004      	b.n	80014e0 <GUI_SiteHandler+0x184>
			break;
 80014d6:	bf00      	nop
 80014d8:	e002      	b.n	80014e0 <GUI_SiteHandler+0x184>
			break;
 80014da:	bf00      	nop
 80014dc:	e000      	b.n	80014e0 <GUI_SiteHandler+0x184>
			break;
 80014de:	bf00      	nop
	}

	//Reset Inputs
	GUI_inputBtn = false;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <GUI_SiteHandler+0x1a4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
	GUI_inputTS = false;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <GUI_SiteHandler+0x1a8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
	GUI_inputMeasReady = false;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <GUI_SiteHandler+0x1b0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
	GUI_TSinputType = TOUCH_NONE;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <GUI_SiteHandler+0x1ac>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000268 	.word	0x20000268
 8001500:	20000269 	.word	0x20000269
 8001504:	2000026a 	.word	0x2000026a
 8001508:	2000026c 	.word	0x2000026c
 800150c:	2000026b 	.word	0x2000026b
 8001510:	20000068 	.word	0x20000068

08001514 <GUI_TSHandler>:
/** ***************************************************************************
 * @brief Handle touch screen inputs
 *
 * Determine touch input from Touch position and current site
 *****************************************************************************/
void GUI_TSHandler(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	GUI_TS_GetState(&GUI_currentTSstate);
 800151a:	4891      	ldr	r0, [pc, #580]	; (8001760 <GUI_TSHandler+0x24c>)
 800151c:	f7ff f834 	bl	8000588 <GUI_TS_GetState>
	//detect rising edge of touch input
	if ((GUI_currentTSstate.TouchDetected==1) & (GUI_previousTSstate.TouchDetected==0)) {
 8001520:	4b8f      	ldr	r3, [pc, #572]	; (8001760 <GUI_TSHandler+0x24c>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b8d      	ldr	r3, [pc, #564]	; (8001764 <GUI_TSHandler+0x250>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4013      	ands	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 81e2 	beq.w	800190a <GUI_TSHandler+0x3f6>
		//set touch input to true
		GUI_inputTS = true;
 8001546:	4b88      	ldr	r3, [pc, #544]	; (8001768 <GUI_TSHandler+0x254>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
		uint16_t X,Y;
		X = GUI_currentTSstate.X;
 800154c:	4b84      	ldr	r3, [pc, #528]	; (8001760 <GUI_TSHandler+0x24c>)
 800154e:	885b      	ldrh	r3, [r3, #2]
 8001550:	80fb      	strh	r3, [r7, #6]
		Y = GUI_currentTSstate.Y;
 8001552:	4b83      	ldr	r3, [pc, #524]	; (8001760 <GUI_TSHandler+0x24c>)
 8001554:	889b      	ldrh	r3, [r3, #4]
 8001556:	80bb      	strh	r3, [r7, #4]
		if (GUI_currentSite == SITE_HINT) {
 8001558:	4b84      	ldr	r3, [pc, #528]	; (800176c <GUI_TSHandler+0x258>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d102      	bne.n	8001566 <GUI_TSHandler+0x52>
			GUI_TSinputType = TOUCH_GENERAL;
 8001560:	4b83      	ldr	r3, [pc, #524]	; (8001770 <GUI_TSHandler+0x25c>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
		}
		//detect mode change
		if ((GUI_currentSite == SITE_MAIN)|
 8001566:	4b81      	ldr	r3, [pc, #516]	; (800176c <GUI_TSHandler+0x258>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b05      	cmp	r3, #5
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b7d      	ldr	r3, [pc, #500]	; (800176c <GUI_TSHandler+0x258>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
			(GUI_currentSite == SITE_MEAS)|
			(GUI_currentSite == SITE_OPTN)) {
 8001588:	4b78      	ldr	r3, [pc, #480]	; (800176c <GUI_TSHandler+0x258>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b02      	cmp	r3, #2
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
			(GUI_currentSite == SITE_MEAS)|
 8001596:	4313      	orrs	r3, r2
		if ((GUI_currentSite == SITE_MAIN)|
 8001598:	2b00      	cmp	r3, #0
 800159a:	d07e      	beq.n	800169a <GUI_TSHandler+0x186>
			if ((Y>280) & (X<80) & (GUI_mode != MODE_L)) {
 800159c:	88bb      	ldrh	r3, [r7, #4]
 800159e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80015a2:	bf8c      	ite	hi
 80015a4:	2301      	movhi	r3, #1
 80015a6:	2300      	movls	r3, #0
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	2b4f      	cmp	r3, #79	; 0x4f
 80015ae:	bf94      	ite	ls
 80015b0:	2301      	movls	r3, #1
 80015b2:	2300      	movhi	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4013      	ands	r3, r2
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b6d      	ldr	r3, [pc, #436]	; (8001774 <GUI_TSHandler+0x260>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <GUI_TSHandler+0xca>
				GUI_TSinputType = TOUCH_MODE;
 80015d0:	4b67      	ldr	r3, [pc, #412]	; (8001770 <GUI_TSHandler+0x25c>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_L;
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <GUI_TSHandler+0x260>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e047      	b.n	800166e <GUI_TSHandler+0x15a>
			} else if ((Y>280) & (80<X) & (X<160) & (GUI_mode != MODE_LN)) {
 80015de:	88bb      	ldrh	r3, [r7, #4]
 80015e0:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80015e4:	bf8c      	ite	hi
 80015e6:	2301      	movhi	r3, #1
 80015e8:	2300      	movls	r3, #0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	2b50      	cmp	r3, #80	; 0x50
 80015f0:	bf8c      	ite	hi
 80015f2:	2301      	movhi	r3, #1
 80015f4:	2300      	movls	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2b9f      	cmp	r3, #159	; 0x9f
 8001602:	bf94      	ite	ls
 8001604:	2301      	movls	r3, #1
 8001606:	2300      	movhi	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4013      	ands	r3, r2
 800160c:	4a59      	ldr	r2, [pc, #356]	; (8001774 <GUI_TSHandler+0x260>)
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	2a01      	cmp	r2, #1
 8001612:	bf14      	ite	ne
 8001614:	2201      	movne	r2, #1
 8001616:	2200      	moveq	r2, #0
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <GUI_TSHandler+0x11a>
				GUI_TSinputType = TOUCH_MODE;
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <GUI_TSHandler+0x25c>)
 8001622:	2202      	movs	r2, #2
 8001624:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_LN;
 8001626:	4b53      	ldr	r3, [pc, #332]	; (8001774 <GUI_TSHandler+0x260>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e01f      	b.n	800166e <GUI_TSHandler+0x15a>
			} else if ((Y>280) & (160<X) & (GUI_mode != MODE_LNPE)) {
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001634:	bf8c      	ite	hi
 8001636:	2301      	movhi	r3, #1
 8001638:	2300      	movls	r3, #0
 800163a:	b2da      	uxtb	r2, r3
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	2ba0      	cmp	r3, #160	; 0xa0
 8001640:	bf8c      	ite	hi
 8001642:	2301      	movhi	r3, #1
 8001644:	2300      	movls	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4013      	ands	r3, r2
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4b49      	ldr	r3, [pc, #292]	; (8001774 <GUI_TSHandler+0x260>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b02      	cmp	r3, #2
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <GUI_TSHandler+0x15a>
				GUI_TSinputType = TOUCH_MODE;
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <GUI_TSHandler+0x25c>)
 8001664:	2202      	movs	r2, #2
 8001666:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_LNPE;
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <GUI_TSHandler+0x260>)
 800166a:	2202      	movs	r2, #2
 800166c:	701a      	strb	r2, [r3, #0]
			}
			//detect option area
			if ((Y<40) & (X>160)) {
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	2b27      	cmp	r3, #39	; 0x27
 8001672:	bf94      	ite	ls
 8001674:	2301      	movls	r3, #1
 8001676:	2300      	movhi	r3, #0
 8001678:	b2da      	uxtb	r2, r3
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	2ba0      	cmp	r3, #160	; 0xa0
 800167e:	bf8c      	ite	hi
 8001680:	2301      	movhi	r3, #1
 8001682:	2300      	movls	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4013      	ands	r3, r2
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <GUI_TSHandler+0x186>
				GUI_TSinputType = TOUCH_OPTN;
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <GUI_TSHandler+0x25c>)
 8001690:	2203      	movs	r2, #3
 8001692:	701a      	strb	r2, [r3, #0]
				HAL_Delay(200);
 8001694:	20c8      	movs	r0, #200	; 0xc8
 8001696:	f003 faf5 	bl	8004c84 <HAL_Delay>
			}
		}
		//detect option changes
		if (GUI_currentSite == SITE_OPTN) {
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <GUI_TSHandler+0x258>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	f040 8133 	bne.w	800190a <GUI_TSHandler+0x3f6>
			if ((80<Y)&(Y<120)){
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	2b50      	cmp	r3, #80	; 0x50
 80016a8:	bf8c      	ite	hi
 80016aa:	2301      	movhi	r3, #1
 80016ac:	2300      	movls	r3, #0
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	2b77      	cmp	r3, #119	; 0x77
 80016b4:	bf94      	ite	ls
 80016b6:	2301      	movls	r3, #1
 80016b8:	2300      	movhi	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4013      	ands	r3, r2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d05b      	beq.n	800177c <GUI_TSHandler+0x268>
				if ((X<120)&(GUI_options[0].active!=0)) {
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	2b77      	cmp	r3, #119	; 0x77
 80016c8:	bf94      	ite	ls
 80016ca:	2301      	movls	r3, #1
 80016cc:	2300      	movhi	r3, #0
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <GUI_TSHandler+0x264>)
 80016d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00f      	beq.n	8001708 <GUI_TSHandler+0x1f4>
					GUI_options[0].active=0;
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <GUI_TSHandler+0x264>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
					GUI_options[1].disabled = false;
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <GUI_TSHandler+0x264>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					GUI_options[2].disabled = false;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <GUI_TSHandler+0x264>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <GUI_TSHandler+0x25c>)
 8001702:	2204      	movs	r2, #4
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	e100      	b.n	800190a <GUI_TSHandler+0x3f6>
				} else if ((X>120)&(GUI_options[0].active!=1)) {
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	2b78      	cmp	r3, #120	; 0x78
 800170c:	bf8c      	ite	hi
 800170e:	2301      	movhi	r3, #1
 8001710:	2300      	movls	r3, #0
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <GUI_TSHandler+0x264>)
 8001716:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800171a:	2b01      	cmp	r3, #1
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4013      	ands	r3, r2
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80ee 	beq.w	800190a <GUI_TSHandler+0x3f6>
					GUI_options[0].active=1;
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <GUI_TSHandler+0x264>)
 8001730:	2201      	movs	r2, #1
 8001732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
					GUI_options[1].disabled = true;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <GUI_TSHandler+0x264>)
 8001738:	2201      	movs	r2, #1
 800173a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					GUI_options[1].active = 0;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <GUI_TSHandler+0x264>)
 8001740:	2200      	movs	r2, #0
 8001742:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					GUI_options[2].disabled = true;
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <GUI_TSHandler+0x264>)
 8001748:	2201      	movs	r2, #1
 800174a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_options[2].active = 0;
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <GUI_TSHandler+0x264>)
 8001750:	2200      	movs	r2, #0
 8001752:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <GUI_TSHandler+0x25c>)
 8001758:	2204      	movs	r2, #4
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e0d5      	b.n	800190a <GUI_TSHandler+0x3f6>
 800175e:	bf00      	nop
 8001760:	20000630 	.word	0x20000630
 8001764:	20000638 	.word	0x20000638
 8001768:	2000026a 	.word	0x2000026a
 800176c:	20000268 	.word	0x20000268
 8001770:	2000026c 	.word	0x2000026c
 8001774:	20000261 	.word	0x20000261
 8001778:	20000068 	.word	0x20000068
				}
			} else if ((160<Y)&(Y<200)&!(GUI_options[1].disabled)){
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	2ba0      	cmp	r3, #160	; 0xa0
 8001780:	bf8c      	ite	hi
 8001782:	2301      	movhi	r3, #1
 8001784:	2300      	movls	r3, #0
 8001786:	b2da      	uxtb	r2, r3
 8001788:	88bb      	ldrh	r3, [r7, #4]
 800178a:	2bc7      	cmp	r3, #199	; 0xc7
 800178c:	bf94      	ite	ls
 800178e:	2301      	movls	r3, #1
 8001790:	2300      	movhi	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4013      	ands	r3, r2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b66      	ldr	r3, [pc, #408]	; (8001934 <GUI_TSHandler+0x420>)
 800179c:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80017a0:	f083 0301 	eor.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d03f      	beq.n	800182c <GUI_TSHandler+0x318>
				if ((X<120)&(GUI_options[1].active!=0)) {
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	2b77      	cmp	r3, #119	; 0x77
 80017b0:	bf94      	ite	ls
 80017b2:	2301      	movls	r3, #1
 80017b4:	2300      	movhi	r3, #0
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <GUI_TSHandler+0x420>)
 80017ba:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	4013      	ands	r3, r2
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00b      	beq.n	80017e8 <GUI_TSHandler+0x2d4>
					GUI_options[1].active = 0;
 80017d0:	4b58      	ldr	r3, [pc, #352]	; (8001934 <GUI_TSHandler+0x420>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					GUI_options[2].disabled = false;
 80017d8:	4b56      	ldr	r3, [pc, #344]	; (8001934 <GUI_TSHandler+0x420>)
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 80017e0:	4b55      	ldr	r3, [pc, #340]	; (8001938 <GUI_TSHandler+0x424>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e090      	b.n	800190a <GUI_TSHandler+0x3f6>
				} else if ((X>120)&(GUI_options[1].active!=1)) {
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	2b78      	cmp	r3, #120	; 0x78
 80017ec:	bf8c      	ite	hi
 80017ee:	2301      	movhi	r3, #1
 80017f0:	2300      	movls	r3, #0
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <GUI_TSHandler+0x420>)
 80017f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4013      	ands	r3, r2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d07e      	beq.n	800190a <GUI_TSHandler+0x3f6>
					GUI_options[1].active = 1;
 800180c:	4b49      	ldr	r3, [pc, #292]	; (8001934 <GUI_TSHandler+0x420>)
 800180e:	2201      	movs	r2, #1
 8001810:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					GUI_options[2].disabled = true;
 8001814:	4b47      	ldr	r3, [pc, #284]	; (8001934 <GUI_TSHandler+0x420>)
 8001816:	2201      	movs	r2, #1
 8001818:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_options[2].active = 0;
 800181c:	4b45      	ldr	r3, [pc, #276]	; (8001934 <GUI_TSHandler+0x420>)
 800181e:	2200      	movs	r2, #0
 8001820:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8001824:	4b44      	ldr	r3, [pc, #272]	; (8001938 <GUI_TSHandler+0x424>)
 8001826:	2204      	movs	r2, #4
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e06e      	b.n	800190a <GUI_TSHandler+0x3f6>
				}
			} else if ((240<Y)&(Y<280)&!(GUI_options[2].disabled)){
 800182c:	88bb      	ldrh	r3, [r7, #4]
 800182e:	2bf0      	cmp	r3, #240	; 0xf0
 8001830:	bf8c      	ite	hi
 8001832:	2301      	movhi	r3, #1
 8001834:	2300      	movls	r3, #0
 8001836:	b2da      	uxtb	r2, r3
 8001838:	88bb      	ldrh	r3, [r7, #4]
 800183a:	f240 1117 	movw	r1, #279	; 0x117
 800183e:	428b      	cmp	r3, r1
 8001840:	bf94      	ite	ls
 8001842:	2301      	movls	r3, #1
 8001844:	2300      	movhi	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4013      	ands	r3, r2
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <GUI_TSHandler+0x420>)
 8001850:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8001854:	f083 0301 	eor.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d054      	beq.n	800190a <GUI_TSHandler+0x3f6>
				if ((X<80)&(GUI_options[2].active!=0)) {
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	2b4f      	cmp	r3, #79	; 0x4f
 8001864:	bf94      	ite	ls
 8001866:	2301      	movls	r3, #1
 8001868:	2300      	movhi	r3, #0
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <GUI_TSHandler+0x420>)
 800186e:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf14      	ite	ne
 8001876:	2301      	movne	r3, #1
 8001878:	2300      	moveq	r3, #0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4013      	ands	r3, r2
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <GUI_TSHandler+0x380>
					GUI_options[2].active = 0;
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <GUI_TSHandler+0x420>)
 8001886:	2200      	movs	r2, #0
 8001888:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <GUI_TSHandler+0x424>)
 800188e:	2204      	movs	r2, #4
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e03a      	b.n	800190a <GUI_TSHandler+0x3f6>
				} else if ((X>80)&(X<160)&(GUI_options[2].active!=1)) {
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	2b50      	cmp	r3, #80	; 0x50
 8001898:	bf8c      	ite	hi
 800189a:	2301      	movhi	r3, #1
 800189c:	2300      	movls	r3, #0
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	2b9f      	cmp	r3, #159	; 0x9f
 80018a4:	bf94      	ite	ls
 80018a6:	2301      	movls	r3, #1
 80018a8:	2300      	movhi	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4013      	ands	r3, r2
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <GUI_TSHandler+0x420>)
 80018b4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <GUI_TSHandler+0x3c4>
					GUI_options[2].active = 1;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <GUI_TSHandler+0x420>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <GUI_TSHandler+0x424>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e018      	b.n	800190a <GUI_TSHandler+0x3f6>
				} else if ((X>160)&(GUI_options[2].active!=2)) {
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	2ba0      	cmp	r3, #160	; 0xa0
 80018dc:	bf8c      	ite	hi
 80018de:	2301      	movhi	r3, #1
 80018e0:	2300      	movls	r3, #0
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <GUI_TSHandler+0x420>)
 80018e6:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4013      	ands	r3, r2
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <GUI_TSHandler+0x3f6>
					GUI_options[2].active = 2;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <GUI_TSHandler+0x420>)
 80018fe:	2202      	movs	r2, #2
 8001900:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <GUI_TSHandler+0x424>)
 8001906:	2204      	movs	r2, #4
 8001908:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	//save current TS state as previous state
	GUI_previousTSstate.TouchDetected = GUI_currentTSstate.TouchDetected;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <GUI_TSHandler+0x428>)
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <GUI_TSHandler+0x42c>)
 8001910:	801a      	strh	r2, [r3, #0]
	GUI_previousTSstate.X = GUI_currentTSstate.X;
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <GUI_TSHandler+0x428>)
 8001914:	885a      	ldrh	r2, [r3, #2]
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <GUI_TSHandler+0x42c>)
 8001918:	805a      	strh	r2, [r3, #2]
	GUI_previousTSstate.Y = GUI_currentTSstate.Y;
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <GUI_TSHandler+0x428>)
 800191c:	889a      	ldrh	r2, [r3, #4]
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <GUI_TSHandler+0x42c>)
 8001920:	809a      	strh	r2, [r3, #4]
	GUI_previousTSstate.Z = GUI_currentTSstate.Z;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <GUI_TSHandler+0x428>)
 8001924:	88da      	ldrh	r2, [r3, #6]
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <GUI_TSHandler+0x42c>)
 8001928:	80da      	strh	r2, [r3, #6]
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000068 	.word	0x20000068
 8001938:	2000026c 	.word	0x2000026c
 800193c:	20000630 	.word	0x20000630
 8001940:	20000638 	.word	0x20000638

08001944 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8001944:	b598      	push	{r3, r4, r7, lr}
 8001946:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8001948:	f003 f922 	bl	8004b90 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 800194c:	f000 f884 	bl	8001a58 <SystemClock_Config>

	BSP_LCD_Init();						// Initialize the LCD display
 8001950:	f001 ff24 	bl	800379c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001954:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001958:	2001      	movs	r0, #1
 800195a:	f001 ffa1 	bl	80038a0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800195e:	2001      	movs	r0, #1
 8001960:	f002 f802 	bl	8003968 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001964:	f002 fc46 	bl	80041f4 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f002 f858 	bl	8003a20 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8001970:	f001 ff7e 	bl	8003870 <BSP_LCD_GetXSize>
 8001974:	4603      	mov	r3, r0
 8001976:	b29c      	uxth	r4, r3
 8001978:	f001 ff86 	bl	8003888 <BSP_LCD_GetYSize>
 800197c:	4603      	mov	r3, r0
 800197e:	b29b      	uxth	r3, r3
 8001980:	4619      	mov	r1, r3
 8001982:	4620      	mov	r0, r4
 8001984:	f003 f800 	bl	8004988 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	//BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 8001988:	f000 fdf2 	bl	8002570 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 800198c:	f000 fe10 	bl	80025b0 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8001990:	2000      	movs	r0, #0
 8001992:	f001 fb1f 	bl	8002fd4 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8001996:	2001      	movs	r0, #1
 8001998:	f001 fb1c 	bl	8002fd4 <BSP_LED_Init>

	//init GUI
	draw_lcd = true;
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <main+0xf4>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]



	gyro_disable();						// Disable gyro, use those analog inputs
 80019a2:	f000 f8d7 	bl	8001b54 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 80019a6:	f000 f995 	bl	8001cd4 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80019aa:	f000 f9f5 	bl	8001d98 <MEAS_timer_init>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80019ae:	2000      	movs	r0, #0
 80019b0:	f001 fb64 	bl	800307c <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <main+0xf8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <main+0x82>
			MEAS_data_ready = false;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <main+0xf8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
			MEAS_show_data();
 80019c2:	f000 faa9 	bl	8001f18 <MEAS_show_data>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 80019c6:	f000 fe25 	bl	8002614 <PB_pressed>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d02f      	beq.n	8001a30 <main+0xec>
			BSP_LED_Toggle(LED4);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f001 fb53 	bl	800307c <BSP_LED_Toggle>
			GUI_cable_detected = !GUI_cable_detected;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <main+0xfc>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <main+0xfc>)
 80019f2:	701a      	strb	r2, [r3, #0]
			if (GUI_angle == 45) {
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <main+0x100>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001a48 <main+0x104>
 80019fe:	eef4 7a47 	vcmp.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d103      	bne.n	8001a10 <main+0xcc>
				GUI_angle = -45;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <main+0x100>)
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <main+0x108>)
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e009      	b.n	8001a24 <main+0xe0>
			} else {
				GUI_angle = GUI_angle + 5;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <main+0x100>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001a1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <main+0x100>)
 8001a20:	edc3 7a00 	vstr	s15, [r3]
			}
			GUI_inputBtn = true;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <main+0x10c>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
			GUI_inputMeasReady = true;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <main+0x110>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
		}

		GUI_SiteHandler();
 8001a30:	f7ff fc94 	bl	800135c <GUI_SiteHandler>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001a34:	e7bb      	b.n	80019ae <main+0x6a>
 8001a36:	bf00      	nop
 8001a38:	2000026d 	.word	0x2000026d
 8001a3c:	2000026e 	.word	0x2000026e
 8001a40:	20000260 	.word	0x20000260
 8001a44:	20000264 	.word	0x20000264
 8001a48:	42340000 	.word	0x42340000
 8001a4c:	c2340000 	.word	0xc2340000
 8001a50:	20000269 	.word	0x20000269
 8001a54:	2000026b 	.word	0x2000026b

08001a58 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b0a0      	sub	sp, #128	; 0x80
 8001a5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a62:	2230      	movs	r2, #48	; 0x30
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f007 fa0c 	bl	8008e84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2230      	movs	r2, #48	; 0x30
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f007 f9fd 	bl	8008e84 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <SystemClock_Config+0xf0>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <SystemClock_Config+0xf0>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <SystemClock_Config+0xf0>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <SystemClock_Config+0xf4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <SystemClock_Config+0xf4>)
 8001ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <SystemClock_Config+0xf4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aca:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001acc:	2302      	movs	r3, #2
 8001ace:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001ada:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ade:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ae4:	2307      	movs	r3, #7
 8001ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001ae8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 fb1b 	bl	8007128 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001af2:	230f      	movs	r3, #15
 8001af4:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af6:	2302      	movs	r3, #2
 8001af8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001afe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b02:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b0e:	2105      	movs	r1, #5
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 fd79 	bl	8007608 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b16:	2308      	movs	r3, #8
 8001b18:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b1a:	23c0      	movs	r3, #192	; 0xc0
 8001b1c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f005 ff53 	bl	80079d8 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <SystemClock_Config+0xf8>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <SystemClock_Config+0xf8>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6053      	str	r3, [r2, #4]
}
 8001b3e:	bf00      	nop
 8001b40:	3780      	adds	r7, #128	; 0x80
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	40012300 	.word	0x40012300

08001b54 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <gyro_disable+0xb4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a29      	ldr	r2, [pc, #164]	; (8001c08 <gyro_disable+0xb4>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <gyro_disable+0xb4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1; // Reset mode for PC1
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <gyro_disable+0xb8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <gyro_disable+0xb8>)
 8001b7c:	f023 030c 	bic.w	r3, r3, #12
 8001b80:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0;	// Set PC1 as output
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <gyro_disable+0xb8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a21      	ldr	r2, [pc, #132]	; (8001c0c <gyro_disable+0xb8>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <gyro_disable+0xb8>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <gyro_disable+0xb8>)
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f003 f872 	bl	8004c84 <HAL_Delay>
	GPIOC->MODER |= GPIO_MODER_MODER1_Msk; // Analog mode PC1 = ADC123_IN11
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <gyro_disable+0xb8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <gyro_disable+0xb8>)
 8001ba6:	f043 030c 	orr.w	r3, r3, #12
 8001baa:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001bac:	2300      	movs	r3, #0
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <gyro_disable+0xb4>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <gyro_disable+0xb4>)
 8001bb6:	f043 0320 	orr.w	r3, r3, #32
 8001bba:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <gyro_disable+0xb4>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8;	// Reset speed of PF8
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <gyro_disable+0xbc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <gyro_disable+0xbc>)
 8001bce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bd2:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8;			// Reset alternate func. of PF8
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <gyro_disable+0xbc>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <gyro_disable+0xbc>)
 8001bda:	f023 030f 	bic.w	r3, r3, #15
 8001bde:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8;			// Reset pulup/down of PF8
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <gyro_disable+0xbc>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <gyro_disable+0xbc>)
 8001be6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bea:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8001bec:	200a      	movs	r0, #10
 8001bee:	f003 f849 	bl	8004c84 <HAL_Delay>
	GPIOF->MODER |= GPIO_MODER_MODER8_Msk; // Analog mode for PF6 = ADC3_IN4
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <gyro_disable+0xbc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <gyro_disable+0xbc>)
 8001bf8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001bfc:	6013      	str	r3, [r2, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40021400 	.word	0x40021400

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db12      	blt.n	8001c88 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	490a      	ldr	r1, [pc, #40]	; (8001c94 <__NVIC_DisableIRQ+0x44>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	3320      	adds	r3, #32
 8001c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c7c:	f3bf 8f4f 	dsb	sy
}
 8001c80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c82:	f3bf 8f6f 	isb	sy
}
 8001c86:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0c      	blt.n	8001cc4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_ClearPendingIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	3360      	adds	r3, #96	; 0x60
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MEAS_GPIO_analog_init+0x7c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <MEAS_GPIO_analog_init+0x7c>)
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MEAS_GPIO_analog_init+0x7c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
	GPIOF->MODER |= (GPIO_MODER_MODER6_Msk);// Analog mode for PF6 = ADC3_IN4
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MEAS_GPIO_analog_init+0x80>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a16      	ldr	r2, [pc, #88]	; (8001d54 <MEAS_GPIO_analog_init+0x80>)
 8001cfc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001d00:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (GPIO_MODER_MODER8_Msk);// Analog mode for PF8 = ADC3_IN6
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MEAS_GPIO_analog_init+0x80>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <MEAS_GPIO_analog_init+0x80>)
 8001d08:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001d0c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MEAS_GPIO_analog_init+0x7c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <MEAS_GPIO_analog_init+0x7c>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MEAS_GPIO_analog_init+0x7c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
	GPIOC->MODER |= (GPIO_MODER_MODER1_Msk);// Analog mode for PC1 = ADC123_IN11
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MEAS_GPIO_analog_init+0x84>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <MEAS_GPIO_analog_init+0x84>)
 8001d30:	f043 030c 	orr.w	r3, r3, #12
 8001d34:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODER3_Msk);// Analog mode for PC3 = ADC123_IN13
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MEAS_GPIO_analog_init+0x84>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <MEAS_GPIO_analog_init+0x84>)
 8001d3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d40:	6013      	str	r3, [r2, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40020800 	.word	0x40020800

08001d5c <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <ADC_reset+0x38>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <ADC_reset+0x38>)
 8001d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6a:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <ADC_reset+0x38>)
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <ADC_reset+0x38>)
 8001d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d76:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8001d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MEAS_timer_init+0x68>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <MEAS_timer_init+0x68>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MEAS_timer_init+0x68>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8001dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dbe:	f243 62af 	movw	r2, #13999	; 0x36af
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8001dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc8:	2209      	movs	r2, #9
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8001dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd6:	f043 0320 	orr.w	r3, r3, #32
 8001dda:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8001ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8001dec:	201c      	movs	r0, #28
 8001dee:	f7ff ff53 	bl	8001c98 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8001df2:	201c      	movs	r0, #28
 8001df4:	f7ff ff0e 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800

08001e04 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6113      	str	r3, [r2, #16]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <ADC_IRQHandler+0x58>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001e34:	4911      	ldr	r1, [pc, #68]	; (8001e7c <ADC_IRQHandler+0x58>)
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <ADC_IRQHandler+0x5c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4810      	ldr	r0, [pc, #64]	; (8001e80 <ADC_IRQHandler+0x5c>)
 8001e3e:	6002      	str	r2, [r0, #0]
 8001e40:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001e42:	4910      	ldr	r1, [pc, #64]	; (8001e84 <ADC_IRQHandler+0x60>)
 8001e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <ADC_IRQHandler+0x5c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b3b      	cmp	r3, #59	; 0x3b
 8001e4e:	d912      	bls.n	8001e76 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <ADC_IRQHandler+0x58>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <ADC_IRQHandler+0x58>)
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001e6c:	f7ff ff76 	bl	8001d5c <ADC_reset>
			MEAS_data_ready = true;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <ADC_IRQHandler+0x64>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40012200 	.word	0x40012200
 8001e80:	20000278 	.word	0x20000278
 8001e84:	2000027c 	.word	0x2000027c
 8001e88:	2000026e 	.word	0x2000026e

08001e8c <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <DMA2_Stream1_IRQHandler+0x7c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d033      	beq.n	8001f04 <DMA2_Stream1_IRQHandler+0x78>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8001e9c:	2039      	movs	r0, #57	; 0x39
 8001e9e:	f7ff fed7 	bl	8001c50 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001ea2:	2039      	movs	r0, #57	; 0x39
 8001ea4:	f7ff fef8 	bl	8001c98 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <DMA2_Stream1_IRQHandler+0x80>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <DMA2_Stream1_IRQHandler+0x80>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001eb4:	bf00      	nop
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <DMA2_Stream1_IRQHandler+0x80>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f9      	bne.n	8001eb6 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <DMA2_Stream1_IRQHandler+0x7c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <DMA2_Stream1_IRQHandler+0x7c>)
 8001ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ecc:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <DMA2_Stream1_IRQHandler+0x84>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <DMA2_Stream1_IRQHandler+0x84>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <DMA2_Stream1_IRQHandler+0x84>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <DMA2_Stream1_IRQHandler+0x84>)
 8001ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef4:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001ef6:	f7ff ff31 	bl	8001d5c <ADC_reset>
		MEAS_analyse_data();
 8001efa:	f000 f8f5 	bl	80020e8 <MEAS_analyse_data>
		MEAS_data_ready = true;
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <DMA2_Stream1_IRQHandler+0x88>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
	}
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40026400 	.word	0x40026400
 8001f0c:	40026428 	.word	0x40026428
 8001f10:	40012200 	.word	0x40012200
 8001f14:	2000026e 	.word	0x2000026e

08001f18 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b08d      	sub	sp, #52	; 0x34
 8001f1c:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET = 260;
 8001f1e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f22:	61fb      	str	r3, [r7, #28]
	const uint32_t X_SIZE = 240;
 8001f24:	23f0      	movs	r3, #240	; 0xf0
 8001f26:	61bb      	str	r3, [r7, #24]
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8001f28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
	uint32_t data;
	uint32_t data_last;
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001f36:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3a:	f001 fd25 	bl	8003988 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f002 f8f7 	bl	8004140 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font24);
 8001f52:	485c      	ldr	r0, [pc, #368]	; (80020c4 <MEAS_show_data+0x1ac>)
 8001f54:	f001 fd4a 	bl	80039ec <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f001 fd2c 	bl	80039b8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f60:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f64:	f001 fd10 	bl	8003988 <BSP_LCD_SetTextColor>
	char text[16];
	snprintf(text, 15, "Amp left  %4d", (int)(MEAS_amplitude_left));
 8001f68:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <MEAS_show_data+0x1b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4638      	mov	r0, r7
 8001f6e:	4a57      	ldr	r2, [pc, #348]	; (80020cc <MEAS_show_data+0x1b4>)
 8001f70:	210f      	movs	r1, #15
 8001f72:	f006 ff8f 	bl	8008e94 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 8001f76:	463a      	mov	r2, r7
 8001f78:	2303      	movs	r3, #3
 8001f7a:	2132      	movs	r1, #50	; 0x32
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f001 fdbb 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "Amp right %4d", (int)(MEAS_amplitude_right));
 8001f82:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <MEAS_show_data+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4638      	mov	r0, r7
 8001f88:	4a52      	ldr	r2, [pc, #328]	; (80020d4 <MEAS_show_data+0x1bc>)
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f006 ff82 	bl	8008e94 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 8001f90:	463a      	mov	r2, r7
 8001f92:	2303      	movs	r3, #3
 8001f94:	2150      	movs	r1, #80	; 0x50
 8001f96:	2000      	movs	r0, #0
 8001f98:	f001 fdae 	bl	8003af8 <BSP_LCD_DisplayStringAt>
	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001f9c:	484e      	ldr	r0, [pc, #312]	; (80020d8 <MEAS_show_data+0x1c0>)
 8001f9e:	f001 fcf3 	bl	8003988 <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_INPUT_COUNT*0] / f;
 8001fa2:	4b4e      	ldr	r3, [pc, #312]	; (80020dc <MEAS_show_data+0x1c4>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001fae:	2301      	movs	r3, #1
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb2:	e02b      	b.n	800200c <MEAS_show_data+0xf4>
		data_last = data;
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	613b      	str	r3, [r7, #16]
		data = (ADC_samples[MEAS_INPUT_COUNT*i]) / f;
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4a47      	ldr	r2, [pc, #284]	; (80020dc <MEAS_show_data+0x1c4>)
 8001fbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d901      	bls.n	8001fd6 <MEAS_show_data+0xbe>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	b298      	uxth	r0, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	b299      	uxth	r1, r3
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	b29c      	uxth	r4, r3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4622      	mov	r2, r4
 8002002:	f001 feb7 	bl	8003d74 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	3301      	adds	r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	2b3b      	cmp	r3, #59	; 0x3b
 8002010:	d9d0      	bls.n	8001fb4 <MEAS_show_data+0x9c>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_INPUT_COUNT == 2) {
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002012:	4833      	ldr	r0, [pc, #204]	; (80020e0 <MEAS_show_data+0x1c8>)
 8002014:	f001 fcb8 	bl	8003988 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_INPUT_COUNT*0+1] / f;
 8002018:	4b30      	ldr	r3, [pc, #192]	; (80020dc <MEAS_show_data+0x1c4>)
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8002024:	2301      	movs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
 8002028:	e02c      	b.n	8002084 <MEAS_show_data+0x16c>
			data_last = data;
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	613b      	str	r3, [r7, #16]
			data = (ADC_samples[MEAS_INPUT_COUNT*i+1]) / f;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	3301      	adds	r3, #1
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <MEAS_show_data+0x1c4>)
 8002036:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8002042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	429a      	cmp	r2, r3
 8002048:	d901      	bls.n	800204e <MEAS_show_data+0x136>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	b298      	uxth	r0, r3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	b29a      	uxth	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	b29b      	uxth	r3, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b299      	uxth	r1, r3
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	b29b      	uxth	r3, r3
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	b29c      	uxth	r4, r3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	b29a      	uxth	r2, r3
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	b29b      	uxth	r3, r3
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	b29b      	uxth	r3, r3
 8002078:	4622      	mov	r2, r4
 800207a:	f001 fe7b 	bl	8003d74 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	2b3b      	cmp	r3, #59	; 0x3b
 8002088:	d9cf      	bls.n	800202a <MEAS_show_data+0x112>
		}
	}
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
 800208e:	e00f      	b.n	80020b0 <MEAS_show_data+0x198>
		ADC_samples[2*i] = 0;
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <MEAS_show_data+0x1c4>)
 8002096:	2100      	movs	r1, #0
 8002098:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <MEAS_show_data+0x1c4>)
 80020a4:	2100      	movs	r1, #0
 80020a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	3301      	adds	r3, #1
 80020ae:	623b      	str	r3, [r7, #32]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b3b      	cmp	r3, #59	; 0x3b
 80020b4:	d9ec      	bls.n	8002090 <MEAS_show_data+0x178>
	}
	ADC_sample_count = 0;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MEAS_show_data+0x1cc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	3734      	adds	r7, #52	; 0x34
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	200001b4 	.word	0x200001b4
 80020c8:	20000270 	.word	0x20000270
 80020cc:	080098b4 	.word	0x080098b4
 80020d0:	20000274 	.word	0x20000274
 80020d4:	080098c4 	.word	0x080098c4
 80020d8:	ff0000ff 	.word	0xff0000ff
 80020dc:	2000027c 	.word	0x2000027c
 80020e0:	ffff0000 	.word	0xffff0000
 80020e4:	20000278 	.word	0x20000278

080020e8 <MEAS_analyse_data>:

/** ***************************************************************************
 * @brief Analyse data to detect sine amplitude
 *****************************************************************************/
void MEAS_analyse_data(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80020ee:	af00      	add	r7, sp, #0
	uint32_t buffer_left_channel[ADC_NUMS];
	uint32_t buffer_right_channel[ADC_NUMS];
	for (int i = 0; i < ADC_NUMS; ++i) {
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80020f6:	e01d      	b.n	8002134 <MEAS_analyse_data+0x4c>
		buffer_left_channel[i] = ADC_samples[2*i];
 80020f8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4ac4      	ldr	r2, [pc, #784]	; (8002410 <MEAS_analyse_data+0x328>)
 8002100:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002104:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002108:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		buffer_right_channel[i] = ADC_samples[((2*i)+1)];
 8002110:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	3301      	adds	r3, #1
 8002118:	4abd      	ldr	r2, [pc, #756]	; (8002410 <MEAS_analyse_data+0x328>)
 800211a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800211e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002122:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < ADC_NUMS; ++i) {
 800212a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800212e:	3301      	adds	r3, #1
 8002130:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8002134:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8002138:	2b3b      	cmp	r3, #59	; 0x3b
 800213a:	dddd      	ble.n	80020f8 <MEAS_analyse_data+0x10>
	}

	//sort arrays from low to high
	uint32_t temp_left;
	uint32_t temp_right;
	for (int i = 0; i < ADC_NUMS; ++i) {
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002142:	e067      	b.n	8002214 <MEAS_analyse_data+0x12c>
		for (int j = i+1; j < ADC_NUMS; ++j) {
 8002144:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002148:	3301      	adds	r3, #1
 800214a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800214e:	e058      	b.n	8002202 <MEAS_analyse_data+0x11a>
			if (buffer_left_channel[i]>buffer_left_channel[j]) {
 8002150:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002154:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002158:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800215c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002160:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002164:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002168:	429a      	cmp	r2, r3
 800216a:	d91b      	bls.n	80021a4 <MEAS_analyse_data+0xbc>
				temp_left = buffer_left_channel[i];
 800216c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002170:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002178:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
				buffer_left_channel[i]=buffer_left_channel[j];
 800217c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002180:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8002184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002188:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800218c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				buffer_left_channel[j]=temp_left;
 8002194:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002198:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800219c:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			if (buffer_right_channel[i]>buffer_right_channel[j]) {
 80021a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021a8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80021ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021b4:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80021b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d91b      	bls.n	80021f8 <MEAS_analyse_data+0x110>
				temp_right = buffer_right_channel[i];
 80021c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021c4:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
				buffer_right_channel[i]=buffer_right_channel[j];
 80021d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021d4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80021d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021e0:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				buffer_right_channel[j]=temp_right;
 80021e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021ec:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80021f0:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = i+1; j < ADC_NUMS; ++j) {
 80021f8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80021fc:	3301      	adds	r3, #1
 80021fe:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8002202:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002206:	2b3b      	cmp	r3, #59	; 0x3b
 8002208:	dda2      	ble.n	8002150 <MEAS_analyse_data+0x68>
	for (int i = 0; i < ADC_NUMS; ++i) {
 800220a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800220e:	3301      	adds	r3, #1
 8002210:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002214:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002218:	2b3b      	cmp	r3, #59	; 0x3b
 800221a:	dd93      	ble.n	8002144 <MEAS_analyse_data+0x5c>


	uint32_t values_left[10];
	uint32_t values_right[10];
	//select 5 lowest values
	for (int i = 0; i < 5; ++i) {
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8002222:	e01b      	b.n	800225c <MEAS_analyse_data+0x174>
		values_left[i]=buffer_left_channel[i];
 8002224:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002228:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800222c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002234:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		values_right[i]=buffer_right_channel[i];
 800223c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002240:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002248:	463b      	mov	r3, r7
 800224a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800224e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 5; ++i) {
 8002252:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002256:	3301      	adds	r3, #1
 8002258:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800225c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002260:	2b04      	cmp	r3, #4
 8002262:	dddf      	ble.n	8002224 <MEAS_analyse_data+0x13c>
	}

	//select 5 highest values
	for (int i = 0; i < 5; ++i) {
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800226a:	e021      	b.n	80022b0 <MEAS_analyse_data+0x1c8>
		values_left[i+5]=buffer_left_channel[i+55];
 800226c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002270:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8002274:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002278:	1d5a      	adds	r2, r3, #5
 800227a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800227e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		values_right[i+5]=buffer_right_channel[i+55];
 800228a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800228e:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8002292:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002296:	1d5a      	adds	r2, r3, #5
 8002298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800229c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80022a0:	463b      	mov	r3, r7
 80022a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 5; ++i) {
 80022a6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80022aa:	3301      	adds	r3, #1
 80022ac:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80022b0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	ddd9      	ble.n	800226c <MEAS_analyse_data+0x184>
	}

	//check if values mean around middle of ADC range
	uint32_t check_sum_left = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	uint32_t check_sum_right = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	for (int i = 0; i < 10; ++i) {
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80022ca:	e019      	b.n	8002300 <MEAS_analyse_data+0x218>
		check_sum_left += values_left[i];
 80022cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80022dc:	4413      	add	r3, r2
 80022de:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
		check_sum_right += values_right[i];
 80022e2:	463b      	mov	r3, r7
 80022e4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80022f0:	4413      	add	r3, r2
 80022f2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	for (int i = 0; i < 10; ++i) {
 80022f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80022fa:	3301      	adds	r3, #1
 80022fc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8002300:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002304:	2b09      	cmp	r3, #9
 8002306:	dde1      	ble.n	80022cc <MEAS_analyse_data+0x1e4>
	}
	check_sum_left = check_sum_left / 10;
 8002308:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800230c:	4a41      	ldr	r2, [pc, #260]	; (8002414 <MEAS_analyse_data+0x32c>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	08db      	lsrs	r3, r3, #3
 8002314:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	check_sum_right = check_sum_right / 10;
 8002318:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800231c:	4a3d      	ldr	r2, [pc, #244]	; (8002414 <MEAS_analyse_data+0x32c>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

	//convert low values to high values
	for (int i = 0; i < 5; ++i) {
 8002328:	2300      	movs	r3, #0
 800232a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800232e:	e020      	b.n	8002372 <MEAS_analyse_data+0x28a>
		values_left[i] = ADC_MAX_VALUE - values_left[i];
 8002330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002334:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002340:	330f      	adds	r3, #15
 8002342:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002346:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800234a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		values_right[i] = ADC_MAX_VALUE - values_right[i];
 800234e:	463b      	mov	r3, r7
 8002350:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002358:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800235c:	330f      	adds	r3, #15
 800235e:	463a      	mov	r2, r7
 8002360:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002364:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (int i = 0; i < 5; ++i) {
 8002368:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800236c:	3301      	adds	r3, #1
 800236e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8002372:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002376:	2b04      	cmp	r3, #4
 8002378:	ddda      	ble.n	8002330 <MEAS_analyse_data+0x248>
	//	values_left[i] = values_left[i]-(ADC_MAX_VALUE/2);
	//	values_right[i] = values_right[i]-(ADC_MAX_VALUE/2);
	//}

	//calculate mean of all 10 values
	uint32_t sum_left = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	uint32_t sum_right = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (int i = 0; i < 10; ++i) {
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800238c:	e019      	b.n	80023c2 <MEAS_analyse_data+0x2da>
		sum_left += values_left[i];
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800239e:	4413      	add	r3, r2
 80023a0:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		sum_right += values_right[i];
 80023a4:	463b      	mov	r3, r7
 80023a6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80023aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ae:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80023b2:	4413      	add	r3, r2
 80023b4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (int i = 0; i < 10; ++i) {
 80023b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80023bc:	3301      	adds	r3, #1
 80023be:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80023c2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80023c6:	2b09      	cmp	r3, #9
 80023c8:	dde1      	ble.n	800238e <MEAS_analyse_data+0x2a6>
	}
	sum_left = sum_left / 10;
 80023ca:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80023ce:	4a11      	ldr	r2, [pc, #68]	; (8002414 <MEAS_analyse_data+0x32c>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	sum_right = sum_right / 10;
 80023da:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80023de:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <MEAS_analyse_data+0x32c>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

	MEAS_amplitude_left = sum_left-(ADC_MAX_VALUE/2);
 80023ea:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80023ee:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <MEAS_analyse_data+0x330>)
 80023f4:	6013      	str	r3, [r2, #0]
	MEAS_amplitude_right = sum_right-(ADC_MAX_VALUE/2);
 80023f6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80023fa:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <MEAS_analyse_data+0x334>)
 8002400:	6013      	str	r3, [r2, #0]
}
 8002402:	bf00      	nop
 8002404:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	2000027c 	.word	0x2000027c
 8002414:	cccccccd 	.word	0xcccccccd
 8002418:	20000270 	.word	0x20000270
 800241c:	20000274 	.word	0x20000274

08002420 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8002420:	b598      	push	{r3, r4, r7, lr}
 8002422:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8002424:	481f      	ldr	r0, [pc, #124]	; (80024a4 <MENU_check_transition+0x84>)
 8002426:	f002 faf5 	bl	8004a14 <BSP_TS_GetState>
#ifdef EVAL_REV_E
// Evalboard revision E (blue) has an inverted y-axis in the touch controller
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
	if (TS_State.TouchDetected) {		// If a touch was detected
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MENU_check_transition+0x84>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d036      	beq.n	80024a0 <MENU_check_transition+0x80>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <MENU_check_transition+0x88>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b06      	cmp	r3, #6
 8002438:	d132      	bne.n	80024a0 <MENU_check_transition+0x80>
			item_old = item_new;		// Store old item
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <MENU_check_transition+0x8c>)
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MENU_check_transition+0x90>)
 8002440:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8002442:	f001 fa21 	bl	8003888 <BSP_LCD_GetYSize>
 8002446:	4603      	mov	r3, r0
 8002448:	3b28      	subs	r3, #40	; 0x28
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <MENU_check_transition+0x84>)
 800244c:	8892      	ldrh	r2, [r2, #4]
 800244e:	4293      	cmp	r3, r2
 8002450:	d226      	bcs.n	80024a0 <MENU_check_transition+0x80>
 8002452:	f001 fa19 	bl	8003888 <BSP_LCD_GetYSize>
 8002456:	4603      	mov	r3, r0
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <MENU_check_transition+0x84>)
 800245a:	8892      	ldrh	r2, [r2, #4]
 800245c:	4293      	cmp	r3, r2
 800245e:	d91f      	bls.n	80024a0 <MENU_check_transition+0x80>
				item_new = TS_State.X	// Calculate new item
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MENU_check_transition+0x84>)
 8002462:	885b      	ldrh	r3, [r3, #2]
 8002464:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8002466:	f001 fa03 	bl	8003870 <BSP_LCD_GetXSize>
 800246a:	4603      	mov	r3, r0
 800246c:	085b      	lsrs	r3, r3, #1
 800246e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002472:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MENU_check_transition+0x8c>)
 8002476:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MENU_check_transition+0x8c>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d902      	bls.n	8002486 <MENU_check_transition+0x66>
					item_new = MENU_NONE;	// Out of bounds
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <MENU_check_transition+0x8c>)
 8002482:	2206      	movs	r2, #6
 8002484:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MENU_check_transition+0x8c>)
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MENU_check_transition+0x90>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d106      	bne.n	80024a0 <MENU_check_transition+0x80>
					item_new = MENU_NONE;
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MENU_check_transition+0x8c>)
 8002494:	2206      	movs	r2, #6
 8002496:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <MENU_check_transition+0x90>)
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <MENU_check_transition+0x88>)
 800249e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 80024a0:	bf00      	nop
 80024a2:	bd98      	pop	{r3, r4, r7, pc}
 80024a4:	2000045c 	.word	0x2000045c
 80024a8:	2000013a 	.word	0x2000013a
 80024ac:	2000013b 	.word	0x2000013b
 80024b0:	2000013c 	.word	0x2000013c

080024b4 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <EXTI15_10_IRQHandler+0x40>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d014      	beq.n	80024ee <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <EXTI15_10_IRQHandler+0x40>)
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <EXTI15_10_IRQHandler+0x40>)
 80024ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ce:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 80024d0:	f002 fa94 	bl	80049fc <BSP_TS_ITGetStatus>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 80024da:	f002 fb4d 	bl	8004b78 <BSP_TS_ITClear>
			MENU_check_transition();
 80024de:	f7ff ff9f 	bl	8002420 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <EXTI15_10_IRQHandler+0x40>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <EXTI15_10_IRQHandler+0x40>)
 80024e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ec:	6153      	str	r3, [r2, #20]
	}
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <__NVIC_EnableIRQ>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_ClearPendingIRQ>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0c      	blt.n	8002560 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4907      	ldr	r1, [pc, #28]	; (800256c <__NVIC_ClearPendingIRQ+0x38>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	3360      	adds	r3, #96	; 0x60
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100

08002570 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <PB_init+0x38>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <PB_init+0x38>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <PB_init+0x38>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <PB_init+0x3c>)
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <PB_init+0x3c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6013      	str	r3, [r2, #0]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020000 	.word	0x40020000

080025b0 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <PB_enableIRQ+0x58>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <PB_enableIRQ+0x58>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <PB_enableIRQ+0x58>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <PB_enableIRQ+0x5c>)
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <PB_enableIRQ+0x5c>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <PB_enableIRQ+0x60>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <PB_enableIRQ+0x60>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <PB_enableIRQ+0x60>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a09      	ldr	r2, [pc, #36]	; (8002610 <PB_enableIRQ+0x60>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 80025f2:	2006      	movs	r0, #6
 80025f4:	f7ff ff9e 	bl	8002534 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 80025f8:	2006      	movs	r0, #6
 80025fa:	f7ff ff7d 	bl	80024f8 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40013800 	.word	0x40013800
 8002610:	40013c00 	.word	0x40013c00

08002614 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <PB_pressed+0x20>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <PB_pressed+0x20>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002626:	79fb      	ldrb	r3, [r7, #7]
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	20000464 	.word	0x20000464

08002638 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <EXTI0_IRQHandler+0x2c>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <EXTI0_IRQHandler+0x2c>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	4a05      	ldr	r2, [pc, #20]	; (8002664 <EXTI0_IRQHandler+0x2c>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <EXTI0_IRQHandler+0x30>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
	}
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40013c00 	.word	0x40013c00
 8002668:	20000464 	.word	0x20000464

0800266c <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 800267e:	e7fe      	b.n	800267e <HardFault_Handler+0x4>

08002680 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002684:	e7fe      	b.n	8002684 <MemManage_Handler+0x4>

08002686 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 800268a:	e7fe      	b.n	800268a <BusFault_Handler+0x4>

0800268c <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002690:	e7fe      	b.n	8002690 <UsageFault_Handler+0x4>

08002692 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80026c0:	f002 fac0 	bl	8004c44 <HAL_IncTick>
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <SystemInit+0x60>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <SystemInit+0x60>)
 80026d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <SystemInit+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a12      	ldr	r2, [pc, #72]	; (800272c <SystemInit+0x64>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <SystemInit+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <SystemInit+0x64>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a0e      	ldr	r2, [pc, #56]	; (800272c <SystemInit+0x64>)
 80026f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <SystemInit+0x64>)
 8002700:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <SystemInit+0x68>)
 8002702:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <SystemInit+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a08      	ldr	r2, [pc, #32]	; (800272c <SystemInit+0x64>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <SystemInit+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SystemInit+0x60>)
 8002718:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800271c:	609a      	str	r2, [r3, #8]
#endif
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00
 800272c:	40023800 	.word	0x40023800
 8002730:	24003010 	.word	0x24003010

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800273a:	e003      	b.n	8002744 <LoopCopyDataInit>

0800273c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800273e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002742:	3104      	adds	r1, #4

08002744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002744:	480b      	ldr	r0, [pc, #44]	; (8002774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800274a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800274c:	d3f6      	bcc.n	800273c <CopyDataInit>
  ldr  r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002750:	e002      	b.n	8002758 <LoopFillZerobss>

08002752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002754:	f842 3b04 	str.w	r3, [r2], #4

08002758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800275a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800275c:	d3f9      	bcc.n	8002752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800275e:	f7ff ffb3 	bl	80026c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f006 fb6b 	bl	8008e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7ff f8ed 	bl	8001944 <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800276c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002770:	0800d320 	.word	0x0800d320
  ldr  r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002778:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 800277c:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8002780:	20000754 	.word	0x20000754

08002784 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <CAN1_RX0_IRQHandler>

08002786 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800278a:	f000 feb9 	bl	8003500 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800278e:	20ca      	movs	r0, #202	; 0xca
 8002790:	f000 f95d 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002794:	20c3      	movs	r0, #195	; 0xc3
 8002796:	f000 f967 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800279a:	2008      	movs	r0, #8
 800279c:	f000 f964 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80027a0:	2050      	movs	r0, #80	; 0x50
 80027a2:	f000 f961 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80027a6:	20cf      	movs	r0, #207	; 0xcf
 80027a8:	f000 f951 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f000 f95b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80027b2:	20c1      	movs	r0, #193	; 0xc1
 80027b4:	f000 f958 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80027b8:	2030      	movs	r0, #48	; 0x30
 80027ba:	f000 f955 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80027be:	20ed      	movs	r0, #237	; 0xed
 80027c0:	f000 f945 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	f000 f94f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f000 f94c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80027d0:	2012      	movs	r0, #18
 80027d2:	f000 f949 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80027d6:	2081      	movs	r0, #129	; 0x81
 80027d8:	f000 f946 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80027dc:	20e8      	movs	r0, #232	; 0xe8
 80027de:	f000 f936 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80027e2:	2085      	movs	r0, #133	; 0x85
 80027e4:	f000 f940 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f000 f93d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80027ee:	2078      	movs	r0, #120	; 0x78
 80027f0:	f000 f93a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80027f4:	20cb      	movs	r0, #203	; 0xcb
 80027f6:	f000 f92a 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80027fa:	2039      	movs	r0, #57	; 0x39
 80027fc:	f000 f934 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002800:	202c      	movs	r0, #44	; 0x2c
 8002802:	f000 f931 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002806:	2000      	movs	r0, #0
 8002808:	f000 f92e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800280c:	2034      	movs	r0, #52	; 0x34
 800280e:	f000 f92b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002812:	2002      	movs	r0, #2
 8002814:	f000 f928 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002818:	20f7      	movs	r0, #247	; 0xf7
 800281a:	f000 f918 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800281e:	2020      	movs	r0, #32
 8002820:	f000 f922 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002824:	20ea      	movs	r0, #234	; 0xea
 8002826:	f000 f912 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f91c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f919 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002836:	20b1      	movs	r0, #177	; 0xb1
 8002838:	f000 f909 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f913 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002842:	201b      	movs	r0, #27
 8002844:	f000 f910 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002848:	20b6      	movs	r0, #182	; 0xb6
 800284a:	f000 f900 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800284e:	200a      	movs	r0, #10
 8002850:	f000 f90a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002854:	20a2      	movs	r0, #162	; 0xa2
 8002856:	f000 f907 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800285a:	20c0      	movs	r0, #192	; 0xc0
 800285c:	f000 f8f7 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002860:	2010      	movs	r0, #16
 8002862:	f000 f901 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002866:	20c1      	movs	r0, #193	; 0xc1
 8002868:	f000 f8f1 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800286c:	2010      	movs	r0, #16
 800286e:	f000 f8fb 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002872:	20c5      	movs	r0, #197	; 0xc5
 8002874:	f000 f8eb 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002878:	2045      	movs	r0, #69	; 0x45
 800287a:	f000 f8f5 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800287e:	2015      	movs	r0, #21
 8002880:	f000 f8f2 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002884:	20c7      	movs	r0, #199	; 0xc7
 8002886:	f000 f8e2 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800288a:	2090      	movs	r0, #144	; 0x90
 800288c:	f000 f8ec 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002890:	2036      	movs	r0, #54	; 0x36
 8002892:	f000 f8dc 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002896:	20c8      	movs	r0, #200	; 0xc8
 8002898:	f000 f8e6 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800289c:	20f2      	movs	r0, #242	; 0xf2
 800289e:	f000 f8d6 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f000 f8e0 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80028a8:	20b0      	movs	r0, #176	; 0xb0
 80028aa:	f000 f8d0 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80028ae:	20c2      	movs	r0, #194	; 0xc2
 80028b0:	f000 f8da 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80028b4:	20b6      	movs	r0, #182	; 0xb6
 80028b6:	f000 f8ca 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80028ba:	200a      	movs	r0, #10
 80028bc:	f000 f8d4 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80028c0:	20a7      	movs	r0, #167	; 0xa7
 80028c2:	f000 f8d1 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80028c6:	2027      	movs	r0, #39	; 0x27
 80028c8:	f000 f8ce 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80028cc:	2004      	movs	r0, #4
 80028ce:	f000 f8cb 	bl	8002a68 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80028d2:	202a      	movs	r0, #42	; 0x2a
 80028d4:	f000 f8bb 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028d8:	2000      	movs	r0, #0
 80028da:	f000 f8c5 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f8c2 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 f8bf 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80028ea:	20ef      	movs	r0, #239	; 0xef
 80028ec:	f000 f8bc 	bl	8002a68 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80028f0:	202b      	movs	r0, #43	; 0x2b
 80028f2:	f000 f8ac 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f8b6 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f000 f8b3 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002902:	2001      	movs	r0, #1
 8002904:	f000 f8b0 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002908:	203f      	movs	r0, #63	; 0x3f
 800290a:	f000 f8ad 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800290e:	20f6      	movs	r0, #246	; 0xf6
 8002910:	f000 f89d 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002914:	2001      	movs	r0, #1
 8002916:	f000 f8a7 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f000 f8a4 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002920:	2006      	movs	r0, #6
 8002922:	f000 f8a1 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	f000 f891 	bl	8002a4e <ili9341_WriteReg>
  LCD_Delay(200);
 800292c:	20c8      	movs	r0, #200	; 0xc8
 800292e:	f000 fed5 	bl	80036dc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002932:	2026      	movs	r0, #38	; 0x26
 8002934:	f000 f88b 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002938:	2001      	movs	r0, #1
 800293a:	f000 f895 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800293e:	20e0      	movs	r0, #224	; 0xe0
 8002940:	f000 f885 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002944:	200f      	movs	r0, #15
 8002946:	f000 f88f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800294a:	2029      	movs	r0, #41	; 0x29
 800294c:	f000 f88c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002950:	2024      	movs	r0, #36	; 0x24
 8002952:	f000 f889 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002956:	200c      	movs	r0, #12
 8002958:	f000 f886 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800295c:	200e      	movs	r0, #14
 800295e:	f000 f883 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002962:	2009      	movs	r0, #9
 8002964:	f000 f880 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002968:	204e      	movs	r0, #78	; 0x4e
 800296a:	f000 f87d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800296e:	2078      	movs	r0, #120	; 0x78
 8002970:	f000 f87a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002974:	203c      	movs	r0, #60	; 0x3c
 8002976:	f000 f877 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800297a:	2009      	movs	r0, #9
 800297c:	f000 f874 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002980:	2013      	movs	r0, #19
 8002982:	f000 f871 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002986:	2005      	movs	r0, #5
 8002988:	f000 f86e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800298c:	2017      	movs	r0, #23
 800298e:	f000 f86b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002992:	2011      	movs	r0, #17
 8002994:	f000 f868 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f000 f865 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800299e:	20e1      	movs	r0, #225	; 0xe1
 80029a0:	f000 f855 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f000 f85f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80029aa:	2016      	movs	r0, #22
 80029ac:	f000 f85c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80029b0:	201b      	movs	r0, #27
 80029b2:	f000 f859 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80029b6:	2004      	movs	r0, #4
 80029b8:	f000 f856 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80029bc:	2011      	movs	r0, #17
 80029be:	f000 f853 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80029c2:	2007      	movs	r0, #7
 80029c4:	f000 f850 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80029c8:	2031      	movs	r0, #49	; 0x31
 80029ca:	f000 f84d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80029ce:	2033      	movs	r0, #51	; 0x33
 80029d0:	f000 f84a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80029d4:	2042      	movs	r0, #66	; 0x42
 80029d6:	f000 f847 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80029da:	2005      	movs	r0, #5
 80029dc:	f000 f844 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80029e0:	200c      	movs	r0, #12
 80029e2:	f000 f841 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80029e6:	200a      	movs	r0, #10
 80029e8:	f000 f83e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80029ec:	2028      	movs	r0, #40	; 0x28
 80029ee:	f000 f83b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80029f2:	202f      	movs	r0, #47	; 0x2f
 80029f4:	f000 f838 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80029f8:	200f      	movs	r0, #15
 80029fa:	f000 f835 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80029fe:	2011      	movs	r0, #17
 8002a00:	f000 f825 	bl	8002a4e <ili9341_WriteReg>
  LCD_Delay(200);
 8002a04:	20c8      	movs	r0, #200	; 0xc8
 8002a06:	f000 fe69 	bl	80036dc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a0a:	2029      	movs	r0, #41	; 0x29
 8002a0c:	f000 f81f 	bl	8002a4e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002a10:	202c      	movs	r0, #44	; 0x2c
 8002a12:	f000 f81c 	bl	8002a4e <ili9341_WriteReg>
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002a1e:	f000 fd6f 	bl	8003500 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002a22:	2103      	movs	r1, #3
 8002a24:	20d3      	movs	r0, #211	; 0xd3
 8002a26:	f000 f82c 	bl	8002a82 <ili9341_ReadData>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	b29b      	uxth	r3, r3
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a36:	2029      	movs	r0, #41	; 0x29
 8002a38:	f000 f809 	bl	8002a4e <ili9341_WriteReg>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002a44:	2028      	movs	r0, #40	; 0x28
 8002a46:	f000 f802 	bl	8002a4e <ili9341_WriteReg>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fdea 	bl	8003634 <LCD_IO_WriteReg>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fdbb 	bl	80035f0 <LCD_IO_WriteData>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	80fb      	strh	r3, [r7, #6]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002a92:	797a      	ldrb	r2, [r7, #5]
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fded 	bl	8003678 <LCD_IO_ReadData>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002aac:	23f0      	movs	r3, #240	; 0xf0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002abc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fa59 	bl	8002f90 <stmpe811_GetInstance>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2bff      	cmp	r3, #255	; 0xff
 8002ae6:	d112      	bne.n	8002b0e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f000 fa51 	bl	8002f90 <stmpe811_GetInstance>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d80a      	bhi.n	8002b0e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	b2d1      	uxtb	r1, r2
 8002afe:	4a06      	ldr	r2, [pc, #24]	; (8002b18 <stmpe811_Init+0x4c>)
 8002b00:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002b02:	f000 fdf6 	bl	80036f2 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f807 	bl	8002b1c <stmpe811_Reset>
    }
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000468 	.word	0x20000468

08002b1c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fdeb 	bl	800370a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002b34:	200a      	movs	r0, #10
 8002b36:	f000 fe25 	bl	8003784 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2103      	movs	r1, #3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fde1 	bl	800370a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002b48:	2002      	movs	r0, #2
 8002b4a:	f000 fe1b 	bl	8003784 <IOE_Delay>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002b56:	b590      	push	{r4, r7, lr}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002b60:	f000 fdc7 	bl	80036f2 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fde0 	bl	8003730 <IOE_Read>
 8002b70:	4603      	mov	r3, r0
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fdd7 	bl	8003730 <IOE_Read>
 8002b82:	4603      	mov	r3, r0
 8002b84:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b86:	4323      	orrs	r3, r4
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	b29b      	uxth	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}

08002b94 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2109      	movs	r1, #9
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fdc1 	bl	8003730 <IOE_Read>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	2109      	movs	r1, #9
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fda1 	bl	800370a <IOE_Write>
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2109      	movs	r1, #9
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fda3 	bl	8003730 <IOE_Read>
 8002bea:	4603      	mov	r3, r0
 8002bec:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	2109      	movs	r1, #9
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fd83 	bl	800370a <IOE_Write>
    
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	460a      	mov	r2, r1
 8002c16:	80fb      	strh	r3, [r7, #6]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	210a      	movs	r1, #10
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fd82 	bl	8003730 <IOE_Read>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	797b      	ldrb	r3, [r7, #5]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	210a      	movs	r1, #10
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fd62 	bl	800370a <IOE_Write>
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	460a      	mov	r2, r1
 8002c58:	80fb      	strh	r3, [r7, #6]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	210a      	movs	r1, #10
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fd61 	bl	8003730 <IOE_Read>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002c72:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	b25a      	sxtb	r2, r3
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	210a      	movs	r1, #10
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fd3c 	bl	800370a <IOE_Write>
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	80fb      	strh	r3, [r7, #6]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	210b      	movs	r1, #11
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fd3d 	bl	8003730 <IOE_Read>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	797b      	ldrb	r3, [r7, #5]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	b2db      	uxtb	r3, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	460a      	mov	r2, r1
 8002cd2:	80fb      	strh	r3, [r7, #6]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	797a      	ldrb	r2, [r7, #5]
 8002cde:	210b      	movs	r1, #11
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fd12 	bl	800370a <IOE_Write>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	6039      	str	r1, [r7, #0]
 8002cf8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2117      	movs	r1, #23
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fd13 	bl	8003730 <IOE_Read>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	2117      	movs	r1, #23
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fcee 	bl	800370a <IOE_Write>
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2104      	movs	r1, #4
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fcf2 	bl	8003730 <IOE_Read>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	2104      	movs	r1, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fcd2 	bl	800370a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	21f0      	movs	r1, #240	; 0xf0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ffbf 	bl	8002cee <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	2104      	movs	r1, #4
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fcc2 	bl	800370a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2249      	movs	r2, #73	; 0x49
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fcbb 	bl	800370a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002d94:	2002      	movs	r0, #2
 8002d96:	f000 fcf5 	bl	8003784 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2121      	movs	r1, #33	; 0x21
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fcb1 	bl	800370a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	229a      	movs	r2, #154	; 0x9a
 8002dae:	2141      	movs	r1, #65	; 0x41
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fcaa 	bl	800370a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2201      	movs	r2, #1
 8002dbc:	214a      	movs	r1, #74	; 0x4a
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fca3 	bl	800370a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2201      	movs	r2, #1
 8002dca:	214b      	movs	r1, #75	; 0x4b
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fc9c 	bl	800370a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	214b      	movs	r1, #75	; 0x4b
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fc95 	bl	800370a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2201      	movs	r2, #1
 8002de6:	2156      	movs	r1, #86	; 0x56
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fc8e 	bl	800370a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2201      	movs	r2, #1
 8002df4:	2158      	movs	r1, #88	; 0x58
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fc87 	bl	800370a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2201      	movs	r2, #1
 8002e02:	2140      	movs	r1, #64	; 0x40
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fc80 	bl	800370a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	22ff      	movs	r2, #255	; 0xff
 8002e10:	210b      	movs	r1, #11
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fc79 	bl	800370a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002e18:	2002      	movs	r0, #2
 8002e1a:	f000 fcb3 	bl	8003784 <IOE_Delay>
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2140      	movs	r1, #64	; 0x40
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fc78 	bl	8003730 <IOE_Read>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	2b80      	cmp	r3, #128	; 0x80
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002e52:	7bbb      	ldrb	r3, [r7, #14]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	214c      	movs	r1, #76	; 0x4c
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fc66 	bl	8003730 <IOE_Read>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	e00d      	b.n	8002e8c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2201      	movs	r2, #1
 8002e76:	214b      	movs	r1, #75	; 0x4b
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fc46 	bl	800370a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2200      	movs	r2, #0
 8002e84:	214b      	movs	r1, #75	; 0x4b
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fc3f 	bl	800370a <IOE_Write>
  }
  
  return ret;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002ea4:	89fb      	ldrh	r3, [r7, #14]
 8002ea6:	b2d8      	uxtb	r0, r3
 8002ea8:	f107 0210 	add.w	r2, r7, #16
 8002eac:	2304      	movs	r3, #4
 8002eae:	21d7      	movs	r1, #215	; 0xd7
 8002eb0:	f000 fc51 	bl	8003756 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002eb4:	7c3b      	ldrb	r3, [r7, #16]
 8002eb6:	061a      	lsls	r2, r3, #24
 8002eb8:	7c7b      	ldrb	r3, [r7, #17]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	7cbb      	ldrb	r3, [r7, #18]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	7cfa      	ldrb	r2, [r7, #19]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	0d1b      	lsrs	r3, r3, #20
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002ee4:	89fb      	ldrh	r3, [r7, #14]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2201      	movs	r2, #1
 8002eea:	214b      	movs	r1, #75	; 0x4b
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fc0c 	bl	800370a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002ef2:	89fb      	ldrh	r3, [r7, #14]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	214b      	movs	r1, #75	; 0x4b
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fc05 	bl	800370a <IOE_Write>
}
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002f12:	f000 fbf4 	bl	80036fe <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	211f      	movs	r1, #31
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fe76 	bl	8002c0c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fe36 	bl	8002b94 <stmpe811_EnableGlobalIT>
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fe47 	bl	8002bd0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	211f      	movs	r1, #31
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fe81 	bl	8002c4e <stmpe811_DisableITSource>
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	211f      	movs	r1, #31
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fe99 	bl	8002c9a <stmpe811_ReadGITStatus>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	211f      	movs	r1, #31
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fea1 	bl	8002cc8 <stmpe811_ClearGlobalIT>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e00b      	b.n	8002fbc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <stmpe811_GetInstance+0x40>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d101      	bne.n	8002fb6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	e006      	b.n	8002fc4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d9f0      	bls.n	8002fa4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002fc2:	23ff      	movs	r3, #255	; 0xff
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	20000468 	.word	0x20000468

08002fd4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10e      	bne.n	8003002 <BSP_LED_Init+0x2e>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <BSP_LED_Init+0x9c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <BSP_LED_Init+0x9c>)
 8002fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <BSP_LED_Init+0x9c>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	e010      	b.n	8003024 <BSP_LED_Init+0x50>
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10d      	bne.n	8003024 <BSP_LED_Init+0x50>
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <BSP_LED_Init+0x9c>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <BSP_LED_Init+0x9c>)
 8003012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003016:	6313      	str	r3, [r2, #48]	; 0x30
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <BSP_LED_Init+0x9c>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	4a13      	ldr	r2, [pc, #76]	; (8003074 <BSP_LED_Init+0xa0>)
 8003028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800302c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003032:	2301      	movs	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003036:	2302      	movs	r3, #2
 8003038:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <BSP_LED_Init+0xa4>)
 800303e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003042:	f107 0214 	add.w	r2, r7, #20
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f002 fba5 	bl	8005798 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	4a09      	ldr	r2, [pc, #36]	; (8003078 <BSP_LED_Init+0xa4>)
 8003052:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	4a06      	ldr	r2, [pc, #24]	; (8003074 <BSP_LED_Init+0xa0>)
 800305a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800305e:	2200      	movs	r2, #0
 8003060:	4619      	mov	r1, r3
 8003062:	f002 fd45 	bl	8005af0 <HAL_GPIO_WritePin>
}
 8003066:	bf00      	nop
 8003068:	3728      	adds	r7, #40	; 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	080098ec 	.word	0x080098ec
 8003078:	200001a4 	.word	0x200001a4

0800307c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <BSP_LED_Toggle+0x2c>)
 800308a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	4906      	ldr	r1, [pc, #24]	; (80030ac <BSP_LED_Toggle+0x30>)
 8003092:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f002 fd42 	bl	8005b22 <HAL_GPIO_TogglePin>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200001a4 	.word	0x200001a4
 80030ac:	080098ec 	.word	0x080098ec

080030b0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a33      	ldr	r2, [pc, #204]	; (800318c <I2Cx_MspInit+0xdc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d15f      	bne.n	8003182 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b32      	ldr	r3, [pc, #200]	; (8003190 <I2Cx_MspInit+0xe0>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a31      	ldr	r2, [pc, #196]	; (8003190 <I2Cx_MspInit+0xe0>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <I2Cx_MspInit+0xe0>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <I2Cx_MspInit+0xe0>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <I2Cx_MspInit+0xe0>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <I2Cx_MspInit+0xe0>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80030fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003100:	2312      	movs	r3, #18
 8003102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003108:	2302      	movs	r3, #2
 800310a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800310c:	2304      	movs	r3, #4
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	4619      	mov	r1, r3
 8003116:	481f      	ldr	r0, [pc, #124]	; (8003194 <I2Cx_MspInit+0xe4>)
 8003118:	f002 fb3e 	bl	8005798 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800311c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003120:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	481b      	ldr	r0, [pc, #108]	; (8003198 <I2Cx_MspInit+0xe8>)
 800312a:	f002 fb35 	bl	8005798 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <I2Cx_MspInit+0xe0>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a16      	ldr	r2, [pc, #88]	; (8003190 <I2Cx_MspInit+0xe0>)
 8003138:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <I2Cx_MspInit+0xe0>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <I2Cx_MspInit+0xe0>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a10      	ldr	r2, [pc, #64]	; (8003190 <I2Cx_MspInit+0xe0>)
 8003150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003154:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <I2Cx_MspInit+0xe0>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <I2Cx_MspInit+0xe0>)
 800315c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003160:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	210f      	movs	r1, #15
 8003166:	2048      	movs	r0, #72	; 0x48
 8003168:	f001 fe8b 	bl	8004e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800316c:	2048      	movs	r0, #72	; 0x48
 800316e:	f001 fea4 	bl	8004eba <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	210f      	movs	r1, #15
 8003176:	2049      	movs	r0, #73	; 0x49
 8003178:	f001 fe83 	bl	8004e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800317c:	2049      	movs	r0, #73	; 0x49
 800317e:	f001 fe9c 	bl	8004eba <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003182:	bf00      	nop
 8003184:	3728      	adds	r7, #40	; 0x28
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40005c00 	.word	0x40005c00
 8003190:	40023800 	.word	0x40023800
 8003194:	40020000 	.word	0x40020000
 8003198:	40020800 	.word	0x40020800

0800319c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80031a0:	4814      	ldr	r0, [pc, #80]	; (80031f4 <I2Cx_Init+0x58>)
 80031a2:	f003 f981 	bl	80064a8 <HAL_I2C_GetState>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d121      	bne.n	80031f0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <I2Cx_Init+0x58>)
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <I2Cx_Init+0x5c>)
 80031b0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <I2Cx_Init+0x58>)
 80031b4:	4a11      	ldr	r2, [pc, #68]	; (80031fc <I2Cx_Init+0x60>)
 80031b6:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <I2Cx_Init+0x58>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <I2Cx_Init+0x58>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <I2Cx_Init+0x58>)
 80031c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ca:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <I2Cx_Init+0x58>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <I2Cx_Init+0x58>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <I2Cx_Init+0x58>)
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <I2Cx_Init+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80031e4:	4803      	ldr	r0, [pc, #12]	; (80031f4 <I2Cx_Init+0x58>)
 80031e6:	f7ff ff63 	bl	80030b0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80031ea:	4802      	ldr	r0, [pc, #8]	; (80031f4 <I2Cx_Init+0x58>)
 80031ec:	f002 fcb4 	bl	8005b58 <HAL_I2C_Init>
  }
}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000640 	.word	0x20000640
 80031f8:	40005c00 	.word	0x40005c00
 80031fc:	000186a0 	.word	0x000186a0

08003200 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <I2Cx_ITConfig+0x58>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <I2Cx_ITConfig+0x58>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <I2Cx_ITConfig+0x58>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003226:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003228:	2301      	movs	r3, #1
 800322a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <I2Cx_ITConfig+0x5c>)
 8003232:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4809      	ldr	r0, [pc, #36]	; (8003260 <I2Cx_ITConfig+0x60>)
 800323a:	f002 faad 	bl	8005798 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800323e:	2200      	movs	r2, #0
 8003240:	210f      	movs	r1, #15
 8003242:	2028      	movs	r0, #40	; 0x28
 8003244:	f001 fe1d 	bl	8004e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003248:	2028      	movs	r0, #40	; 0x28
 800324a:	f001 fe36 	bl	8004eba <HAL_NVIC_EnableIRQ>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	10210000 	.word	0x10210000
 8003260:	40020000 	.word	0x40020000

08003264 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af04      	add	r7, sp, #16
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	460b      	mov	r3, r1
 8003270:	71bb      	strb	r3, [r7, #6]
 8003272:	4613      	mov	r3, r2
 8003274:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	b299      	uxth	r1, r3
 800327e:	79bb      	ldrb	r3, [r7, #6]
 8003280:	b29a      	uxth	r2, r3
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <I2Cx_WriteData+0x4c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	2301      	movs	r3, #1
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	1d7b      	adds	r3, r7, #5
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2301      	movs	r3, #1
 8003292:	4808      	ldr	r0, [pc, #32]	; (80032b4 <I2Cx_WriteData+0x50>)
 8003294:	f002 fde8 	bl	8005e68 <HAL_I2C_Mem_Write>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80032a2:	f000 f863 	bl	800336c <I2Cx_Error>
  }        
}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200001ac 	.word	0x200001ac
 80032b4:	20000640 	.word	0x20000640

080032b8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af04      	add	r7, sp, #16
 80032be:	4603      	mov	r3, r0
 80032c0:	460a      	mov	r2, r1
 80032c2:	71fb      	strb	r3, [r7, #7]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	b299      	uxth	r1, r3
 80032d4:	79bb      	ldrb	r3, [r7, #6]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <I2Cx_ReadData+0x50>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	9302      	str	r3, [sp, #8]
 80032de:	2301      	movs	r3, #1
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	f107 030e 	add.w	r3, r7, #14
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2301      	movs	r3, #1
 80032ea:	4808      	ldr	r0, [pc, #32]	; (800330c <I2Cx_ReadData+0x54>)
 80032ec:	f002 feb6 	bl	800605c <HAL_I2C_Mem_Read>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80032fa:	f000 f837 	bl	800336c <I2Cx_Error>
  
  }
  return value;
 80032fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	200001ac 	.word	0x200001ac
 800330c:	20000640 	.word	0x20000640

08003310 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af04      	add	r7, sp, #16
 8003316:	603a      	str	r2, [r7, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
 800331e:	460b      	mov	r3, r1
 8003320:	71bb      	strb	r3, [r7, #6]
 8003322:	4613      	mov	r3, r2
 8003324:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	b299      	uxth	r1, r3
 800332e:	79bb      	ldrb	r3, [r7, #6]
 8003330:	b29a      	uxth	r2, r3
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <I2Cx_ReadBuffer+0x54>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	9302      	str	r3, [sp, #8]
 8003338:	88bb      	ldrh	r3, [r7, #4]
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2301      	movs	r3, #1
 8003342:	4809      	ldr	r0, [pc, #36]	; (8003368 <I2Cx_ReadBuffer+0x58>)
 8003344:	f002 fe8a 	bl	800605c <HAL_I2C_Mem_Read>
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003352:	2300      	movs	r3, #0
 8003354:	e002      	b.n	800335c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003356:	f000 f809 	bl	800336c <I2Cx_Error>

    return 1;
 800335a:	2301      	movs	r3, #1
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200001ac 	.word	0x200001ac
 8003368:	20000640 	.word	0x20000640

0800336c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003370:	4803      	ldr	r0, [pc, #12]	; (8003380 <I2Cx_Error+0x14>)
 8003372:	f002 fd35 	bl	8005de0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003376:	f7ff ff11 	bl	800319c <I2Cx_Init>
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000640 	.word	0x20000640

08003384 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003388:	4819      	ldr	r0, [pc, #100]	; (80033f0 <SPIx_Init+0x6c>)
 800338a:	f005 faf6 	bl	800897a <HAL_SPI_GetState>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d12b      	bne.n	80033ec <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003394:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <SPIx_Init+0x6c>)
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <SPIx_Init+0x70>)
 8003398:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <SPIx_Init+0x6c>)
 800339c:	2218      	movs	r2, #24
 800339e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <SPIx_Init+0x6c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <SPIx_Init+0x6c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <SPIx_Init+0x6c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <SPIx_Init+0x6c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <SPIx_Init+0x6c>)
 80033ba:	2207      	movs	r2, #7
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <SPIx_Init+0x6c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <SPIx_Init+0x6c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <SPIx_Init+0x6c>)
 80033cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <SPIx_Init+0x6c>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SPIx_Init+0x6c>)
 80033da:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033de:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80033e0:	4803      	ldr	r0, [pc, #12]	; (80033f0 <SPIx_Init+0x6c>)
 80033e2:	f000 f853 	bl	800348c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80033e6:	4802      	ldr	r0, [pc, #8]	; (80033f0 <SPIx_Init+0x6c>)
 80033e8:	f004 fd3d 	bl	8007e66 <HAL_SPI_Init>
  } 
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	2000046c 	.word	0x2000046c
 80033f4:	40015000 	.word	0x40015000

080033f8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	b29a      	uxth	r2, r3
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <SPIx_Read+0x38>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f107 0108 	add.w	r1, r7, #8
 8003412:	4808      	ldr	r0, [pc, #32]	; (8003434 <SPIx_Read+0x3c>)
 8003414:	f004 ff24 	bl	8008260 <HAL_SPI_Receive>
 8003418:	4603      	mov	r3, r0
 800341a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003422:	f000 f827 	bl	8003474 <SPIx_Error>
  }
  
  return readvalue;
 8003426:	68bb      	ldr	r3, [r7, #8]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200001b0 	.word	0x200001b0
 8003434:	2000046c 	.word	0x2000046c

08003438 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <SPIx_Write+0x34>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	1db9      	adds	r1, r7, #6
 800344c:	2201      	movs	r2, #1
 800344e:	4808      	ldr	r0, [pc, #32]	; (8003470 <SPIx_Write+0x38>)
 8003450:	f004 fdb0 	bl	8007fb4 <HAL_SPI_Transmit>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800345e:	f000 f809 	bl	8003474 <SPIx_Error>
  }
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200001b0 	.word	0x200001b0
 8003470:	2000046c 	.word	0x2000046c

08003474 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003478:	4803      	ldr	r0, [pc, #12]	; (8003488 <SPIx_Error+0x14>)
 800347a:	f004 fd5f 	bl	8007f3c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800347e:	f7ff ff81 	bl	8003384 <SPIx_Init>
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	2000046c 	.word	0x2000046c

0800348c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <SPIx_MspInit+0x6c>)
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <SPIx_MspInit+0x6c>)
 800349e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a2:	6453      	str	r3, [r2, #68]	; 0x44
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <SPIx_MspInit+0x6c>)
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <SPIx_MspInit+0x6c>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <SPIx_MspInit+0x6c>)
 80034ba:	f043 0320 	orr.w	r3, r3, #32
 80034be:	6313      	str	r3, [r2, #48]	; 0x30
 80034c0:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <SPIx_MspInit+0x6c>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80034cc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80034d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80034d6:	2302      	movs	r3, #2
 80034d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80034da:	2301      	movs	r3, #1
 80034dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80034de:	2305      	movs	r3, #5
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	4804      	ldr	r0, [pc, #16]	; (80034fc <SPIx_MspInit+0x70>)
 80034ea:	f002 f955 	bl	8005798 <HAL_GPIO_Init>
}
 80034ee:	bf00      	nop
 80034f0:	3728      	adds	r7, #40	; 0x28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40021400 	.word	0x40021400

08003500 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <LCD_IO_Init+0xe0>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d164      	bne.n	80035d8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <LCD_IO_Init+0xe0>)
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <LCD_IO_Init+0xe4>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <LCD_IO_Init+0xe4>)
 800351e:	f043 0308 	orr.w	r3, r3, #8
 8003522:	6313      	str	r3, [r2, #48]	; 0x30
 8003524:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <LCD_IO_Init+0xe4>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003534:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003536:	2301      	movs	r3, #1
 8003538:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800353e:	2302      	movs	r3, #2
 8003540:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	4619      	mov	r1, r3
 8003548:	4827      	ldr	r0, [pc, #156]	; (80035e8 <LCD_IO_Init+0xe8>)
 800354a:	f002 f925 	bl	8005798 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <LCD_IO_Init+0xe4>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <LCD_IO_Init+0xe4>)
 8003558:	f043 0308 	orr.w	r3, r3, #8
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <LCD_IO_Init+0xe4>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800356a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800356e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003570:	2301      	movs	r3, #1
 8003572:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003578:	2302      	movs	r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800357c:	f107 030c 	add.w	r3, r7, #12
 8003580:	4619      	mov	r1, r3
 8003582:	4819      	ldr	r0, [pc, #100]	; (80035e8 <LCD_IO_Init+0xe8>)
 8003584:	f002 f908 	bl	8005798 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <LCD_IO_Init+0xe4>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <LCD_IO_Init+0xe4>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6313      	str	r3, [r2, #48]	; 0x30
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <LCD_IO_Init+0xe4>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80035a4:	2304      	movs	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035b0:	2302      	movs	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	4619      	mov	r1, r3
 80035ba:	480c      	ldr	r0, [pc, #48]	; (80035ec <LCD_IO_Init+0xec>)
 80035bc:	f002 f8ec 	bl	8005798 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80035c0:	2200      	movs	r2, #0
 80035c2:	2104      	movs	r1, #4
 80035c4:	4809      	ldr	r0, [pc, #36]	; (80035ec <LCD_IO_Init+0xec>)
 80035c6:	f002 fa93 	bl	8005af0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80035ca:	2201      	movs	r2, #1
 80035cc:	2104      	movs	r1, #4
 80035ce:	4807      	ldr	r0, [pc, #28]	; (80035ec <LCD_IO_Init+0xec>)
 80035d0:	f002 fa8e 	bl	8005af0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80035d4:	f7ff fed6 	bl	8003384 <SPIx_Init>
  }
}
 80035d8:	bf00      	nop
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	200004c4 	.word	0x200004c4
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40020c00 	.word	0x40020c00
 80035ec:	40020800 	.word	0x40020800

080035f0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80035fa:	2201      	movs	r2, #1
 80035fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003600:	480a      	ldr	r0, [pc, #40]	; (800362c <LCD_IO_WriteData+0x3c>)
 8003602:	f002 fa75 	bl	8005af0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003606:	2200      	movs	r2, #0
 8003608:	2104      	movs	r1, #4
 800360a:	4809      	ldr	r0, [pc, #36]	; (8003630 <LCD_IO_WriteData+0x40>)
 800360c:	f002 fa70 	bl	8005af0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff10 	bl	8003438 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003618:	2201      	movs	r2, #1
 800361a:	2104      	movs	r1, #4
 800361c:	4804      	ldr	r0, [pc, #16]	; (8003630 <LCD_IO_WriteData+0x40>)
 800361e:	f002 fa67 	bl	8005af0 <HAL_GPIO_WritePin>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40020c00 	.word	0x40020c00
 8003630:	40020800 	.word	0x40020800

08003634 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800363e:	2200      	movs	r2, #0
 8003640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003644:	480a      	ldr	r0, [pc, #40]	; (8003670 <LCD_IO_WriteReg+0x3c>)
 8003646:	f002 fa53 	bl	8005af0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800364a:	2200      	movs	r2, #0
 800364c:	2104      	movs	r1, #4
 800364e:	4809      	ldr	r0, [pc, #36]	; (8003674 <LCD_IO_WriteReg+0x40>)
 8003650:	f002 fa4e 	bl	8005af0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	b29b      	uxth	r3, r3
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff feed 	bl	8003438 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800365e:	2201      	movs	r2, #1
 8003660:	2104      	movs	r1, #4
 8003662:	4804      	ldr	r0, [pc, #16]	; (8003674 <LCD_IO_WriteReg+0x40>)
 8003664:	f002 fa44 	bl	8005af0 <HAL_GPIO_WritePin>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40020c00 	.word	0x40020c00
 8003674:	40020800 	.word	0x40020800

08003678 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	460a      	mov	r2, r1
 8003682:	80fb      	strh	r3, [r7, #6]
 8003684:	4613      	mov	r3, r2
 8003686:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800368c:	2200      	movs	r2, #0
 800368e:	2104      	movs	r1, #4
 8003690:	4810      	ldr	r0, [pc, #64]	; (80036d4 <LCD_IO_ReadData+0x5c>)
 8003692:	f002 fa2d 	bl	8005af0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003696:	2200      	movs	r2, #0
 8003698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800369c:	480e      	ldr	r0, [pc, #56]	; (80036d8 <LCD_IO_ReadData+0x60>)
 800369e:	f002 fa27 	bl	8005af0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fec7 	bl	8003438 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80036aa:	797b      	ldrb	r3, [r7, #5]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fea3 	bl	80033f8 <SPIx_Read>
 80036b2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80036b4:	2201      	movs	r2, #1
 80036b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ba:	4807      	ldr	r0, [pc, #28]	; (80036d8 <LCD_IO_ReadData+0x60>)
 80036bc:	f002 fa18 	bl	8005af0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80036c0:	2201      	movs	r2, #1
 80036c2:	2104      	movs	r1, #4
 80036c4:	4803      	ldr	r0, [pc, #12]	; (80036d4 <LCD_IO_ReadData+0x5c>)
 80036c6:	f002 fa13 	bl	8005af0 <HAL_GPIO_WritePin>
  
  return readvalue;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40020800 	.word	0x40020800
 80036d8:	40020c00 	.word	0x40020c00

080036dc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f001 facd 	bl	8004c84 <HAL_Delay>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80036f6:	f7ff fd51 	bl	800319c <I2Cx_Init>
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}

080036fe <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003702:	f7ff fd7d 	bl	8003200 <I2Cx_ITConfig>
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}

0800370a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	4603      	mov	r3, r0
 8003712:	71fb      	strb	r3, [r7, #7]
 8003714:	460b      	mov	r3, r1
 8003716:	71bb      	strb	r3, [r7, #6]
 8003718:	4613      	mov	r3, r2
 800371a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800371c:	797a      	ldrb	r2, [r7, #5]
 800371e:	79b9      	ldrb	r1, [r7, #6]
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fd9e 	bl	8003264 <I2Cx_WriteData>
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	460a      	mov	r2, r1
 800373a:	71fb      	strb	r3, [r7, #7]
 800373c:	4613      	mov	r3, r2
 800373e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003740:	79ba      	ldrb	r2, [r7, #6]
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fdb6 	bl	80032b8 <I2Cx_ReadData>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	603a      	str	r2, [r7, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	4603      	mov	r3, r0
 8003762:	71fb      	strb	r3, [r7, #7]
 8003764:	460b      	mov	r3, r1
 8003766:	71bb      	strb	r3, [r7, #6]
 8003768:	4613      	mov	r3, r2
 800376a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 800376c:	88bb      	ldrh	r3, [r7, #4]
 800376e:	79b9      	ldrb	r1, [r7, #6]
 8003770:	79f8      	ldrb	r0, [r7, #7]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	f7ff fdcc 	bl	8003310 <I2Cx_ReadBuffer>
 8003778:	4603      	mov	r3, r0
 800377a:	b29b      	uxth	r3, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f001 fa79 	bl	8004c84 <HAL_Delay>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037a2:	4a2e      	ldr	r2, [pc, #184]	; (800385c <BSP_LCD_Init+0xc0>)
 80037a4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037a8:	2209      	movs	r2, #9
 80037aa:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80037ac:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80037b2:	4b29      	ldr	r3, [pc, #164]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037b4:	221d      	movs	r2, #29
 80037b6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80037b8:	4b27      	ldr	r3, [pc, #156]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037ba:	2203      	movs	r2, #3
 80037bc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80037be:	4b26      	ldr	r3, [pc, #152]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037c0:	f240 120d 	movw	r2, #269	; 0x10d
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037c8:	f240 1243 	movw	r2, #323	; 0x143
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037d0:	f240 1217 	movw	r2, #279	; 0x117
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037d8:	f240 1247 	movw	r2, #327	; 0x147
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80037de:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <BSP_LCD_Init+0xbc>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <BSP_LCD_Init+0xc4>)
 80037f8:	2208      	movs	r2, #8
 80037fa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <BSP_LCD_Init+0xc4>)
 80037fe:	22c0      	movs	r2, #192	; 0xc0
 8003800:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <BSP_LCD_Init+0xc4>)
 8003804:	2204      	movs	r2, #4
 8003806:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003808:	4b15      	ldr	r3, [pc, #84]	; (8003860 <BSP_LCD_Init+0xc4>)
 800380a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003810:	4813      	ldr	r0, [pc, #76]	; (8003860 <BSP_LCD_Init+0xc4>)
 8003812:	f004 f8e1 	bl	80079d8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <BSP_LCD_Init+0xbc>)
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <BSP_LCD_Init+0xbc>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <BSP_LCD_Init+0xbc>)
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <BSP_LCD_Init+0xbc>)
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800382e:	f000 fcf1 	bl	8004214 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003832:	4809      	ldr	r0, [pc, #36]	; (8003858 <BSP_LCD_Init+0xbc>)
 8003834:	f003 f99e 	bl	8006b74 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <BSP_LCD_Init+0xc8>)
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <BSP_LCD_Init+0xcc>)
 800383c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <BSP_LCD_Init+0xc8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003846:	f000 fed5 	bl	80045f4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800384a:	4808      	ldr	r0, [pc, #32]	; (800386c <BSP_LCD_Init+0xd0>)
 800384c:	f000 f8ce 	bl	80039ec <BSP_LCD_SetFont>

  return LCD_OK;
 8003850:	2300      	movs	r3, #0
}  
 8003852:	4618      	mov	r0, r3
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000694 	.word	0x20000694
 800385c:	40016800 	.word	0x40016800
 8003860:	20000508 	.word	0x20000508
 8003864:	2000073c 	.word	0x2000073c
 8003868:	20000144 	.word	0x20000144
 800386c:	200001b4 	.word	0x200001b4

08003870 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <BSP_LCD_GetXSize+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	4798      	blx	r3
 800387c:	4603      	mov	r3, r0
}
 800387e:	4618      	mov	r0, r3
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	2000073c 	.word	0x2000073c

08003888 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <BSP_LCD_GetYSize+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	4798      	blx	r3
 8003894:	4603      	mov	r3, r0
}
 8003896:	4618      	mov	r0, r3
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	2000073c 	.word	0x2000073c

080038a0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b090      	sub	sp, #64	; 0x40
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	6039      	str	r1, [r7, #0]
 80038aa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80038b0:	f7ff ffde 	bl	8003870 <BSP_LCD_GetXSize>
 80038b4:	4603      	mov	r3, r0
 80038b6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80038bc:	f7ff ffe4 	bl	8003888 <BSP_LCD_GetYSize>
 80038c0:	4603      	mov	r3, r0
 80038c2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80038cc:	23ff      	movs	r3, #255	; 0xff
 80038ce:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80038e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80038ec:	2307      	movs	r3, #7
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80038f0:	f7ff ffbe 	bl	8003870 <BSP_LCD_GetXSize>
 80038f4:	4603      	mov	r3, r0
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80038f8:	f7ff ffc6 	bl	8003888 <BSP_LCD_GetYSize>
 80038fc:	4603      	mov	r3, r0
 80038fe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	4619      	mov	r1, r3
 8003908:	4814      	ldr	r0, [pc, #80]	; (800395c <BSP_LCD_LayerDefaultInit+0xbc>)
 800390a:	f003 fa0d 	bl	8006d28 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	4913      	ldr	r1, [pc, #76]	; (8003960 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3304      	adds	r3, #4
 800391e:	f04f 32ff 	mov.w	r2, #4294967295
 8003922:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	490e      	ldr	r1, [pc, #56]	; (8003960 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	3308      	adds	r3, #8
 8003934:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003936:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	4909      	ldr	r1, [pc, #36]	; (8003960 <BSP_LCD_LayerDefaultInit+0xc0>)
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800394a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800394c:	4803      	ldr	r0, [pc, #12]	; (800395c <BSP_LCD_LayerDefaultInit+0xbc>)
 800394e:	f003 fa29 	bl	8006da4 <HAL_LTDC_EnableDither>
}
 8003952:	bf00      	nop
 8003954:	3740      	adds	r7, #64	; 0x40
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000694 	.word	0x20000694
 8003960:	2000053c 	.word	0x2000053c
 8003964:	200001b4 	.word	0x200001b4

08003968 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <BSP_LCD_SelectLayer+0x1c>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6013      	str	r3, [r2, #0]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000538 	.word	0x20000538

08003988 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <BSP_LCD_SetTextColor+0x28>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4907      	ldr	r1, [pc, #28]	; (80039b4 <BSP_LCD_SetTextColor+0x2c>)
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000538 	.word	0x20000538
 80039b4:	2000053c 	.word	0x2000053c

080039b8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <BSP_LCD_SetBackColor+0x2c>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4908      	ldr	r1, [pc, #32]	; (80039e8 <BSP_LCD_SetBackColor+0x30>)
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	3304      	adds	r3, #4
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000538 	.word	0x20000538
 80039e8:	2000053c 	.word	0x2000053c

080039ec <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <BSP_LCD_SetFont+0x2c>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4908      	ldr	r1, [pc, #32]	; (8003a1c <BSP_LCD_SetFont+0x30>)
 80039fa:	4613      	mov	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3308      	adds	r3, #8
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	601a      	str	r2, [r3, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000538 	.word	0x20000538
 8003a1c:	2000053c 	.word	0x2000053c

08003a20 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <BSP_LCD_Clear+0x48>)
 8003a2a:	681c      	ldr	r4, [r3, #0]
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <BSP_LCD_Clear+0x48>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <BSP_LCD_Clear+0x4c>)
 8003a32:	2134      	movs	r1, #52	; 0x34
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	335c      	adds	r3, #92	; 0x5c
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461e      	mov	r6, r3
 8003a40:	f7ff ff16 	bl	8003870 <BSP_LCD_GetXSize>
 8003a44:	4605      	mov	r5, r0
 8003a46:	f7ff ff1f 	bl	8003888 <BSP_LCD_GetYSize>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	2300      	movs	r3, #0
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	462a      	mov	r2, r5
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 fd92 	bl	8004584 <FillBuffer>
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a68:	20000538 	.word	0x20000538
 8003a6c:	20000694 	.word	0x20000694

08003a70 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	80fb      	strh	r3, [r7, #6]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	80bb      	strh	r3, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a82:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <BSP_LCD_DisplayChar+0x80>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	491b      	ldr	r1, [pc, #108]	; (8003af4 <BSP_LCD_DisplayChar+0x84>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3308      	adds	r3, #8
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6819      	ldr	r1, [r3, #0]
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <BSP_LCD_DisplayChar+0x80>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4c14      	ldr	r4, [pc, #80]	; (8003af4 <BSP_LCD_DisplayChar+0x84>)
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4423      	add	r3, r4
 8003aae:	3308      	adds	r3, #8
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003ab4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <BSP_LCD_DisplayChar+0x80>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4c0d      	ldr	r4, [pc, #52]	; (8003af4 <BSP_LCD_DisplayChar+0x84>)
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4423      	add	r3, r4
 8003ac8:	3308      	adds	r3, #8
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	889b      	ldrh	r3, [r3, #4]
 8003ace:	3307      	adds	r3, #7
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da00      	bge.n	8003ad6 <BSP_LCD_DisplayChar+0x66>
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	10db      	asrs	r3, r3, #3
 8003ad8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003adc:	18ca      	adds	r2, r1, r3
 8003ade:	88b9      	ldrh	r1, [r7, #4]
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fc94 	bl	8004410 <DrawChar>
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}
 8003af0:	20000538 	.word	0x20000538
 8003af4:	2000053c 	.word	0x2000053c

08003af8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60ba      	str	r2, [r7, #8]
 8003b00:	461a      	mov	r2, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	81fb      	strh	r3, [r7, #14]
 8003b06:	460b      	mov	r3, r1
 8003b08:	81bb      	strh	r3, [r7, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	83fb      	strh	r3, [r7, #30]
 8003b12:	2300      	movs	r3, #0
 8003b14:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003b22:	e002      	b.n	8003b2a <BSP_LCD_DisplayStringAt+0x32>
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	3301      	adds	r3, #1
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	617a      	str	r2, [r7, #20]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f6      	bne.n	8003b24 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003b36:	f7ff fe9b 	bl	8003870 <BSP_LCD_GetXSize>
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <BSP_LCD_DisplayStringAt+0x174>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	484b      	ldr	r0, [pc, #300]	; (8003c70 <BSP_LCD_DisplayStringAt+0x178>)
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4403      	add	r3, r0
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	889b      	ldrh	r3, [r3, #4]
 8003b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b56:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d01c      	beq.n	8003b98 <BSP_LCD_DisplayStringAt+0xa0>
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	dc33      	bgt.n	8003bca <BSP_LCD_DisplayStringAt+0xd2>
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d002      	beq.n	8003b6c <BSP_LCD_DisplayStringAt+0x74>
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d019      	beq.n	8003b9e <BSP_LCD_DisplayStringAt+0xa6>
 8003b6a:	e02e      	b.n	8003bca <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	1ad1      	subs	r1, r2, r3
 8003b72:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <BSP_LCD_DisplayStringAt+0x174>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	483e      	ldr	r0, [pc, #248]	; (8003c70 <BSP_LCD_DisplayStringAt+0x178>)
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4403      	add	r3, r0
 8003b82:	3308      	adds	r3, #8
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	889b      	ldrh	r3, [r3, #4]
 8003b88:	fb03 f301 	mul.w	r3, r3, r1
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	89fb      	ldrh	r3, [r7, #14]
 8003b92:	4413      	add	r3, r2
 8003b94:	83fb      	strh	r3, [r7, #30]
      break;
 8003b96:	e01b      	b.n	8003bd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003b98:	89fb      	ldrh	r3, [r7, #14]
 8003b9a:	83fb      	strh	r3, [r7, #30]
      break;
 8003b9c:	e018      	b.n	8003bd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	b299      	uxth	r1, r3
 8003ba6:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <BSP_LCD_DisplayStringAt+0x174>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4831      	ldr	r0, [pc, #196]	; (8003c70 <BSP_LCD_DisplayStringAt+0x178>)
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4403      	add	r3, r0
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	889b      	ldrh	r3, [r3, #4]
 8003bbc:	fb11 f303 	smulbb	r3, r1, r3
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	89fb      	ldrh	r3, [r7, #14]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	83fb      	strh	r3, [r7, #30]
      break;
 8003bc8:	e002      	b.n	8003bd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003bca:	89fb      	ldrh	r3, [r7, #14]
 8003bcc:	83fb      	strh	r3, [r7, #30]
      break;
 8003bce:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003bd0:	e01a      	b.n	8003c08 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	89b9      	ldrh	r1, [r7, #12]
 8003bd8:	8bfb      	ldrh	r3, [r7, #30]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ff48 	bl	8003a70 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003be0:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <BSP_LCD_DisplayStringAt+0x174>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4922      	ldr	r1, [pc, #136]	; (8003c70 <BSP_LCD_DisplayStringAt+0x178>)
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	889a      	ldrh	r2, [r3, #4]
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
    i++;
 8003c02:	8bbb      	ldrh	r3, [r7, #28]
 8003c04:	3301      	adds	r3, #1
 8003c06:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2dc      	uxtb	r4, r3
 8003c16:	f7ff fe2b 	bl	8003870 <BSP_LCD_GetXSize>
 8003c1a:	8bb9      	ldrh	r1, [r7, #28]
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <BSP_LCD_DisplayStringAt+0x174>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4d13      	ldr	r5, [pc, #76]	; (8003c70 <BSP_LCD_DisplayStringAt+0x178>)
 8003c22:	4613      	mov	r3, r2
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	442b      	add	r3, r5
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	889b      	ldrh	r3, [r3, #4]
 8003c32:	fb03 f301 	mul.w	r3, r3, r1
 8003c36:	1ac3      	subs	r3, r0, r3
 8003c38:	b299      	uxth	r1, r3
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <BSP_LCD_DisplayStringAt+0x174>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	480c      	ldr	r0, [pc, #48]	; (8003c70 <BSP_LCD_DisplayStringAt+0x178>)
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4403      	add	r3, r0
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	889b      	ldrh	r3, [r3, #4]
 8003c50:	4299      	cmp	r1, r3
 8003c52:	bf2c      	ite	cs
 8003c54:	2301      	movcs	r3, #1
 8003c56:	2300      	movcc	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	4023      	ands	r3, r4
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1b7      	bne.n	8003bd2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6c:	20000538 	.word	0x20000538
 8003c70:	2000053c 	.word	0x2000053c

08003c74 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003c74:	b5b0      	push	{r4, r5, r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	80fb      	strh	r3, [r7, #6]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	80bb      	strh	r3, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003c8a:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <BSP_LCD_DrawHLine+0x70>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <BSP_LCD_DrawHLine+0x74>)
 8003c90:	2134      	movs	r1, #52	; 0x34
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	335c      	adds	r3, #92	; 0x5c
 8003c9a:	681c      	ldr	r4, [r3, #0]
 8003c9c:	f7ff fde8 	bl	8003870 <BSP_LCD_GetXSize>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	88bb      	ldrh	r3, [r7, #4]
 8003ca4:	fb03 f202 	mul.w	r2, r3, r2
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4423      	add	r3, r4
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <BSP_LCD_DrawHLine+0x70>)
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	887c      	ldrh	r4, [r7, #2]
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <BSP_LCD_DrawHLine+0x70>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4d0b      	ldr	r5, [pc, #44]	; (8003cec <BSP_LCD_DrawHLine+0x78>)
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	442b      	add	r3, r5
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	f000 fc55 	bl	8004584 <FillBuffer>
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000538 	.word	0x20000538
 8003ce8:	20000694 	.word	0x20000694
 8003cec:	2000053c 	.word	0x2000053c

08003cf0 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	80bb      	strh	r3, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <BSP_LCD_DrawVLine+0x78>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <BSP_LCD_DrawVLine+0x7c>)
 8003d0c:	2134      	movs	r1, #52	; 0x34
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	335c      	adds	r3, #92	; 0x5c
 8003d16:	681c      	ldr	r4, [r3, #0]
 8003d18:	f7ff fdaa 	bl	8003870 <BSP_LCD_GetXSize>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	88bb      	ldrh	r3, [r7, #4]
 8003d20:	fb03 f202 	mul.w	r2, r3, r2
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4423      	add	r3, r4
 8003d2c:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <BSP_LCD_DrawVLine+0x78>)
 8003d30:	681c      	ldr	r4, [r3, #0]
 8003d32:	68fd      	ldr	r5, [r7, #12]
 8003d34:	887e      	ldrh	r6, [r7, #2]
 8003d36:	f7ff fd9b 	bl	8003870 <BSP_LCD_GetXSize>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	1e59      	subs	r1, r3, #1
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <BSP_LCD_DrawVLine+0x78>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	480b      	ldr	r0, [pc, #44]	; (8003d70 <BSP_LCD_DrawVLine+0x80>)
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4403      	add	r3, r0
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	9100      	str	r1, [sp, #0]
 8003d54:	4633      	mov	r3, r6
 8003d56:	2201      	movs	r2, #1
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f000 fc12 	bl	8004584 <FillBuffer>
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d68:	20000538 	.word	0x20000538
 8003d6c:	20000694 	.word	0x20000694
 8003d70:	2000053c 	.word	0x2000053c

08003d74 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b08b      	sub	sp, #44	; 0x2c
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4623      	mov	r3, r4
 8003d84:	80fb      	strh	r3, [r7, #6]
 8003d86:	4603      	mov	r3, r0
 8003d88:	80bb      	strh	r3, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	807b      	strh	r3, [r7, #2]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003d92:	2300      	movs	r3, #0
 8003d94:	823b      	strh	r3, [r7, #16]
 8003d96:	2300      	movs	r3, #0
 8003d98:	81fb      	strh	r3, [r7, #14]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d9e:	2300      	movs	r3, #0
 8003da0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003da2:	2300      	movs	r3, #0
 8003da4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003da6:	2300      	movs	r3, #0
 8003da8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003daa:	2300      	movs	r3, #0
 8003dac:	83fb      	strh	r3, [r7, #30]
 8003dae:	2300      	movs	r3, #0
 8003db0:	83bb      	strh	r3, [r7, #28]
 8003db2:	2300      	movs	r3, #0
 8003db4:	837b      	strh	r3, [r7, #26]
 8003db6:	2300      	movs	r3, #0
 8003db8:	833b      	strh	r3, [r7, #24]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	82fb      	strh	r3, [r7, #22]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bfb8      	it	lt
 8003dd0:	425b      	neglt	r3, r3
 8003dd2:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003dd4:	883a      	ldrh	r2, [r7, #0]
 8003dd6:	88bb      	ldrh	r3, [r7, #4]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bfb8      	it	lt
 8003dde:	425b      	neglt	r3, r3
 8003de0:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003de6:	88bb      	ldrh	r3, [r7, #4]
 8003de8:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003dea:	887a      	ldrh	r2, [r7, #2]
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d304      	bcc.n	8003dfc <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	843b      	strh	r3, [r7, #32]
 8003dfa:	e005      	b.n	8003e08 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e00:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e06:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003e08:	883a      	ldrh	r2, [r7, #0]
 8003e0a:	88bb      	ldrh	r3, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d304      	bcc.n	8003e1a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003e14:	2301      	movs	r3, #1
 8003e16:	83bb      	strh	r3, [r7, #28]
 8003e18:	e005      	b.n	8003e26 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e1e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e24:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003e26:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	db10      	blt.n	8003e54 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003e32:	2300      	movs	r3, #0
 8003e34:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003e36:	2300      	movs	r3, #0
 8003e38:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003e3a:	8a3b      	ldrh	r3, [r7, #16]
 8003e3c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003e3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e42:	0fda      	lsrs	r2, r3, #31
 8003e44:	4413      	add	r3, r2
 8003e46:	105b      	asrs	r3, r3, #1
 8003e48:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003e4a:	89fb      	ldrh	r3, [r7, #14]
 8003e4c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003e4e:	8a3b      	ldrh	r3, [r7, #16]
 8003e50:	82bb      	strh	r3, [r7, #20]
 8003e52:	e00f      	b.n	8003e74 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003e54:	2300      	movs	r3, #0
 8003e56:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003e58:	2300      	movs	r3, #0
 8003e5a:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003e5c:	89fb      	ldrh	r3, [r7, #14]
 8003e5e:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003e60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e64:	0fda      	lsrs	r2, r3, #31
 8003e66:	4413      	add	r3, r2
 8003e68:	105b      	asrs	r3, r3, #1
 8003e6a:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003e6c:	8a3b      	ldrh	r3, [r7, #16]
 8003e6e:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003e70:	89fb      	ldrh	r3, [r7, #14]
 8003e72:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	827b      	strh	r3, [r7, #18]
 8003e78:	e037      	b.n	8003eea <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003e7a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003e7c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <BSP_LCD_DrawLine+0x18c>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4c20      	ldr	r4, [pc, #128]	; (8003f04 <BSP_LCD_DrawLine+0x190>)
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4423      	add	r3, r4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	f000 fa95 	bl	80043c0 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003e96:	8b3a      	ldrh	r2, [r7, #24]
 8003e98:	8afb      	ldrh	r3, [r7, #22]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003ea0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003ea4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	db0e      	blt.n	8003eca <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003eac:	8b3a      	ldrh	r2, [r7, #24]
 8003eae:	8b7b      	ldrh	r3, [r7, #26]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003eb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003eb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003eba:	4413      	add	r3, r2
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003ec0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ec2:	8bfb      	ldrh	r3, [r7, #30]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003eca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ecc:	8c3b      	ldrh	r3, [r7, #32]
 8003ece:	4413      	add	r3, r2
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003ed4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ed6:	8bbb      	ldrh	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003ede:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	827b      	strh	r3, [r7, #18]
 8003eea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003eee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	ddc1      	ble.n	8003e7a <BSP_LCD_DrawLine+0x106>
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	372c      	adds	r7, #44	; 0x2c
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd90      	pop	{r4, r7, pc}
 8003f00:	20000538 	.word	0x20000538
 8003f04:	2000053c 	.word	0x2000053c

08003f08 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4604      	mov	r4, r0
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	80fb      	strh	r3, [r7, #6]
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	80bb      	strh	r3, [r7, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	807b      	strh	r3, [r7, #2]
 8003f22:	4613      	mov	r3, r2
 8003f24:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	88b9      	ldrh	r1, [r7, #4]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fea1 	bl	8003c74 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003f32:	88ba      	ldrh	r2, [r7, #4]
 8003f34:	883b      	ldrh	r3, [r7, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	b299      	uxth	r1, r3
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fe98 	bl	8003c74 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003f44:	883a      	ldrh	r2, [r7, #0]
 8003f46:	88b9      	ldrh	r1, [r7, #4]
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fed0 	bl	8003cf0 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	887b      	ldrh	r3, [r7, #2]
 8003f54:	4413      	add	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	883a      	ldrh	r2, [r7, #0]
 8003f5a:	88b9      	ldrh	r1, [r7, #4]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fec7 	bl	8003cf0 <BSP_LCD_DrawVLine>
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}
	...

08003f6c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
 8003f76:	460b      	mov	r3, r1
 8003f78:	80bb      	strh	r3, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	f1c3 0303 	rsb	r3, r3, #3
 8003f86:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003f90:	e0c7      	b.n	8004122 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	4413      	add	r3, r2
 8003f9a:	b298      	uxth	r0, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	88ba      	ldrh	r2, [r7, #4]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	b299      	uxth	r1, r3
 8003fa6:	4b64      	ldr	r3, [pc, #400]	; (8004138 <BSP_LCD_DrawCircle+0x1cc>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4c64      	ldr	r4, [pc, #400]	; (800413c <BSP_LCD_DrawCircle+0x1d0>)
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4423      	add	r3, r4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f000 fa01 	bl	80043c0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	b298      	uxth	r0, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	88ba      	ldrh	r2, [r7, #4]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	b299      	uxth	r1, r3
 8003fd2:	4b59      	ldr	r3, [pc, #356]	; (8004138 <BSP_LCD_DrawCircle+0x1cc>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4c59      	ldr	r4, [pc, #356]	; (800413c <BSP_LCD_DrawCircle+0x1d0>)
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4423      	add	r3, r4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f000 f9eb 	bl	80043c0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	b298      	uxth	r0, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	88ba      	ldrh	r2, [r7, #4]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	b299      	uxth	r1, r3
 8003ffe:	4b4e      	ldr	r3, [pc, #312]	; (8004138 <BSP_LCD_DrawCircle+0x1cc>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4c4e      	ldr	r4, [pc, #312]	; (800413c <BSP_LCD_DrawCircle+0x1d0>)
 8004004:	4613      	mov	r3, r2
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4423      	add	r3, r4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	f000 f9d5 	bl	80043c0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	b29b      	uxth	r3, r3
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	b298      	uxth	r0, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	b29b      	uxth	r3, r3
 8004024:	88ba      	ldrh	r2, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	b299      	uxth	r1, r3
 800402a:	4b43      	ldr	r3, [pc, #268]	; (8004138 <BSP_LCD_DrawCircle+0x1cc>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4c43      	ldr	r4, [pc, #268]	; (800413c <BSP_LCD_DrawCircle+0x1d0>)
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4423      	add	r3, r4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	f000 f9bf 	bl	80043c0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	b29a      	uxth	r2, r3
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	4413      	add	r3, r2
 800404a:	b298      	uxth	r0, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	b29a      	uxth	r2, r3
 8004050:	88bb      	ldrh	r3, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	b299      	uxth	r1, r3
 8004056:	4b38      	ldr	r3, [pc, #224]	; (8004138 <BSP_LCD_DrawCircle+0x1cc>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4c38      	ldr	r4, [pc, #224]	; (800413c <BSP_LCD_DrawCircle+0x1d0>)
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4423      	add	r3, r4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	f000 f9a9 	bl	80043c0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	b29b      	uxth	r3, r3
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	b298      	uxth	r0, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	b29a      	uxth	r2, r3
 800407c:	88bb      	ldrh	r3, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	b299      	uxth	r1, r3
 8004082:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <BSP_LCD_DrawCircle+0x1cc>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4c2d      	ldr	r4, [pc, #180]	; (800413c <BSP_LCD_DrawCircle+0x1d0>)
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4423      	add	r3, r4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	f000 f993 	bl	80043c0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	b29a      	uxth	r2, r3
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	4413      	add	r3, r2
 80040a2:	b298      	uxth	r0, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	88bb      	ldrh	r3, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	b299      	uxth	r1, r3
 80040ae:	4b22      	ldr	r3, [pc, #136]	; (8004138 <BSP_LCD_DrawCircle+0x1cc>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4c22      	ldr	r4, [pc, #136]	; (800413c <BSP_LCD_DrawCircle+0x1d0>)
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4423      	add	r3, r4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	f000 f97d 	bl	80043c0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	b298      	uxth	r0, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	88bb      	ldrh	r3, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	b299      	uxth	r1, r3
 80040da:	4b17      	ldr	r3, [pc, #92]	; (8004138 <BSP_LCD_DrawCircle+0x1cc>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4c17      	ldr	r4, [pc, #92]	; (800413c <BSP_LCD_DrawCircle+0x1d0>)
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4423      	add	r3, r4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	f000 f967 	bl	80043c0 <BSP_LCD_DrawPixel>

    if (d < 0)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da06      	bge.n	8004106 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	009a      	lsls	r2, r3, #2
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	4413      	add	r3, r2
 8004100:	3306      	adds	r3, #6
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e00a      	b.n	800411c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	009a      	lsls	r2, r3, #2
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4413      	add	r3, r2
 8004112:	330a      	adds	r3, #10
 8004114:	617b      	str	r3, [r7, #20]
      cury--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b01      	subs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	3301      	adds	r3, #1
 8004120:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	429a      	cmp	r2, r3
 8004128:	f67f af33 	bls.w	8003f92 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}
 8004136:	bf00      	nop
 8004138:	20000538 	.word	0x20000538
 800413c:	2000053c 	.word	0x2000053c

08004140 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af02      	add	r7, sp, #8
 8004148:	4604      	mov	r4, r0
 800414a:	4608      	mov	r0, r1
 800414c:	4611      	mov	r1, r2
 800414e:	461a      	mov	r2, r3
 8004150:	4623      	mov	r3, r4
 8004152:	80fb      	strh	r3, [r7, #6]
 8004154:	4603      	mov	r3, r0
 8004156:	80bb      	strh	r3, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
 800415c:	4613      	mov	r3, r2
 800415e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <BSP_LCD_FillRect+0xa8>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4920      	ldr	r1, [pc, #128]	; (80041ec <BSP_LCD_FillRect+0xac>)
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fc06 	bl	8003988 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <BSP_LCD_FillRect+0xa8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <BSP_LCD_FillRect+0xb0>)
 8004182:	2134      	movs	r1, #52	; 0x34
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	335c      	adds	r3, #92	; 0x5c
 800418c:	681c      	ldr	r4, [r3, #0]
 800418e:	f7ff fb6f 	bl	8003870 <BSP_LCD_GetXSize>
 8004192:	4602      	mov	r2, r0
 8004194:	88bb      	ldrh	r3, [r7, #4]
 8004196:	fb03 f202 	mul.w	r2, r3, r2
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4423      	add	r3, r4
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <BSP_LCD_FillRect+0xa8>)
 80041a6:	681c      	ldr	r4, [r3, #0]
 80041a8:	68fd      	ldr	r5, [r7, #12]
 80041aa:	887e      	ldrh	r6, [r7, #2]
 80041ac:	f8b7 8000 	ldrh.w	r8, [r7]
 80041b0:	f7ff fb5e 	bl	8003870 <BSP_LCD_GetXSize>
 80041b4:	4602      	mov	r2, r0
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	1ad1      	subs	r1, r2, r3
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <BSP_LCD_FillRect+0xa8>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	480b      	ldr	r0, [pc, #44]	; (80041ec <BSP_LCD_FillRect+0xac>)
 80041c0:	4613      	mov	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4403      	add	r3, r0
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	9100      	str	r1, [sp, #0]
 80041d0:	4643      	mov	r3, r8
 80041d2:	4632      	mov	r2, r6
 80041d4:	4629      	mov	r1, r5
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 f9d4 	bl	8004584 <FillBuffer>
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e6:	bf00      	nop
 80041e8:	20000538 	.word	0x20000538
 80041ec:	2000053c 	.word	0x2000053c
 80041f0:	20000694 	.word	0x20000694

080041f4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <BSP_LCD_DisplayOn+0x1c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004202:	4b03      	ldr	r3, [pc, #12]	; (8004210 <BSP_LCD_DisplayOn+0x1c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4798      	blx	r3
  }
}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	2000073c 	.word	0x2000073c

08004214 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08e      	sub	sp, #56	; 0x38
 8004218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	4a60      	ldr	r2, [pc, #384]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004224:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004228:	6453      	str	r3, [r2, #68]	; 0x44
 800422a:	4b5e      	ldr	r3, [pc, #376]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	4a59      	ldr	r2, [pc, #356]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004244:	6313      	str	r3, [r2, #48]	; 0x30
 8004246:	4b57      	ldr	r3, [pc, #348]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4a52      	ldr	r2, [pc, #328]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
 8004262:	4b50      	ldr	r3, [pc, #320]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	4b4c      	ldr	r3, [pc, #304]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a4b      	ldr	r2, [pc, #300]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b49      	ldr	r3, [pc, #292]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	4b45      	ldr	r3, [pc, #276]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	4a44      	ldr	r2, [pc, #272]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 8004294:	f043 0304 	orr.w	r3, r3, #4
 8004298:	6313      	str	r3, [r2, #48]	; 0x30
 800429a:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a3d      	ldr	r2, [pc, #244]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042b0:	f043 0308 	orr.w	r3, r3, #8
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
 80042b6:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a36      	ldr	r2, [pc, #216]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042cc:	f043 0320 	orr.w	r3, r3, #32
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b34      	ldr	r3, [pc, #208]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	4a2f      	ldr	r2, [pc, #188]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ec:	6313      	str	r3, [r2, #48]	; 0x30
 80042ee:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <BSP_LCD_MspInit+0x190>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80042fa:	f641 0358 	movw	r3, #6232	; 0x1858
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004300:	2302      	movs	r3, #2
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004308:	2302      	movs	r3, #2
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800430c:	230e      	movs	r3, #14
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004314:	4619      	mov	r1, r3
 8004316:	4824      	ldr	r0, [pc, #144]	; (80043a8 <BSP_LCD_MspInit+0x194>)
 8004318:	f001 fa3e 	bl	8005798 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800431c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004326:	4619      	mov	r1, r3
 8004328:	4820      	ldr	r0, [pc, #128]	; (80043ac <BSP_LCD_MspInit+0x198>)
 800432a:	f001 fa35 	bl	8005798 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800432e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004338:	4619      	mov	r1, r3
 800433a:	481d      	ldr	r0, [pc, #116]	; (80043b0 <BSP_LCD_MspInit+0x19c>)
 800433c:	f001 fa2c 	bl	8005798 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004340:	2348      	movs	r3, #72	; 0x48
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004348:	4619      	mov	r1, r3
 800434a:	481a      	ldr	r0, [pc, #104]	; (80043b4 <BSP_LCD_MspInit+0x1a0>)
 800434c:	f001 fa24 	bl	8005798 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800435a:	4619      	mov	r1, r3
 800435c:	4816      	ldr	r0, [pc, #88]	; (80043b8 <BSP_LCD_MspInit+0x1a4>)
 800435e:	f001 fa1b 	bl	8005798 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004362:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436c:	4619      	mov	r1, r3
 800436e:	4813      	ldr	r0, [pc, #76]	; (80043bc <BSP_LCD_MspInit+0x1a8>)
 8004370:	f001 fa12 	bl	8005798 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004374:	2303      	movs	r3, #3
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004378:	2309      	movs	r3, #9
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800437c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004380:	4619      	mov	r1, r3
 8004382:	480a      	ldr	r0, [pc, #40]	; (80043ac <BSP_LCD_MspInit+0x198>)
 8004384:	f001 fa08 	bl	8005798 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004388:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800438e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004392:	4619      	mov	r1, r3
 8004394:	4809      	ldr	r0, [pc, #36]	; (80043bc <BSP_LCD_MspInit+0x1a8>)
 8004396:	f001 f9ff 	bl	8005798 <HAL_GPIO_Init>
}
 800439a:	bf00      	nop
 800439c:	3738      	adds	r7, #56	; 0x38
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40020000 	.word	0x40020000
 80043ac:	40020400 	.word	0x40020400
 80043b0:	40020800 	.word	0x40020800
 80043b4:	40020c00 	.word	0x40020c00
 80043b8:	40021400 	.word	0x40021400
 80043bc:	40021800 	.word	0x40021800

080043c0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80043c0:	b5b0      	push	{r4, r5, r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	603a      	str	r2, [r7, #0]
 80043ca:	80fb      	strh	r3, [r7, #6]
 80043cc:	460b      	mov	r3, r1
 80043ce:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  //*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  //rotate 180°
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code;
 80043d0:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <BSP_LCD_DrawPixel+0x48>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0d      	ldr	r2, [pc, #52]	; (800440c <BSP_LCD_DrawPixel+0x4c>)
 80043d6:	2134      	movs	r1, #52	; 0x34
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	335c      	adds	r3, #92	; 0x5c
 80043e0:	681c      	ldr	r4, [r3, #0]
 80043e2:	88fd      	ldrh	r5, [r7, #6]
 80043e4:	f7ff fa44 	bl	8003870 <BSP_LCD_GetXSize>
 80043e8:	4602      	mov	r2, r0
 80043ea:	88bb      	ldrh	r3, [r7, #4]
 80043ec:	fb03 f302 	mul.w	r3, r3, r2
 80043f0:	442b      	add	r3, r5
 80043f2:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4423      	add	r3, r4
 80043fa:	461a      	mov	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6013      	str	r3, [r2, #0]
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bdb0      	pop	{r4, r5, r7, pc}
 8004408:	20000538 	.word	0x20000538
 800440c:	20000694 	.word	0x20000694

08004410 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	603a      	str	r2, [r7, #0]
 800441a:	80fb      	strh	r3, [r7, #6]
 800441c:	460b      	mov	r3, r1
 800441e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800442c:	4b53      	ldr	r3, [pc, #332]	; (800457c <DrawChar+0x16c>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4953      	ldr	r1, [pc, #332]	; (8004580 <DrawChar+0x170>)
 8004432:	4613      	mov	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	3308      	adds	r3, #8
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	88db      	ldrh	r3, [r3, #6]
 8004442:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004444:	4b4d      	ldr	r3, [pc, #308]	; (800457c <DrawChar+0x16c>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	494d      	ldr	r1, [pc, #308]	; (8004580 <DrawChar+0x170>)
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	3308      	adds	r3, #8
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	889b      	ldrh	r3, [r3, #4]
 800445a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800445c:	8a3b      	ldrh	r3, [r7, #16]
 800445e:	3307      	adds	r3, #7
 8004460:	2b00      	cmp	r3, #0
 8004462:	da00      	bge.n	8004466 <DrawChar+0x56>
 8004464:	3307      	adds	r3, #7
 8004466:	10db      	asrs	r3, r3, #3
 8004468:	b2db      	uxtb	r3, r3
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	b2da      	uxtb	r2, r3
 800446e:	8a3b      	ldrh	r3, [r7, #16]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e076      	b.n	800456a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800447c:	8a3b      	ldrh	r3, [r7, #16]
 800447e:	3307      	adds	r3, #7
 8004480:	2b00      	cmp	r3, #0
 8004482:	da00      	bge.n	8004486 <DrawChar+0x76>
 8004484:	3307      	adds	r3, #7
 8004486:	10db      	asrs	r3, r3, #3
 8004488:	461a      	mov	r2, r3
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	fb03 f302 	mul.w	r3, r3, r2
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	4413      	add	r3, r2
 8004494:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004496:	8a3b      	ldrh	r3, [r7, #16]
 8004498:	3307      	adds	r3, #7
 800449a:	2b00      	cmp	r3, #0
 800449c:	da00      	bge.n	80044a0 <DrawChar+0x90>
 800449e:	3307      	adds	r3, #7
 80044a0:	10db      	asrs	r3, r3, #3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d002      	beq.n	80044ac <DrawChar+0x9c>
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d004      	beq.n	80044b4 <DrawChar+0xa4>
 80044aa:	e00c      	b.n	80044c6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	617b      	str	r3, [r7, #20]
      break;
 80044b2:	e016      	b.n	80044e2 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	3201      	adds	r2, #1
 80044be:	7812      	ldrb	r2, [r2, #0]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
      break;
 80044c4:	e00d      	b.n	80044e2 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	041a      	lsls	r2, r3, #16
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	3301      	adds	r3, #1
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	4313      	orrs	r3, r2
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	3202      	adds	r2, #2
 80044da:	7812      	ldrb	r2, [r2, #0]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
      break;
 80044e0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e036      	b.n	8004556 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80044e8:	8a3a      	ldrh	r2, [r7, #16]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	1ad2      	subs	r2, r2, r3
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	4413      	add	r3, r2
 80044f2:	3b01      	subs	r3, #1
 80044f4:	2201      	movs	r2, #1
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d012      	beq.n	800452a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	b29a      	uxth	r2, r3
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	4413      	add	r3, r2
 800450c:	b298      	uxth	r0, r3
 800450e:	4b1b      	ldr	r3, [pc, #108]	; (800457c <DrawChar+0x16c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	491b      	ldr	r1, [pc, #108]	; (8004580 <DrawChar+0x170>)
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	88bb      	ldrh	r3, [r7, #4]
 8004522:	4619      	mov	r1, r3
 8004524:	f7ff ff4c 	bl	80043c0 <BSP_LCD_DrawPixel>
 8004528:	e012      	b.n	8004550 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	b29a      	uxth	r2, r3
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	4413      	add	r3, r2
 8004532:	b298      	uxth	r0, r3
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <DrawChar+0x16c>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4911      	ldr	r1, [pc, #68]	; (8004580 <DrawChar+0x170>)
 800453a:	4613      	mov	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3304      	adds	r3, #4
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	88bb      	ldrh	r3, [r7, #4]
 800454a:	4619      	mov	r1, r3
 800454c:	f7ff ff38 	bl	80043c0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	3301      	adds	r3, #1
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	8a3b      	ldrh	r3, [r7, #16]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	429a      	cmp	r2, r3
 800455c:	d3c4      	bcc.n	80044e8 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800455e:	88bb      	ldrh	r3, [r7, #4]
 8004560:	3301      	adds	r3, #1
 8004562:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	3301      	adds	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	8a7b      	ldrh	r3, [r7, #18]
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	429a      	cmp	r2, r3
 8004570:	d384      	bcc.n	800447c <DrawChar+0x6c>
  }
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000538 	.word	0x20000538
 8004580:	2000053c 	.word	0x2000053c

08004584 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004592:	4b16      	ldr	r3, [pc, #88]	; (80045ec <FillBuffer+0x68>)
 8004594:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004598:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <FillBuffer+0x68>)
 800459c:	2200      	movs	r2, #0
 800459e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80045a0:	4a12      	ldr	r2, [pc, #72]	; (80045ec <FillBuffer+0x68>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <FillBuffer+0x68>)
 80045a8:	4a11      	ldr	r2, [pc, #68]	; (80045f0 <FillBuffer+0x6c>)
 80045aa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80045ac:	480f      	ldr	r0, [pc, #60]	; (80045ec <FillBuffer+0x68>)
 80045ae:	f000 fe5d 	bl	800526c <HAL_DMA2D_Init>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d115      	bne.n	80045e4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	480c      	ldr	r0, [pc, #48]	; (80045ec <FillBuffer+0x68>)
 80045bc:	f000 ffbe 	bl	800553c <HAL_DMA2D_ConfigLayer>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10e      	bne.n	80045e4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	4806      	ldr	r0, [pc, #24]	; (80045ec <FillBuffer+0x68>)
 80045d2:	f000 fe9e 	bl	8005312 <HAL_DMA2D_Start>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80045dc:	210a      	movs	r1, #10
 80045de:	4803      	ldr	r0, [pc, #12]	; (80045ec <FillBuffer+0x68>)
 80045e0:	f000 fec2 	bl	8005368 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	200004c8 	.word	0x200004c8
 80045f0:	4002b000 	.word	0x4002b000

080045f4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 80045fa:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <BSP_SDRAM_Init+0xb0>)
 80045fc:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80045fe:	4b2a      	ldr	r3, [pc, #168]	; (80046a8 <BSP_SDRAM_Init+0xb4>)
 8004600:	2202      	movs	r2, #2
 8004602:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004604:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <BSP_SDRAM_Init+0xb4>)
 8004606:	2207      	movs	r2, #7
 8004608:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800460a:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <BSP_SDRAM_Init+0xb4>)
 800460c:	2204      	movs	r2, #4
 800460e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <BSP_SDRAM_Init+0xb4>)
 8004612:	2207      	movs	r2, #7
 8004614:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004616:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <BSP_SDRAM_Init+0xb4>)
 8004618:	2202      	movs	r2, #2
 800461a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800461c:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <BSP_SDRAM_Init+0xb4>)
 800461e:	2202      	movs	r2, #2
 8004620:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004622:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <BSP_SDRAM_Init+0xb4>)
 8004624:	2202      	movs	r2, #2
 8004626:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 800462a:	2201      	movs	r2, #1
 800462c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800462e:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 8004630:	2200      	movs	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004634:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 8004636:	2204      	movs	r2, #4
 8004638:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800463a:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 800463c:	2210      	movs	r2, #16
 800463e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 8004648:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800464c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 8004650:	2200      	movs	r2, #0
 8004652:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 8004656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800465a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800465c:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 800465e:	2200      	movs	r2, #0
 8004660:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 8004664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004668:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800466a:	2100      	movs	r1, #0
 800466c:	480c      	ldr	r0, [pc, #48]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 800466e:	f000 f87f 	bl	8004770 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004672:	490d      	ldr	r1, [pc, #52]	; (80046a8 <BSP_SDRAM_Init+0xb4>)
 8004674:	480a      	ldr	r0, [pc, #40]	; (80046a0 <BSP_SDRAM_Init+0xac>)
 8004676:	f003 fb6d 	bl	8007d54 <HAL_SDRAM_Init>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <BSP_SDRAM_Init+0xb8>)
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	e002      	b.n	800468e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <BSP_SDRAM_Init+0xb8>)
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800468e:	f240 506a 	movw	r0, #1386	; 0x56a
 8004692:	f000 f80d 	bl	80046b0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <BSP_SDRAM_Init+0xb8>)
 8004698:	781b      	ldrb	r3, [r3, #0]
}
 800469a:	4618      	mov	r0, r3
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000554 	.word	0x20000554
 80046a4:	a0000140 	.word	0xa0000140
 80046a8:	20000588 	.word	0x20000588
 80046ac:	200001d4 	.word	0x200001d4

080046b0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80046bc:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80046c2:	4b29      	ldr	r3, [pc, #164]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046c4:	2208      	movs	r2, #8
 80046c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80046c8:	4b27      	ldr	r3, [pc, #156]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80046ce:	4b26      	ldr	r3, [pc, #152]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80046d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046d8:	4923      	ldr	r1, [pc, #140]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046da:	4824      	ldr	r0, [pc, #144]	; (800476c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80046dc:	f003 fb78 	bl	8007dd0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80046e0:	2001      	movs	r0, #1
 80046e2:	f000 facf 	bl	8004c84 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046e8:	2202      	movs	r2, #2
 80046ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80046ec:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046ee:	2208      	movs	r2, #8
 80046f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80046fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004702:	4919      	ldr	r1, [pc, #100]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004704:	4819      	ldr	r0, [pc, #100]	; (800476c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004706:	f003 fb63 	bl	8007dd0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800470c:	2203      	movs	r2, #3
 800470e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004712:	2208      	movs	r2, #8
 8004714:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004718:	2204      	movs	r2, #4
 800471a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800471e:	2200      	movs	r2, #0
 8004720:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004726:	4910      	ldr	r1, [pc, #64]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004728:	4810      	ldr	r0, [pc, #64]	; (800476c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800472a:	f003 fb51 	bl	8007dd0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800472e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004732:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004736:	2204      	movs	r2, #4
 8004738:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800473c:	2208      	movs	r2, #8
 800473e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004742:	2201      	movs	r2, #1
 8004744:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a07      	ldr	r2, [pc, #28]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800474a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800474c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004750:	4905      	ldr	r1, [pc, #20]	; (8004768 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004752:	4806      	ldr	r0, [pc, #24]	; (800476c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004754:	f003 fb3c 	bl	8007dd0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4804      	ldr	r0, [pc, #16]	; (800476c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800475c:	f003 fb63 	bl	8007e26 <HAL_SDRAM_ProgramRefreshRate>
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	200005a4 	.word	0x200005a4
 800476c:	20000554 	.word	0x20000554

08004770 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b090      	sub	sp, #64	; 0x40
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80ec 	beq.w	800495a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
 8004786:	4b77      	ldr	r3, [pc, #476]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	4a76      	ldr	r2, [pc, #472]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6393      	str	r3, [r2, #56]	; 0x38
 8004792:	4b74      	ldr	r3, [pc, #464]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
 80047a2:	4b70      	ldr	r3, [pc, #448]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4a6f      	ldr	r2, [pc, #444]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047ac:	6313      	str	r3, [r2, #48]	; 0x30
 80047ae:	4b6d      	ldr	r3, [pc, #436]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	4b69      	ldr	r3, [pc, #420]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	4a68      	ldr	r2, [pc, #416]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047c4:	f043 0302 	orr.w	r3, r3, #2
 80047c8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ca:	4b66      	ldr	r3, [pc, #408]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	623b      	str	r3, [r7, #32]
 80047d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	4b62      	ldr	r3, [pc, #392]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a61      	ldr	r2, [pc, #388]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	6313      	str	r3, [r2, #48]	; 0x30
 80047e6:	4b5f      	ldr	r3, [pc, #380]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	4b5b      	ldr	r3, [pc, #364]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	4a5a      	ldr	r2, [pc, #360]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 80047fc:	f043 0308 	orr.w	r3, r3, #8
 8004800:	6313      	str	r3, [r2, #48]	; 0x30
 8004802:	4b58      	ldr	r3, [pc, #352]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	4b54      	ldr	r3, [pc, #336]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	4a53      	ldr	r2, [pc, #332]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004818:	f043 0310 	orr.w	r3, r3, #16
 800481c:	6313      	str	r3, [r2, #48]	; 0x30
 800481e:	4b51      	ldr	r3, [pc, #324]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	4a4c      	ldr	r2, [pc, #304]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004834:	f043 0320 	orr.w	r3, r3, #32
 8004838:	6313      	str	r3, [r2, #48]	; 0x30
 800483a:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	4b46      	ldr	r3, [pc, #280]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	4a45      	ldr	r2, [pc, #276]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004854:	6313      	str	r3, [r2, #48]	; 0x30
 8004856:	4b43      	ldr	r3, [pc, #268]	; (8004964 <BSP_SDRAM_MspInit+0x1f4>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004862:	2302      	movs	r3, #2
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004866:	2302      	movs	r3, #2
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800486e:	230c      	movs	r3, #12
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004872:	2360      	movs	r3, #96	; 0x60
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800487a:	4619      	mov	r1, r3
 800487c:	483a      	ldr	r0, [pc, #232]	; (8004968 <BSP_SDRAM_MspInit+0x1f8>)
 800487e:	f000 ff8b 	bl	8005798 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004882:	2301      	movs	r3, #1
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800488a:	4619      	mov	r1, r3
 800488c:	4837      	ldr	r0, [pc, #220]	; (800496c <BSP_SDRAM_MspInit+0x1fc>)
 800488e:	f000 ff83 	bl	8005798 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004892:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800489c:	4619      	mov	r1, r3
 800489e:	4834      	ldr	r0, [pc, #208]	; (8004970 <BSP_SDRAM_MspInit+0x200>)
 80048a0:	f000 ff7a 	bl	8005798 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80048a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80048aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048ae:	4619      	mov	r1, r3
 80048b0:	4830      	ldr	r0, [pc, #192]	; (8004974 <BSP_SDRAM_MspInit+0x204>)
 80048b2:	f000 ff71 	bl	8005798 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80048b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80048bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c0:	4619      	mov	r1, r3
 80048c2:	482d      	ldr	r0, [pc, #180]	; (8004978 <BSP_SDRAM_MspInit+0x208>)
 80048c4:	f000 ff68 	bl	8005798 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80048c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80048ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048d2:	4619      	mov	r1, r3
 80048d4:	4829      	ldr	r0, [pc, #164]	; (800497c <BSP_SDRAM_MspInit+0x20c>)
 80048d6:	f000 ff5f 	bl	8005798 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80048da:	4b29      	ldr	r3, [pc, #164]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 80048dc:	2200      	movs	r2, #0
 80048de:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80048e0:	4b27      	ldr	r3, [pc, #156]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 80048e2:	2280      	movs	r2, #128	; 0x80
 80048e4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 80048e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ec:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 80048f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048f4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 80048f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048fc:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 8004900:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004904:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 8004908:	2200      	movs	r2, #0
 800490a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800490c:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 800490e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004912:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 8004916:	2200      	movs	r2, #0
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800491a:	4b19      	ldr	r3, [pc, #100]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 800491c:	2203      	movs	r2, #3
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004920:	4b17      	ldr	r3, [pc, #92]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 8004922:	2200      	movs	r2, #0
 8004924:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004926:	4b16      	ldr	r3, [pc, #88]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800492c:	4b14      	ldr	r3, [pc, #80]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <BSP_SDRAM_MspInit+0x214>)
 8004930:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a12      	ldr	r2, [pc, #72]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
 8004938:	4a11      	ldr	r2, [pc, #68]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800493e:	4810      	ldr	r0, [pc, #64]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 8004940:	f000 fb84 	bl	800504c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004944:	480e      	ldr	r0, [pc, #56]	; (8004980 <BSP_SDRAM_MspInit+0x210>)
 8004946:	f000 fad3 	bl	8004ef0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	210f      	movs	r1, #15
 800494e:	2038      	movs	r0, #56	; 0x38
 8004950:	f000 fa97 	bl	8004e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004954:	2038      	movs	r0, #56	; 0x38
 8004956:	f000 fab0 	bl	8004eba <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800495a:	bf00      	nop
 800495c:	3740      	adds	r7, #64	; 0x40
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800
 8004968:	40020400 	.word	0x40020400
 800496c:	40020800 	.word	0x40020800
 8004970:	40020c00 	.word	0x40020c00
 8004974:	40021000 	.word	0x40021000
 8004978:	40021400 	.word	0x40021400
 800497c:	40021800 	.word	0x40021800
 8004980:	200005b4 	.word	0x200005b4
 8004984:	40026410 	.word	0x40026410

08004988 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	460a      	mov	r2, r1
 8004992:	80fb      	strh	r3, [r7, #6]
 8004994:	4613      	mov	r3, r2
 8004996:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800499c:	4a13      	ldr	r2, [pc, #76]	; (80049ec <BSP_TS_Init+0x64>)
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80049a2:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <BSP_TS_Init+0x68>)
 80049a4:	88bb      	ldrh	r3, [r7, #4]
 80049a6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <BSP_TS_Init+0x6c>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2082      	movs	r0, #130	; 0x82
 80049ae:	4798      	blx	r3
 80049b0:	4603      	mov	r3, r0
 80049b2:	461a      	mov	r2, r3
 80049b4:	f640 0311 	movw	r3, #2065	; 0x811
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d104      	bne.n	80049c6 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <BSP_TS_Init+0x70>)
 80049be:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <BSP_TS_Init+0x6c>)
 80049c0:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <BSP_TS_Init+0x70>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2082      	movs	r0, #130	; 0x82
 80049d4:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80049d6:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <BSP_TS_Init+0x70>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2082      	movs	r0, #130	; 0x82
 80049de:	4798      	blx	r3
  }

  return ret;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000618 	.word	0x20000618
 80049f0:	2000061a 	.word	0x2000061a
 80049f4:	2000017c 	.word	0x2000017c
 80049f8:	20000614 	.word	0x20000614

080049fc <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <BSP_TS_ITGetStatus+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	2082      	movs	r0, #130	; 0x82
 8004a08:	4798      	blx	r3
 8004a0a:	4603      	mov	r3, r0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000614 	.word	0x20000614

08004a14 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004a1c:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <BSP_TS_GetState+0x148>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2082      	movs	r0, #130	; 0x82
 8004a24:	4798      	blx	r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 808d 	beq.w	8004b52 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004a38:	4b48      	ldr	r3, [pc, #288]	; (8004b5c <BSP_TS_GetState+0x148>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f107 020c 	add.w	r2, r7, #12
 8004a42:	f107 010e 	add.w	r1, r7, #14
 8004a46:	2082      	movs	r0, #130	; 0x82
 8004a48:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004a4a:	89bb      	ldrh	r3, [r7, #12]
 8004a4c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004a54:	89bb      	ldrh	r3, [r7, #12]
 8004a56:	4a42      	ldr	r2, [pc, #264]	; (8004b60 <BSP_TS_GetState+0x14c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	08db      	lsrs	r3, r3, #3
 8004a5e:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004a60:	8abb      	ldrh	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d102      	bne.n	8004a6c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	82bb      	strh	r3, [r7, #20]
 8004a6a:	e008      	b.n	8004a7e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004a6c:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <BSP_TS_GetState+0x150>)
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	8aba      	ldrh	r2, [r7, #20]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d903      	bls.n	8004a7e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8004a76:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <BSP_TS_GetState+0x150>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004a7e:	8abb      	ldrh	r3, [r7, #20]
 8004a80:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004a82:	89fb      	ldrh	r3, [r7, #14]
 8004a84:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d806      	bhi.n	8004a9a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004a8c:	89fb      	ldrh	r3, [r7, #14]
 8004a8e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8004a92:	330e      	adds	r3, #14
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	81fb      	strh	r3, [r7, #14]
 8004a98:	e005      	b.n	8004aa6 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004a9a:	89fb      	ldrh	r3, [r7, #14]
 8004a9c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004aa6:	89fb      	ldrh	r3, [r7, #14]
 8004aa8:	4a2f      	ldr	r2, [pc, #188]	; (8004b68 <BSP_TS_GetState+0x154>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	82fb      	strh	r3, [r7, #22]
 8004abc:	e008      	b.n	8004ad0 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <BSP_TS_GetState+0x158>)
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	8afa      	ldrh	r2, [r7, #22]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d903      	bls.n	8004ad0 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004ac8:	4b28      	ldr	r3, [pc, #160]	; (8004b6c <BSP_TS_GetState+0x158>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004ad0:	8afb      	ldrh	r3, [r7, #22]
 8004ad2:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004ad4:	89fb      	ldrh	r3, [r7, #14]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <BSP_TS_GetState+0x15c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d906      	bls.n	8004aee <BSP_TS_GetState+0xda>
 8004ae0:	89fa      	ldrh	r2, [r7, #14]
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <BSP_TS_GetState+0x15c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	e005      	b.n	8004afa <BSP_TS_GetState+0xe6>
 8004aee:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <BSP_TS_GetState+0x15c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004afc:	89bb      	ldrh	r3, [r7, #12]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <BSP_TS_GetState+0x160>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d906      	bls.n	8004b16 <BSP_TS_GetState+0x102>
 8004b08:	89ba      	ldrh	r2, [r7, #12]
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <BSP_TS_GetState+0x160>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	e005      	b.n	8004b22 <BSP_TS_GetState+0x10e>
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <BSP_TS_GetState+0x160>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	89bb      	ldrh	r3, [r7, #12]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004b24:	8a7a      	ldrh	r2, [r7, #18]
 8004b26:	8a3b      	ldrh	r3, [r7, #16]
 8004b28:	4413      	add	r3, r2
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	dd07      	ble.n	8004b3e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004b2e:	89fb      	ldrh	r3, [r7, #14]
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <BSP_TS_GetState+0x15c>)
 8004b34:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004b36:	89bb      	ldrh	r3, [r7, #12]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <BSP_TS_GetState+0x160>)
 8004b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <BSP_TS_GetState+0x15c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <BSP_TS_GetState+0x160>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	809a      	strh	r2, [r3, #4]
  }
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000614 	.word	0x20000614
 8004b60:	ba2e8ba3 	.word	0xba2e8ba3
 8004b64:	2000061a 	.word	0x2000061a
 8004b68:	88888889 	.word	0x88888889
 8004b6c:	20000618 	.word	0x20000618
 8004b70:	2000061c 	.word	0x2000061c
 8004b74:	20000620 	.word	0x20000620

08004b78 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <BSP_TS_ITClear+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	2082      	movs	r0, #130	; 0x82
 8004b84:	4798      	blx	r3
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000614 	.word	0x20000614

08004b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b94:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <HAL_Init+0x40>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <HAL_Init+0x40>)
 8004b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_Init+0x40>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <HAL_Init+0x40>)
 8004ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_Init+0x40>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <HAL_Init+0x40>)
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bb8:	2003      	movs	r0, #3
 8004bba:	f000 f957 	bl	8004e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bbe:	200f      	movs	r0, #15
 8004bc0:	f000 f810 	bl	8004be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bc4:	f000 f806 	bl	8004bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023c00 	.word	0x40023c00

08004bd4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_InitTick+0x54>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_InitTick+0x58>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 f967 	bl	8004ed6 <HAL_SYSTICK_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e00e      	b.n	8004c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b0f      	cmp	r3, #15
 8004c16:	d80a      	bhi.n	8004c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	f000 f92f 	bl	8004e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c24:	4a06      	ldr	r2, [pc, #24]	; (8004c40 <HAL_InitTick+0x5c>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e000      	b.n	8004c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000140 	.word	0x20000140
 8004c3c:	200001dc 	.word	0x200001dc
 8004c40:	200001d8 	.word	0x200001d8

08004c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_IncTick+0x20>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_IncTick+0x24>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4413      	add	r3, r2
 8004c54:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <HAL_IncTick+0x24>)
 8004c56:	6013      	str	r3, [r2, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	200001dc 	.word	0x200001dc
 8004c68:	20000740 	.word	0x20000740

08004c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_GetTick+0x14>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000740 	.word	0x20000740

08004c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c8c:	f7ff ffee 	bl	8004c6c <HAL_GetTick>
 8004c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d005      	beq.n	8004caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_Delay+0x44>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004caa:	bf00      	nop
 8004cac:	f7ff ffde 	bl	8004c6c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d8f7      	bhi.n	8004cac <HAL_Delay+0x28>
  {
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200001dc 	.word	0x200001dc

08004ccc <__NVIC_SetPriorityGrouping>:
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <__NVIC_SetPriorityGrouping+0x44>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cfe:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <__NVIC_SetPriorityGrouping+0x44>)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	60d3      	str	r3, [r2, #12]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <__NVIC_GetPriorityGrouping>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <__NVIC_GetPriorityGrouping+0x18>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	f003 0307 	and.w	r3, r3, #7
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	e000ed00 	.word	0xe000ed00

08004d30 <__NVIC_EnableIRQ>:
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	db0b      	blt.n	8004d5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	f003 021f 	and.w	r2, r3, #31
 8004d48:	4907      	ldr	r1, [pc, #28]	; (8004d68 <__NVIC_EnableIRQ+0x38>)
 8004d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2001      	movs	r0, #1
 8004d52:	fa00 f202 	lsl.w	r2, r0, r2
 8004d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	e000e100 	.word	0xe000e100

08004d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	6039      	str	r1, [r7, #0]
 8004d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	db0a      	blt.n	8004d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	490c      	ldr	r1, [pc, #48]	; (8004db8 <__NVIC_SetPriority+0x4c>)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	0112      	lsls	r2, r2, #4
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	440b      	add	r3, r1
 8004d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d94:	e00a      	b.n	8004dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4908      	ldr	r1, [pc, #32]	; (8004dbc <__NVIC_SetPriority+0x50>)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	3b04      	subs	r3, #4
 8004da4:	0112      	lsls	r2, r2, #4
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	440b      	add	r3, r1
 8004daa:	761a      	strb	r2, [r3, #24]
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	e000e100 	.word	0xe000e100
 8004dbc:	e000ed00 	.word	0xe000ed00

08004dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	; 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f1c3 0307 	rsb	r3, r3, #7
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	bf28      	it	cs
 8004dde:	2304      	movcs	r3, #4
 8004de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3304      	adds	r3, #4
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d902      	bls.n	8004df0 <NVIC_EncodePriority+0x30>
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3b03      	subs	r3, #3
 8004dee:	e000      	b.n	8004df2 <NVIC_EncodePriority+0x32>
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	401a      	ands	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e08:	f04f 31ff 	mov.w	r1, #4294967295
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	43d9      	mvns	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e18:	4313      	orrs	r3, r2
         );
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e38:	d301      	bcc.n	8004e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e00f      	b.n	8004e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <SysTick_Config+0x40>)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e46:	210f      	movs	r1, #15
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4c:	f7ff ff8e 	bl	8004d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <SysTick_Config+0x40>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e56:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <SysTick_Config+0x40>)
 8004e58:	2207      	movs	r2, #7
 8004e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	e000e010 	.word	0xe000e010

08004e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff29 	bl	8004ccc <__NVIC_SetPriorityGrouping>
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	4603      	mov	r3, r0
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e94:	f7ff ff3e 	bl	8004d14 <__NVIC_GetPriorityGrouping>
 8004e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	6978      	ldr	r0, [r7, #20]
 8004ea0:	f7ff ff8e 	bl	8004dc0 <NVIC_EncodePriority>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff ff5d 	bl	8004d6c <__NVIC_SetPriority>
}
 8004eb2:	bf00      	nop
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff31 	bl	8004d30 <__NVIC_EnableIRQ>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff ffa2 	bl	8004e28 <SysTick_Config>
 8004ee4:	4603      	mov	r3, r0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004efc:	f7ff feb6 	bl	8004c6c <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e099      	b.n	8005040 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f2c:	e00f      	b.n	8004f4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f2e:	f7ff fe9d 	bl	8004c6c <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d908      	bls.n	8004f4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2203      	movs	r2, #3
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e078      	b.n	8005040 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e8      	bne.n	8004f2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4b38      	ldr	r3, [pc, #224]	; (8005048 <HAL_DMA_Init+0x158>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d107      	bne.n	8004fb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d117      	bne.n	8005012 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8bd 	bl	8005174 <DMA_CheckFifoParam>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2240      	movs	r2, #64	; 0x40
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800500e:	2301      	movs	r3, #1
 8005010:	e016      	b.n	8005040 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f874 	bl	8005108 <DMA_CalcBaseAndBitshift>
 8005020:	4603      	mov	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005028:	223f      	movs	r2, #63	; 0x3f
 800502a:	409a      	lsls	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	f010803f 	.word	0xf010803f

0800504c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e050      	b.n	8005100 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d101      	bne.n	800506e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
 800506c:	e048      	b.n	8005100 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0201 	bic.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2221      	movs	r2, #33	; 0x21
 80050ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f82a 	bl	8005108 <DMA_CalcBaseAndBitshift>
 80050b4:	4603      	mov	r3, r0
 80050b6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e0:	223f      	movs	r2, #63	; 0x3f
 80050e2:	409a      	lsls	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	3b10      	subs	r3, #16
 8005118:	4a14      	ldr	r2, [pc, #80]	; (800516c <DMA_CalcBaseAndBitshift+0x64>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <DMA_CalcBaseAndBitshift+0x68>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d909      	bls.n	800514a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	1d1a      	adds	r2, r3, #4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	659a      	str	r2, [r3, #88]	; 0x58
 8005148:	e007      	b.n	800515a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	aaaaaaab 	.word	0xaaaaaaab
 8005170:	0800d2d4 	.word	0x0800d2d4

08005174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d11f      	bne.n	80051ce <DMA_CheckFifoParam+0x5a>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d856      	bhi.n	8005242 <DMA_CheckFifoParam+0xce>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <DMA_CheckFifoParam+0x28>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051bf 	.word	0x080051bf
 80051a4:	080051ad 	.word	0x080051ad
 80051a8:	08005243 	.word	0x08005243
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d046      	beq.n	8005246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051bc:	e043      	b.n	8005246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051c6:	d140      	bne.n	800524a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051cc:	e03d      	b.n	800524a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d6:	d121      	bne.n	800521c <DMA_CheckFifoParam+0xa8>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d837      	bhi.n	800524e <DMA_CheckFifoParam+0xda>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <DMA_CheckFifoParam+0x70>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	080051fb 	.word	0x080051fb
 80051ec:	080051f5 	.word	0x080051f5
 80051f0:	0800520d 	.word	0x0800520d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      break;
 80051f8:	e030      	b.n	800525c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d025      	beq.n	8005252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800520a:	e022      	b.n	8005252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005214:	d11f      	bne.n	8005256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800521a:	e01c      	b.n	8005256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d903      	bls.n	800522a <DMA_CheckFifoParam+0xb6>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d003      	beq.n	8005230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005228:	e018      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      break;
 800522e:	e015      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00e      	beq.n	800525a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e00b      	b.n	800525a <DMA_CheckFifoParam+0xe6>
      break;
 8005242:	bf00      	nop
 8005244:	e00a      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 8005246:	bf00      	nop
 8005248:	e008      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 800524a:	bf00      	nop
 800524c:	e006      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 800524e:	bf00      	nop
 8005250:	e004      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;   
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <DMA_CheckFifoParam+0xe8>
      break;
 800525a:	bf00      	nop
    }
  } 
  
  return status; 
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop

0800526c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e03b      	b.n	80052f6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f833 	bl	80052fe <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	f023 0107 	bic.w	r1, r3, #7
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80052d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68d1      	ldr	r1, [r2, #12]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	430b      	orrs	r3, r1
 80052e4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b086      	sub	sp, #24
 8005316:	af02      	add	r7, sp, #8
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_DMA2D_Start+0x1c>
 800532a:	2302      	movs	r3, #2
 800532c:	e018      	b.n	8005360 <HAL_DMA2D_Start+0x4e>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f989 	bl	8005660 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d056      	beq.n	8005432 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005384:	f7ff fc72 	bl	8004c6c <HAL_GetTick>
 8005388:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800538a:	e04b      	b.n	8005424 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800539a:	2b00      	cmp	r3, #0
 800539c:	d023      	beq.n	80053e6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	f043 0202 	orr.w	r2, r3, #2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	f043 0201 	orr.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2221      	movs	r2, #33	; 0x21
 80053d0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2204      	movs	r2, #4
 80053d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e0a5      	b.n	8005532 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d01a      	beq.n	8005424 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80053ee:	f7ff fc3d 	bl	8004c6c <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <HAL_DMA2D_PollForTransfer+0x9c>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10f      	bne.n	8005424 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2203      	movs	r2, #3
 8005414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e086      	b.n	8005532 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ac      	beq.n	800538c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d061      	beq.n	8005518 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005454:	f7ff fc0a 	bl	8004c6c <HAL_GetTick>
 8005458:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800545a:	e056      	b.n	800550a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800546a:	2b00      	cmp	r3, #0
 800546c:	d02e      	beq.n	80054cc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	f043 0204 	orr.w	r2, r3, #4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	f043 0202 	orr.w	r2, r3, #2
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	f043 0201 	orr.w	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2229      	movs	r2, #41	; 0x29
 80054b6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2204      	movs	r2, #4
 80054bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e032      	b.n	8005532 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d01a      	beq.n	800550a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80054d4:	f7ff fbca 	bl	8004c6c <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d302      	bcc.n	80054ea <HAL_DMA2D_PollForTransfer+0x182>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10f      	bne.n	800550a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	f043 0220 	orr.w	r2, r3, #32
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2203      	movs	r2, #3
 80054fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e013      	b.n	8005532 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0a1      	beq.n	800545c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2212      	movs	r2, #18
 800551e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_DMA2D_ConfigLayer+0x20>
 8005558:	2302      	movs	r3, #2
 800555a:	e079      	b.n	8005650 <HAL_DMA2D_ConfigLayer+0x114>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	3318      	adds	r3, #24
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005586:	4b35      	ldr	r3, [pc, #212]	; (800565c <HAL_DMA2D_ConfigLayer+0x120>)
 8005588:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b0a      	cmp	r3, #10
 8005590:	d003      	beq.n	800559a <HAL_DMA2D_ConfigLayer+0x5e>
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b09      	cmp	r3, #9
 8005598:	d107      	bne.n	80055aa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e005      	b.n	80055b6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	061b      	lsls	r3, r3, #24
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d120      	bne.n	80055fe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	43db      	mvns	r3, r3
 80055c6:	ea02 0103 	and.w	r1, r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b0a      	cmp	r3, #10
 80055e4:	d003      	beq.n	80055ee <HAL_DMA2D_ConfigLayer+0xb2>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b09      	cmp	r3, #9
 80055ec:	d127      	bne.n	800563e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
 80055fc:	e01f      	b.n	800563e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	43db      	mvns	r3, r3
 8005608:	ea02 0103 	and.w	r1, r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	430a      	orrs	r2, r1
 8005614:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b0a      	cmp	r3, #10
 8005626:	d003      	beq.n	8005630 <HAL_DMA2D_ConfigLayer+0xf4>
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b09      	cmp	r3, #9
 800562e:	d106      	bne.n	800563e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800563c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	ff03000f 	.word	0xff03000f

08005660 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005660:	b480      	push	{r7}
 8005662:	b08b      	sub	sp, #44	; 0x2c
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005674:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	041a      	lsls	r2, r3, #16
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005698:	d174      	bne.n	8005784 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056a0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056a8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056b0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
 80056d0:	e053      	b.n	800577a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d106      	bne.n	80056e8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4313      	orrs	r3, r2
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
 80056e6:	e048      	b.n	800577a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d111      	bne.n	8005714 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	0cdb      	lsrs	r3, r3, #19
 80056f4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	0a9b      	lsrs	r3, r3, #10
 80056fa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	08db      	lsrs	r3, r3, #3
 8005700:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	02db      	lsls	r3, r3, #11
 800570a:	4313      	orrs	r3, r2
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
 8005712:	e032      	b.n	800577a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d117      	bne.n	800574c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	0fdb      	lsrs	r3, r3, #31
 8005720:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	0cdb      	lsrs	r3, r3, #19
 8005726:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	0adb      	lsrs	r3, r3, #11
 800572c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	08db      	lsrs	r3, r3, #3
 8005732:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	029b      	lsls	r3, r3, #10
 800573c:	431a      	orrs	r2, r3
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	03db      	lsls	r3, r3, #15
 8005742:	4313      	orrs	r3, r2
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
 800574a:	e016      	b.n	800577a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	0f1b      	lsrs	r3, r3, #28
 8005750:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	0d1b      	lsrs	r3, r3, #20
 8005756:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	0b1b      	lsrs	r3, r3, #12
 800575c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	011a      	lsls	r2, r3, #4
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	431a      	orrs	r2, r3
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	031b      	lsls	r3, r3, #12
 8005772:	4313      	orrs	r3, r2
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005782:	e003      	b.n	800578c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	60da      	str	r2, [r3, #12]
}
 800578c:	bf00      	nop
 800578e:	372c      	adds	r7, #44	; 0x2c
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	e177      	b.n	8005aa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057b4:	2201      	movs	r2, #1
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	f040 8166 	bne.w	8005a9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d00b      	beq.n	80057f2 <HAL_GPIO_Init+0x5a>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d007      	beq.n	80057f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057e6:	2b11      	cmp	r3, #17
 80057e8:	d003      	beq.n	80057f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b12      	cmp	r3, #18
 80057f0:	d130      	bne.n	8005854 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	2203      	movs	r2, #3
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43db      	mvns	r3, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4013      	ands	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005828:	2201      	movs	r2, #1
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4013      	ands	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f003 0201 	and.w	r2, r3, #1
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	2203      	movs	r2, #3
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d003      	beq.n	8005894 <HAL_GPIO_Init+0xfc>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b12      	cmp	r3, #18
 8005892:	d123      	bne.n	80058dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	08da      	lsrs	r2, r3, #3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3208      	adds	r2, #8
 800589c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	220f      	movs	r2, #15
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4013      	ands	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	08da      	lsrs	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3208      	adds	r2, #8
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	2203      	movs	r2, #3
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0203 	and.w	r2, r3, #3
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80c0 	beq.w	8005a9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	4b66      	ldr	r3, [pc, #408]	; (8005abc <HAL_GPIO_Init+0x324>)
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	4a65      	ldr	r2, [pc, #404]	; (8005abc <HAL_GPIO_Init+0x324>)
 8005928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800592c:	6453      	str	r3, [r2, #68]	; 0x44
 800592e:	4b63      	ldr	r3, [pc, #396]	; (8005abc <HAL_GPIO_Init+0x324>)
 8005930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800593a:	4a61      	ldr	r2, [pc, #388]	; (8005ac0 <HAL_GPIO_Init+0x328>)
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	089b      	lsrs	r3, r3, #2
 8005940:	3302      	adds	r3, #2
 8005942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	220f      	movs	r2, #15
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4013      	ands	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a58      	ldr	r2, [pc, #352]	; (8005ac4 <HAL_GPIO_Init+0x32c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d037      	beq.n	80059d6 <HAL_GPIO_Init+0x23e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a57      	ldr	r2, [pc, #348]	; (8005ac8 <HAL_GPIO_Init+0x330>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d031      	beq.n	80059d2 <HAL_GPIO_Init+0x23a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a56      	ldr	r2, [pc, #344]	; (8005acc <HAL_GPIO_Init+0x334>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d02b      	beq.n	80059ce <HAL_GPIO_Init+0x236>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a55      	ldr	r2, [pc, #340]	; (8005ad0 <HAL_GPIO_Init+0x338>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d025      	beq.n	80059ca <HAL_GPIO_Init+0x232>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a54      	ldr	r2, [pc, #336]	; (8005ad4 <HAL_GPIO_Init+0x33c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01f      	beq.n	80059c6 <HAL_GPIO_Init+0x22e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a53      	ldr	r2, [pc, #332]	; (8005ad8 <HAL_GPIO_Init+0x340>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d019      	beq.n	80059c2 <HAL_GPIO_Init+0x22a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a52      	ldr	r2, [pc, #328]	; (8005adc <HAL_GPIO_Init+0x344>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_GPIO_Init+0x226>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a51      	ldr	r2, [pc, #324]	; (8005ae0 <HAL_GPIO_Init+0x348>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00d      	beq.n	80059ba <HAL_GPIO_Init+0x222>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a50      	ldr	r2, [pc, #320]	; (8005ae4 <HAL_GPIO_Init+0x34c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d007      	beq.n	80059b6 <HAL_GPIO_Init+0x21e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a4f      	ldr	r2, [pc, #316]	; (8005ae8 <HAL_GPIO_Init+0x350>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_GPIO_Init+0x21a>
 80059ae:	2309      	movs	r3, #9
 80059b0:	e012      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059b2:	230a      	movs	r3, #10
 80059b4:	e010      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059b6:	2308      	movs	r3, #8
 80059b8:	e00e      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059ba:	2307      	movs	r3, #7
 80059bc:	e00c      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059be:	2306      	movs	r3, #6
 80059c0:	e00a      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059c2:	2305      	movs	r3, #5
 80059c4:	e008      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059c6:	2304      	movs	r3, #4
 80059c8:	e006      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059ca:	2303      	movs	r3, #3
 80059cc:	e004      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e002      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <HAL_GPIO_Init+0x240>
 80059d6:	2300      	movs	r3, #0
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	f002 0203 	and.w	r2, r2, #3
 80059de:	0092      	lsls	r2, r2, #2
 80059e0:	4093      	lsls	r3, r2
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059e8:	4935      	ldr	r1, [pc, #212]	; (8005ac0 <HAL_GPIO_Init+0x328>)
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	3302      	adds	r3, #2
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059f6:	4b3d      	ldr	r3, [pc, #244]	; (8005aec <HAL_GPIO_Init+0x354>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	43db      	mvns	r3, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4013      	ands	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a1a:	4a34      	ldr	r2, [pc, #208]	; (8005aec <HAL_GPIO_Init+0x354>)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a20:	4b32      	ldr	r3, [pc, #200]	; (8005aec <HAL_GPIO_Init+0x354>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <HAL_GPIO_Init+0x354>)
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a4a:	4b28      	ldr	r3, [pc, #160]	; (8005aec <HAL_GPIO_Init+0x354>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	43db      	mvns	r3, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a6e:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <HAL_GPIO_Init+0x354>)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a74:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <HAL_GPIO_Init+0x354>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4013      	ands	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a98:	4a14      	ldr	r2, [pc, #80]	; (8005aec <HAL_GPIO_Init+0x354>)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2b0f      	cmp	r3, #15
 8005aa8:	f67f ae84 	bls.w	80057b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	3724      	adds	r7, #36	; 0x24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	40013800 	.word	0x40013800
 8005ac4:	40020000 	.word	0x40020000
 8005ac8:	40020400 	.word	0x40020400
 8005acc:	40020800 	.word	0x40020800
 8005ad0:	40020c00 	.word	0x40020c00
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	40021400 	.word	0x40021400
 8005adc:	40021800 	.word	0x40021800
 8005ae0:	40021c00 	.word	0x40021c00
 8005ae4:	40022000 	.word	0x40022000
 8005ae8:	40022400 	.word	0x40022400
 8005aec:	40013c00 	.word	0x40013c00

08005af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	807b      	strh	r3, [r7, #2]
 8005afc:	4613      	mov	r3, r2
 8005afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b00:	787b      	ldrb	r3, [r7, #1]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b0c:	e003      	b.n	8005b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b0e:	887b      	ldrh	r3, [r7, #2]
 8005b10:	041a      	lsls	r2, r3, #16
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	619a      	str	r2, [r3, #24]
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	401a      	ands	r2, r3
 8005b36:	887b      	ldrh	r3, [r7, #2]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d104      	bne.n	8005b46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b3c:	887b      	ldrh	r3, [r7, #2]
 8005b3e:	041a      	lsls	r2, r3, #16
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005b44:	e002      	b.n	8005b4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	619a      	str	r2, [r3, #24]
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e12b      	b.n	8005dc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f95d 	bl	8005e3e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2224      	movs	r2, #36	; 0x24
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f001 fef8 	bl	80079b0 <HAL_RCC_GetPCLK1Freq>
 8005bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4a81      	ldr	r2, [pc, #516]	; (8005dcc <HAL_I2C_Init+0x274>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d807      	bhi.n	8005bdc <HAL_I2C_Init+0x84>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a80      	ldr	r2, [pc, #512]	; (8005dd0 <HAL_I2C_Init+0x278>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	bf94      	ite	ls
 8005bd4:	2301      	movls	r3, #1
 8005bd6:	2300      	movhi	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e006      	b.n	8005bea <HAL_I2C_Init+0x92>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4a7d      	ldr	r2, [pc, #500]	; (8005dd4 <HAL_I2C_Init+0x27c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	bf94      	ite	ls
 8005be4:	2301      	movls	r3, #1
 8005be6:	2300      	movhi	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e0e7      	b.n	8005dc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a78      	ldr	r2, [pc, #480]	; (8005dd8 <HAL_I2C_Init+0x280>)
 8005bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfa:	0c9b      	lsrs	r3, r3, #18
 8005bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a6a      	ldr	r2, [pc, #424]	; (8005dcc <HAL_I2C_Init+0x274>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d802      	bhi.n	8005c2c <HAL_I2C_Init+0xd4>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	e009      	b.n	8005c40 <HAL_I2C_Init+0xe8>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c32:	fb02 f303 	mul.w	r3, r2, r3
 8005c36:	4a69      	ldr	r2, [pc, #420]	; (8005ddc <HAL_I2C_Init+0x284>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	099b      	lsrs	r3, r3, #6
 8005c3e:	3301      	adds	r3, #1
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	495c      	ldr	r1, [pc, #368]	; (8005dcc <HAL_I2C_Init+0x274>)
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	d819      	bhi.n	8005c94 <HAL_I2C_Init+0x13c>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1e59      	subs	r1, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c74:	400b      	ands	r3, r1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <HAL_I2C_Init+0x138>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1e59      	subs	r1, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8e:	e051      	b.n	8005d34 <HAL_I2C_Init+0x1dc>
 8005c90:	2304      	movs	r3, #4
 8005c92:	e04f      	b.n	8005d34 <HAL_I2C_Init+0x1dc>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d111      	bne.n	8005cc0 <HAL_I2C_Init+0x168>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1e58      	subs	r0, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6859      	ldr	r1, [r3, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	440b      	add	r3, r1
 8005caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cae:	3301      	adds	r3, #1
 8005cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bf0c      	ite	eq
 8005cb8:	2301      	moveq	r3, #1
 8005cba:	2300      	movne	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e012      	b.n	8005ce6 <HAL_I2C_Init+0x18e>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1e58      	subs	r0, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6859      	ldr	r1, [r3, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	0099      	lsls	r1, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_I2C_Init+0x196>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e022      	b.n	8005d34 <HAL_I2C_Init+0x1dc>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10e      	bne.n	8005d14 <HAL_I2C_Init+0x1bc>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1e58      	subs	r0, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	440b      	add	r3, r1
 8005d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d12:	e00f      	b.n	8005d34 <HAL_I2C_Init+0x1dc>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	1e58      	subs	r0, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	0099      	lsls	r1, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	6809      	ldr	r1, [r1, #0]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69da      	ldr	r2, [r3, #28]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6911      	ldr	r1, [r2, #16]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68d2      	ldr	r2, [r2, #12]
 8005d6e:	4311      	orrs	r1, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6812      	ldr	r2, [r2, #0]
 8005d74:	430b      	orrs	r3, r1
 8005d76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	000186a0 	.word	0x000186a0
 8005dd0:	001e847f 	.word	0x001e847f
 8005dd4:	003d08ff 	.word	0x003d08ff
 8005dd8:	431bde83 	.word	0x431bde83
 8005ddc:	10624dd3 	.word	0x10624dd3

08005de0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e021      	b.n	8005e36 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2224      	movs	r2, #36	; 0x24
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0201 	bic.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f821 	bl	8005e52 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	817b      	strh	r3, [r7, #10]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	813b      	strh	r3, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e82:	f7fe fef3 	bl	8004c6c <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	f040 80d9 	bne.w	8006048 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2319      	movs	r3, #25
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	496d      	ldr	r1, [pc, #436]	; (8006054 <HAL_I2C_Mem_Write+0x1ec>)
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fc89 	bl	80067b8 <I2C_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
 8005eae:	e0cc      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_I2C_Mem_Write+0x56>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e0c5      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d007      	beq.n	8005ee4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2221      	movs	r2, #33	; 0x21
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2240      	movs	r2, #64	; 0x40
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a4d      	ldr	r2, [pc, #308]	; (8006058 <HAL_I2C_Mem_Write+0x1f0>)
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f26:	88f8      	ldrh	r0, [r7, #6]
 8005f28:	893a      	ldrh	r2, [r7, #8]
 8005f2a:	8979      	ldrh	r1, [r7, #10]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4603      	mov	r3, r0
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fac4 	bl	80064c4 <I2C_RequestMemoryWrite>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d052      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e081      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fd0a 	bl	8006964 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d107      	bne.n	8005f6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e06b      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	781a      	ldrb	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d11b      	bne.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d017      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	781a      	ldrb	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1aa      	bne.n	8005f46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fcf6 	bl	80069e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00d      	beq.n	800601c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	2b04      	cmp	r3, #4
 8006006:	d107      	bne.n	8006018 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e016      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800602a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	00100002 	.word	0x00100002
 8006058:	ffff0000 	.word	0xffff0000

0800605c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4603      	mov	r3, r0
 800606c:	817b      	strh	r3, [r7, #10]
 800606e:	460b      	mov	r3, r1
 8006070:	813b      	strh	r3, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006076:	f7fe fdf9 	bl	8004c6c <HAL_GetTick>
 800607a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	f040 8208 	bne.w	800649a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	2319      	movs	r3, #25
 8006090:	2201      	movs	r2, #1
 8006092:	497b      	ldr	r1, [pc, #492]	; (8006280 <HAL_I2C_Mem_Read+0x224>)
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fb8f 	bl	80067b8 <I2C_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
 80060a2:	e1fb      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_I2C_Mem_Read+0x56>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e1f4      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d007      	beq.n	80060d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2222      	movs	r2, #34	; 0x22
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a5b      	ldr	r2, [pc, #364]	; (8006284 <HAL_I2C_Mem_Read+0x228>)
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800611a:	88f8      	ldrh	r0, [r7, #6]
 800611c:	893a      	ldrh	r2, [r7, #8]
 800611e:	8979      	ldrh	r1, [r7, #10]
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4603      	mov	r3, r0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fa5e 	bl	80065ec <I2C_RequestMemoryRead>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e1b0      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613e:	2b00      	cmp	r3, #0
 8006140:	d113      	bne.n	800616a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	623b      	str	r3, [r7, #32]
 8006156:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e184      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616e:	2b01      	cmp	r3, #1
 8006170:	d11b      	bne.n	80061aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e164      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d11b      	bne.n	80061ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d2:	2300      	movs	r3, #0
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	e144      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006200:	e138      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	2b03      	cmp	r3, #3
 8006208:	f200 80f1 	bhi.w	80063ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006210:	2b01      	cmp	r3, #1
 8006212:	d123      	bne.n	800625c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fc25 	bl	8006a68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e139      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800625a:	e10b      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	2b02      	cmp	r3, #2
 8006262:	d14e      	bne.n	8006302 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	2200      	movs	r2, #0
 800626c:	4906      	ldr	r1, [pc, #24]	; (8006288 <HAL_I2C_Mem_Read+0x22c>)
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 faa2 	bl	80067b8 <I2C_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e10e      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
 800627e:	bf00      	nop
 8006280:	00100002 	.word	0x00100002
 8006284:	ffff0000 	.word	0xffff0000
 8006288:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006300:	e0b8      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	2200      	movs	r2, #0
 800630a:	4966      	ldr	r1, [pc, #408]	; (80064a4 <HAL_I2C_Mem_Read+0x448>)
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fa53 	bl	80067b8 <I2C_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0bf      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	2200      	movs	r2, #0
 8006366:	494f      	ldr	r1, [pc, #316]	; (80064a4 <HAL_I2C_Mem_Read+0x448>)
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fa25 	bl	80067b8 <I2C_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e091      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063ec:	e042      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fb38 	bl	8006a68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e04c      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d118      	bne.n	8006474 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	2b00      	cmp	r3, #0
 800647a:	f47f aec2 	bne.w	8006202 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	00010004 	.word	0x00010004

080064a8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b6:	b2db      	uxtb	r3, r3
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	817b      	strh	r3, [r7, #10]
 80064d6:	460b      	mov	r3, r1
 80064d8:	813b      	strh	r3, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f95c 	bl	80067b8 <I2C_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00c      	beq.n	8006520 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800651a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e05f      	b.n	80065e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006520:	897b      	ldrh	r3, [r7, #10]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800652e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	492c      	ldr	r1, [pc, #176]	; (80065e8 <I2C_RequestMemoryWrite+0x124>)
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f995 	bl	8006866 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e04c      	b.n	80065e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800655c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655e:	6a39      	ldr	r1, [r7, #32]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f9ff 	bl	8006964 <I2C_WaitOnTXEFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00d      	beq.n	8006588 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	2b04      	cmp	r3, #4
 8006572:	d107      	bne.n	8006584 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006582:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e02b      	b.n	80065e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d105      	bne.n	800659a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800658e:	893b      	ldrh	r3, [r7, #8]
 8006590:	b2da      	uxtb	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	611a      	str	r2, [r3, #16]
 8006598:	e021      	b.n	80065de <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800659a:	893b      	ldrh	r3, [r7, #8]
 800659c:	0a1b      	lsrs	r3, r3, #8
 800659e:	b29b      	uxth	r3, r3
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065aa:	6a39      	ldr	r1, [r7, #32]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f9d9 	bl	8006964 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00d      	beq.n	80065d4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d107      	bne.n	80065d0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e005      	b.n	80065e0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065d4:	893b      	ldrh	r3, [r7, #8]
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	00010002 	.word	0x00010002

080065ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	817b      	strh	r3, [r7, #10]
 80065fe:	460b      	mov	r3, r1
 8006600:	813b      	strh	r3, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006614:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	2200      	movs	r2, #0
 800662e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f8c0 	bl	80067b8 <I2C_WaitOnFlagUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e0a9      	b.n	80067ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006658:	897b      	ldrh	r3, [r7, #10]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006666:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	6a3a      	ldr	r2, [r7, #32]
 800666c:	4951      	ldr	r1, [pc, #324]	; (80067b4 <I2C_RequestMemoryRead+0x1c8>)
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f8f9 	bl	8006866 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e096      	b.n	80067ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006696:	6a39      	ldr	r1, [r7, #32]
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f963 	bl	8006964 <I2C_WaitOnTXEFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d107      	bne.n	80066bc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e075      	b.n	80067ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d105      	bne.n	80066d2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066c6:	893b      	ldrh	r3, [r7, #8]
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	611a      	str	r2, [r3, #16]
 80066d0:	e021      	b.n	8006716 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066d2:	893b      	ldrh	r3, [r7, #8]
 80066d4:	0a1b      	lsrs	r3, r3, #8
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e2:	6a39      	ldr	r1, [r7, #32]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f93d 	bl	8006964 <I2C_WaitOnTXEFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00d      	beq.n	800670c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d107      	bne.n	8006708 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006706:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e04f      	b.n	80067ac <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800670c:	893b      	ldrh	r3, [r7, #8]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006718:	6a39      	ldr	r1, [r7, #32]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f922 	bl	8006964 <I2C_WaitOnTXEFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	2b04      	cmp	r3, #4
 800672c:	d107      	bne.n	800673e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e034      	b.n	80067ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006750:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	2200      	movs	r2, #0
 800675a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f82a 	bl	80067b8 <I2C_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00c      	beq.n	8006784 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800677e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e013      	b.n	80067ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006784:	897b      	ldrh	r3, [r7, #10]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f043 0301 	orr.w	r3, r3, #1
 800678c:	b2da      	uxtb	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	6a3a      	ldr	r2, [r7, #32]
 8006798:	4906      	ldr	r1, [pc, #24]	; (80067b4 <I2C_RequestMemoryRead+0x1c8>)
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f863 	bl	8006866 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	00010002 	.word	0x00010002

080067b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c8:	e025      	b.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d021      	beq.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d2:	f7fe fa4b 	bl	8004c6c <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d302      	bcc.n	80067e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d116      	bne.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	f043 0220 	orr.w	r2, r3, #32
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e023      	b.n	800685e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	0c1b      	lsrs	r3, r3, #16
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10d      	bne.n	800683c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	43da      	mvns	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4013      	ands	r3, r2
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	e00c      	b.n	8006856 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	43da      	mvns	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4013      	ands	r3, r2
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf0c      	ite	eq
 800684e:	2301      	moveq	r3, #1
 8006850:	2300      	movne	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	429a      	cmp	r2, r3
 800685a:	d0b6      	beq.n	80067ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006874:	e051      	b.n	800691a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006884:	d123      	bne.n	80068ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006894:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800689e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e046      	b.n	800695c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d021      	beq.n	800691a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d6:	f7fe f9c9 	bl	8004c6c <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d116      	bne.n	800691a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f043 0220 	orr.w	r2, r3, #32
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e020      	b.n	800695c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	0c1b      	lsrs	r3, r3, #16
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	d10c      	bne.n	800693e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	43da      	mvns	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4013      	ands	r3, r2
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	bf14      	ite	ne
 8006936:	2301      	movne	r3, #1
 8006938:	2300      	moveq	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	e00b      	b.n	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	43da      	mvns	r2, r3
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	4013      	ands	r3, r2
 800694a:	b29b      	uxth	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d18d      	bne.n	8006876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006970:	e02d      	b.n	80069ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f8ce 	bl	8006b14 <I2C_IsAcknowledgeFailed>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e02d      	b.n	80069de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d021      	beq.n	80069ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698a:	f7fe f96f 	bl	8004c6c <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d116      	bne.n	80069ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f043 0220 	orr.w	r2, r3, #32
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e007      	b.n	80069de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d8:	2b80      	cmp	r3, #128	; 0x80
 80069da:	d1ca      	bne.n	8006972 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069f2:	e02d      	b.n	8006a50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f88d 	bl	8006b14 <I2C_IsAcknowledgeFailed>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e02d      	b.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d021      	beq.n	8006a50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0c:	f7fe f92e 	bl	8004c6c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d302      	bcc.n	8006a22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d116      	bne.n	8006a50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	f043 0220 	orr.w	r2, r3, #32
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e007      	b.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d1ca      	bne.n	80069f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a74:	e042      	b.n	8006afc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b10      	cmp	r3, #16
 8006a82:	d119      	bne.n	8006ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0210 	mvn.w	r2, #16
 8006a8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e029      	b.n	8006b0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab8:	f7fe f8d8 	bl	8004c6c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d302      	bcc.n	8006ace <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d116      	bne.n	8006afc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	f043 0220 	orr.w	r2, r3, #32
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e007      	b.n	8006b0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d1b5      	bne.n	8006a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2a:	d11b      	bne.n	8006b64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	f043 0204 	orr.w	r2, r3, #4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e0bf      	b.n	8006d06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8ba 	bl	8006d14 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006bb6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6999      	ldr	r1, [r3, #24]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006bcc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6899      	ldr	r1, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b4a      	ldr	r3, [pc, #296]	; (8006d10 <HAL_LTDC_Init+0x19c>)
 8006be8:	400b      	ands	r3, r1
 8006bea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6899      	ldr	r1, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68d9      	ldr	r1, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b3e      	ldr	r3, [pc, #248]	; (8006d10 <HAL_LTDC_Init+0x19c>)
 8006c16:	400b      	ands	r3, r1
 8006c18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68d9      	ldr	r1, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1a      	ldr	r2, [r3, #32]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6919      	ldr	r1, [r3, #16]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	4b33      	ldr	r3, [pc, #204]	; (8006d10 <HAL_LTDC_Init+0x19c>)
 8006c44:	400b      	ands	r3, r1
 8006c46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	041b      	lsls	r3, r3, #16
 8006c4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6919      	ldr	r1, [r3, #16]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6959      	ldr	r1, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <HAL_LTDC_Init+0x19c>)
 8006c72:	400b      	ands	r3, r1
 8006c74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	041b      	lsls	r3, r3, #16
 8006c7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6959      	ldr	r1, [r3, #20]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ca4:	041b      	lsls	r3, r3, #16
 8006ca6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0206 	orr.w	r2, r2, #6
 8006ce2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0201 	orr.w	r2, r2, #1
 8006cf2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	f000f800 	.word	0xf000f800

08006d14 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_LTDC_ConfigLayer+0x1a>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e02c      	b.n	8006d9c <HAL_LTDC_ConfigLayer+0x74>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2134      	movs	r1, #52	; 0x34
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4614      	mov	r4, r2
 8006d66:	461d      	mov	r5, r3
 8006d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f83b 	bl	8006df8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2201      	movs	r2, #1
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bdb0      	pop	{r4, r5, r7, pc}

08006da4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_LTDC_EnableDither+0x16>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e016      	b.n	8006de8 <HAL_LTDC_EnableDither+0x44>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <HAL_LTDC_EnableDither+0x50>)
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <HAL_LTDC_EnableDither+0x50>)
 8006dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	40016800 	.word	0x40016800

08006df8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b089      	sub	sp, #36	; 0x24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	0c1b      	lsrs	r3, r3, #16
 8006e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e14:	4413      	add	r3, r2
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	01db      	lsls	r3, r3, #7
 8006e24:	4413      	add	r3, r2
 8006e26:	3384      	adds	r3, #132	; 0x84
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	6812      	ldr	r2, [r2, #0]
 8006e2e:	4611      	mov	r1, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	01d2      	lsls	r2, r2, #7
 8006e34:	440a      	add	r2, r1
 8006e36:	3284      	adds	r2, #132	; 0x84
 8006e38:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e3c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	0c1b      	lsrs	r3, r3, #16
 8006e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e4e:	4413      	add	r3, r2
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4619      	mov	r1, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	01db      	lsls	r3, r3, #7
 8006e5c:	440b      	add	r3, r1
 8006e5e:	3384      	adds	r3, #132	; 0x84
 8006e60:	4619      	mov	r1, r3
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e76:	4413      	add	r3, r2
 8006e78:	041b      	lsls	r3, r3, #16
 8006e7a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	01db      	lsls	r3, r3, #7
 8006e86:	4413      	add	r3, r2
 8006e88:	3384      	adds	r3, #132	; 0x84
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	4611      	mov	r1, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	01d2      	lsls	r2, r2, #7
 8006e96:	440a      	add	r2, r1
 8006e98:	3284      	adds	r2, #132	; 0x84
 8006e9a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e9e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eae:	4413      	add	r3, r2
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	01db      	lsls	r3, r3, #7
 8006ebc:	440b      	add	r3, r1
 8006ebe:	3384      	adds	r3, #132	; 0x84
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	01db      	lsls	r3, r3, #7
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3384      	adds	r3, #132	; 0x84
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	4611      	mov	r1, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	01d2      	lsls	r2, r2, #7
 8006ee2:	440a      	add	r2, r1
 8006ee4:	3284      	adds	r2, #132	; 0x84
 8006ee6:	f023 0307 	bic.w	r3, r3, #7
 8006eea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	01db      	lsls	r3, r3, #7
 8006ef6:	4413      	add	r3, r2
 8006ef8:	3384      	adds	r3, #132	; 0x84
 8006efa:	461a      	mov	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f12:	041b      	lsls	r3, r3, #16
 8006f14:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	061b      	lsls	r3, r3, #24
 8006f1c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	01db      	lsls	r3, r3, #7
 8006f28:	4413      	add	r3, r2
 8006f2a:	3384      	adds	r3, #132	; 0x84
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	01db      	lsls	r3, r3, #7
 8006f38:	4413      	add	r3, r2
 8006f3a:	3384      	adds	r3, #132	; 0x84
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f48:	461a      	mov	r2, r3
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4619      	mov	r1, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	01db      	lsls	r3, r3, #7
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3384      	adds	r3, #132	; 0x84
 8006f60:	4619      	mov	r1, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	01db      	lsls	r3, r3, #7
 8006f72:	4413      	add	r3, r2
 8006f74:	3384      	adds	r3, #132	; 0x84
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	01d2      	lsls	r2, r2, #7
 8006f82:	440a      	add	r2, r1
 8006f84:	3284      	adds	r2, #132	; 0x84
 8006f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f8a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	01db      	lsls	r3, r3, #7
 8006f96:	4413      	add	r3, r2
 8006f98:	3384      	adds	r3, #132	; 0x84
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	01db      	lsls	r3, r3, #7
 8006fac:	4413      	add	r3, r2
 8006fae:	3384      	adds	r3, #132	; 0x84
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	01d2      	lsls	r2, r2, #7
 8006fbc:	440a      	add	r2, r1
 8006fbe:	3284      	adds	r2, #132	; 0x84
 8006fc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006fc4:	f023 0307 	bic.w	r3, r3, #7
 8006fc8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	69da      	ldr	r2, [r3, #28]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	6809      	ldr	r1, [r1, #0]
 8006fd6:	4608      	mov	r0, r1
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	01c9      	lsls	r1, r1, #7
 8006fdc:	4401      	add	r1, r0
 8006fde:	3184      	adds	r1, #132	; 0x84
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	01db      	lsls	r3, r3, #7
 8006fee:	4413      	add	r3, r2
 8006ff0:	3384      	adds	r3, #132	; 0x84
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	01db      	lsls	r3, r3, #7
 8006ffe:	4413      	add	r3, r2
 8007000:	3384      	adds	r3, #132	; 0x84
 8007002:	461a      	mov	r2, r3
 8007004:	2300      	movs	r3, #0
 8007006:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	01db      	lsls	r3, r3, #7
 8007012:	4413      	add	r3, r2
 8007014:	3384      	adds	r3, #132	; 0x84
 8007016:	461a      	mov	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007026:	2304      	movs	r3, #4
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	e01b      	b.n	8007064 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d102      	bne.n	800703a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007034:	2303      	movs	r3, #3
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	e014      	b.n	8007064 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d00b      	beq.n	800705a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007046:	2b02      	cmp	r3, #2
 8007048:	d007      	beq.n	800705a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800704e:	2b03      	cmp	r3, #3
 8007050:	d003      	beq.n	800705a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007056:	2b07      	cmp	r3, #7
 8007058:	d102      	bne.n	8007060 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800705a:	2302      	movs	r3, #2
 800705c:	61fb      	str	r3, [r7, #28]
 800705e:	e001      	b.n	8007064 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007060:	2301      	movs	r3, #1
 8007062:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	01db      	lsls	r3, r3, #7
 800706e:	4413      	add	r3, r2
 8007070:	3384      	adds	r3, #132	; 0x84
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	4611      	mov	r1, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	01d2      	lsls	r2, r2, #7
 800707e:	440a      	add	r2, r1
 8007080:	3284      	adds	r2, #132	; 0x84
 8007082:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007086:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	041a      	lsls	r2, r3, #16
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6859      	ldr	r1, [r3, #4]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	1acb      	subs	r3, r1, r3
 800709e:	69f9      	ldr	r1, [r7, #28]
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	3303      	adds	r3, #3
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	6809      	ldr	r1, [r1, #0]
 80070aa:	4608      	mov	r0, r1
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	01c9      	lsls	r1, r1, #7
 80070b0:	4401      	add	r1, r0
 80070b2:	3184      	adds	r1, #132	; 0x84
 80070b4:	4313      	orrs	r3, r2
 80070b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	01db      	lsls	r3, r3, #7
 80070c2:	4413      	add	r3, r2
 80070c4:	3384      	adds	r3, #132	; 0x84
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	4611      	mov	r1, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	01d2      	lsls	r2, r2, #7
 80070d2:	440a      	add	r2, r1
 80070d4:	3284      	adds	r2, #132	; 0x84
 80070d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80070da:	f023 0307 	bic.w	r3, r3, #7
 80070de:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	01db      	lsls	r3, r3, #7
 80070ea:	4413      	add	r3, r2
 80070ec:	3384      	adds	r3, #132	; 0x84
 80070ee:	461a      	mov	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	01db      	lsls	r3, r3, #7
 8007100:	4413      	add	r3, r2
 8007102:	3384      	adds	r3, #132	; 0x84
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	4611      	mov	r1, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	01d2      	lsls	r2, r2, #7
 8007110:	440a      	add	r2, r1
 8007112:	3284      	adds	r2, #132	; 0x84
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	6013      	str	r3, [r2, #0]
}
 800711a:	bf00      	nop
 800711c:	3724      	adds	r7, #36	; 0x24
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e25b      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d075      	beq.n	8007232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007146:	4ba3      	ldr	r3, [pc, #652]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 030c 	and.w	r3, r3, #12
 800714e:	2b04      	cmp	r3, #4
 8007150:	d00c      	beq.n	800716c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007152:	4ba0      	ldr	r3, [pc, #640]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800715a:	2b08      	cmp	r3, #8
 800715c:	d112      	bne.n	8007184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800715e:	4b9d      	ldr	r3, [pc, #628]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800716a:	d10b      	bne.n	8007184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716c:	4b99      	ldr	r3, [pc, #612]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d05b      	beq.n	8007230 <HAL_RCC_OscConfig+0x108>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d157      	bne.n	8007230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e236      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d106      	bne.n	800719c <HAL_RCC_OscConfig+0x74>
 800718e:	4b91      	ldr	r3, [pc, #580]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a90      	ldr	r2, [pc, #576]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	e01d      	b.n	80071d8 <HAL_RCC_OscConfig+0xb0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071a4:	d10c      	bne.n	80071c0 <HAL_RCC_OscConfig+0x98>
 80071a6:	4b8b      	ldr	r3, [pc, #556]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a8a      	ldr	r2, [pc, #552]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	4b88      	ldr	r3, [pc, #544]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a87      	ldr	r2, [pc, #540]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	e00b      	b.n	80071d8 <HAL_RCC_OscConfig+0xb0>
 80071c0:	4b84      	ldr	r3, [pc, #528]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a83      	ldr	r2, [pc, #524]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	4b81      	ldr	r3, [pc, #516]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a80      	ldr	r2, [pc, #512]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d013      	beq.n	8007208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e0:	f7fd fd44 	bl	8004c6c <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071e8:	f7fd fd40 	bl	8004c6c <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b64      	cmp	r3, #100	; 0x64
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e1fb      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fa:	4b76      	ldr	r3, [pc, #472]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0xc0>
 8007206:	e014      	b.n	8007232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007208:	f7fd fd30 	bl	8004c6c <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007210:	f7fd fd2c 	bl	8004c6c <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b64      	cmp	r3, #100	; 0x64
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1e7      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007222:	4b6c      	ldr	r3, [pc, #432]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f0      	bne.n	8007210 <HAL_RCC_OscConfig+0xe8>
 800722e:	e000      	b.n	8007232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d063      	beq.n	8007306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800723e:	4b65      	ldr	r3, [pc, #404]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 030c 	and.w	r3, r3, #12
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800724a:	4b62      	ldr	r3, [pc, #392]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007252:	2b08      	cmp	r3, #8
 8007254:	d11c      	bne.n	8007290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007256:	4b5f      	ldr	r3, [pc, #380]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d116      	bne.n	8007290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007262:	4b5c      	ldr	r3, [pc, #368]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_RCC_OscConfig+0x152>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d001      	beq.n	800727a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e1bb      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800727a:	4b56      	ldr	r3, [pc, #344]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4952      	ldr	r1, [pc, #328]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800728e:	e03a      	b.n	8007306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d020      	beq.n	80072da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007298:	4b4f      	ldr	r3, [pc, #316]	; (80073d8 <HAL_RCC_OscConfig+0x2b0>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729e:	f7fd fce5 	bl	8004c6c <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072a6:	f7fd fce1 	bl	8004c6c <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e19c      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b8:	4b46      	ldr	r3, [pc, #280]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c4:	4b43      	ldr	r3, [pc, #268]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4940      	ldr	r1, [pc, #256]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	600b      	str	r3, [r1, #0]
 80072d8:	e015      	b.n	8007306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072da:	4b3f      	ldr	r3, [pc, #252]	; (80073d8 <HAL_RCC_OscConfig+0x2b0>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fd fcc4 	bl	8004c6c <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072e8:	f7fd fcc0 	bl	8004c6c <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e17b      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d030      	beq.n	8007374 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d016      	beq.n	8007348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800731a:	4b30      	ldr	r3, [pc, #192]	; (80073dc <HAL_RCC_OscConfig+0x2b4>)
 800731c:	2201      	movs	r2, #1
 800731e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007320:	f7fd fca4 	bl	8004c6c <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007328:	f7fd fca0 	bl	8004c6c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e15b      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800733a:	4b26      	ldr	r3, [pc, #152]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 800733c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f0      	beq.n	8007328 <HAL_RCC_OscConfig+0x200>
 8007346:	e015      	b.n	8007374 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007348:	4b24      	ldr	r3, [pc, #144]	; (80073dc <HAL_RCC_OscConfig+0x2b4>)
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800734e:	f7fd fc8d 	bl	8004c6c <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007354:	e008      	b.n	8007368 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007356:	f7fd fc89 	bl	8004c6c <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e144      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007368:	4b1a      	ldr	r3, [pc, #104]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 800736a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1f0      	bne.n	8007356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80a0 	beq.w	80074c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007386:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10f      	bne.n	80073b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007392:	2300      	movs	r3, #0
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	4b0f      	ldr	r3, [pc, #60]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 800739c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a0:	6413      	str	r3, [r2, #64]	; 0x40
 80073a2:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <HAL_RCC_OscConfig+0x2ac>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ae:	2301      	movs	r3, #1
 80073b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073b2:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <HAL_RCC_OscConfig+0x2b8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d121      	bne.n	8007402 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073be:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <HAL_RCC_OscConfig+0x2b8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a07      	ldr	r2, [pc, #28]	; (80073e0 <HAL_RCC_OscConfig+0x2b8>)
 80073c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ca:	f7fd fc4f 	bl	8004c6c <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d0:	e011      	b.n	80073f6 <HAL_RCC_OscConfig+0x2ce>
 80073d2:	bf00      	nop
 80073d4:	40023800 	.word	0x40023800
 80073d8:	42470000 	.word	0x42470000
 80073dc:	42470e80 	.word	0x42470e80
 80073e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e4:	f7fd fc42 	bl	8004c6c <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e0fd      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f6:	4b81      	ldr	r3, [pc, #516]	; (80075fc <HAL_RCC_OscConfig+0x4d4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d106      	bne.n	8007418 <HAL_RCC_OscConfig+0x2f0>
 800740a:	4b7d      	ldr	r3, [pc, #500]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	4a7c      	ldr	r2, [pc, #496]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007410:	f043 0301 	orr.w	r3, r3, #1
 8007414:	6713      	str	r3, [r2, #112]	; 0x70
 8007416:	e01c      	b.n	8007452 <HAL_RCC_OscConfig+0x32a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b05      	cmp	r3, #5
 800741e:	d10c      	bne.n	800743a <HAL_RCC_OscConfig+0x312>
 8007420:	4b77      	ldr	r3, [pc, #476]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007424:	4a76      	ldr	r2, [pc, #472]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007426:	f043 0304 	orr.w	r3, r3, #4
 800742a:	6713      	str	r3, [r2, #112]	; 0x70
 800742c:	4b74      	ldr	r3, [pc, #464]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 800742e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007430:	4a73      	ldr	r2, [pc, #460]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	6713      	str	r3, [r2, #112]	; 0x70
 8007438:	e00b      	b.n	8007452 <HAL_RCC_OscConfig+0x32a>
 800743a:	4b71      	ldr	r3, [pc, #452]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743e:	4a70      	ldr	r2, [pc, #448]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007440:	f023 0301 	bic.w	r3, r3, #1
 8007444:	6713      	str	r3, [r2, #112]	; 0x70
 8007446:	4b6e      	ldr	r3, [pc, #440]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744a:	4a6d      	ldr	r2, [pc, #436]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 800744c:	f023 0304 	bic.w	r3, r3, #4
 8007450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d015      	beq.n	8007486 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745a:	f7fd fc07 	bl	8004c6c <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007460:	e00a      	b.n	8007478 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007462:	f7fd fc03 	bl	8004c6c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	4293      	cmp	r3, r2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e0bc      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007478:	4b61      	ldr	r3, [pc, #388]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 800747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0ee      	beq.n	8007462 <HAL_RCC_OscConfig+0x33a>
 8007484:	e014      	b.n	80074b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007486:	f7fd fbf1 	bl	8004c6c <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800748c:	e00a      	b.n	80074a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800748e:	f7fd fbed 	bl	8004c6c <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	f241 3288 	movw	r2, #5000	; 0x1388
 800749c:	4293      	cmp	r3, r2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e0a6      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074a4:	4b56      	ldr	r3, [pc, #344]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 80074a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1ee      	bne.n	800748e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d105      	bne.n	80074c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b6:	4b52      	ldr	r3, [pc, #328]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	4a51      	ldr	r2, [pc, #324]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 80074bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8092 	beq.w	80075f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074cc:	4b4c      	ldr	r3, [pc, #304]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d05c      	beq.n	8007592 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d141      	bne.n	8007564 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e0:	4b48      	ldr	r3, [pc, #288]	; (8007604 <HAL_RCC_OscConfig+0x4dc>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e6:	f7fd fbc1 	bl	8004c6c <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ec:	e008      	b.n	8007500 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ee:	f7fd fbbd 	bl	8004c6c <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e078      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007500:	4b3f      	ldr	r3, [pc, #252]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f0      	bne.n	80074ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	019b      	lsls	r3, r3, #6
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	3b01      	subs	r3, #1
 8007526:	041b      	lsls	r3, r3, #16
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	061b      	lsls	r3, r3, #24
 8007530:	4933      	ldr	r1, [pc, #204]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007532:	4313      	orrs	r3, r2
 8007534:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007536:	4b33      	ldr	r3, [pc, #204]	; (8007604 <HAL_RCC_OscConfig+0x4dc>)
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800753c:	f7fd fb96 	bl	8004c6c <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007544:	f7fd fb92 	bl	8004c6c <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e04d      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007556:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0f0      	beq.n	8007544 <HAL_RCC_OscConfig+0x41c>
 8007562:	e045      	b.n	80075f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007564:	4b27      	ldr	r3, [pc, #156]	; (8007604 <HAL_RCC_OscConfig+0x4dc>)
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800756a:	f7fd fb7f 	bl	8004c6c <HAL_GetTick>
 800756e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007570:	e008      	b.n	8007584 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007572:	f7fd fb7b 	bl	8004c6c <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e036      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007584:	4b1e      	ldr	r3, [pc, #120]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f0      	bne.n	8007572 <HAL_RCC_OscConfig+0x44a>
 8007590:	e02e      	b.n	80075f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e029      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800759e:	4b18      	ldr	r3, [pc, #96]	; (8007600 <HAL_RCC_OscConfig+0x4d8>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d11c      	bne.n	80075ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075bc:	429a      	cmp	r2, r3
 80075be:	d115      	bne.n	80075ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075c6:	4013      	ands	r3, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d10d      	bne.n	80075ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80075da:	429a      	cmp	r2, r3
 80075dc:	d106      	bne.n	80075ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d001      	beq.n	80075f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e000      	b.n	80075f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	40007000 	.word	0x40007000
 8007600:	40023800 	.word	0x40023800
 8007604:	42470060 	.word	0x42470060

08007608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e0cc      	b.n	80077b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800761c:	4b68      	ldr	r3, [pc, #416]	; (80077c0 <HAL_RCC_ClockConfig+0x1b8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d90c      	bls.n	8007644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762a:	4b65      	ldr	r3, [pc, #404]	; (80077c0 <HAL_RCC_ClockConfig+0x1b8>)
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007632:	4b63      	ldr	r3, [pc, #396]	; (80077c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d001      	beq.n	8007644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e0b8      	b.n	80077b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d020      	beq.n	8007692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d005      	beq.n	8007668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800765c:	4b59      	ldr	r3, [pc, #356]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	4a58      	ldr	r2, [pc, #352]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007674:	4b53      	ldr	r3, [pc, #332]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	4a52      	ldr	r2, [pc, #328]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 800767a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800767e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007680:	4b50      	ldr	r3, [pc, #320]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	494d      	ldr	r1, [pc, #308]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 800768e:	4313      	orrs	r3, r2
 8007690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d044      	beq.n	8007728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d107      	bne.n	80076b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076a6:	4b47      	ldr	r3, [pc, #284]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d119      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e07f      	b.n	80077b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d003      	beq.n	80076c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d107      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076c6:	4b3f      	ldr	r3, [pc, #252]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e06f      	b.n	80077b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d6:	4b3b      	ldr	r3, [pc, #236]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e067      	b.n	80077b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076e6:	4b37      	ldr	r3, [pc, #220]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f023 0203 	bic.w	r2, r3, #3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	4934      	ldr	r1, [pc, #208]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076f8:	f7fd fab8 	bl	8004c6c <HAL_GetTick>
 80076fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076fe:	e00a      	b.n	8007716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007700:	f7fd fab4 	bl	8004c6c <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	f241 3288 	movw	r2, #5000	; 0x1388
 800770e:	4293      	cmp	r3, r2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e04f      	b.n	80077b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007716:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 020c 	and.w	r2, r3, #12
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	429a      	cmp	r2, r3
 8007726:	d1eb      	bne.n	8007700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007728:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <HAL_RCC_ClockConfig+0x1b8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	429a      	cmp	r2, r3
 8007734:	d20c      	bcs.n	8007750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007736:	4b22      	ldr	r3, [pc, #136]	; (80077c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800773e:	4b20      	ldr	r3, [pc, #128]	; (80077c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d001      	beq.n	8007750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e032      	b.n	80077b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800775c:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	4916      	ldr	r1, [pc, #88]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 800776a:	4313      	orrs	r3, r2
 800776c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800777a:	4b12      	ldr	r3, [pc, #72]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	490e      	ldr	r1, [pc, #56]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 800778a:	4313      	orrs	r3, r2
 800778c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800778e:	f000 f821 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 8007792:	4602      	mov	r2, r0
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	091b      	lsrs	r3, r3, #4
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	490a      	ldr	r1, [pc, #40]	; (80077c8 <HAL_RCC_ClockConfig+0x1c0>)
 80077a0:	5ccb      	ldrb	r3, [r1, r3]
 80077a2:	fa22 f303 	lsr.w	r3, r2, r3
 80077a6:	4a09      	ldr	r2, [pc, #36]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 80077a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077aa:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fd fa18 	bl	8004be4 <HAL_InitTick>

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40023c00 	.word	0x40023c00
 80077c4:	40023800 	.word	0x40023800
 80077c8:	080098d4 	.word	0x080098d4
 80077cc:	20000140 	.word	0x20000140
 80077d0:	200001d8 	.word	0x200001d8

080077d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	2300      	movs	r3, #0
 80077e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077ec:	4b67      	ldr	r3, [pc, #412]	; (800798c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 030c 	and.w	r3, r3, #12
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d00d      	beq.n	8007814 <HAL_RCC_GetSysClockFreq+0x40>
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	f200 80bd 	bhi.w	8007978 <HAL_RCC_GetSysClockFreq+0x1a4>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_RCC_GetSysClockFreq+0x34>
 8007802:	2b04      	cmp	r3, #4
 8007804:	d003      	beq.n	800780e <HAL_RCC_GetSysClockFreq+0x3a>
 8007806:	e0b7      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007808:	4b61      	ldr	r3, [pc, #388]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800780a:	60bb      	str	r3, [r7, #8]
       break;
 800780c:	e0b7      	b.n	800797e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800780e:	4b61      	ldr	r3, [pc, #388]	; (8007994 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007810:	60bb      	str	r3, [r7, #8]
      break;
 8007812:	e0b4      	b.n	800797e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007814:	4b5d      	ldr	r3, [pc, #372]	; (800798c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800781c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800781e:	4b5b      	ldr	r3, [pc, #364]	; (800798c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d04d      	beq.n	80078c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800782a:	4b58      	ldr	r3, [pc, #352]	; (800798c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	099b      	lsrs	r3, r3, #6
 8007830:	461a      	mov	r2, r3
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	f240 10ff 	movw	r0, #511	; 0x1ff
 800783a:	f04f 0100 	mov.w	r1, #0
 800783e:	ea02 0800 	and.w	r8, r2, r0
 8007842:	ea03 0901 	and.w	r9, r3, r1
 8007846:	4640      	mov	r0, r8
 8007848:	4649      	mov	r1, r9
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	014b      	lsls	r3, r1, #5
 8007854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007858:	0142      	lsls	r2, r0, #5
 800785a:	4610      	mov	r0, r2
 800785c:	4619      	mov	r1, r3
 800785e:	ebb0 0008 	subs.w	r0, r0, r8
 8007862:	eb61 0109 	sbc.w	r1, r1, r9
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	018b      	lsls	r3, r1, #6
 8007870:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007874:	0182      	lsls	r2, r0, #6
 8007876:	1a12      	subs	r2, r2, r0
 8007878:	eb63 0301 	sbc.w	r3, r3, r1
 800787c:	f04f 0000 	mov.w	r0, #0
 8007880:	f04f 0100 	mov.w	r1, #0
 8007884:	00d9      	lsls	r1, r3, #3
 8007886:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800788a:	00d0      	lsls	r0, r2, #3
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	eb12 0208 	adds.w	r2, r2, r8
 8007894:	eb43 0309 	adc.w	r3, r3, r9
 8007898:	f04f 0000 	mov.w	r0, #0
 800789c:	f04f 0100 	mov.w	r1, #0
 80078a0:	0259      	lsls	r1, r3, #9
 80078a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80078a6:	0250      	lsls	r0, r2, #9
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4610      	mov	r0, r2
 80078ae:	4619      	mov	r1, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	f7f8 fcea 	bl	8000290 <__aeabi_uldivmod>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4613      	mov	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e04a      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c6:	4b31      	ldr	r3, [pc, #196]	; (800798c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	099b      	lsrs	r3, r3, #6
 80078cc:	461a      	mov	r2, r3
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078d6:	f04f 0100 	mov.w	r1, #0
 80078da:	ea02 0400 	and.w	r4, r2, r0
 80078de:	ea03 0501 	and.w	r5, r3, r1
 80078e2:	4620      	mov	r0, r4
 80078e4:	4629      	mov	r1, r5
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	f04f 0300 	mov.w	r3, #0
 80078ee:	014b      	lsls	r3, r1, #5
 80078f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80078f4:	0142      	lsls	r2, r0, #5
 80078f6:	4610      	mov	r0, r2
 80078f8:	4619      	mov	r1, r3
 80078fa:	1b00      	subs	r0, r0, r4
 80078fc:	eb61 0105 	sbc.w	r1, r1, r5
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	018b      	lsls	r3, r1, #6
 800790a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800790e:	0182      	lsls	r2, r0, #6
 8007910:	1a12      	subs	r2, r2, r0
 8007912:	eb63 0301 	sbc.w	r3, r3, r1
 8007916:	f04f 0000 	mov.w	r0, #0
 800791a:	f04f 0100 	mov.w	r1, #0
 800791e:	00d9      	lsls	r1, r3, #3
 8007920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007924:	00d0      	lsls	r0, r2, #3
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	1912      	adds	r2, r2, r4
 800792c:	eb45 0303 	adc.w	r3, r5, r3
 8007930:	f04f 0000 	mov.w	r0, #0
 8007934:	f04f 0100 	mov.w	r1, #0
 8007938:	0299      	lsls	r1, r3, #10
 800793a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800793e:	0290      	lsls	r0, r2, #10
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4610      	mov	r0, r2
 8007946:	4619      	mov	r1, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	461a      	mov	r2, r3
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	f7f8 fc9e 	bl	8000290 <__aeabi_uldivmod>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4613      	mov	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	0c1b      	lsrs	r3, r3, #16
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	3301      	adds	r3, #1
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	fbb2 f3f3 	udiv	r3, r2, r3
 8007974:	60bb      	str	r3, [r7, #8]
      break;
 8007976:	e002      	b.n	800797e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800797a:	60bb      	str	r3, [r7, #8]
      break;
 800797c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800797e:	68bb      	ldr	r3, [r7, #8]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800
 8007990:	00f42400 	.word	0x00f42400
 8007994:	007a1200 	.word	0x007a1200

08007998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800799c:	4b03      	ldr	r3, [pc, #12]	; (80079ac <HAL_RCC_GetHCLKFreq+0x14>)
 800799e:	681b      	ldr	r3, [r3, #0]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	20000140 	.word	0x20000140

080079b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079b4:	f7ff fff0 	bl	8007998 <HAL_RCC_GetHCLKFreq>
 80079b8:	4602      	mov	r2, r0
 80079ba:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	0a9b      	lsrs	r3, r3, #10
 80079c0:	f003 0307 	and.w	r3, r3, #7
 80079c4:	4903      	ldr	r1, [pc, #12]	; (80079d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079c6:	5ccb      	ldrb	r3, [r1, r3]
 80079c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	40023800 	.word	0x40023800
 80079d4:	080098e4 	.word	0x080098e4

080079d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d105      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d075      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a0c:	4bad      	ldr	r3, [pc, #692]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a12:	f7fd f92b 	bl	8004c6c <HAL_GetTick>
 8007a16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a18:	e008      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a1a:	f7fd f927 	bl	8004c6c <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e18b      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a2c:	4ba6      	ldr	r3, [pc, #664]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f0      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d009      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	019a      	lsls	r2, r3, #6
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	071b      	lsls	r3, r3, #28
 8007a50:	499d      	ldr	r1, [pc, #628]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01f      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a64:	4b98      	ldr	r3, [pc, #608]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a6a:	0f1b      	lsrs	r3, r3, #28
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	019a      	lsls	r2, r3, #6
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	061b      	lsls	r3, r3, #24
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	071b      	lsls	r3, r3, #28
 8007a84:	4990      	ldr	r1, [pc, #576]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a8c:	4b8e      	ldr	r3, [pc, #568]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a92:	f023 021f 	bic.w	r2, r3, #31
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	498a      	ldr	r1, [pc, #552]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00d      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	019a      	lsls	r2, r3, #6
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	061b      	lsls	r3, r3, #24
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	071b      	lsls	r3, r3, #28
 8007ac4:	4980      	ldr	r1, [pc, #512]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007acc:	4b7d      	ldr	r3, [pc, #500]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007ace:	2201      	movs	r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ad2:	f7fd f8cb 	bl	8004c6c <HAL_GetTick>
 8007ad6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ad8:	e008      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ada:	f7fd f8c7 	bl	8004c6c <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e12b      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007aec:	4b76      	ldr	r3, [pc, #472]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0f0      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d079      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b10:	4b6e      	ldr	r3, [pc, #440]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b16:	f7fd f8a9 	bl	8004c6c <HAL_GetTick>
 8007b1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b1c:	e008      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b1e:	f7fd f8a5 	bl	8004c6c <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d901      	bls.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e109      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b30:	4b65      	ldr	r3, [pc, #404]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b3c:	d0ef      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d020      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b4a:	4b5f      	ldr	r3, [pc, #380]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b50:	0f1b      	lsrs	r3, r3, #28
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	019a      	lsls	r2, r3, #6
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	061b      	lsls	r3, r3, #24
 8007b64:	431a      	orrs	r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	071b      	lsls	r3, r3, #28
 8007b6a:	4957      	ldr	r1, [pc, #348]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007b72:	4b55      	ldr	r3, [pc, #340]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	4950      	ldr	r1, [pc, #320]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0308 	and.w	r3, r3, #8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01e      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b98:	4b4b      	ldr	r3, [pc, #300]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	0e1b      	lsrs	r3, r3, #24
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	019a      	lsls	r2, r3, #6
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	061b      	lsls	r3, r3, #24
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	071b      	lsls	r3, r3, #28
 8007bb8:	4943      	ldr	r1, [pc, #268]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007bc0:	4b41      	ldr	r3, [pc, #260]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	493e      	ldr	r1, [pc, #248]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007bd6:	4b3d      	ldr	r3, [pc, #244]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bdc:	f7fd f846 	bl	8004c6c <HAL_GetTick>
 8007be0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007be4:	f7fd f842 	bl	8004c6c <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e0a6      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bf6:	4b34      	ldr	r3, [pc, #208]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c02:	d1ef      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 808d 	beq.w	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	4b2c      	ldr	r3, [pc, #176]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	4a2b      	ldr	r2, [pc, #172]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c20:	6413      	str	r3, [r2, #64]	; 0x40
 8007c22:	4b29      	ldr	r3, [pc, #164]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c2e:	4b28      	ldr	r3, [pc, #160]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a27      	ldr	r2, [pc, #156]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c3a:	f7fd f817 	bl	8004c6c <HAL_GetTick>
 8007c3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c40:	e008      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c42:	f7fd f813 	bl	8004c6c <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e077      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c54:	4b1e      	ldr	r3, [pc, #120]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0f0      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c60:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d039      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d032      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c88:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c8e:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c94:	4a0c      	ldr	r2, [pc, #48]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d11e      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ca6:	f7fc ffe1 	bl	8004c6c <HAL_GetTick>
 8007caa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cac:	e014      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cae:	f7fc ffdd 	bl	8004c6c <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d90b      	bls.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e03f      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007cc4:	42470068 	.word	0x42470068
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	42470070 	.word	0x42470070
 8007cd0:	40007000 	.word	0x40007000
 8007cd4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cd8:	4b1c      	ldr	r3, [pc, #112]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0e4      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf0:	d10d      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007cf2:	4b16      	ldr	r3, [pc, #88]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d06:	4911      	ldr	r1, [pc, #68]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	608b      	str	r3, [r1, #8]
 8007d0c:	e005      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	4a0e      	ldr	r2, [pc, #56]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d18:	6093      	str	r3, [r2, #8]
 8007d1a:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d26:	4909      	ldr	r1, [pc, #36]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d004      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007d40:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	424711e0 	.word	0x424711e0

08007d54 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e025      	b.n	8007db4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f81d 	bl	8007dbc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2202      	movs	r2, #2
 8007d86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3304      	adds	r3, #4
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f000 ff0f 	bl	8008bb8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	f000 ff7a 	bl	8008c9e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d101      	bne.n	8007dec <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007de8:	2302      	movs	r3, #2
 8007dea:	e018      	b.n	8007e1e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	68b9      	ldr	r1, [r7, #8]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 ffcd 	bl	8008d9c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d104      	bne.n	8007e14 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2205      	movs	r2, #5
 8007e0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007e12:	e003      	b.n	8007e1c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d101      	bne.n	8007e40 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e00e      	b.n	8007e5e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 ffe0 	bl	8008e14 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e05d      	b.n	8007f34 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d106      	bne.n	8007e92 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f87d 	bl	8007f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ea8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	ea42 0103 	orr.w	r1, r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	f003 0104 	and.w	r1, r3, #4
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f08:	d104      	bne.n	8007f14 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f12:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69da      	ldr	r2, [r3, #28]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e01a      	b.n	8007f84 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f64:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f81a 	bl	8007fa0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_SPI_Transmit+0x22>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e140      	b.n	8008258 <HAL_SPI_Transmit+0x2a4>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fde:	f7fc fe45 	bl	8004c6c <HAL_GetTick>
 8007fe2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d002      	beq.n	8007ffa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ff8:	e125      	b.n	8008246 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SPI_Transmit+0x52>
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800800a:	e11c      	b.n	8008246 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2203      	movs	r2, #3
 8008010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	88fa      	ldrh	r2, [r7, #6]
 800802a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008052:	d107      	bne.n	8008064 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008062:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800806c:	d10f      	bne.n	800808e <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800808c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008098:	2b40      	cmp	r3, #64	; 0x40
 800809a:	d007      	beq.n	80080ac <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b4:	d14b      	bne.n	800814e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <HAL_SPI_Transmit+0x110>
 80080be:	8afb      	ldrh	r3, [r7, #22]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d13e      	bne.n	8008142 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	881a      	ldrh	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	1c9a      	adds	r2, r3, #2
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080e8:	e02b      	b.n	8008142 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d112      	bne.n	800811e <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	881a      	ldrh	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008112:	b29b      	uxth	r3, r3
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	86da      	strh	r2, [r3, #54]	; 0x36
 800811c:	e011      	b.n	8008142 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800811e:	f7fc fda5 	bl	8004c6c <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d803      	bhi.n	8008136 <HAL_SPI_Transmit+0x182>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d102      	bne.n	800813c <HAL_SPI_Transmit+0x188>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d102      	bne.n	8008142 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008140:	e081      	b.n	8008246 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1ce      	bne.n	80080ea <HAL_SPI_Transmit+0x136>
 800814c:	e04c      	b.n	80081e8 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HAL_SPI_Transmit+0x1a8>
 8008156:	8afb      	ldrh	r3, [r7, #22]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d140      	bne.n	80081de <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	7812      	ldrb	r2, [r2, #0]
 8008168:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008178:	b29b      	uxth	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	b29a      	uxth	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008182:	e02c      	b.n	80081de <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b02      	cmp	r3, #2
 8008190:	d113      	bne.n	80081ba <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	330c      	adds	r3, #12
 800819c:	7812      	ldrb	r2, [r2, #0]
 800819e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80081b8:	e011      	b.n	80081de <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ba:	f7fc fd57 	bl	8004c6c <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d803      	bhi.n	80081d2 <HAL_SPI_Transmit+0x21e>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d102      	bne.n	80081d8 <HAL_SPI_Transmit+0x224>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081dc:	e033      	b.n	8008246 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1cd      	bne.n	8008184 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f0:	d107      	bne.n	8008202 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008200:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 fc94 	bl	8008b34 <SPI_EndRxTxTransaction>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	613b      	str	r3, [r7, #16]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	77fb      	strb	r3, [r7, #31]
 8008242:	e000      	b.n	8008246 <HAL_SPI_Transmit+0x292>
  }

error:
 8008244:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008256:	7ffb      	ldrb	r3, [r7, #31]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af02      	add	r7, sp, #8
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	4613      	mov	r3, r2
 800826e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800827c:	d112      	bne.n	80082a4 <HAL_SPI_Receive+0x44>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10e      	bne.n	80082a4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2204      	movs	r2, #4
 800828a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	4613      	mov	r3, r2
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 f95f 	bl	800855e <HAL_SPI_TransmitReceive>
 80082a0:	4603      	mov	r3, r0
 80082a2:	e158      	b.n	8008556 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <HAL_SPI_Receive+0x52>
 80082ae:	2302      	movs	r3, #2
 80082b0:	e151      	b.n	8008556 <HAL_SPI_Receive+0x2f6>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ba:	f7fc fcd7 	bl	8004c6c <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d002      	beq.n	80082d2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80082cc:	2302      	movs	r3, #2
 80082ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082d0:	e138      	b.n	8008544 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <HAL_SPI_Receive+0x7e>
 80082d8:	88fb      	ldrh	r3, [r7, #6]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082e2:	e12f      	b.n	8008544 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2204      	movs	r2, #4
 80082e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	88fa      	ldrh	r2, [r7, #6]
 8008302:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832a:	d116      	bne.n	800835a <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800834a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008362:	d107      	bne.n	8008374 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008372:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d007      	beq.n	8008392 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008390:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d162      	bne.n	8008460 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800839a:	e02e      	b.n	80083fa <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d115      	bne.n	80083d6 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f103 020c 	add.w	r2, r3, #12
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	7812      	ldrb	r2, [r2, #0]
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083d4:	e011      	b.n	80083fa <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083d6:	f7fc fc49 	bl	8004c6c <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d803      	bhi.n	80083ee <HAL_SPI_Receive+0x18e>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d102      	bne.n	80083f4 <HAL_SPI_Receive+0x194>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d102      	bne.n	80083fa <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80083f8:	e0a4      	b.n	8008544 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1cb      	bne.n	800839c <HAL_SPI_Receive+0x13c>
 8008404:	e031      	b.n	800846a <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b01      	cmp	r3, #1
 8008412:	d113      	bne.n	800843c <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	b292      	uxth	r2, r2
 8008420:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	1c9a      	adds	r2, r3, #2
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008430:	b29b      	uxth	r3, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800843a:	e011      	b.n	8008460 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800843c:	f7fc fc16 	bl	8004c6c <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d803      	bhi.n	8008454 <HAL_SPI_Receive+0x1f4>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	d102      	bne.n	800845a <HAL_SPI_Receive+0x1fa>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800845e:	e071      	b.n	8008544 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1cd      	bne.n	8008406 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008472:	d142      	bne.n	80084fa <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008482:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2201      	movs	r2, #1
 800848c:	2101      	movs	r1, #1
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 fa81 	bl	8008996 <SPI_WaitFlagStateUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	75fb      	strb	r3, [r7, #23]
      goto error;
 800849e:	e051      	b.n	8008544 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a8:	d107      	bne.n	80084ba <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	b292      	uxth	r2, r2
 80084b6:	801a      	strh	r2, [r3, #0]
 80084b8:	e008      	b.n	80084cc <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f103 020c 	add.w	r2, r3, #12
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	7812      	ldrb	r2, [r2, #0]
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2201      	movs	r2, #1
 80084d4:	2101      	movs	r1, #1
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 fa5d 	bl	8008996 <SPI_WaitFlagStateUntilTimeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e6:	f043 0202 	orr.w	r2, r3, #2
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	75fb      	strb	r3, [r7, #23]
      goto error;
 80084f2:	e027      	b.n	8008544 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 fab3 	bl	8008a6a <SPI_EndRxTransaction>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 0310 	and.w	r3, r3, #16
 800851a:	2b10      	cmp	r3, #16
 800851c:	d10a      	bne.n	8008534 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008522:	f043 0202 	orr.w	r2, r3, #2
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008532:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	75fb      	strb	r3, [r7, #23]
 8008540:	e000      	b.n	8008544 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008542:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008554:	7dfb      	ldrb	r3, [r7, #23]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b08e      	sub	sp, #56	; 0x38
 8008562:	af02      	add	r7, sp, #8
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800856c:	2301      	movs	r3, #1
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_SPI_TransmitReceive+0x26>
 8008580:	2302      	movs	r3, #2
 8008582:	e1f6      	b.n	8008972 <HAL_SPI_TransmitReceive+0x414>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800858c:	f7fc fb6e 	bl	8004c6c <HAL_GetTick>
 8008590:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80085a2:	887b      	ldrh	r3, [r7, #2]
 80085a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d00f      	beq.n	80085ce <HAL_SPI_TransmitReceive+0x70>
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085b4:	d107      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x68>
 80085be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d003      	beq.n	80085ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80085c6:	2302      	movs	r3, #2
 80085c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085cc:	e1c7      	b.n	800895e <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <HAL_SPI_TransmitReceive+0x82>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <HAL_SPI_TransmitReceive+0x82>
 80085da:	887b      	ldrh	r3, [r7, #2]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d103      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085e6:	e1ba      	b.n	800895e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d003      	beq.n	80085fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2205      	movs	r2, #5
 80085f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	887a      	ldrh	r2, [r7, #2]
 800860c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	887a      	ldrh	r2, [r7, #2]
 8008612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	887a      	ldrh	r2, [r7, #2]
 800861e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	887a      	ldrh	r2, [r7, #2]
 8008624:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800863a:	d10f      	bne.n	800865c <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800865a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	d007      	beq.n	800867a <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008678:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008682:	f040 808b 	bne.w	800879c <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_SPI_TransmitReceive+0x136>
 800868e:	8b7b      	ldrh	r3, [r7, #26]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d178      	bne.n	8008786 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008698:	881a      	ldrh	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a4:	1c9a      	adds	r2, r3, #2
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b8:	e065      	b.n	8008786 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d12d      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x1c6>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d028      	beq.n	8008724 <HAL_SPI_TransmitReceive+0x1c6>
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d125      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086dc:	881a      	ldrh	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	1c9a      	adds	r2, r3, #2
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10c      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x1c6>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008712:	d107      	bne.n	8008724 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008722:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b01      	cmp	r3, #1
 8008730:	d119      	bne.n	8008766 <HAL_SPI_TransmitReceive+0x208>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d014      	beq.n	8008766 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	b292      	uxth	r2, r2
 8008748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	1c9a      	adds	r2, r3, #2
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008762:	2301      	movs	r3, #1
 8008764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008766:	f7fc fa81 	bl	8004c6c <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008772:	429a      	cmp	r2, r3
 8008774:	d807      	bhi.n	8008786 <HAL_SPI_TransmitReceive+0x228>
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877c:	d003      	beq.n	8008786 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008784:	e0eb      	b.n	800895e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d194      	bne.n	80086ba <HAL_SPI_TransmitReceive+0x15c>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d18f      	bne.n	80086ba <HAL_SPI_TransmitReceive+0x15c>
 800879a:	e08e      	b.n	80088ba <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_SPI_TransmitReceive+0x24c>
 80087a4:	8b7b      	ldrh	r3, [r7, #26]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d17d      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	330c      	adds	r3, #12
 80087b4:	7812      	ldrb	r2, [r2, #0]
 80087b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087bc:	1c5a      	adds	r2, r3, #1
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	3b01      	subs	r3, #1
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087d0:	e069      	b.n	80088a6 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d12e      	bne.n	800883e <HAL_SPI_TransmitReceive+0x2e0>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d029      	beq.n	800883e <HAL_SPI_TransmitReceive+0x2e0>
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d126      	bne.n	800883e <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330c      	adds	r3, #12
 80087fa:	7812      	ldrb	r2, [r2, #0]
 80087fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800880c:	b29b      	uxth	r3, r3
 800880e:	3b01      	subs	r3, #1
 8008810:	b29a      	uxth	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10c      	bne.n	800883e <HAL_SPI_TransmitReceive+0x2e0>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800882c:	d107      	bne.n	800883e <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800883c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b01      	cmp	r3, #1
 800884a:	d119      	bne.n	8008880 <HAL_SPI_TransmitReceive+0x322>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d014      	beq.n	8008880 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008860:	b2d2      	uxtb	r2, r2
 8008862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008872:	b29b      	uxth	r3, r3
 8008874:	3b01      	subs	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800887c:	2301      	movs	r3, #1
 800887e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008880:	f7fc f9f4 	bl	8004c6c <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800888c:	429a      	cmp	r2, r3
 800888e:	d803      	bhi.n	8008898 <HAL_SPI_TransmitReceive+0x33a>
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008896:	d102      	bne.n	800889e <HAL_SPI_TransmitReceive+0x340>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	2b00      	cmp	r3, #0
 800889c:	d103      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80088a4:	e05b      	b.n	800895e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d190      	bne.n	80087d2 <HAL_SPI_TransmitReceive+0x274>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d18b      	bne.n	80087d2 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c2:	d117      	bne.n	80088f4 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	2201      	movs	r2, #1
 80088cc:	2101      	movs	r1, #1
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 f861 	bl	8008996 <SPI_WaitFlagStateUntilTimeout>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	f043 0202 	orr.w	r2, r3, #2
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80088ec:	e037      	b.n	800895e <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d10d      	bne.n	800891e <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008906:	f043 0202 	orr.w	r2, r3, #2
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008916:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800891e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008920:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 f906 	bl	8008b34 <SPI_EndRxTxTransaction>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d006      	beq.n	800893c <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2220      	movs	r2, #32
 8008938:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800893a:	e010      	b.n	800895e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10b      	bne.n	800895c <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	e000      	b.n	800895e <HAL_SPI_TransmitReceive+0x400>
  }

error :
 800895c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800896e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008972:	4618      	mov	r0, r3
 8008974:	3730      	adds	r7, #48	; 0x30
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008988:	b2db      	uxtb	r3, r3
}
 800898a:	4618      	mov	r0, r3
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	4613      	mov	r3, r2
 80089a4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089a6:	e04c      	b.n	8008a42 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d048      	beq.n	8008a42 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80089b0:	f7fc f95c 	bl	8004c6c <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d902      	bls.n	80089c6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d13d      	bne.n	8008a42 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089de:	d111      	bne.n	8008a04 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089e8:	d004      	beq.n	80089f4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089f2:	d107      	bne.n	8008a04 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a0c:	d10f      	bne.n	8008a2e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e00f      	b.n	8008a62 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	bf0c      	ite	eq
 8008a52:	2301      	moveq	r3, #1
 8008a54:	2300      	movne	r3, #0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d1a3      	bne.n	80089a8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b086      	sub	sp, #24
 8008a6e:	af02      	add	r7, sp, #8
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a7e:	d111      	bne.n	8008aa4 <SPI_EndRxTransaction+0x3a>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a88:	d004      	beq.n	8008a94 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a92:	d107      	bne.n	8008aa4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aa2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aac:	d12a      	bne.n	8008b04 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ab6:	d012      	beq.n	8008ade <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2180      	movs	r1, #128	; 0x80
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff ff67 	bl	8008996 <SPI_WaitFlagStateUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d02d      	beq.n	8008b2a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad2:	f043 0220 	orr.w	r2, r3, #32
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e026      	b.n	8008b2c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f7ff ff54 	bl	8008996 <SPI_WaitFlagStateUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01a      	beq.n	8008b2a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af8:	f043 0220 	orr.w	r2, r3, #32
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e013      	b.n	8008b2c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f7ff ff41 	bl	8008996 <SPI_WaitFlagStateUntilTimeout>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d007      	beq.n	8008b2a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1e:	f043 0220 	orr.w	r2, r3, #32
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e000      	b.n	8008b2c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af02      	add	r7, sp, #8
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b40:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <SPI_EndRxTxTransaction+0x7c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a1b      	ldr	r2, [pc, #108]	; (8008bb4 <SPI_EndRxTxTransaction+0x80>)
 8008b46:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4a:	0d5b      	lsrs	r3, r3, #21
 8008b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
 8008b54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b5e:	d112      	bne.n	8008b86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2200      	movs	r2, #0
 8008b68:	2180      	movs	r1, #128	; 0x80
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff ff13 	bl	8008996 <SPI_WaitFlagStateUntilTimeout>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d016      	beq.n	8008ba4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7a:	f043 0220 	orr.w	r2, r3, #32
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e00f      	b.n	8008ba6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00a      	beq.n	8008ba2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9c:	2b80      	cmp	r3, #128	; 0x80
 8008b9e:	d0f2      	beq.n	8008b86 <SPI_EndRxTxTransaction+0x52>
 8008ba0:	e000      	b.n	8008ba4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008ba2:	bf00      	nop
  }

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000140 	.word	0x20000140
 8008bb4:	165e9f81 	.word	0x165e9f81

08008bb8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d029      	beq.n	8008c26 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008bde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008be2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bec:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008bf2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008bf8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008bfe:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008c04:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008c0a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008c10:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008c16:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	e034      	b.n	8008c90 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c32:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008c3c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008c42:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008c56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c5a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c64:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008c6a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008c70:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008c76:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008c7c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b087      	sub	sp, #28
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d02e      	beq.n	8008d16 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008cc4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008cd4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008cde:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008ce8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008cf2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008cfc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008d06:	4313      	orrs	r3, r2
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	609a      	str	r2, [r3, #8]
 8008d14:	e03b      	b.n	8008d8e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d26:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008d4c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d5c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008d66:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008d70:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008db8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008dc2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008dd4:	f7fb ff4a 	bl	8004c6c <HAL_GetTick>
 8008dd8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008dda:	e010      	b.n	8008dfe <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de2:	d00c      	beq.n	8008dfe <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d007      	beq.n	8008dfa <FMC_SDRAM_SendCommand+0x5e>
 8008dea:	f7fb ff3f 	bl	8004c6c <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d201      	bcs.n	8008dfe <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e006      	b.n	8008e0c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d0e8      	beq.n	8008ddc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695a      	ldr	r2, [r3, #20]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	431a      	orrs	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
	...

08008e3c <__libc_init_array>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4d0d      	ldr	r5, [pc, #52]	; (8008e74 <__libc_init_array+0x38>)
 8008e40:	4c0d      	ldr	r4, [pc, #52]	; (8008e78 <__libc_init_array+0x3c>)
 8008e42:	1b64      	subs	r4, r4, r5
 8008e44:	10a4      	asrs	r4, r4, #2
 8008e46:	2600      	movs	r6, #0
 8008e48:	42a6      	cmp	r6, r4
 8008e4a:	d109      	bne.n	8008e60 <__libc_init_array+0x24>
 8008e4c:	4d0b      	ldr	r5, [pc, #44]	; (8008e7c <__libc_init_array+0x40>)
 8008e4e:	4c0c      	ldr	r4, [pc, #48]	; (8008e80 <__libc_init_array+0x44>)
 8008e50:	f000 fc70 	bl	8009734 <_init>
 8008e54:	1b64      	subs	r4, r4, r5
 8008e56:	10a4      	asrs	r4, r4, #2
 8008e58:	2600      	movs	r6, #0
 8008e5a:	42a6      	cmp	r6, r4
 8008e5c:	d105      	bne.n	8008e6a <__libc_init_array+0x2e>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e64:	4798      	blx	r3
 8008e66:	3601      	adds	r6, #1
 8008e68:	e7ee      	b.n	8008e48 <__libc_init_array+0xc>
 8008e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6e:	4798      	blx	r3
 8008e70:	3601      	adds	r6, #1
 8008e72:	e7f2      	b.n	8008e5a <__libc_init_array+0x1e>
 8008e74:	0800d318 	.word	0x0800d318
 8008e78:	0800d318 	.word	0x0800d318
 8008e7c:	0800d318 	.word	0x0800d318
 8008e80:	0800d31c 	.word	0x0800d31c

08008e84 <memset>:
 8008e84:	4402      	add	r2, r0
 8008e86:	4603      	mov	r3, r0
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d100      	bne.n	8008e8e <memset+0xa>
 8008e8c:	4770      	bx	lr
 8008e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e92:	e7f9      	b.n	8008e88 <memset+0x4>

08008e94 <sniprintf>:
 8008e94:	b40c      	push	{r2, r3}
 8008e96:	b530      	push	{r4, r5, lr}
 8008e98:	4b17      	ldr	r3, [pc, #92]	; (8008ef8 <sniprintf+0x64>)
 8008e9a:	1e0c      	subs	r4, r1, #0
 8008e9c:	681d      	ldr	r5, [r3, #0]
 8008e9e:	b09d      	sub	sp, #116	; 0x74
 8008ea0:	da08      	bge.n	8008eb4 <sniprintf+0x20>
 8008ea2:	238b      	movs	r3, #139	; 0x8b
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eaa:	b01d      	add	sp, #116	; 0x74
 8008eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eb0:	b002      	add	sp, #8
 8008eb2:	4770      	bx	lr
 8008eb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008eb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ebc:	bf14      	ite	ne
 8008ebe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ec2:	4623      	moveq	r3, r4
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	9307      	str	r3, [sp, #28]
 8008ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ecc:	9002      	str	r0, [sp, #8]
 8008ece:	9006      	str	r0, [sp, #24]
 8008ed0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ed4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ed6:	ab21      	add	r3, sp, #132	; 0x84
 8008ed8:	a902      	add	r1, sp, #8
 8008eda:	4628      	mov	r0, r5
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	f000 f869 	bl	8008fb4 <_svfiprintf_r>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	bfbc      	itt	lt
 8008ee6:	238b      	movlt	r3, #139	; 0x8b
 8008ee8:	602b      	strlt	r3, [r5, #0]
 8008eea:	2c00      	cmp	r4, #0
 8008eec:	d0dd      	beq.n	8008eaa <sniprintf+0x16>
 8008eee:	9b02      	ldr	r3, [sp, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	701a      	strb	r2, [r3, #0]
 8008ef4:	e7d9      	b.n	8008eaa <sniprintf+0x16>
 8008ef6:	bf00      	nop
 8008ef8:	200001e0 	.word	0x200001e0

08008efc <__ssputs_r>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	688e      	ldr	r6, [r1, #8]
 8008f02:	429e      	cmp	r6, r3
 8008f04:	4682      	mov	sl, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	4690      	mov	r8, r2
 8008f0a:	461f      	mov	r7, r3
 8008f0c:	d838      	bhi.n	8008f80 <__ssputs_r+0x84>
 8008f0e:	898a      	ldrh	r2, [r1, #12]
 8008f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f14:	d032      	beq.n	8008f7c <__ssputs_r+0x80>
 8008f16:	6825      	ldr	r5, [r4, #0]
 8008f18:	6909      	ldr	r1, [r1, #16]
 8008f1a:	eba5 0901 	sub.w	r9, r5, r1
 8008f1e:	6965      	ldr	r5, [r4, #20]
 8008f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f28:	3301      	adds	r3, #1
 8008f2a:	444b      	add	r3, r9
 8008f2c:	106d      	asrs	r5, r5, #1
 8008f2e:	429d      	cmp	r5, r3
 8008f30:	bf38      	it	cc
 8008f32:	461d      	movcc	r5, r3
 8008f34:	0553      	lsls	r3, r2, #21
 8008f36:	d531      	bpl.n	8008f9c <__ssputs_r+0xa0>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f000 fb47 	bl	80095cc <_malloc_r>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	b950      	cbnz	r0, 8008f58 <__ssputs_r+0x5c>
 8008f42:	230c      	movs	r3, #12
 8008f44:	f8ca 3000 	str.w	r3, [sl]
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f58:	6921      	ldr	r1, [r4, #16]
 8008f5a:	464a      	mov	r2, r9
 8008f5c:	f000 fabe 	bl	80094dc <memcpy>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	6126      	str	r6, [r4, #16]
 8008f6e:	6165      	str	r5, [r4, #20]
 8008f70:	444e      	add	r6, r9
 8008f72:	eba5 0509 	sub.w	r5, r5, r9
 8008f76:	6026      	str	r6, [r4, #0]
 8008f78:	60a5      	str	r5, [r4, #8]
 8008f7a:	463e      	mov	r6, r7
 8008f7c:	42be      	cmp	r6, r7
 8008f7e:	d900      	bls.n	8008f82 <__ssputs_r+0x86>
 8008f80:	463e      	mov	r6, r7
 8008f82:	4632      	mov	r2, r6
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	4641      	mov	r1, r8
 8008f88:	f000 fab6 	bl	80094f8 <memmove>
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	6822      	ldr	r2, [r4, #0]
 8008f90:	1b9b      	subs	r3, r3, r6
 8008f92:	4432      	add	r2, r6
 8008f94:	60a3      	str	r3, [r4, #8]
 8008f96:	6022      	str	r2, [r4, #0]
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e7db      	b.n	8008f54 <__ssputs_r+0x58>
 8008f9c:	462a      	mov	r2, r5
 8008f9e:	f000 fb6f 	bl	8009680 <_realloc_r>
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d1e1      	bne.n	8008f6c <__ssputs_r+0x70>
 8008fa8:	6921      	ldr	r1, [r4, #16]
 8008faa:	4650      	mov	r0, sl
 8008fac:	f000 fabe 	bl	800952c <_free_r>
 8008fb0:	e7c7      	b.n	8008f42 <__ssputs_r+0x46>
	...

08008fb4 <_svfiprintf_r>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	4698      	mov	r8, r3
 8008fba:	898b      	ldrh	r3, [r1, #12]
 8008fbc:	061b      	lsls	r3, r3, #24
 8008fbe:	b09d      	sub	sp, #116	; 0x74
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	d50e      	bpl.n	8008fe6 <_svfiprintf_r+0x32>
 8008fc8:	690b      	ldr	r3, [r1, #16]
 8008fca:	b963      	cbnz	r3, 8008fe6 <_svfiprintf_r+0x32>
 8008fcc:	2140      	movs	r1, #64	; 0x40
 8008fce:	f000 fafd 	bl	80095cc <_malloc_r>
 8008fd2:	6028      	str	r0, [r5, #0]
 8008fd4:	6128      	str	r0, [r5, #16]
 8008fd6:	b920      	cbnz	r0, 8008fe2 <_svfiprintf_r+0x2e>
 8008fd8:	230c      	movs	r3, #12
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	e0d1      	b.n	8009186 <_svfiprintf_r+0x1d2>
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	616b      	str	r3, [r5, #20]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fea:	2320      	movs	r3, #32
 8008fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff4:	2330      	movs	r3, #48	; 0x30
 8008ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091a0 <_svfiprintf_r+0x1ec>
 8008ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ffe:	f04f 0901 	mov.w	r9, #1
 8009002:	4623      	mov	r3, r4
 8009004:	469a      	mov	sl, r3
 8009006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800900a:	b10a      	cbz	r2, 8009010 <_svfiprintf_r+0x5c>
 800900c:	2a25      	cmp	r2, #37	; 0x25
 800900e:	d1f9      	bne.n	8009004 <_svfiprintf_r+0x50>
 8009010:	ebba 0b04 	subs.w	fp, sl, r4
 8009014:	d00b      	beq.n	800902e <_svfiprintf_r+0x7a>
 8009016:	465b      	mov	r3, fp
 8009018:	4622      	mov	r2, r4
 800901a:	4629      	mov	r1, r5
 800901c:	4638      	mov	r0, r7
 800901e:	f7ff ff6d 	bl	8008efc <__ssputs_r>
 8009022:	3001      	adds	r0, #1
 8009024:	f000 80aa 	beq.w	800917c <_svfiprintf_r+0x1c8>
 8009028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800902a:	445a      	add	r2, fp
 800902c:	9209      	str	r2, [sp, #36]	; 0x24
 800902e:	f89a 3000 	ldrb.w	r3, [sl]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80a2 	beq.w	800917c <_svfiprintf_r+0x1c8>
 8009038:	2300      	movs	r3, #0
 800903a:	f04f 32ff 	mov.w	r2, #4294967295
 800903e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009042:	f10a 0a01 	add.w	sl, sl, #1
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	9307      	str	r3, [sp, #28]
 800904a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800904e:	931a      	str	r3, [sp, #104]	; 0x68
 8009050:	4654      	mov	r4, sl
 8009052:	2205      	movs	r2, #5
 8009054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009058:	4851      	ldr	r0, [pc, #324]	; (80091a0 <_svfiprintf_r+0x1ec>)
 800905a:	f7f7 f8c9 	bl	80001f0 <memchr>
 800905e:	9a04      	ldr	r2, [sp, #16]
 8009060:	b9d8      	cbnz	r0, 800909a <_svfiprintf_r+0xe6>
 8009062:	06d0      	lsls	r0, r2, #27
 8009064:	bf44      	itt	mi
 8009066:	2320      	movmi	r3, #32
 8009068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906c:	0711      	lsls	r1, r2, #28
 800906e:	bf44      	itt	mi
 8009070:	232b      	movmi	r3, #43	; 0x2b
 8009072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009076:	f89a 3000 	ldrb.w	r3, [sl]
 800907a:	2b2a      	cmp	r3, #42	; 0x2a
 800907c:	d015      	beq.n	80090aa <_svfiprintf_r+0xf6>
 800907e:	9a07      	ldr	r2, [sp, #28]
 8009080:	4654      	mov	r4, sl
 8009082:	2000      	movs	r0, #0
 8009084:	f04f 0c0a 	mov.w	ip, #10
 8009088:	4621      	mov	r1, r4
 800908a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908e:	3b30      	subs	r3, #48	; 0x30
 8009090:	2b09      	cmp	r3, #9
 8009092:	d94e      	bls.n	8009132 <_svfiprintf_r+0x17e>
 8009094:	b1b0      	cbz	r0, 80090c4 <_svfiprintf_r+0x110>
 8009096:	9207      	str	r2, [sp, #28]
 8009098:	e014      	b.n	80090c4 <_svfiprintf_r+0x110>
 800909a:	eba0 0308 	sub.w	r3, r0, r8
 800909e:	fa09 f303 	lsl.w	r3, r9, r3
 80090a2:	4313      	orrs	r3, r2
 80090a4:	9304      	str	r3, [sp, #16]
 80090a6:	46a2      	mov	sl, r4
 80090a8:	e7d2      	b.n	8009050 <_svfiprintf_r+0x9c>
 80090aa:	9b03      	ldr	r3, [sp, #12]
 80090ac:	1d19      	adds	r1, r3, #4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	9103      	str	r1, [sp, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bfbb      	ittet	lt
 80090b6:	425b      	neglt	r3, r3
 80090b8:	f042 0202 	orrlt.w	r2, r2, #2
 80090bc:	9307      	strge	r3, [sp, #28]
 80090be:	9307      	strlt	r3, [sp, #28]
 80090c0:	bfb8      	it	lt
 80090c2:	9204      	strlt	r2, [sp, #16]
 80090c4:	7823      	ldrb	r3, [r4, #0]
 80090c6:	2b2e      	cmp	r3, #46	; 0x2e
 80090c8:	d10c      	bne.n	80090e4 <_svfiprintf_r+0x130>
 80090ca:	7863      	ldrb	r3, [r4, #1]
 80090cc:	2b2a      	cmp	r3, #42	; 0x2a
 80090ce:	d135      	bne.n	800913c <_svfiprintf_r+0x188>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9203      	str	r2, [sp, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bfb8      	it	lt
 80090dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80090e0:	3402      	adds	r4, #2
 80090e2:	9305      	str	r3, [sp, #20]
 80090e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091b0 <_svfiprintf_r+0x1fc>
 80090e8:	7821      	ldrb	r1, [r4, #0]
 80090ea:	2203      	movs	r2, #3
 80090ec:	4650      	mov	r0, sl
 80090ee:	f7f7 f87f 	bl	80001f0 <memchr>
 80090f2:	b140      	cbz	r0, 8009106 <_svfiprintf_r+0x152>
 80090f4:	2340      	movs	r3, #64	; 0x40
 80090f6:	eba0 000a 	sub.w	r0, r0, sl
 80090fa:	fa03 f000 	lsl.w	r0, r3, r0
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	4303      	orrs	r3, r0
 8009102:	3401      	adds	r4, #1
 8009104:	9304      	str	r3, [sp, #16]
 8009106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910a:	4826      	ldr	r0, [pc, #152]	; (80091a4 <_svfiprintf_r+0x1f0>)
 800910c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009110:	2206      	movs	r2, #6
 8009112:	f7f7 f86d 	bl	80001f0 <memchr>
 8009116:	2800      	cmp	r0, #0
 8009118:	d038      	beq.n	800918c <_svfiprintf_r+0x1d8>
 800911a:	4b23      	ldr	r3, [pc, #140]	; (80091a8 <_svfiprintf_r+0x1f4>)
 800911c:	bb1b      	cbnz	r3, 8009166 <_svfiprintf_r+0x1b2>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	3307      	adds	r3, #7
 8009122:	f023 0307 	bic.w	r3, r3, #7
 8009126:	3308      	adds	r3, #8
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912c:	4433      	add	r3, r6
 800912e:	9309      	str	r3, [sp, #36]	; 0x24
 8009130:	e767      	b.n	8009002 <_svfiprintf_r+0x4e>
 8009132:	fb0c 3202 	mla	r2, ip, r2, r3
 8009136:	460c      	mov	r4, r1
 8009138:	2001      	movs	r0, #1
 800913a:	e7a5      	b.n	8009088 <_svfiprintf_r+0xd4>
 800913c:	2300      	movs	r3, #0
 800913e:	3401      	adds	r4, #1
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	4619      	mov	r1, r3
 8009144:	f04f 0c0a 	mov.w	ip, #10
 8009148:	4620      	mov	r0, r4
 800914a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800914e:	3a30      	subs	r2, #48	; 0x30
 8009150:	2a09      	cmp	r2, #9
 8009152:	d903      	bls.n	800915c <_svfiprintf_r+0x1a8>
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0c5      	beq.n	80090e4 <_svfiprintf_r+0x130>
 8009158:	9105      	str	r1, [sp, #20]
 800915a:	e7c3      	b.n	80090e4 <_svfiprintf_r+0x130>
 800915c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009160:	4604      	mov	r4, r0
 8009162:	2301      	movs	r3, #1
 8009164:	e7f0      	b.n	8009148 <_svfiprintf_r+0x194>
 8009166:	ab03      	add	r3, sp, #12
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	462a      	mov	r2, r5
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <_svfiprintf_r+0x1f8>)
 800916e:	a904      	add	r1, sp, #16
 8009170:	4638      	mov	r0, r7
 8009172:	f3af 8000 	nop.w
 8009176:	1c42      	adds	r2, r0, #1
 8009178:	4606      	mov	r6, r0
 800917a:	d1d6      	bne.n	800912a <_svfiprintf_r+0x176>
 800917c:	89ab      	ldrh	r3, [r5, #12]
 800917e:	065b      	lsls	r3, r3, #25
 8009180:	f53f af2c 	bmi.w	8008fdc <_svfiprintf_r+0x28>
 8009184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009186:	b01d      	add	sp, #116	; 0x74
 8009188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918c:	ab03      	add	r3, sp, #12
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	462a      	mov	r2, r5
 8009192:	4b06      	ldr	r3, [pc, #24]	; (80091ac <_svfiprintf_r+0x1f8>)
 8009194:	a904      	add	r1, sp, #16
 8009196:	4638      	mov	r0, r7
 8009198:	f000 f87a 	bl	8009290 <_printf_i>
 800919c:	e7eb      	b.n	8009176 <_svfiprintf_r+0x1c2>
 800919e:	bf00      	nop
 80091a0:	0800d2dc 	.word	0x0800d2dc
 80091a4:	0800d2e6 	.word	0x0800d2e6
 80091a8:	00000000 	.word	0x00000000
 80091ac:	08008efd 	.word	0x08008efd
 80091b0:	0800d2e2 	.word	0x0800d2e2

080091b4 <_printf_common>:
 80091b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b8:	4616      	mov	r6, r2
 80091ba:	4699      	mov	r9, r3
 80091bc:	688a      	ldr	r2, [r1, #8]
 80091be:	690b      	ldr	r3, [r1, #16]
 80091c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	bfb8      	it	lt
 80091c8:	4613      	movlt	r3, r2
 80091ca:	6033      	str	r3, [r6, #0]
 80091cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091d0:	4607      	mov	r7, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	b10a      	cbz	r2, 80091da <_printf_common+0x26>
 80091d6:	3301      	adds	r3, #1
 80091d8:	6033      	str	r3, [r6, #0]
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	0699      	lsls	r1, r3, #26
 80091de:	bf42      	ittt	mi
 80091e0:	6833      	ldrmi	r3, [r6, #0]
 80091e2:	3302      	addmi	r3, #2
 80091e4:	6033      	strmi	r3, [r6, #0]
 80091e6:	6825      	ldr	r5, [r4, #0]
 80091e8:	f015 0506 	ands.w	r5, r5, #6
 80091ec:	d106      	bne.n	80091fc <_printf_common+0x48>
 80091ee:	f104 0a19 	add.w	sl, r4, #25
 80091f2:	68e3      	ldr	r3, [r4, #12]
 80091f4:	6832      	ldr	r2, [r6, #0]
 80091f6:	1a9b      	subs	r3, r3, r2
 80091f8:	42ab      	cmp	r3, r5
 80091fa:	dc26      	bgt.n	800924a <_printf_common+0x96>
 80091fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009200:	1e13      	subs	r3, r2, #0
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	bf18      	it	ne
 8009206:	2301      	movne	r3, #1
 8009208:	0692      	lsls	r2, r2, #26
 800920a:	d42b      	bmi.n	8009264 <_printf_common+0xb0>
 800920c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009210:	4649      	mov	r1, r9
 8009212:	4638      	mov	r0, r7
 8009214:	47c0      	blx	r8
 8009216:	3001      	adds	r0, #1
 8009218:	d01e      	beq.n	8009258 <_printf_common+0xa4>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	68e5      	ldr	r5, [r4, #12]
 800921e:	6832      	ldr	r2, [r6, #0]
 8009220:	f003 0306 	and.w	r3, r3, #6
 8009224:	2b04      	cmp	r3, #4
 8009226:	bf08      	it	eq
 8009228:	1aad      	subeq	r5, r5, r2
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	6922      	ldr	r2, [r4, #16]
 800922e:	bf0c      	ite	eq
 8009230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009234:	2500      	movne	r5, #0
 8009236:	4293      	cmp	r3, r2
 8009238:	bfc4      	itt	gt
 800923a:	1a9b      	subgt	r3, r3, r2
 800923c:	18ed      	addgt	r5, r5, r3
 800923e:	2600      	movs	r6, #0
 8009240:	341a      	adds	r4, #26
 8009242:	42b5      	cmp	r5, r6
 8009244:	d11a      	bne.n	800927c <_printf_common+0xc8>
 8009246:	2000      	movs	r0, #0
 8009248:	e008      	b.n	800925c <_printf_common+0xa8>
 800924a:	2301      	movs	r3, #1
 800924c:	4652      	mov	r2, sl
 800924e:	4649      	mov	r1, r9
 8009250:	4638      	mov	r0, r7
 8009252:	47c0      	blx	r8
 8009254:	3001      	adds	r0, #1
 8009256:	d103      	bne.n	8009260 <_printf_common+0xac>
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009260:	3501      	adds	r5, #1
 8009262:	e7c6      	b.n	80091f2 <_printf_common+0x3e>
 8009264:	18e1      	adds	r1, r4, r3
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	2030      	movs	r0, #48	; 0x30
 800926a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800926e:	4422      	add	r2, r4
 8009270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009278:	3302      	adds	r3, #2
 800927a:	e7c7      	b.n	800920c <_printf_common+0x58>
 800927c:	2301      	movs	r3, #1
 800927e:	4622      	mov	r2, r4
 8009280:	4649      	mov	r1, r9
 8009282:	4638      	mov	r0, r7
 8009284:	47c0      	blx	r8
 8009286:	3001      	adds	r0, #1
 8009288:	d0e6      	beq.n	8009258 <_printf_common+0xa4>
 800928a:	3601      	adds	r6, #1
 800928c:	e7d9      	b.n	8009242 <_printf_common+0x8e>
	...

08009290 <_printf_i>:
 8009290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009294:	460c      	mov	r4, r1
 8009296:	4691      	mov	r9, r2
 8009298:	7e27      	ldrb	r7, [r4, #24]
 800929a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800929c:	2f78      	cmp	r7, #120	; 0x78
 800929e:	4680      	mov	r8, r0
 80092a0:	469a      	mov	sl, r3
 80092a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092a6:	d807      	bhi.n	80092b8 <_printf_i+0x28>
 80092a8:	2f62      	cmp	r7, #98	; 0x62
 80092aa:	d80a      	bhi.n	80092c2 <_printf_i+0x32>
 80092ac:	2f00      	cmp	r7, #0
 80092ae:	f000 80d8 	beq.w	8009462 <_printf_i+0x1d2>
 80092b2:	2f58      	cmp	r7, #88	; 0x58
 80092b4:	f000 80a3 	beq.w	80093fe <_printf_i+0x16e>
 80092b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092c0:	e03a      	b.n	8009338 <_printf_i+0xa8>
 80092c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092c6:	2b15      	cmp	r3, #21
 80092c8:	d8f6      	bhi.n	80092b8 <_printf_i+0x28>
 80092ca:	a001      	add	r0, pc, #4	; (adr r0, 80092d0 <_printf_i+0x40>)
 80092cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80092d0:	08009329 	.word	0x08009329
 80092d4:	0800933d 	.word	0x0800933d
 80092d8:	080092b9 	.word	0x080092b9
 80092dc:	080092b9 	.word	0x080092b9
 80092e0:	080092b9 	.word	0x080092b9
 80092e4:	080092b9 	.word	0x080092b9
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	080092b9 	.word	0x080092b9
 80092f0:	080092b9 	.word	0x080092b9
 80092f4:	080092b9 	.word	0x080092b9
 80092f8:	080092b9 	.word	0x080092b9
 80092fc:	08009449 	.word	0x08009449
 8009300:	0800936d 	.word	0x0800936d
 8009304:	0800942b 	.word	0x0800942b
 8009308:	080092b9 	.word	0x080092b9
 800930c:	080092b9 	.word	0x080092b9
 8009310:	0800946b 	.word	0x0800946b
 8009314:	080092b9 	.word	0x080092b9
 8009318:	0800936d 	.word	0x0800936d
 800931c:	080092b9 	.word	0x080092b9
 8009320:	080092b9 	.word	0x080092b9
 8009324:	08009433 	.word	0x08009433
 8009328:	680b      	ldr	r3, [r1, #0]
 800932a:	1d1a      	adds	r2, r3, #4
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	600a      	str	r2, [r1, #0]
 8009330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009338:	2301      	movs	r3, #1
 800933a:	e0a3      	b.n	8009484 <_printf_i+0x1f4>
 800933c:	6825      	ldr	r5, [r4, #0]
 800933e:	6808      	ldr	r0, [r1, #0]
 8009340:	062e      	lsls	r6, r5, #24
 8009342:	f100 0304 	add.w	r3, r0, #4
 8009346:	d50a      	bpl.n	800935e <_printf_i+0xce>
 8009348:	6805      	ldr	r5, [r0, #0]
 800934a:	600b      	str	r3, [r1, #0]
 800934c:	2d00      	cmp	r5, #0
 800934e:	da03      	bge.n	8009358 <_printf_i+0xc8>
 8009350:	232d      	movs	r3, #45	; 0x2d
 8009352:	426d      	negs	r5, r5
 8009354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009358:	485e      	ldr	r0, [pc, #376]	; (80094d4 <_printf_i+0x244>)
 800935a:	230a      	movs	r3, #10
 800935c:	e019      	b.n	8009392 <_printf_i+0x102>
 800935e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009362:	6805      	ldr	r5, [r0, #0]
 8009364:	600b      	str	r3, [r1, #0]
 8009366:	bf18      	it	ne
 8009368:	b22d      	sxthne	r5, r5
 800936a:	e7ef      	b.n	800934c <_printf_i+0xbc>
 800936c:	680b      	ldr	r3, [r1, #0]
 800936e:	6825      	ldr	r5, [r4, #0]
 8009370:	1d18      	adds	r0, r3, #4
 8009372:	6008      	str	r0, [r1, #0]
 8009374:	0628      	lsls	r0, r5, #24
 8009376:	d501      	bpl.n	800937c <_printf_i+0xec>
 8009378:	681d      	ldr	r5, [r3, #0]
 800937a:	e002      	b.n	8009382 <_printf_i+0xf2>
 800937c:	0669      	lsls	r1, r5, #25
 800937e:	d5fb      	bpl.n	8009378 <_printf_i+0xe8>
 8009380:	881d      	ldrh	r5, [r3, #0]
 8009382:	4854      	ldr	r0, [pc, #336]	; (80094d4 <_printf_i+0x244>)
 8009384:	2f6f      	cmp	r7, #111	; 0x6f
 8009386:	bf0c      	ite	eq
 8009388:	2308      	moveq	r3, #8
 800938a:	230a      	movne	r3, #10
 800938c:	2100      	movs	r1, #0
 800938e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009392:	6866      	ldr	r6, [r4, #4]
 8009394:	60a6      	str	r6, [r4, #8]
 8009396:	2e00      	cmp	r6, #0
 8009398:	bfa2      	ittt	ge
 800939a:	6821      	ldrge	r1, [r4, #0]
 800939c:	f021 0104 	bicge.w	r1, r1, #4
 80093a0:	6021      	strge	r1, [r4, #0]
 80093a2:	b90d      	cbnz	r5, 80093a8 <_printf_i+0x118>
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	d04d      	beq.n	8009444 <_printf_i+0x1b4>
 80093a8:	4616      	mov	r6, r2
 80093aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80093ae:	fb03 5711 	mls	r7, r3, r1, r5
 80093b2:	5dc7      	ldrb	r7, [r0, r7]
 80093b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093b8:	462f      	mov	r7, r5
 80093ba:	42bb      	cmp	r3, r7
 80093bc:	460d      	mov	r5, r1
 80093be:	d9f4      	bls.n	80093aa <_printf_i+0x11a>
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d10b      	bne.n	80093dc <_printf_i+0x14c>
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	07df      	lsls	r7, r3, #31
 80093c8:	d508      	bpl.n	80093dc <_printf_i+0x14c>
 80093ca:	6923      	ldr	r3, [r4, #16]
 80093cc:	6861      	ldr	r1, [r4, #4]
 80093ce:	4299      	cmp	r1, r3
 80093d0:	bfde      	ittt	le
 80093d2:	2330      	movle	r3, #48	; 0x30
 80093d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093dc:	1b92      	subs	r2, r2, r6
 80093de:	6122      	str	r2, [r4, #16]
 80093e0:	f8cd a000 	str.w	sl, [sp]
 80093e4:	464b      	mov	r3, r9
 80093e6:	aa03      	add	r2, sp, #12
 80093e8:	4621      	mov	r1, r4
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7ff fee2 	bl	80091b4 <_printf_common>
 80093f0:	3001      	adds	r0, #1
 80093f2:	d14c      	bne.n	800948e <_printf_i+0x1fe>
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	b004      	add	sp, #16
 80093fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fe:	4835      	ldr	r0, [pc, #212]	; (80094d4 <_printf_i+0x244>)
 8009400:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	680e      	ldr	r6, [r1, #0]
 8009408:	061f      	lsls	r7, r3, #24
 800940a:	f856 5b04 	ldr.w	r5, [r6], #4
 800940e:	600e      	str	r6, [r1, #0]
 8009410:	d514      	bpl.n	800943c <_printf_i+0x1ac>
 8009412:	07d9      	lsls	r1, r3, #31
 8009414:	bf44      	itt	mi
 8009416:	f043 0320 	orrmi.w	r3, r3, #32
 800941a:	6023      	strmi	r3, [r4, #0]
 800941c:	b91d      	cbnz	r5, 8009426 <_printf_i+0x196>
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	f023 0320 	bic.w	r3, r3, #32
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	2310      	movs	r3, #16
 8009428:	e7b0      	b.n	800938c <_printf_i+0xfc>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	f043 0320 	orr.w	r3, r3, #32
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	2378      	movs	r3, #120	; 0x78
 8009434:	4828      	ldr	r0, [pc, #160]	; (80094d8 <_printf_i+0x248>)
 8009436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800943a:	e7e3      	b.n	8009404 <_printf_i+0x174>
 800943c:	065e      	lsls	r6, r3, #25
 800943e:	bf48      	it	mi
 8009440:	b2ad      	uxthmi	r5, r5
 8009442:	e7e6      	b.n	8009412 <_printf_i+0x182>
 8009444:	4616      	mov	r6, r2
 8009446:	e7bb      	b.n	80093c0 <_printf_i+0x130>
 8009448:	680b      	ldr	r3, [r1, #0]
 800944a:	6826      	ldr	r6, [r4, #0]
 800944c:	6960      	ldr	r0, [r4, #20]
 800944e:	1d1d      	adds	r5, r3, #4
 8009450:	600d      	str	r5, [r1, #0]
 8009452:	0635      	lsls	r5, r6, #24
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	d501      	bpl.n	800945c <_printf_i+0x1cc>
 8009458:	6018      	str	r0, [r3, #0]
 800945a:	e002      	b.n	8009462 <_printf_i+0x1d2>
 800945c:	0671      	lsls	r1, r6, #25
 800945e:	d5fb      	bpl.n	8009458 <_printf_i+0x1c8>
 8009460:	8018      	strh	r0, [r3, #0]
 8009462:	2300      	movs	r3, #0
 8009464:	6123      	str	r3, [r4, #16]
 8009466:	4616      	mov	r6, r2
 8009468:	e7ba      	b.n	80093e0 <_printf_i+0x150>
 800946a:	680b      	ldr	r3, [r1, #0]
 800946c:	1d1a      	adds	r2, r3, #4
 800946e:	600a      	str	r2, [r1, #0]
 8009470:	681e      	ldr	r6, [r3, #0]
 8009472:	6862      	ldr	r2, [r4, #4]
 8009474:	2100      	movs	r1, #0
 8009476:	4630      	mov	r0, r6
 8009478:	f7f6 feba 	bl	80001f0 <memchr>
 800947c:	b108      	cbz	r0, 8009482 <_printf_i+0x1f2>
 800947e:	1b80      	subs	r0, r0, r6
 8009480:	6060      	str	r0, [r4, #4]
 8009482:	6863      	ldr	r3, [r4, #4]
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	2300      	movs	r3, #0
 8009488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800948c:	e7a8      	b.n	80093e0 <_printf_i+0x150>
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	4632      	mov	r2, r6
 8009492:	4649      	mov	r1, r9
 8009494:	4640      	mov	r0, r8
 8009496:	47d0      	blx	sl
 8009498:	3001      	adds	r0, #1
 800949a:	d0ab      	beq.n	80093f4 <_printf_i+0x164>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	079b      	lsls	r3, r3, #30
 80094a0:	d413      	bmi.n	80094ca <_printf_i+0x23a>
 80094a2:	68e0      	ldr	r0, [r4, #12]
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	4298      	cmp	r0, r3
 80094a8:	bfb8      	it	lt
 80094aa:	4618      	movlt	r0, r3
 80094ac:	e7a4      	b.n	80093f8 <_printf_i+0x168>
 80094ae:	2301      	movs	r3, #1
 80094b0:	4632      	mov	r2, r6
 80094b2:	4649      	mov	r1, r9
 80094b4:	4640      	mov	r0, r8
 80094b6:	47d0      	blx	sl
 80094b8:	3001      	adds	r0, #1
 80094ba:	d09b      	beq.n	80093f4 <_printf_i+0x164>
 80094bc:	3501      	adds	r5, #1
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	9903      	ldr	r1, [sp, #12]
 80094c2:	1a5b      	subs	r3, r3, r1
 80094c4:	42ab      	cmp	r3, r5
 80094c6:	dcf2      	bgt.n	80094ae <_printf_i+0x21e>
 80094c8:	e7eb      	b.n	80094a2 <_printf_i+0x212>
 80094ca:	2500      	movs	r5, #0
 80094cc:	f104 0619 	add.w	r6, r4, #25
 80094d0:	e7f5      	b.n	80094be <_printf_i+0x22e>
 80094d2:	bf00      	nop
 80094d4:	0800d2ed 	.word	0x0800d2ed
 80094d8:	0800d2fe 	.word	0x0800d2fe

080094dc <memcpy>:
 80094dc:	440a      	add	r2, r1
 80094de:	4291      	cmp	r1, r2
 80094e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80094e4:	d100      	bne.n	80094e8 <memcpy+0xc>
 80094e6:	4770      	bx	lr
 80094e8:	b510      	push	{r4, lr}
 80094ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f2:	4291      	cmp	r1, r2
 80094f4:	d1f9      	bne.n	80094ea <memcpy+0xe>
 80094f6:	bd10      	pop	{r4, pc}

080094f8 <memmove>:
 80094f8:	4288      	cmp	r0, r1
 80094fa:	b510      	push	{r4, lr}
 80094fc:	eb01 0402 	add.w	r4, r1, r2
 8009500:	d902      	bls.n	8009508 <memmove+0x10>
 8009502:	4284      	cmp	r4, r0
 8009504:	4623      	mov	r3, r4
 8009506:	d807      	bhi.n	8009518 <memmove+0x20>
 8009508:	1e43      	subs	r3, r0, #1
 800950a:	42a1      	cmp	r1, r4
 800950c:	d008      	beq.n	8009520 <memmove+0x28>
 800950e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009516:	e7f8      	b.n	800950a <memmove+0x12>
 8009518:	4402      	add	r2, r0
 800951a:	4601      	mov	r1, r0
 800951c:	428a      	cmp	r2, r1
 800951e:	d100      	bne.n	8009522 <memmove+0x2a>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800952a:	e7f7      	b.n	800951c <memmove+0x24>

0800952c <_free_r>:
 800952c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800952e:	2900      	cmp	r1, #0
 8009530:	d048      	beq.n	80095c4 <_free_r+0x98>
 8009532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009536:	9001      	str	r0, [sp, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f1a1 0404 	sub.w	r4, r1, #4
 800953e:	bfb8      	it	lt
 8009540:	18e4      	addlt	r4, r4, r3
 8009542:	f000 f8d3 	bl	80096ec <__malloc_lock>
 8009546:	4a20      	ldr	r2, [pc, #128]	; (80095c8 <_free_r+0x9c>)
 8009548:	9801      	ldr	r0, [sp, #4]
 800954a:	6813      	ldr	r3, [r2, #0]
 800954c:	4615      	mov	r5, r2
 800954e:	b933      	cbnz	r3, 800955e <_free_r+0x32>
 8009550:	6063      	str	r3, [r4, #4]
 8009552:	6014      	str	r4, [r2, #0]
 8009554:	b003      	add	sp, #12
 8009556:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800955a:	f000 b8cd 	b.w	80096f8 <__malloc_unlock>
 800955e:	42a3      	cmp	r3, r4
 8009560:	d90b      	bls.n	800957a <_free_r+0x4e>
 8009562:	6821      	ldr	r1, [r4, #0]
 8009564:	1862      	adds	r2, r4, r1
 8009566:	4293      	cmp	r3, r2
 8009568:	bf04      	itt	eq
 800956a:	681a      	ldreq	r2, [r3, #0]
 800956c:	685b      	ldreq	r3, [r3, #4]
 800956e:	6063      	str	r3, [r4, #4]
 8009570:	bf04      	itt	eq
 8009572:	1852      	addeq	r2, r2, r1
 8009574:	6022      	streq	r2, [r4, #0]
 8009576:	602c      	str	r4, [r5, #0]
 8009578:	e7ec      	b.n	8009554 <_free_r+0x28>
 800957a:	461a      	mov	r2, r3
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	b10b      	cbz	r3, 8009584 <_free_r+0x58>
 8009580:	42a3      	cmp	r3, r4
 8009582:	d9fa      	bls.n	800957a <_free_r+0x4e>
 8009584:	6811      	ldr	r1, [r2, #0]
 8009586:	1855      	adds	r5, r2, r1
 8009588:	42a5      	cmp	r5, r4
 800958a:	d10b      	bne.n	80095a4 <_free_r+0x78>
 800958c:	6824      	ldr	r4, [r4, #0]
 800958e:	4421      	add	r1, r4
 8009590:	1854      	adds	r4, r2, r1
 8009592:	42a3      	cmp	r3, r4
 8009594:	6011      	str	r1, [r2, #0]
 8009596:	d1dd      	bne.n	8009554 <_free_r+0x28>
 8009598:	681c      	ldr	r4, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	6053      	str	r3, [r2, #4]
 800959e:	4421      	add	r1, r4
 80095a0:	6011      	str	r1, [r2, #0]
 80095a2:	e7d7      	b.n	8009554 <_free_r+0x28>
 80095a4:	d902      	bls.n	80095ac <_free_r+0x80>
 80095a6:	230c      	movs	r3, #12
 80095a8:	6003      	str	r3, [r0, #0]
 80095aa:	e7d3      	b.n	8009554 <_free_r+0x28>
 80095ac:	6825      	ldr	r5, [r4, #0]
 80095ae:	1961      	adds	r1, r4, r5
 80095b0:	428b      	cmp	r3, r1
 80095b2:	bf04      	itt	eq
 80095b4:	6819      	ldreq	r1, [r3, #0]
 80095b6:	685b      	ldreq	r3, [r3, #4]
 80095b8:	6063      	str	r3, [r4, #4]
 80095ba:	bf04      	itt	eq
 80095bc:	1949      	addeq	r1, r1, r5
 80095be:	6021      	streq	r1, [r4, #0]
 80095c0:	6054      	str	r4, [r2, #4]
 80095c2:	e7c7      	b.n	8009554 <_free_r+0x28>
 80095c4:	b003      	add	sp, #12
 80095c6:	bd30      	pop	{r4, r5, pc}
 80095c8:	20000624 	.word	0x20000624

080095cc <_malloc_r>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	1ccd      	adds	r5, r1, #3
 80095d0:	f025 0503 	bic.w	r5, r5, #3
 80095d4:	3508      	adds	r5, #8
 80095d6:	2d0c      	cmp	r5, #12
 80095d8:	bf38      	it	cc
 80095da:	250c      	movcc	r5, #12
 80095dc:	2d00      	cmp	r5, #0
 80095de:	4606      	mov	r6, r0
 80095e0:	db01      	blt.n	80095e6 <_malloc_r+0x1a>
 80095e2:	42a9      	cmp	r1, r5
 80095e4:	d903      	bls.n	80095ee <_malloc_r+0x22>
 80095e6:	230c      	movs	r3, #12
 80095e8:	6033      	str	r3, [r6, #0]
 80095ea:	2000      	movs	r0, #0
 80095ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ee:	f000 f87d 	bl	80096ec <__malloc_lock>
 80095f2:	4921      	ldr	r1, [pc, #132]	; (8009678 <_malloc_r+0xac>)
 80095f4:	680a      	ldr	r2, [r1, #0]
 80095f6:	4614      	mov	r4, r2
 80095f8:	b99c      	cbnz	r4, 8009622 <_malloc_r+0x56>
 80095fa:	4f20      	ldr	r7, [pc, #128]	; (800967c <_malloc_r+0xb0>)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	b923      	cbnz	r3, 800960a <_malloc_r+0x3e>
 8009600:	4621      	mov	r1, r4
 8009602:	4630      	mov	r0, r6
 8009604:	f000 f862 	bl	80096cc <_sbrk_r>
 8009608:	6038      	str	r0, [r7, #0]
 800960a:	4629      	mov	r1, r5
 800960c:	4630      	mov	r0, r6
 800960e:	f000 f85d 	bl	80096cc <_sbrk_r>
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	d123      	bne.n	800965e <_malloc_r+0x92>
 8009616:	230c      	movs	r3, #12
 8009618:	6033      	str	r3, [r6, #0]
 800961a:	4630      	mov	r0, r6
 800961c:	f000 f86c 	bl	80096f8 <__malloc_unlock>
 8009620:	e7e3      	b.n	80095ea <_malloc_r+0x1e>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	1b5b      	subs	r3, r3, r5
 8009626:	d417      	bmi.n	8009658 <_malloc_r+0x8c>
 8009628:	2b0b      	cmp	r3, #11
 800962a:	d903      	bls.n	8009634 <_malloc_r+0x68>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	441c      	add	r4, r3
 8009630:	6025      	str	r5, [r4, #0]
 8009632:	e004      	b.n	800963e <_malloc_r+0x72>
 8009634:	6863      	ldr	r3, [r4, #4]
 8009636:	42a2      	cmp	r2, r4
 8009638:	bf0c      	ite	eq
 800963a:	600b      	streq	r3, [r1, #0]
 800963c:	6053      	strne	r3, [r2, #4]
 800963e:	4630      	mov	r0, r6
 8009640:	f000 f85a 	bl	80096f8 <__malloc_unlock>
 8009644:	f104 000b 	add.w	r0, r4, #11
 8009648:	1d23      	adds	r3, r4, #4
 800964a:	f020 0007 	bic.w	r0, r0, #7
 800964e:	1ac2      	subs	r2, r0, r3
 8009650:	d0cc      	beq.n	80095ec <_malloc_r+0x20>
 8009652:	1a1b      	subs	r3, r3, r0
 8009654:	50a3      	str	r3, [r4, r2]
 8009656:	e7c9      	b.n	80095ec <_malloc_r+0x20>
 8009658:	4622      	mov	r2, r4
 800965a:	6864      	ldr	r4, [r4, #4]
 800965c:	e7cc      	b.n	80095f8 <_malloc_r+0x2c>
 800965e:	1cc4      	adds	r4, r0, #3
 8009660:	f024 0403 	bic.w	r4, r4, #3
 8009664:	42a0      	cmp	r0, r4
 8009666:	d0e3      	beq.n	8009630 <_malloc_r+0x64>
 8009668:	1a21      	subs	r1, r4, r0
 800966a:	4630      	mov	r0, r6
 800966c:	f000 f82e 	bl	80096cc <_sbrk_r>
 8009670:	3001      	adds	r0, #1
 8009672:	d1dd      	bne.n	8009630 <_malloc_r+0x64>
 8009674:	e7cf      	b.n	8009616 <_malloc_r+0x4a>
 8009676:	bf00      	nop
 8009678:	20000624 	.word	0x20000624
 800967c:	20000628 	.word	0x20000628

08009680 <_realloc_r>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	4607      	mov	r7, r0
 8009684:	4614      	mov	r4, r2
 8009686:	460e      	mov	r6, r1
 8009688:	b921      	cbnz	r1, 8009694 <_realloc_r+0x14>
 800968a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800968e:	4611      	mov	r1, r2
 8009690:	f7ff bf9c 	b.w	80095cc <_malloc_r>
 8009694:	b922      	cbnz	r2, 80096a0 <_realloc_r+0x20>
 8009696:	f7ff ff49 	bl	800952c <_free_r>
 800969a:	4625      	mov	r5, r4
 800969c:	4628      	mov	r0, r5
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a0:	f000 f830 	bl	8009704 <_malloc_usable_size_r>
 80096a4:	42a0      	cmp	r0, r4
 80096a6:	d20f      	bcs.n	80096c8 <_realloc_r+0x48>
 80096a8:	4621      	mov	r1, r4
 80096aa:	4638      	mov	r0, r7
 80096ac:	f7ff ff8e 	bl	80095cc <_malloc_r>
 80096b0:	4605      	mov	r5, r0
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d0f2      	beq.n	800969c <_realloc_r+0x1c>
 80096b6:	4631      	mov	r1, r6
 80096b8:	4622      	mov	r2, r4
 80096ba:	f7ff ff0f 	bl	80094dc <memcpy>
 80096be:	4631      	mov	r1, r6
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff ff33 	bl	800952c <_free_r>
 80096c6:	e7e9      	b.n	800969c <_realloc_r+0x1c>
 80096c8:	4635      	mov	r5, r6
 80096ca:	e7e7      	b.n	800969c <_realloc_r+0x1c>

080096cc <_sbrk_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d06      	ldr	r5, [pc, #24]	; (80096e8 <_sbrk_r+0x1c>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	602b      	str	r3, [r5, #0]
 80096d8:	f000 f81e 	bl	8009718 <_sbrk>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_sbrk_r+0x1a>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_sbrk_r+0x1a>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	20000744 	.word	0x20000744

080096ec <__malloc_lock>:
 80096ec:	4801      	ldr	r0, [pc, #4]	; (80096f4 <__malloc_lock+0x8>)
 80096ee:	f000 b811 	b.w	8009714 <__retarget_lock_acquire_recursive>
 80096f2:	bf00      	nop
 80096f4:	2000074c 	.word	0x2000074c

080096f8 <__malloc_unlock>:
 80096f8:	4801      	ldr	r0, [pc, #4]	; (8009700 <__malloc_unlock+0x8>)
 80096fa:	f000 b80c 	b.w	8009716 <__retarget_lock_release_recursive>
 80096fe:	bf00      	nop
 8009700:	2000074c 	.word	0x2000074c

08009704 <_malloc_usable_size_r>:
 8009704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009708:	1f18      	subs	r0, r3, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfbc      	itt	lt
 800970e:	580b      	ldrlt	r3, [r1, r0]
 8009710:	18c0      	addlt	r0, r0, r3
 8009712:	4770      	bx	lr

08009714 <__retarget_lock_acquire_recursive>:
 8009714:	4770      	bx	lr

08009716 <__retarget_lock_release_recursive>:
 8009716:	4770      	bx	lr

08009718 <_sbrk>:
 8009718:	4b04      	ldr	r3, [pc, #16]	; (800972c <_sbrk+0x14>)
 800971a:	6819      	ldr	r1, [r3, #0]
 800971c:	4602      	mov	r2, r0
 800971e:	b909      	cbnz	r1, 8009724 <_sbrk+0xc>
 8009720:	4903      	ldr	r1, [pc, #12]	; (8009730 <_sbrk+0x18>)
 8009722:	6019      	str	r1, [r3, #0]
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	4402      	add	r2, r0
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	4770      	bx	lr
 800972c:	2000062c 	.word	0x2000062c
 8009730:	20000758 	.word	0x20000758

08009734 <_init>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	bf00      	nop
 8009738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973a:	bc08      	pop	{r3}
 800973c:	469e      	mov	lr, r3
 800973e:	4770      	bx	lr

08009740 <_fini>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr
