
cable_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f5c  0800d3a0  0800d3a0  0001d3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112fc  080112fc  000304e8  2**0
                  CONTENTS
  4 .ARM          00000008  080112fc  080112fc  000212fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011304  08011304  000304e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011304  08011304  00021304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011308  08011308  00021308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e8  20000000  0801130c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  200004e8  080117f4  000304e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  080117f4  00030ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c7f  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003838  00000000  00000000  00049197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0004c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0004de50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002715f  00000000  00000000  0004f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189ba  00000000  00000000  000762a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df65b  00000000  00000000  0008ec61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e2bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006850  00000000  00000000  0016e310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00174b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00174c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004e8 	.word	0x200004e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d384 	.word	0x0800d384

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004ec 	.word	0x200004ec
 80001ec:	0800d384 	.word	0x0800d384

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <CALC_Angle>:
 *****************************************************************************/

/** ***************************************************************************
 * @brief Calculate Angle with three length inputs
 *****************************************************************************/
float CALC_Angle(float left, float right, float middle){
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eca:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ece:	ed87 1a01 	vstr	s2, [r7, #4]
	left = left / middle;
 8000ed2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ed6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ede:	edc7 7a03 	vstr	s15, [r7, #12]
	right = right / middle;
 8000ee2:	edd7 6a02 	vldr	s13, [r7, #8]
 8000ee6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eee:	edc7 7a02 	vstr	s15, [r7, #8]
	middle = 1;
 8000ef2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ef6:	607b      	str	r3, [r7, #4]

	float x;

	if (left < (middle-0.2)) {
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff fb35 	bl	8000568 <__aeabi_f2d>
 8000efe:	4604      	mov	r4, r0
 8000f00:	460d      	mov	r5, r1
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fb30 	bl	8000568 <__aeabi_f2d>
 8000f08:	a31b      	add	r3, pc, #108	; (adr r3, 8000f78 <CALC_Angle+0xb8>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff f9cb 	bl	80002a8 <__aeabi_dsub>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4620      	mov	r0, r4
 8000f18:	4629      	mov	r1, r5
 8000f1a:	f7ff fdef 	bl	8000afc <__aeabi_dcmplt>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <CALC_Angle+0x6a>
		x = -45;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <CALC_Angle+0xc0>)
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e01b      	b.n	8000f62 <CALC_Angle+0xa2>
		//-45° to 0°
	} else if (right < (middle-0.2)){
 8000f2a:	68b8      	ldr	r0, [r7, #8]
 8000f2c:	f7ff fb1c 	bl	8000568 <__aeabi_f2d>
 8000f30:	4604      	mov	r4, r0
 8000f32:	460d      	mov	r5, r1
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff fb17 	bl	8000568 <__aeabi_f2d>
 8000f3a:	a30f      	add	r3, pc, #60	; (adr r3, 8000f78 <CALC_Angle+0xb8>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff f9b2 	bl	80002a8 <__aeabi_dsub>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	f7ff fdd6 	bl	8000afc <__aeabi_dcmplt>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <CALC_Angle+0x9c>
		//0° - 45°
		x = 45;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <CALC_Angle+0xc4>)
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e002      	b.n	8000f62 <CALC_Angle+0xa2>
	} else {
		x = 0;
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
	}



	return x;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	ee07 3a90 	vmov	s15, r3
}
 8000f68:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bdb0      	pop	{r4, r5, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	f3af 8000 	nop.w
 8000f78:	9999999a 	.word	0x9999999a
 8000f7c:	3fc99999 	.word	0x3fc99999
 8000f80:	c2340000 	.word	0xc2340000
 8000f84:	42340000 	.word	0x42340000

08000f88 <CALC_ElCurrent>:
/** ***************************************************************************
 * @brief Calculate electrical current from magnetic field
 * distance[m] amplitude[1]
 * return current[A]
 *****************************************************************************/
float CALC_ElCurrent(float amplitude, float distance){
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f92:	edc7 0a00 	vstr	s1, [r7]
	float I,B;
	// Calculate electro-magnetic field strength
	B = (((amplitude*CALC_ADCVOLTRESOLUTION)/CALC_AMPOPAMP)/CALC_AMPHALLSENS);
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000fe4 <CALC_ElCurrent+0x5c>
 8000f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000fe8 <CALC_ElCurrent+0x60>
 8000fa6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000faa:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000fec <CALC_ElCurrent+0x64>
 8000fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb2:	edc7 7a03 	vstr	s15, [r7, #12]

	// Calculate current
	I = CALC_PIDANDPERM*(distance/B);
 8000fb6:	edd7 6a00 	vldr	s13, [r7]
 8000fba:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000ff0 <CALC_ElCurrent+0x68>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	edc7 7a02 	vstr	s15, [r7, #8]

	//return current
	return I;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	ee07 3a90 	vmov	s15, r3
}
 8000fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	3a533333 	.word	0x3a533333
 8000fe8:	42be0000 	.word	0x42be0000
 8000fec:	42b40000 	.word	0x42b40000
 8000ff0:	4a988b39 	.word	0x4a988b39

08000ff4 <CALC_Distance>:


/** ***************************************************************************
 * @brief Calculate distance
 *****************************************************************************/
float CALC_Distance(float* lutDistance, float* lutStrenght, float measurement){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b08b      	sub	sp, #44	; 0x2c
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	ed87 0a01 	vstr	s0, [r7, #4]
	int t,d,s;
	float distance = -1;
 8001002:	4b58      	ldr	r3, [pc, #352]	; (8001164 <CALC_Distance+0x170>)
 8001004:	61bb      	str	r3, [r7, #24]
	t=0;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
	s=-10;
 800100a:	f06f 0309 	mvn.w	r3, #9
 800100e:	61fb      	str	r3, [r7, #28]
	d=-10;
 8001010:	f06f 0309 	mvn.w	r3, #9
 8001014:	623b      	str	r3, [r7, #32]

	// Catch to high and to low values
	if(lutStrenght[CALC_LUTSIZE-1]>measurement){
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3328      	adds	r3, #40	; 0x28
 800101a:	edd3 7a00 	vldr	s15, [r3]
 800101e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d503      	bpl.n	8001034 <CALC_Distance+0x40>
		measurement = lutStrenght[CALC_LUTSIZE-1];
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e00c      	b.n	800104e <CALC_Distance+0x5a>
	} else if (measurement>lutStrenght[0]) {
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	ed97 7a01 	vldr	s14, [r7, #4]
 800103e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	dd02      	ble.n	800104e <CALC_Distance+0x5a>
		measurement = lutStrenght[0];
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	607b      	str	r3, [r7, #4]
	}

	for(int i=0; i < CALC_LUTSIZE ; i++ ){
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e032      	b.n	80010ba <CALC_Distance+0xc6>
		if (measurement == lutStrenght[i]){
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	4413      	add	r3, r2
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ed97 7a01 	vldr	s14, [r7, #4]
 8001064:	eeb4 7a67 	vcmp.f32	s14, s15
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	d103      	bne.n	8001076 <CALC_Distance+0x82>
			t = i;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
			s=t;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	61fb      	str	r3, [r7, #28]
		}
		if ( (measurement < lutStrenght[i])&& (measurement > lutStrenght[i+1])){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	edd3 7a00 	vldr	s15, [r3]
 8001082:	ed97 7a01 	vldr	s14, [r7, #4]
 8001086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	d511      	bpl.n	80010b4 <CALC_Distance+0xc0>
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed97 7a01 	vldr	s14, [r7, #4]
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd03      	ble.n	80010b4 <CALC_Distance+0xc0>
			t = i;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
			d=t;
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	623b      	str	r3, [r7, #32]
	for(int i=0; i < CALC_LUTSIZE ; i++ ){
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b0a      	cmp	r3, #10
 80010be:	ddc9      	ble.n	8001054 <CALC_Distance+0x60>
		}
	}

	if(t==d){
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d139      	bne.n	800113c <CALC_Distance+0x148>
		float a = (lutDistance[t+1]-lutDistance[t])/(lutStrenght[t+1]-lutStrenght[t]);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	3301      	adds	r3, #1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	ed93 7a00 	vldr	s14, [r3]
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3301      	adds	r3, #1
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	4413      	add	r3, r2
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	4413      	add	r3, r2
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001108:	edc7 7a04 	vstr	s15, [r7, #16]
		distance = a*(measurement-lutStrenght[t]) + lutDistance[t];
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ed97 7a01 	vldr	s14, [r7, #4]
 800111c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001120:	edd7 7a04 	vldr	s15, [r7, #16]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	if(t==s){
 800113c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	429a      	cmp	r2, r3
 8001142:	d105      	bne.n	8001150 <CALC_Distance+0x15c>
		distance = lutDistance[t];
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
	}

	return distance;
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	ee07 3a90 	vmov	s15, r3
}
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	372c      	adds	r7, #44	; 0x2c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	bf800000 	.word	0xbf800000

08001168 <CALC_DistanceMode>:


/** ***************************************************************************
 * @brief Calculate distance from measurement input and mode setting
 *****************************************************************************/
float CALC_DistanceMode(float measurement, uint16_t mode, bool right){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
	float distance;
	float* lut;
	// Select left or right
	if (right) {
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <CALC_DistanceMode+0x26>
		lut = CALC_wpcRight[mode];
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <CALC_DistanceMode+0x50>)
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e004      	b.n	8001198 <CALC_DistanceMode+0x30>
	} else {
		lut = CALC_wpcLeft[mode];
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <CALC_DistanceMode+0x54>)
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	60fb      	str	r3, [r7, #12]
	}
	// Calculate distance with correct mode
	distance = CALC_Distance(CALC_distanceLUT, lut, measurement);
 8001198:	ed97 0a01 	vldr	s0, [r7, #4]
 800119c:	68f9      	ldr	r1, [r7, #12]
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <CALC_DistanceMode+0x58>)
 80011a0:	f7ff ff28 	bl	8000ff4 <CALC_Distance>
 80011a4:	ed87 0a02 	vstr	s0, [r7, #8]

	return distance;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	ee07 3a90 	vmov	s15, r3
}
 80011ae:	eeb0 0a67 	vmov.f32	s0, s15
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000148 	.word	0x20000148
 80011bc:	2000013c 	.word	0x2000013c
 80011c0:	20000008 	.word	0x20000008

080011c4 <ANA_Handler>:


/** ***************************************************************************
 * @brief Analytics handler
 *****************************************************************************/
void ANA_Handler(void){
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b098      	sub	sp, #96	; 0x60
 80011c8:	af00      	add	r7, sp, #0
	//start measurement with button input
	if (ANA_inBtn & !ANA_measBusy) {
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <ANA_Handler+0x20c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <ANA_Handler+0x210>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f083 0301 	eor.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <ANA_Handler+0x28>
		ANA_measBusy = true;
 80011e0:	4b7c      	ldr	r3, [pc, #496]	; (80013d4 <ANA_Handler+0x210>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
		ANA_inBtn = false;
 80011e6:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <ANA_Handler+0x20c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
	}

	//collect data
	if (ANA_wpcBusy & ANA_inMeasReady) {
 80011ec:	4b7a      	ldr	r3, [pc, #488]	; (80013d8 <ANA_Handler+0x214>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b7a      	ldr	r3, [pc, #488]	; (80013dc <ANA_Handler+0x218>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01a      	beq.n	8001232 <ANA_Handler+0x6e>
		ANA_wpcLeft[ANA_cycle]=(float)ANA_inAmpLeft;
 80011fc:	4b78      	ldr	r3, [pc, #480]	; (80013e0 <ANA_Handler+0x21c>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b78      	ldr	r3, [pc, #480]	; (80013e4 <ANA_Handler+0x220>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	ee07 2a90 	vmov	s15, r2
 8001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120c:	4a76      	ldr	r2, [pc, #472]	; (80013e8 <ANA_Handler+0x224>)
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	edc3 7a00 	vstr	s15, [r3]
		ANA_wpcRight[ANA_cycle]=(float)ANA_inAmpRight;
 8001216:	4b75      	ldr	r3, [pc, #468]	; (80013ec <ANA_Handler+0x228>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <ANA_Handler+0x220>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	ee07 2a90 	vmov	s15, r2
 8001222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001226:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <ANA_Handler+0x22c>)
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	edc3 7a00 	vstr	s15, [r3]
 8001230:	e021      	b.n	8001276 <ANA_Handler+0xb2>
	} else if (ANA_hallBusy & ANA_inMeasReady){
 8001232:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <ANA_Handler+0x230>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <ANA_Handler+0x218>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d019      	beq.n	8001276 <ANA_Handler+0xb2>
		ANA_hallLeft[ANA_cycle]=(float)ANA_inAmpLeft;
 8001242:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <ANA_Handler+0x21c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <ANA_Handler+0x220>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	ee07 2a90 	vmov	s15, r2
 800124e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001252:	4a69      	ldr	r2, [pc, #420]	; (80013f8 <ANA_Handler+0x234>)
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	edc3 7a00 	vstr	s15, [r3]
		ANA_hallRight[ANA_cycle]=(float)ANA_inAmpRight;
 800125c:	4b63      	ldr	r3, [pc, #396]	; (80013ec <ANA_Handler+0x228>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b60      	ldr	r3, [pc, #384]	; (80013e4 <ANA_Handler+0x220>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	ee07 2a90 	vmov	s15, r2
 8001268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800126c:	4a63      	ldr	r2, [pc, #396]	; (80013fc <ANA_Handler+0x238>)
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	edc3 7a00 	vstr	s15, [r3]
	}

	//while meas busy, start measurements
	if (ANA_measBusy){
 8001276:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <ANA_Handler+0x210>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d041      	beq.n	8001302 <ANA_Handler+0x13e>
		//start wpc
		if ((ANA_cycle < ANA_inOptn[3])&(!ANA_wpcBusy)&(!ANA_hallBusy)) {
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <ANA_Handler+0x23c>)
 8001280:	88da      	ldrh	r2, [r3, #6]
 8001282:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <ANA_Handler+0x220>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	bf8c      	ite	hi
 800128a:	2301      	movhi	r3, #1
 800128c:	2300      	movls	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <ANA_Handler+0x214>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4013      	ands	r3, r2
 800129e:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <ANA_Handler+0x230>)
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	f082 0201 	eor.w	r2, r2, #1
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <ANA_Handler+0xf8>
			ANA_outStartWPC = true;
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <ANA_Handler+0x240>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
			ANA_wpcBusy = true;
 80012b4:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <ANA_Handler+0x214>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e022      	b.n	8001302 <ANA_Handler+0x13e>
		//start hall
		} else if (ANA_wpcBusy & ANA_inMeasReady){
 80012bc:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <ANA_Handler+0x214>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <ANA_Handler+0x218>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <ANA_Handler+0x11c>
			ANA_outStartHALL = true;
 80012cc:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <ANA_Handler+0x244>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
			ANA_wpcBusy = false;
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <ANA_Handler+0x214>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
			ANA_hallBusy = true;
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <ANA_Handler+0x230>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e010      	b.n	8001302 <ANA_Handler+0x13e>
		} else if (ANA_hallBusy & ANA_inMeasReady){
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <ANA_Handler+0x230>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <ANA_Handler+0x218>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <ANA_Handler+0x13e>
			ANA_hallBusy = false;
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <ANA_Handler+0x230>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
			ANA_cycle ++;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <ANA_Handler+0x220>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <ANA_Handler+0x220>)
 8001300:	801a      	strh	r2, [r3, #0]
		}
	}

	//When cycles finished or in continuous mode and single cycle is completed
	if ((ANA_cycle == ANA_inOptn[3])&(!ANA_wpcBusy)&(!ANA_hallBusy)) {
 8001302:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <ANA_Handler+0x23c>)
 8001304:	88da      	ldrh	r2, [r3, #6]
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <ANA_Handler+0x220>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <ANA_Handler+0x214>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f083 0301 	eor.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4013      	ands	r3, r2
 8001322:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <ANA_Handler+0x230>)
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	f082 0201 	eor.w	r2, r2, #1
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8264 	beq.w	80017fc <ANA_Handler+0x638>
		//Analyse data
		float mean,stdDeviation,angle,current;
		mean = 0;
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
		stdDeviation = 0;
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
		angle = 0;
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
		current = 0;
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	653b      	str	r3, [r7, #80]	; 0x50
		if (ANA_inOptn[1]==0) {
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <ANA_Handler+0x23c>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	2b00      	cmp	r3, #0
 8001352:	f040 81be 	bne.w	80016d2 <ANA_Handler+0x50e>
			int accuracy = ANA_inOptn[3];
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <ANA_Handler+0x23c>)
 8001358:	88db      	ldrh	r3, [r3, #6]
 800135a:	613b      	str	r3, [r7, #16]
			// Calculate distance
			for (int i = 0; i < accuracy; ++i) {
 800135c:	2300      	movs	r3, #0
 800135e:	657b      	str	r3, [r7, #84]	; 0x54
 8001360:	e02e      	b.n	80013c0 <ANA_Handler+0x1fc>
				ANA_wpcLeft[i]=CALC_DistanceMode(ANA_wpcLeft[i], ANA_inOptn[0], false);
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <ANA_Handler+0x224>)
 8001364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <ANA_Handler+0x23c>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	f7ff fef5 	bl	8001168 <CALC_DistanceMode>
 800137e:	eef0 7a40 	vmov.f32	s15, s0
 8001382:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <ANA_Handler+0x224>)
 8001384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	edc3 7a00 	vstr	s15, [r3]
				ANA_wpcRight[i]=CALC_DistanceMode(ANA_wpcRight[i], ANA_inOptn[0], true);
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <ANA_Handler+0x22c>)
 8001390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <ANA_Handler+0x23c>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	2101      	movs	r1, #1
 80013a0:	4618      	mov	r0, r3
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	f7ff fedf 	bl	8001168 <CALC_DistanceMode>
 80013aa:	eef0 7a40 	vmov.f32	s15, s0
 80013ae:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <ANA_Handler+0x22c>)
 80013b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < accuracy; ++i) {
 80013ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013bc:	3301      	adds	r3, #1
 80013be:	657b      	str	r3, [r7, #84]	; 0x54
 80013c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbcc      	blt.n	8001362 <ANA_Handler+0x19e>
			}
			// Sum
			float sumLeft,sumRight;
			for (int i = 0; i < accuracy; ++i) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80013cc:	e039      	b.n	8001442 <ANA_Handler+0x27e>
 80013ce:	bf00      	nop
 80013d0:	20000504 	.word	0x20000504
 80013d4:	20000513 	.word	0x20000513
 80013d8:	20000514 	.word	0x20000514
 80013dc:	20000505 	.word	0x20000505
 80013e0:	20000508 	.word	0x20000508
 80013e4:	20000516 	.word	0x20000516
 80013e8:	2000092c 	.word	0x2000092c
 80013ec:	2000050c 	.word	0x2000050c
 80013f0:	2000097c 	.word	0x2000097c
 80013f4:	20000515 	.word	0x20000515
 80013f8:	20000954 	.word	0x20000954
 80013fc:	20000904 	.word	0x20000904
 8001400:	20000000 	.word	0x20000000
 8001404:	20000511 	.word	0x20000511
 8001408:	20000510 	.word	0x20000510
				sumLeft = sumLeft+ANA_wpcLeft[i];
 800140c:	4aba      	ldr	r2, [pc, #744]	; (80016f8 <ANA_Handler+0x534>)
 800140e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800141c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001420:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				sumRight = sumRight+ANA_wpcRight[i];
 8001424:	4ab5      	ldr	r2, [pc, #724]	; (80016fc <ANA_Handler+0x538>)
 8001426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001438:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			for (int i = 0; i < accuracy; ++i) {
 800143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143e:	3301      	adds	r3, #1
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
 8001442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	429a      	cmp	r2, r3
 8001448:	dbe0      	blt.n	800140c <ANA_Handler+0x248>
			}
			// Mean
			float meanLeft,meanRight;
			meanLeft = sumLeft/accuracy;
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001454:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800145c:	edc7 7a03 	vstr	s15, [r7, #12]
			meanRight = sumRight/accuracy;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800146a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800146e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001472:	edc7 7a02 	vstr	s15, [r7, #8]
			mean = (sumLeft+sumRight)/(2*accuracy);
 8001476:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800147a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800147e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001492:	edc7 7a07 	vstr	s15, [r7, #28]

			// Standard Deviation
			if (accuracy>1){
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2b01      	cmp	r3, #1
 800149a:	f340 80aa 	ble.w	80015f2 <ANA_Handler+0x42e>
 800149e:	466b      	mov	r3, sp
 80014a0:	461d      	mov	r5, r3
				// Deviations
				float deviation[2*accuracy];
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	005c      	lsls	r4, r3, #1
 80014a6:	1e63      	subs	r3, r4, #1
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4623      	mov	r3, r4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f04f 0100 	mov.w	r1, #0
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	014b      	lsls	r3, r1, #5
 80014bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014c0:	0142      	lsls	r2, r0, #5
 80014c2:	4623      	mov	r3, r4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f04f 0100 	mov.w	r1, #0
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	014b      	lsls	r3, r1, #5
 80014d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014d8:	0142      	lsls	r2, r0, #5
 80014da:	4623      	mov	r3, r4
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	3307      	adds	r3, #7
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	ebad 0d03 	sub.w	sp, sp, r3
 80014e8:	466b      	mov	r3, sp
 80014ea:	3303      	adds	r3, #3
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	603b      	str	r3, [r7, #0]
				for (int i = 0; i < accuracy; ++i) {
 80014f2:	2300      	movs	r3, #0
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	e04e      	b.n	8001596 <ANA_Handler+0x3d2>
					// Left
					deviation[i]=ANA_wpcLeft[i]-mean;
 80014f8:	4a7f      	ldr	r2, [pc, #508]	; (80016f8 <ANA_Handler+0x534>)
 80014fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	edd7 7a07 	vldr	s15, [r7, #28]
 8001508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	edc3 7a00 	vstr	s15, [r3]
					deviation[i]=deviation[i]*deviation[i];
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	edc3 7a00 	vstr	s15, [r3]
					// Right
					deviation[i*2]=ANA_wpcRight[i]-mean;
 8001540:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <ANA_Handler+0x538>)
 8001542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	ed93 7a00 	vldr	s14, [r3]
 800154c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	edd7 7a07 	vldr	s15, [r7, #28]
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	edc3 7a00 	vstr	s15, [r3]
					deviation[i*2]=deviation[i*2]*deviation[i*2];
 8001562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	ed93 7a00 	vldr	s14, [r3]
 8001570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < accuracy; ++i) {
 8001590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001592:	3301      	adds	r3, #1
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
 8001596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	429a      	cmp	r2, r3
 800159c:	dbac      	blt.n	80014f8 <ANA_Handler+0x334>
				}
				// Variation
				float var = 0;
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
				for (int i = 0; i < 2*accuracy; ++i) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015a8:	e00b      	b.n	80015c2 <ANA_Handler+0x3fe>
					var = var + deviation[1];
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				for (int i = 0; i < 2*accuracy; ++i) {
 80015bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015be:	3301      	adds	r3, #1
 80015c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbee      	blt.n	80015aa <ANA_Handler+0x3e6>
				}
				var = var/(accuracy*2);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80015dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				// Standard Deviation
				stdDeviation = sqrtf(var);
 80015e4:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80015e8:	f00b fe4c 	bl	800d284 <sqrtf>
 80015ec:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
 80015f0:	46ad      	mov	sp, r5
			}

			// Angle
			angle = CALC_Angle(meanRight, meanLeft, mean);
 80015f2:	ed97 1a07 	vldr	s2, [r7, #28]
 80015f6:	edd7 0a03 	vldr	s1, [r7, #12]
 80015fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80015fe:	f7ff fc5f 	bl	8000ec0 <CALC_Angle>
 8001602:	ed87 0a06 	vstr	s0, [r7, #24]

			// Current
			if ((mean<10)&(mean>0)) {
 8001606:	edd7 7a07 	vldr	s15, [r7, #28]
 800160a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800160e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001616:	bf4c      	ite	mi
 8001618:	2301      	movmi	r3, #1
 800161a:	2300      	movpl	r3, #0
 800161c:	b2da      	uxtb	r2, r3
 800161e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	bfcc      	ite	gt
 800162c:	2301      	movgt	r3, #1
 800162e:	2300      	movle	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4013      	ands	r3, r2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d03b      	beq.n	80016b2 <ANA_Handler+0x4ee>
				// Mean of hall sensor
				float sumHall;
				for (int i = 0; i < accuracy; ++i) {
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
 800163e:	e01a      	b.n	8001676 <ANA_Handler+0x4b2>
					sumHall = ANA_hallLeft[i]+sumHall;
 8001640:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <ANA_Handler+0x53c>)
 8001642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001654:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					sumHall = ANA_hallRight[i]+sumHall;
 8001658:	4a2a      	ldr	r2, [pc, #168]	; (8001704 <ANA_Handler+0x540>)
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				for (int i = 0; i < accuracy; ++i) {
 8001670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001672:	3301      	adds	r3, #1
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
 8001676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbe0      	blt.n	8001640 <ANA_Handler+0x47c>
				}
				sumHall = sumHall/(2*accuracy);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800168e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001692:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

				current = CALC_ElCurrent(sumHall, (mean/1000));
 8001696:	edd7 7a07 	vldr	s15, [r7, #28]
 800169a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001708 <ANA_Handler+0x544>
 800169e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016a2:	eef0 0a47 	vmov.f32	s1, s14
 80016a6:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80016aa:	f7ff fc6d 	bl	8000f88 <CALC_ElCurrent>
 80016ae:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
			}

			// Transfer results
			ANA_outResults[0]=angle; // Angle
 80016b2:	4a16      	ldr	r2, [pc, #88]	; (800170c <ANA_Handler+0x548>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6013      	str	r3, [r2, #0]
			ANA_outResults[1]=mean; // Distance
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <ANA_Handler+0x548>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	6053      	str	r3, [r2, #4]
			ANA_outResults[2]=stdDeviation; //Standard deviation
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <ANA_Handler+0x548>)
 80016c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016c2:	6093      	str	r3, [r2, #8]
			ANA_outResults[3]=current; //Current
 80016c4:	4a11      	ldr	r2, [pc, #68]	; (800170c <ANA_Handler+0x548>)
 80016c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016c8:	60d3      	str	r3, [r2, #12]
			ANA_outDataReady = true;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <ANA_Handler+0x54c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e094      	b.n	80017fc <ANA_Handler+0x638>

		} else { //transfer raw data
			// Calculate means of all 4 inputs
			float meanWPCright, meanWPCleft, meanHALLright, meanHALLleft;
			meanHALLleft = 0;
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
			meanHALLright = 0;
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
			meanWPCleft = 0;
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			meanWPCright = 0;
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30

			int accuracy = ANA_inOptn[3];
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <ANA_Handler+0x550>)
 80016ec:	88db      	ldrh	r3, [r3, #6]
 80016ee:	617b      	str	r3, [r7, #20]

			for (int i = 0; i < accuracy; ++i) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	e043      	b.n	800177e <ANA_Handler+0x5ba>
 80016f6:	bf00      	nop
 80016f8:	2000092c 	.word	0x2000092c
 80016fc:	2000097c 	.word	0x2000097c
 8001700:	20000954 	.word	0x20000954
 8001704:	20000904 	.word	0x20000904
 8001708:	447a0000 	.word	0x447a0000
 800170c:	200009a4 	.word	0x200009a4
 8001710:	20000512 	.word	0x20000512
 8001714:	20000000 	.word	0x20000000
				meanHALLleft = meanHALLleft + ANA_hallLeft[i];
 8001718:	4a54      	ldr	r2, [pc, #336]	; (800186c <ANA_Handler+0x6a8>)
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				meanHALLright = meanHALLright + ANA_hallRight[i];
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <ANA_Handler+0x6ac>)
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				meanWPCleft = meanWPCleft + ANA_wpcLeft[i];
 8001748:	4a4a      	ldr	r2, [pc, #296]	; (8001874 <ANA_Handler+0x6b0>)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				meanWPCright = meanWPCright + ANA_wpcRight[i];
 8001760:	4a45      	ldr	r2, [pc, #276]	; (8001878 <ANA_Handler+0x6b4>)
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001774:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			for (int i = 0; i < accuracy; ++i) {
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	3301      	adds	r3, #1
 800177c:	623b      	str	r3, [r7, #32]
 800177e:	6a3a      	ldr	r2, [r7, #32]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	429a      	cmp	r2, r3
 8001784:	dbc8      	blt.n	8001718 <ANA_Handler+0x554>
			}
			meanHALLleft = meanHALLleft / accuracy;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001790:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001798:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			meanHALLright = meanHALLright / accuracy;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80017aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			meanWPCleft = meanWPCleft / accuracy;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80017c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			meanWPCright = meanWPCright / accuracy;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80017d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

			// Transfer results
			ANA_outResults[0]=meanHALLright; // HallRight
 80017de:	4a27      	ldr	r2, [pc, #156]	; (800187c <ANA_Handler+0x6b8>)
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	6013      	str	r3, [r2, #0]
			ANA_outResults[1]=meanHALLleft; // HallLeft
 80017e4:	4a25      	ldr	r2, [pc, #148]	; (800187c <ANA_Handler+0x6b8>)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	6053      	str	r3, [r2, #4]
			ANA_outResults[2]=meanWPCright; //WPCRight
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <ANA_Handler+0x6b8>)
 80017ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ee:	6093      	str	r3, [r2, #8]
			ANA_outResults[3]=meanWPCleft; //WPCLeft
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <ANA_Handler+0x6b8>)
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	60d3      	str	r3, [r2, #12]
			ANA_outDataReady = true;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <ANA_Handler+0x6bc>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]

	}

	//end measurement when cycles are finished
	//or button is pressed when in streaming mode
	if (((ANA_cycle == ANA_inOptn[3])&!(ANA_inOptn[2]==1))|(ANA_inBtn & (ANA_inOptn[2]==1))){
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <ANA_Handler+0x6c0>)
 80017fe:	88da      	ldrh	r2, [r3, #6]
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <ANA_Handler+0x6c4>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <ANA_Handler+0x6c0>)
 8001810:	889b      	ldrh	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4013      	ands	r3, r2
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <ANA_Handler+0x6c8>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <ANA_Handler+0x6c0>)
 800182a:	889b      	ldrh	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	400b      	ands	r3, r1
 8001838:	4313      	orrs	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <ANA_Handler+0x680>
		ANA_measBusy = false;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <ANA_Handler+0x6cc>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
	}

	// Set cycles to zero if measurement finished
	if (ANA_cycle == ANA_inOptn[3]) {
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <ANA_Handler+0x6c0>)
 8001846:	88da      	ldrh	r2, [r3, #6]
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <ANA_Handler+0x6c4>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d102      	bne.n	8001856 <ANA_Handler+0x692>
		ANA_cycle = 0;
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <ANA_Handler+0x6c4>)
 8001852:	2200      	movs	r2, #0
 8001854:	801a      	strh	r2, [r3, #0]
	}

	ANA_inBtn = false;
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <ANA_Handler+0x6c8>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
	ANA_inMeasReady = false;
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <ANA_Handler+0x6d0>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	3760      	adds	r7, #96	; 0x60
 8001866:	46bd      	mov	sp, r7
 8001868:	bdb0      	pop	{r4, r5, r7, pc}
 800186a:	bf00      	nop
 800186c:	20000954 	.word	0x20000954
 8001870:	20000904 	.word	0x20000904
 8001874:	2000092c 	.word	0x2000092c
 8001878:	2000097c 	.word	0x2000097c
 800187c:	200009a4 	.word	0x200009a4
 8001880:	20000512 	.word	0x20000512
 8001884:	20000000 	.word	0x20000000
 8001888:	20000516 	.word	0x20000516
 800188c:	20000504 	.word	0x20000504
 8001890:	20000513 	.word	0x20000513
 8001894:	20000505 	.word	0x20000505

08001898 <GUI_TS_GetState>:
/** ***************************************************************************
 * @brief Wrapper for touch screen sate
 *
 * Enable use of BSP_TS_GetState() function with 180° rotated display
 *****************************************************************************/
void GUI_TS_GetState(TS_StateTypeDef* TS_State){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	//readout TS state
	BSP_TS_GetState(TS_State);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f004 fc07 	bl	80060b4 <BSP_TS_GetState>
	//translate to correct coordinate system
	TS_State->X = BSP_LCD_GetXSize()-TS_State->X;
 80018a6:	f003 fb33 	bl	8004f10 <BSP_LCD_GetXSize>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	885b      	ldrh	r3, [r3, #2]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	805a      	strh	r2, [r3, #2]
	//TS_State->Y = BSP_LCD_GetYSize()-TS_State->Y;
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <GUI_LCD_FillRect>:
/** ***************************************************************************
 * @brief Wrapper to draw filled rectangle
 *
 * Enable use of BSP_LCD_FillRect() function with 180° rotated display
 *****************************************************************************/
void GUI_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height){
 80018c2:	b590      	push	{r4, r7, lr}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4604      	mov	r4, r0
 80018ca:	4608      	mov	r0, r1
 80018cc:	4611      	mov	r1, r2
 80018ce:	461a      	mov	r2, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	80fb      	strh	r3, [r7, #6]
 80018d4:	4603      	mov	r3, r0
 80018d6:	80bb      	strh	r3, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	803b      	strh	r3, [r7, #0]
	//calculate diagonal corner coordinates and translate to other system
	Xpos = BSP_LCD_GetXSize()-(Xpos+Width);
 80018e0:	f003 fb16 	bl	8004f10 <BSP_LCD_GetXSize>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	88f9      	ldrh	r1, [r7, #6]
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	440b      	add	r3, r1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	80fb      	strh	r3, [r7, #6]
	Ypos = BSP_LCD_GetYSize()-(Ypos+Height);
 80018f4:	f003 fb18 	bl	8004f28 <BSP_LCD_GetYSize>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	88b9      	ldrh	r1, [r7, #4]
 80018fe:	883b      	ldrh	r3, [r7, #0]
 8001900:	440b      	add	r3, r1
 8001902:	b29b      	uxth	r3, r3
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	80bb      	strh	r3, [r7, #4]
	//draw rectangular shape
	BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
 8001908:	883b      	ldrh	r3, [r7, #0]
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	88b9      	ldrh	r1, [r7, #4]
 800190e:	88f8      	ldrh	r0, [r7, #6]
 8001910:	f003 ff66 	bl	80057e0 <BSP_LCD_FillRect>
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}

0800191c <GUI_LCD_DrawRect>:
/** ***************************************************************************
 * @brief Wrapper to draw rectangle
 *
 * Enable use of BSP_LCD_DrawRect() function with 180° rotated display
 *****************************************************************************/
void GUI_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height){
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4604      	mov	r4, r0
 8001924:	4608      	mov	r0, r1
 8001926:	4611      	mov	r1, r2
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	4603      	mov	r3, r0
 8001930:	80bb      	strh	r3, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
 8001936:	4613      	mov	r3, r2
 8001938:	803b      	strh	r3, [r7, #0]
	//calculate diagonal corner coordinates and translate to other system
	Xpos = BSP_LCD_GetXSize()-(Xpos+Width);
 800193a:	f003 fae9 	bl	8004f10 <BSP_LCD_GetXSize>
 800193e:	4603      	mov	r3, r0
 8001940:	b29a      	uxth	r2, r3
 8001942:	88f9      	ldrh	r1, [r7, #6]
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	440b      	add	r3, r1
 8001948:	b29b      	uxth	r3, r3
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	80fb      	strh	r3, [r7, #6]
	Ypos = BSP_LCD_GetYSize()-(Ypos+Height);
 800194e:	f003 faeb 	bl	8004f28 <BSP_LCD_GetYSize>
 8001952:	4603      	mov	r3, r0
 8001954:	b29a      	uxth	r2, r3
 8001956:	88b9      	ldrh	r1, [r7, #4]
 8001958:	883b      	ldrh	r3, [r7, #0]
 800195a:	440b      	add	r3, r1
 800195c:	b29b      	uxth	r3, r3
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	80bb      	strh	r3, [r7, #4]
	//draw rectangular shape
	BSP_LCD_DrawRect(Xpos, Ypos, Width, Height);
 8001962:	883b      	ldrh	r3, [r7, #0]
 8001964:	887a      	ldrh	r2, [r7, #2]
 8001966:	88b9      	ldrh	r1, [r7, #4]
 8001968:	88f8      	ldrh	r0, [r7, #6]
 800196a:	f003 fe1d 	bl	80055a8 <BSP_LCD_DrawRect>
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}
	...

08001978 <GUI_DrawHint>:

/** ***************************************************************************
 * @brief Draw hint
 *
 *****************************************************************************/
void GUI_DrawHint(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f003 fb6a 	bl	8005058 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001984:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001988:	f003 fb4e 	bl	8005028 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800198c:	481b      	ldr	r0, [pc, #108]	; (80019fc <GUI_DrawHint+0x84>)
 800198e:	f003 fb7d 	bl	800508c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Cable-Monitor", LEFT_MODE);
 8001992:	2303      	movs	r3, #3
 8001994:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <GUI_DrawHint+0x88>)
 8001996:	210a      	movs	r1, #10
 8001998:	2005      	movs	r0, #5
 800199a:	f003 fbfd 	bl	8005198 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 800199e:	4819      	ldr	r0, [pc, #100]	; (8001a04 <GUI_DrawHint+0x8c>)
 80019a0:	f003 fb74 	bl	800508c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch on screen or", LEFT_MODE);
 80019a4:	2303      	movs	r3, #3
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <GUI_DrawHint+0x90>)
 80019a8:	213c      	movs	r1, #60	; 0x3c
 80019aa:	2005      	movs	r0, #5
 80019ac:	f003 fbf4 	bl	8005198 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"press blue button",LEFT_MODE);
 80019b0:	2303      	movs	r3, #3
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <GUI_DrawHint+0x94>)
 80019b4:	2150      	movs	r1, #80	; 0x50
 80019b6:	2005      	movs	r0, #5
 80019b8:	f003 fbee 	bl	8005198 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 100, (uint8_t *)"to proceed to", LEFT_MODE);
 80019bc:	2303      	movs	r3, #3
 80019be:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <GUI_DrawHint+0x98>)
 80019c0:	2164      	movs	r1, #100	; 0x64
 80019c2:	2005      	movs	r0, #5
 80019c4:	f003 fbe8 	bl	8005198 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 120, (uint8_t *)"the main sceen", LEFT_MODE);
 80019c8:	2303      	movs	r3, #3
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <GUI_DrawHint+0x9c>)
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	2005      	movs	r0, #5
 80019d0:	f003 fbe2 	bl	8005198 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 80019d4:	4810      	ldr	r0, [pc, #64]	; (8001a18 <GUI_DrawHint+0xa0>)
 80019d6:	f003 fb59 	bl	800508c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 290, (uint8_t *)"(c)bollhjon & durmatar", LEFT_MODE);
 80019da:	2303      	movs	r3, #3
 80019dc:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <GUI_DrawHint+0xa4>)
 80019de:	f44f 7191 	mov.w	r1, #290	; 0x122
 80019e2:	2005      	movs	r0, #5
 80019e4:	f003 fbd8 	bl	8005198 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 305, (uint8_t *)"Version 20.12.2021", LEFT_MODE);
 80019e8:	2303      	movs	r3, #3
 80019ea:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <GUI_DrawHint+0xa8>)
 80019ec:	f240 1131 	movw	r1, #305	; 0x131
 80019f0:	2005      	movs	r0, #5
 80019f2:	f003 fbd1 	bl	8005198 <BSP_LCD_DisplayStringAt>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002e8 	.word	0x200002e8
 8001a00:	0800d3a0 	.word	0x0800d3a0
 8001a04:	200002f8 	.word	0x200002f8
 8001a08:	0800d3b0 	.word	0x0800d3b0
 8001a0c:	0800d3c4 	.word	0x0800d3c4
 8001a10:	0800d3d8 	.word	0x0800d3d8
 8001a14:	0800d3e8 	.word	0x0800d3e8
 8001a18:	20000300 	.word	0x20000300
 8001a1c:	0800d3f8 	.word	0x0800d3f8
 8001a20:	0800d410 	.word	0x0800d410

08001a24 <GUI_DrawModeSel>:

/** ***************************************************************************
 * @brief Draw Mode Selection
 *
 *****************************************************************************/
void GUI_DrawModeSel(void){
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MODE_FONT);
 8001a2a:	4856      	ldr	r0, [pc, #344]	; (8001b84 <GUI_DrawModeSel+0x160>)
 8001a2c:	f003 fb2e 	bl	800508c <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MODE_Y;
 8001a30:	f003 fa7a 	bl	8004f28 <BSP_LCD_GetYSize>
 8001a34:	4603      	mov	r3, r0
 8001a36:	3b28      	subs	r3, #40	; 0x28
 8001a38:	613b      	str	r3, [r7, #16]
	m = MODE_MARGIN;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MODE_ENTRY_COUNT;
 8001a3e:	f003 fa67 	bl	8004f10 <BSP_LCD_GetXSize>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a50      	ldr	r2, [pc, #320]	; (8001b88 <GUI_DrawModeSel+0x164>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
	h = MODE_HEIGHT;
 8001a4e:	2328      	movs	r3, #40	; 0x28
 8001a50:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < MODE_ENTRY_COUNT; ++i) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e08c      	b.n	8001b72 <GUI_DrawModeSel+0x14e>
		x = i*w;
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MODE_entry[i].back_color);
 8001a62:	494a      	ldr	r1, [pc, #296]	; (8001b8c <GUI_DrawModeSel+0x168>)
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3310      	adds	r3, #16
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fad7 	bl	8005028 <BSP_LCD_SetTextColor>
		GUI_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b298      	uxth	r0, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	b299      	uxth	r1, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	b29c      	uxth	r4, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	f7ff ff05 	bl	80018c2 <GUI_LCD_FillRect>
		BSP_LCD_SetTextColor(MODE_entry[i].frame_color);
 8001ab8:	4934      	ldr	r1, [pc, #208]	; (8001b8c <GUI_DrawModeSel+0x168>)
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3314      	adds	r3, #20
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 faac 	bl	8005028 <BSP_LCD_SetTextColor>
		GUI_LCD_DrawRect(x+m, y+m, w-2*m, h-2*m);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	b298      	uxth	r0, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	b29c      	uxth	r4, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4622      	mov	r2, r4
 8001b0a:	f7ff ff07 	bl	800191c <GUI_LCD_DrawRect>
		BSP_LCD_SetBackColor(MODE_entry[i].back_color);
 8001b0e:	491f      	ldr	r1, [pc, #124]	; (8001b8c <GUI_DrawModeSel+0x168>)
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3310      	adds	r3, #16
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fa99 	bl	8005058 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b26:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b2a:	f003 fa7d 	bl	8005028 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m, y+6*m, (uint8_t*)MODE_entry[i].line, LEFT_MODE);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	00d2      	lsls	r2, r2, #3
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	b298      	uxth	r0, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	0052      	lsls	r2, r2, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	b299      	uxth	r1, r3
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <GUI_DrawModeSel+0x168>)
 8001b64:	441a      	add	r2, r3
 8001b66:	2303      	movs	r3, #3
 8001b68:	f003 fb16 	bl	8005198 <BSP_LCD_DisplayStringAt>
	for (int i = 0; i < MODE_ENTRY_COUNT; ++i) {
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f77f af6f 	ble.w	8001a58 <GUI_DrawModeSel+0x34>
	}
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	200002f0 	.word	0x200002f0
 8001b88:	aaaaaaab 	.word	0xaaaaaaab
 8001b8c:	20000154 	.word	0x20000154

08001b90 <GUI_DrawTopMode>:
/** ***************************************************************************
 * @brief Draw Mode field to Top Bar
 *
 * Display selected Mode and green background if cable was detected
 *****************************************************************************/
void GUI_DrawTopMode(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(TOP_FONT);
 8001b96:	487d      	ldr	r0, [pc, #500]	; (8001d8c <GUI_DrawTopMode+0x1fc>)
 8001b98:	f003 fa78 	bl	800508c <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	x = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
	y = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
	m = TOP_MARGIN;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	60fb      	str	r3, [r7, #12]
	w = (BSP_LCD_GetXSize()/3);
 8001ba8:	f003 f9b2 	bl	8004f10 <BSP_LCD_GetXSize>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a78      	ldr	r2, [pc, #480]	; (8001d90 <GUI_DrawTopMode+0x200>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
	h = TOP_HEIGHT;
 8001bb8:	2328      	movs	r3, #40	; 0x28
 8001bba:	607b      	str	r3, [r7, #4]

	//Display framed mode and background green if cable detected
	if (GUI_cable_detected){
 8001bbc:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <GUI_DrawTopMode+0x204>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00b      	beq.n	8001bdc <GUI_DrawTopMode+0x4c>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
 8001bc4:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8001bc8:	f003 fa2e 	bl	8005028 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGREEN);
 8001bcc:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8001bd0:	f003 fa42 	bl	8005058 <BSP_LCD_SetBackColor>
		GUI_cable_detected = false;
 8001bd4:	4b6f      	ldr	r3, [pc, #444]	; (8001d94 <GUI_DrawTopMode+0x204>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e015      	b.n	8001c08 <GUI_DrawTopMode+0x78>
	} else if (GUI_cable_not_detected){
 8001bdc:	4b6e      	ldr	r3, [pc, #440]	; (8001d98 <GUI_DrawTopMode+0x208>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d009      	beq.n	8001bf8 <GUI_DrawTopMode+0x68>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 8001be4:	486d      	ldr	r0, [pc, #436]	; (8001d9c <GUI_DrawTopMode+0x20c>)
 8001be6:	f003 fa1f 	bl	8005028 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTRED);
 8001bea:	486c      	ldr	r0, [pc, #432]	; (8001d9c <GUI_DrawTopMode+0x20c>)
 8001bec:	f003 fa34 	bl	8005058 <BSP_LCD_SetBackColor>
		GUI_cable_not_detected = false;
 8001bf0:	4b69      	ldr	r3, [pc, #420]	; (8001d98 <GUI_DrawTopMode+0x208>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	e007      	b.n	8001c08 <GUI_DrawTopMode+0x78>
	} else {
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f003 fa14 	bl	8005028 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f003 fa28 	bl	8005058 <BSP_LCD_SetBackColor>
	}
	GUI_LCD_FillRect(x+m, y+m, (w*2)-2*m, h-2*m);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b298      	uxth	r0, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b299      	uxth	r1, r3
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29c      	uxth	r4, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	f7ff fe40 	bl	80018c2 <GUI_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c42:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c46:	f003 f9ef 	bl	8005028 <BSP_LCD_SetTextColor>
	GUI_LCD_DrawRect(x+m, y+m, (w*2)-2*m, h-2*m);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b298      	uxth	r0, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	b299      	uxth	r1, r3
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	b29c      	uxth	r4, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4622      	mov	r2, r4
 8001c80:	f7ff fe4c 	bl	800191c <GUI_LCD_DrawRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c84:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c88:	f003 f9ce 	bl	8005028 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(x+3*m, y+6*m, (uint8_t*)"Mode:", LEFT_MODE);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	0052      	lsls	r2, r2, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b298      	uxth	r0, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	0052      	lsls	r2, r2, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b299      	uxth	r1, r3
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	4a39      	ldr	r2, [pc, #228]	; (8001da0 <GUI_DrawTopMode+0x210>)
 8001cba:	f003 fa6d 	bl	8005198 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8001cbe:	4839      	ldr	r0, [pc, #228]	; (8001da4 <GUI_DrawTopMode+0x214>)
 8001cc0:	f003 f9b2 	bl	8005028 <BSP_LCD_SetTextColor>
	//display current mode
	switch (GUI_mode) {
 8001cc4:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <GUI_DrawTopMode+0x218>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d03e      	beq.n	8001d4a <GUI_DrawTopMode+0x1ba>
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	dc58      	bgt.n	8001d82 <GUI_DrawTopMode+0x1f2>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <GUI_DrawTopMode+0x14a>
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d01c      	beq.n	8001d12 <GUI_DrawTopMode+0x182>
			break;
		case MODE_LNPE:
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LNPE", LEFT_MODE);
			break;
		default:
			break;
 8001cd8:	e053      	b.n	8001d82 <GUI_DrawTopMode+0x1f2>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"L", LEFT_MODE);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	0052      	lsls	r2, r2, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3354      	adds	r3, #84	; 0x54
 8001cf0:	b298      	uxth	r0, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	0052      	lsls	r2, r2, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	b299      	uxth	r1, r3
 8001d08:	2303      	movs	r3, #3
 8001d0a:	4a28      	ldr	r2, [pc, #160]	; (8001dac <GUI_DrawTopMode+0x21c>)
 8001d0c:	f003 fa44 	bl	8005198 <BSP_LCD_DisplayStringAt>
			break;
 8001d10:	e038      	b.n	8001d84 <GUI_DrawTopMode+0x1f4>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LN", LEFT_MODE);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	0052      	lsls	r2, r2, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3354      	adds	r3, #84	; 0x54
 8001d28:	b298      	uxth	r0, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	2303      	movs	r3, #3
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <GUI_DrawTopMode+0x220>)
 8001d44:	f003 fa28 	bl	8005198 <BSP_LCD_DisplayStringAt>
			break;
 8001d48:	e01c      	b.n	8001d84 <GUI_DrawTopMode+0x1f4>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LNPE", LEFT_MODE);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	0052      	lsls	r2, r2, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3354      	adds	r3, #84	; 0x54
 8001d60:	b298      	uxth	r0, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	0052      	lsls	r2, r2, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b299      	uxth	r1, r3
 8001d78:	2303      	movs	r3, #3
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <GUI_DrawTopMode+0x224>)
 8001d7c:	f003 fa0c 	bl	8005198 <BSP_LCD_DisplayStringAt>
			break;
 8001d80:	e000      	b.n	8001d84 <GUI_DrawTopMode+0x1f4>
			break;
 8001d82:	bf00      	nop
	}
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	200002f0 	.word	0x200002f0
 8001d90:	aaaaaaab 	.word	0xaaaaaaab
 8001d94:	20000518 	.word	0x20000518
 8001d98:	20000519 	.word	0x20000519
 8001d9c:	ffff8080 	.word	0xffff8080
 8001da0:	0800d424 	.word	0x0800d424
 8001da4:	ff404040 	.word	0xff404040
 8001da8:	2000051a 	.word	0x2000051a
 8001dac:	0800d42c 	.word	0x0800d42c
 8001db0:	0800d430 	.word	0x0800d430
 8001db4:	0800d434 	.word	0x0800d434

08001db8 <GUI_DrawTopOptions>:
/** ***************************************************************************
 * @brief Draw options field to top bar
 *
 * Draw options field in top bar
 *****************************************************************************/
void GUI_DrawTopOptions(void){
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(TOP_FONT);
 8001dbe:	486a      	ldr	r0, [pc, #424]	; (8001f68 <GUI_DrawTopOptions+0x1b0>)
 8001dc0:	f003 f964 	bl	800508c <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	x = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
	y = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
	m = TOP_MARGIN;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	60fb      	str	r3, [r7, #12]
	w = (BSP_LCD_GetXSize()/3);
 8001dd0:	f003 f89e 	bl	8004f10 <BSP_LCD_GetXSize>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <GUI_DrawTopOptions+0x1b4>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
	h = TOP_HEIGHT;
 8001de0:	2328      	movs	r3, #40	; 0x28
 8001de2:	607b      	str	r3, [r7, #4]

	//display Options area
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8001de4:	4862      	ldr	r0, [pc, #392]	; (8001f70 <GUI_DrawTopOptions+0x1b8>)
 8001de6:	f003 f91f 	bl	8005028 <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	b298      	uxth	r0, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	b299      	uxth	r1, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	b29c      	uxth	r4, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4622      	mov	r2, r4
 8001e30:	f7ff fd47 	bl	80018c2 <GUI_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 8001e34:	484e      	ldr	r0, [pc, #312]	; (8001f70 <GUI_DrawTopOptions+0x1b8>)
 8001e36:	f003 f90f 	bl	8005058 <BSP_LCD_SetBackColor>
	//display according to site state
	if (GUI_currentSite != SITE_OPTN) {
 8001e3a:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <GUI_DrawTopOptions+0x1bc>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d047      	beq.n	8001ed2 <GUI_DrawTopOptions+0x11a>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8001e42:	484d      	ldr	r0, [pc, #308]	; (8001f78 <GUI_DrawTopOptions+0x1c0>)
 8001e44:	f003 f8f0 	bl	8005028 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"OPTN", LEFT_MODE);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	00d2      	lsls	r2, r2, #3
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	b298      	uxth	r0, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	0052      	lsls	r2, r2, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	2303      	movs	r3, #3
 8001e80:	4a3e      	ldr	r2, [pc, #248]	; (8001f7c <GUI_DrawTopOptions+0x1c4>)
 8001e82:	f003 f989 	bl	8005198 <BSP_LCD_DisplayStringAt>
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b298      	uxth	r0, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b299      	uxth	r1, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	b29c      	uxth	r4, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4622      	mov	r2, r4
 8001ecc:	f7ff fd26 	bl	800191c <GUI_LCD_DrawRect>
	} else {
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"BACK", LEFT_MODE);
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
	}
}
 8001ed0:	e046      	b.n	8001f60 <GUI_DrawTopOptions+0x1a8>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001ed2:	482b      	ldr	r0, [pc, #172]	; (8001f80 <GUI_DrawTopOptions+0x1c8>)
 8001ed4:	f003 f8a8 	bl	8005028 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"BACK", LEFT_MODE);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	00d2      	lsls	r2, r2, #3
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b298      	uxth	r0, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	0052      	lsls	r2, r2, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b299      	uxth	r1, r3
 8001f0e:	2303      	movs	r3, #3
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <GUI_DrawTopOptions+0x1cc>)
 8001f12:	f003 f941 	bl	8005198 <BSP_LCD_DisplayStringAt>
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b298      	uxth	r0, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b299      	uxth	r1, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	b29c      	uxth	r4, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4622      	mov	r2, r4
 8001f5c:	f7ff fcde 	bl	800191c <GUI_LCD_DrawRect>
}
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	200002f0 	.word	0x200002f0
 8001f6c:	aaaaaaab 	.word	0xaaaaaaab
 8001f70:	ffd3d3d3 	.word	0xffd3d3d3
 8001f74:	2000053c 	.word	0x2000053c
 8001f78:	ff404040 	.word	0xff404040
 8001f7c:	0800d43c 	.word	0x0800d43c
 8001f80:	ffff0000 	.word	0xffff0000
 8001f84:	0800d444 	.word	0x0800d444

08001f88 <GUI_ClearSite>:
/** ***************************************************************************
 * @brief Draw options field to top bar
 *
 * Draw options field in top bar
 *****************************************************************************/
void GUI_ClearSite(void){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f003 f84a 	bl	8005028 <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 40, 240, 240);
 8001f94:	23f0      	movs	r3, #240	; 0xf0
 8001f96:	22f0      	movs	r2, #240	; 0xf0
 8001f98:	2128      	movs	r1, #40	; 0x28
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff fc91 	bl	80018c2 <GUI_LCD_FillRect>
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <GUI_DrawMeasurement>:
 *
 * Always angle and distance, if measuring accuracy factor is greater than 1
 * also display standard deviation and accuracy factor, if distance is smaller
 * than 10mm display current
 *****************************************************************************/
void GUI_DrawMeasurement(void){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b090      	sub	sp, #64	; 0x40
 8001fa8:	af02      	add	r7, sp, #8
	GUI_ClearSite();
 8001faa:	f7ff ffed 	bl	8001f88 <GUI_ClearSite>
	//display angle
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	f003 f839 	bl	8005028 <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 45, 240, 70);
 8001fb6:	2346      	movs	r3, #70	; 0x46
 8001fb8:	22f0      	movs	r2, #240	; 0xf0
 8001fba:	212d      	movs	r1, #45	; 0x2d
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff fc80 	bl	80018c2 <GUI_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc6:	f003 f847 	bl	8005058 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001fca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001fce:	f003 f82b 	bl	8005028 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(120, 110, 50);
 8001fd2:	2232      	movs	r2, #50	; 0x32
 8001fd4:	216e      	movs	r1, #110	; 0x6e
 8001fd6:	2078      	movs	r0, #120	; 0x78
 8001fd8:	f003 fb18 	bl	800560c <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f003 f822 	bl	8005028 <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 110, 240, 60);
 8001fe4:	233c      	movs	r3, #60	; 0x3c
 8001fe6:	22f0      	movs	r2, #240	; 0xf0
 8001fe8:	216e      	movs	r1, #110	; 0x6e
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff fc69 	bl	80018c2 <GUI_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ff0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ff4:	f003 f818 	bl	8005028 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(60, 110, 180, 110);
 8001ff8:	236e      	movs	r3, #110	; 0x6e
 8001ffa:	22b4      	movs	r2, #180	; 0xb4
 8001ffc:	216e      	movs	r1, #110	; 0x6e
 8001ffe:	203c      	movs	r0, #60	; 0x3c
 8002000:	f003 fa08 	bl	8005414 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(120, 50, 120, 110);
 8002004:	236e      	movs	r3, #110	; 0x6e
 8002006:	2278      	movs	r2, #120	; 0x78
 8002008:	2132      	movs	r1, #50	; 0x32
 800200a:	2078      	movs	r0, #120	; 0x78
 800200c:	f003 fa02 	bl	8005414 <BSP_LCD_DrawLine>
	//display angle direction
	if ((-46>GUI_angle)&(GUI_angle<46)) {
 8002010:	4bb2      	ldr	r3, [pc, #712]	; (80022dc <GUI_DrawMeasurement+0x338>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80022e0 <GUI_DrawMeasurement+0x33c>
 800201a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002022:	bf4c      	ite	mi
 8002024:	2301      	movmi	r3, #1
 8002026:	2300      	movpl	r3, #0
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4bac      	ldr	r3, [pc, #688]	; (80022dc <GUI_DrawMeasurement+0x338>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80022e4 <GUI_DrawMeasurement+0x340>
 8002034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	bf4c      	ite	mi
 800203e:	2301      	movmi	r3, #1
 8002040:	2300      	movpl	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	4013      	ands	r3, r2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d04e      	beq.n	80020ea <GUI_DrawMeasurement+0x146>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800204c:	48a6      	ldr	r0, [pc, #664]	; (80022e8 <GUI_DrawMeasurement+0x344>)
 800204e:	f002 ffeb 	bl	8005028 <BSP_LCD_SetTextColor>
		uint16_t x,y;
		float dx,dy;
		dx = 0.888;
 8002052:	4ba6      	ldr	r3, [pc, #664]	; (80022ec <GUI_DrawMeasurement+0x348>)
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
		dy = 0.333;
 8002056:	4ba6      	ldr	r3, [pc, #664]	; (80022f0 <GUI_DrawMeasurement+0x34c>)
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
		if (GUI_angle>0) {
 800205a:	4ba0      	ldr	r3, [pc, #640]	; (80022dc <GUI_DrawMeasurement+0x338>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002068:	dd1c      	ble.n	80020a4 <GUI_DrawMeasurement+0x100>
			x=(uint16_t)(120+(int)(dx*GUI_angle));
 800206a:	4b9c      	ldr	r3, [pc, #624]	; (80022dc <GUI_DrawMeasurement+0x338>)
 800206c:	ed93 7a00 	vldr	s14, [r3]
 8002070:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	b29b      	uxth	r3, r3
 8002082:	3378      	adds	r3, #120	; 0x78
 8002084:	86fb      	strh	r3, [r7, #54]	; 0x36
			y=(uint16_t)(55+(int)(dy*GUI_angle));
 8002086:	4b95      	ldr	r3, [pc, #596]	; (80022dc <GUI_DrawMeasurement+0x338>)
 8002088:	ed93 7a00 	vldr	s14, [r3]
 800208c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002098:	ee17 3a90 	vmov	r3, s15
 800209c:	b29b      	uxth	r3, r3
 800209e:	3337      	adds	r3, #55	; 0x37
 80020a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80020a2:	e01c      	b.n	80020de <GUI_DrawMeasurement+0x13a>
		} else {
			x=(uint16_t)(120+(int)(dx*GUI_angle));
 80020a4:	4b8d      	ldr	r3, [pc, #564]	; (80022dc <GUI_DrawMeasurement+0x338>)
 80020a6:	ed93 7a00 	vldr	s14, [r3]
 80020aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80020ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b6:	ee17 3a90 	vmov	r3, s15
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3378      	adds	r3, #120	; 0x78
 80020be:	86fb      	strh	r3, [r7, #54]	; 0x36
			y=(uint16_t)(55-(int)(dy*GUI_angle));
 80020c0:	4b86      	ldr	r3, [pc, #536]	; (80022dc <GUI_DrawMeasurement+0x338>)
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d2:	ee17 3a90 	vmov	r3, s15
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 80020dc:	86bb      	strh	r3, [r7, #52]	; 0x34
		}
		BSP_LCD_DrawLine(120, 110, x, y);
 80020de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80020e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020e2:	216e      	movs	r1, #110	; 0x6e
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f003 f995 	bl	8005414 <BSP_LCD_DrawLine>
	}

	//Display Text
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80020ea:	f04f 30ff 	mov.w	r0, #4294967295
 80020ee:	f002 ffb3 	bl	8005058 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020f2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020f6:	f002 ff97 	bl	8005028 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 80020fa:	487e      	ldr	r0, [pc, #504]	; (80022f4 <GUI_DrawMeasurement+0x350>)
 80020fc:	f002 ffc6 	bl	800508c <BSP_LCD_SetFont>
	char text[25];
	uint32_t x = 30;
 8002100:	231e      	movs	r3, #30
 8002102:	623b      	str	r3, [r7, #32]
	uint32_t y = 125;
 8002104:	237d      	movs	r3, #125	; 0x7d
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
	//Angle
	if ((-46>GUI_angle)&(GUI_angle<46)) {
 8002108:	4b74      	ldr	r3, [pc, #464]	; (80022dc <GUI_DrawMeasurement+0x338>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80022e0 <GUI_DrawMeasurement+0x33c>
 8002112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211a:	bf4c      	ite	mi
 800211c:	2301      	movmi	r3, #1
 800211e:	2300      	movpl	r3, #0
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b6e      	ldr	r3, [pc, #440]	; (80022dc <GUI_DrawMeasurement+0x338>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80022e4 <GUI_DrawMeasurement+0x340>
 800212c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	bf4c      	ite	mi
 8002136:	2301      	movmi	r3, #1
 8002138:	2300      	movpl	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4013      	ands	r3, r2
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <GUI_DrawMeasurement+0x1c8>
		snprintf(text,24,"Angle:    %4ddeg", (int)(GUI_angle));
 8002144:	4b65      	ldr	r3, [pc, #404]	; (80022dc <GUI_DrawMeasurement+0x338>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800214e:	1d38      	adds	r0, r7, #4
 8002150:	ee17 3a90 	vmov	r3, s15
 8002154:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <GUI_DrawMeasurement+0x354>)
 8002156:	2118      	movs	r1, #24
 8002158:	f008 fe56 	bl	800ae08 <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	b298      	uxth	r0, r3
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	b299      	uxth	r1, r3
 8002164:	1d3a      	adds	r2, r7, #4
 8002166:	2303      	movs	r3, #3
 8002168:	f003 f816 	bl	8005198 <BSP_LCD_DisplayStringAt>
	}
	y = y+30;
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	331e      	adds	r3, #30
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
	//Distance
	if (GUI_distance > -1) {
 8002172:	4b62      	ldr	r3, [pc, #392]	; (80022fc <GUI_DrawMeasurement+0x358>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800217c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	dd15      	ble.n	80021b2 <GUI_DrawMeasurement+0x20e>
		snprintf(text,24,"Distance: %4.1fmm", (float)(GUI_distance));
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <GUI_DrawMeasurement+0x358>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9ec 	bl	8000568 <__aeabi_f2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	1d38      	adds	r0, r7, #4
 8002196:	e9cd 2300 	strd	r2, r3, [sp]
 800219a:	4a59      	ldr	r2, [pc, #356]	; (8002300 <GUI_DrawMeasurement+0x35c>)
 800219c:	2118      	movs	r1, #24
 800219e:	f008 fe33 	bl	800ae08 <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	b298      	uxth	r0, r3
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	b299      	uxth	r1, r3
 80021aa:	1d3a      	adds	r2, r7, #4
 80021ac:	2303      	movs	r3, #3
 80021ae:	f002 fff3 	bl	8005198 <BSP_LCD_DisplayStringAt>
	}
	if (GUI_options[2].active > 0) {
 80021b2:	4b54      	ldr	r3, [pc, #336]	; (8002304 <GUI_DrawMeasurement+0x360>)
 80021b4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d038      	beq.n	800222e <GUI_DrawMeasurement+0x28a>
		//Standard deviation
		y = y+20;
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	3314      	adds	r3, #20
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
		snprintf(text,24,"Std.Dev.: %4f.1mm", (float)(GUI_distanceDeviation));
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <GUI_DrawMeasurement+0x364>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f9ce 	bl	8000568 <__aeabi_f2d>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	1d38      	adds	r0, r7, #4
 80021d2:	e9cd 2300 	strd	r2, r3, [sp]
 80021d6:	4a4d      	ldr	r2, [pc, #308]	; (800230c <GUI_DrawMeasurement+0x368>)
 80021d8:	2118      	movs	r1, #24
 80021da:	f008 fe15 	bl	800ae08 <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	b298      	uxth	r0, r3
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	b299      	uxth	r1, r3
 80021e6:	1d3a      	adds	r2, r7, #4
 80021e8:	2303      	movs	r3, #3
 80021ea:	f002 ffd5 	bl	8005198 <BSP_LCD_DisplayStringAt>
		//Measurement count
		y = y+20;
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	3314      	adds	r3, #20
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
		BSP_LCD_SetFont(&Font16);
 80021f4:	483f      	ldr	r0, [pc, #252]	; (80022f4 <GUI_DrawMeasurement+0x350>)
 80021f6:	f002 ff49 	bl	800508c <BSP_LCD_SetFont>
		int t = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(GUI_options[2].active==1){
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <GUI_DrawMeasurement+0x360>)
 8002200:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002204:	2b01      	cmp	r3, #1
 8002206:	d102      	bne.n	800220e <GUI_DrawMeasurement+0x26a>
			t = 5;
 8002208:	2305      	movs	r3, #5
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220c:	e001      	b.n	8002212 <GUI_DrawMeasurement+0x26e>
		} else {
			t = 10;
 800220e:	230a      	movs	r3, #10
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		snprintf(text,24,"Accuracy: %4dx", t);
 8002212:	1d38      	adds	r0, r7, #4
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	4a3e      	ldr	r2, [pc, #248]	; (8002310 <GUI_DrawMeasurement+0x36c>)
 8002218:	2118      	movs	r1, #24
 800221a:	f008 fdf5 	bl	800ae08 <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	b298      	uxth	r0, r3
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	b299      	uxth	r1, r3
 8002226:	1d3a      	adds	r2, r7, #4
 8002228:	2303      	movs	r3, #3
 800222a:	f002 ffb5 	bl	8005198 <BSP_LCD_DisplayStringAt>
	}
	//Current
	if ((GUI_distance <= 10)&(GUI_distance > -1)) {
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <GUI_DrawMeasurement+0x358>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	bf94      	ite	ls
 8002242:	2301      	movls	r3, #1
 8002244:	2300      	movhi	r3, #0
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <GUI_DrawMeasurement+0x358>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	bfcc      	ite	gt
 800225c:	2301      	movgt	r3, #1
 800225e:	2300      	movle	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	4013      	ands	r3, r2
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01b      	beq.n	80022a2 <GUI_DrawMeasurement+0x2fe>
		y = y+30;
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	331e      	adds	r3, #30
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
		BSP_LCD_SetFont(&Font16);
 8002270:	4820      	ldr	r0, [pc, #128]	; (80022f4 <GUI_DrawMeasurement+0x350>)
 8002272:	f002 ff0b 	bl	800508c <BSP_LCD_SetFont>
		snprintf(text,24,"Current:  %4.1fA",(float)(GUI_current));
 8002276:	4b27      	ldr	r3, [pc, #156]	; (8002314 <GUI_DrawMeasurement+0x370>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f974 	bl	8000568 <__aeabi_f2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	1d38      	adds	r0, r7, #4
 8002286:	e9cd 2300 	strd	r2, r3, [sp]
 800228a:	4a23      	ldr	r2, [pc, #140]	; (8002318 <GUI_DrawMeasurement+0x374>)
 800228c:	2118      	movs	r1, #24
 800228e:	f008 fdbb 	bl	800ae08 <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	b298      	uxth	r0, r3
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	b299      	uxth	r1, r3
 800229a:	1d3a      	adds	r2, r7, #4
 800229c:	2303      	movs	r3, #3
 800229e:	f002 ff7b 	bl	8005198 <BSP_LCD_DisplayStringAt>
	}
	//Display measuring type
	y = y+30;
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	331e      	adds	r3, #30
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
	if (GUI_options[1].active==0) {
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <GUI_DrawMeasurement+0x360>)
 80022aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <GUI_DrawMeasurement+0x320>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:   sng", LEFT_MODE);
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	b298      	uxth	r0, r3
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	b299      	uxth	r1, r3
 80022ba:	2303      	movs	r3, #3
 80022bc:	4a17      	ldr	r2, [pc, #92]	; (800231c <GUI_DrawMeasurement+0x378>)
 80022be:	f002 ff6b 	bl	8005198 <BSP_LCD_DisplayStringAt>
	} else {
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:  cont", LEFT_MODE);
	}
}
 80022c2:	e007      	b.n	80022d4 <GUI_DrawMeasurement+0x330>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:  cont", LEFT_MODE);
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	b298      	uxth	r0, r3
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	b299      	uxth	r1, r3
 80022cc:	2303      	movs	r3, #3
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <GUI_DrawMeasurement+0x37c>)
 80022d0:	f002 ff62 	bl	8005198 <BSP_LCD_DisplayStringAt>
}
 80022d4:	bf00      	nop
 80022d6:	3738      	adds	r7, #56	; 0x38
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000051c 	.word	0x2000051c
 80022e0:	c2380000 	.word	0xc2380000
 80022e4:	42380000 	.word	0x42380000
 80022e8:	ffff0000 	.word	0xffff0000
 80022ec:	3f6353f8 	.word	0x3f6353f8
 80022f0:	3eaa7efa 	.word	0x3eaa7efa
 80022f4:	200002f8 	.word	0x200002f8
 80022f8:	0800d44c 	.word	0x0800d44c
 80022fc:	20000520 	.word	0x20000520
 8002300:	0800d460 	.word	0x0800d460
 8002304:	2000019c 	.word	0x2000019c
 8002308:	20000524 	.word	0x20000524
 800230c:	0800d474 	.word	0x0800d474
 8002310:	0800d488 	.word	0x0800d488
 8002314:	20000528 	.word	0x20000528
 8002318:	0800d498 	.word	0x0800d498
 800231c:	0800d4ac 	.word	0x0800d4ac
 8002320:	0800d4c0 	.word	0x0800d4c0

08002324 <GUI_DrawOptions>:
 * Available settings:
 *  - Meassuring Accuracy (1x, 5x, 10x)
 *  - Continous Meassuring (single, continous)
 *  - Display values (analysed, raw)
 *****************************************************************************/
void GUI_DrawOptions(void){
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
	uint32_t x, y, m, w, h;
	x = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
	m = 4;
 800232e:	2304      	movs	r3, #4
 8002330:	60fb      	str	r3, [r7, #12]
	h = 40;
 8002332:	2328      	movs	r3, #40	; 0x28
 8002334:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; ++i) {
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e15c      	b.n	80025f6 <GUI_DrawOptions+0x2d2>
		y=38+i*80;
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	3326      	adds	r3, #38	; 0x26
 8002348:	607b      	str	r3, [r7, #4]
		w=240;
 800234a:	23f0      	movs	r3, #240	; 0xf0
 800234c:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800234e:	4889      	ldr	r0, [pc, #548]	; (8002574 <GUI_DrawOptions+0x250>)
 8002350:	f002 fe6a 	bl	8005028 <BSP_LCD_SetTextColor>
		GUI_LCD_FillRect(x+m, y+m, w-2*m, 2*h-m);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	b29b      	uxth	r3, r3
 800235c:	4413      	add	r3, r2
 800235e:	b298      	uxth	r0, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4413      	add	r3, r2
 800236a:	b299      	uxth	r1, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	b29b      	uxth	r3, r3
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	b29b      	uxth	r3, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b29c      	uxth	r4, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	b29b      	uxth	r3, r3
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	b29b      	uxth	r3, r3
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	b29b      	uxth	r3, r3
 800238c:	4622      	mov	r2, r4
 800238e:	f7ff fa98 	bl	80018c2 <GUI_LCD_FillRect>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002392:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002396:	f002 fe47 	bl	8005028 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 800239a:	4876      	ldr	r0, [pc, #472]	; (8002574 <GUI_DrawOptions+0x250>)
 800239c:	f002 fe5c 	bl	8005058 <BSP_LCD_SetBackColor>
		GUI_LCD_DrawRect(x+m, y+m, w-2*m, h);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b298      	uxth	r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	b299      	uxth	r1, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f7ff faa6 	bl	800191c <GUI_LCD_DrawRect>
		BSP_LCD_SetFont(&Font20);
 80023d0:	4869      	ldr	r0, [pc, #420]	; (8002578 <GUI_DrawOptions+0x254>)
 80023d2:	f002 fe5b 	bl	800508c <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m, (uint8_t *)GUI_options[i].title, LEFT_MODE);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	0052      	lsls	r2, r2, #1
 80023de:	4413      	add	r3, r2
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	b298      	uxth	r0, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	0052      	lsls	r2, r2, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	b299      	uxth	r1, r3
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2246      	movs	r2, #70	; 0x46
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	4a5d      	ldr	r2, [pc, #372]	; (800257c <GUI_DrawOptions+0x258>)
 8002408:	441a      	add	r2, r3
 800240a:	2303      	movs	r3, #3
 800240c:	f002 fec4 	bl	8005198 <BSP_LCD_DisplayStringAt>

		for (int j = 0; j < GUI_options[i].optnCount; ++j) {
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e0df      	b.n	80025d6 <GUI_DrawOptions+0x2b2>
			w = (240-2*m)/GUI_options[i].optnCount;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4957      	ldr	r1, [pc, #348]	; (800257c <GUI_DrawOptions+0x258>)
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	2046      	movs	r0, #70	; 0x46
 8002424:	fb00 f202 	mul.w	r2, r0, r2
 8002428:	440a      	add	r2, r1
 800242a:	3242      	adds	r2, #66	; 0x42
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002432:	603b      	str	r3, [r7, #0]
			if (GUI_options[i].active == j) {
 8002434:	4a51      	ldr	r2, [pc, #324]	; (800257c <GUI_DrawOptions+0x258>)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	2146      	movs	r1, #70	; 0x46
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	3340      	adds	r3, #64	; 0x40
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4293      	cmp	r3, r2
 800244a:	d12c      	bne.n	80024a6 <GUI_DrawOptions+0x182>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
 800244c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8002450:	f002 fdea 	bl	8005028 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8002454:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8002458:	f002 fdfe 	bl	8005058 <BSP_LCD_SetBackColor>
				GUI_LCD_FillRect(x+m+j*w, y+m+h, w, h-m);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4413      	add	r3, r2
 8002466:	b29a      	uxth	r2, r3
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	b299      	uxth	r1, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	fb11 f303 	smulbb	r3, r1, r3
 8002474:	b29b      	uxth	r3, r3
 8002476:	4413      	add	r3, r2
 8002478:	b298      	uxth	r0, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	b29b      	uxth	r3, r3
 8002482:	4413      	add	r3, r2
 8002484:	b29a      	uxth	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	b29b      	uxth	r3, r3
 800248a:	4413      	add	r3, r2
 800248c:	b299      	uxth	r1, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b29c      	uxth	r4, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	b29b      	uxth	r3, r3
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	b29b      	uxth	r3, r3
 800249e:	4622      	mov	r2, r4
 80024a0:	f7ff fa0f 	bl	80018c2 <GUI_LCD_FillRect>
 80024a4:	e002      	b.n	80024ac <GUI_DrawOptions+0x188>
			} else {
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 80024a6:	4833      	ldr	r0, [pc, #204]	; (8002574 <GUI_DrawOptions+0x250>)
 80024a8:	f002 fdd6 	bl	8005058 <BSP_LCD_SetBackColor>
			}
			BSP_LCD_SetFont(&Font16);
 80024ac:	4834      	ldr	r0, [pc, #208]	; (8002580 <GUI_DrawOptions+0x25c>)
 80024ae:	f002 fded 	bl	800508c <BSP_LCD_SetFont>
			if ((j>0)&&(GUI_options[i].disabled)) {
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dd0d      	ble.n	80024d4 <GUI_DrawOptions+0x1b0>
 80024b8:	4a30      	ldr	r2, [pc, #192]	; (800257c <GUI_DrawOptions+0x258>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2146      	movs	r1, #70	; 0x46
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3344      	adds	r3, #68	; 0x44
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <GUI_DrawOptions+0x1b0>
				BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 80024cc:	482d      	ldr	r0, [pc, #180]	; (8002584 <GUI_DrawOptions+0x260>)
 80024ce:	f002 fdab 	bl	8005028 <BSP_LCD_SetTextColor>
 80024d2:	e003      	b.n	80024dc <GUI_DrawOptions+0x1b8>
			} else {
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80024d4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80024d8:	f002 fda6 	bl	8005028 <BSP_LCD_SetTextColor>
			}
			GUI_LCD_DrawRect(x+m+j*w, y+m+h, w, h-m);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	b299      	uxth	r1, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	fb11 f303 	smulbb	r3, r1, r3
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	b298      	uxth	r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4413      	add	r3, r2
 8002504:	b29a      	uxth	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4413      	add	r3, r2
 800250c:	b299      	uxth	r1, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b29c      	uxth	r4, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	b29b      	uxth	r3, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	4622      	mov	r2, r4
 8002520:	f7ff f9fc 	bl	800191c <GUI_LCD_DrawRect>
			uint8_t * text;
			switch (j) {
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d01b      	beq.n	8002562 <GUI_DrawOptions+0x23e>
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b02      	cmp	r3, #2
 800252e:	dc2b      	bgt.n	8002588 <GUI_DrawOptions+0x264>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <GUI_DrawOptions+0x21a>
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d009      	beq.n	8002550 <GUI_DrawOptions+0x22c>
					break;
				case 2:
					text = (uint8_t *)GUI_options[i].optn2;
					break;
				default:
					break;
 800253c:	e024      	b.n	8002588 <GUI_DrawOptions+0x264>
					text = (uint8_t *)GUI_options[i].optn0;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2246      	movs	r2, #70	; 0x46
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	3310      	adds	r3, #16
 8002548:	4a0c      	ldr	r2, [pc, #48]	; (800257c <GUI_DrawOptions+0x258>)
 800254a:	4413      	add	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
					break;
 800254e:	e01c      	b.n	800258a <GUI_DrawOptions+0x266>
					text = (uint8_t *)GUI_options[i].optn1;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2246      	movs	r2, #70	; 0x46
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	3320      	adds	r3, #32
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <GUI_DrawOptions+0x258>)
 800255c:	4413      	add	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
					break;
 8002560:	e013      	b.n	800258a <GUI_DrawOptions+0x266>
					text = (uint8_t *)GUI_options[i].optn2;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2246      	movs	r2, #70	; 0x46
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	3330      	adds	r3, #48	; 0x30
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <GUI_DrawOptions+0x258>)
 800256e:	4413      	add	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
					break;
 8002572:	e00a      	b.n	800258a <GUI_DrawOptions+0x266>
 8002574:	ffd3d3d3 	.word	0xffd3d3d3
 8002578:	200002f0 	.word	0x200002f0
 800257c:	2000019c 	.word	0x2000019c
 8002580:	200002f8 	.word	0x200002f8
 8002584:	ff404040 	.word	0xff404040
					break;
 8002588:	bf00      	nop
			}
			BSP_LCD_DisplayStringAt(x+3*m+j*w, y+4*m+h, text, LEFT_MODE);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	0052      	lsls	r2, r2, #1
 8002592:	4413      	add	r3, r2
 8002594:	b29a      	uxth	r2, r3
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	b299      	uxth	r1, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	fb11 f303 	smulbb	r3, r1, r3
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	b298      	uxth	r0, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4413      	add	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	b299      	uxth	r1, r3
 80025c8:	2303      	movs	r3, #3
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	f002 fde4 	bl	8005198 <BSP_LCD_DisplayStringAt>
		for (int j = 0; j < GUI_options[i].optnCount; ++j) {
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3301      	adds	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <GUI_DrawOptions+0x2e4>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2146      	movs	r1, #70	; 0x46
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3342      	adds	r3, #66	; 0x42
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	f6ff af13 	blt.w	8002416 <GUI_DrawOptions+0xf2>
	for (int i = 0; i < 3; ++i) {
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	3301      	adds	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f77f ae9f 	ble.w	800233c <GUI_DrawOptions+0x18>
		}
	}
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	3724      	adds	r7, #36	; 0x24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	2000019c 	.word	0x2000019c

0800260c <GUI_DrawRaw>:
/** ***************************************************************************
 * @brief Display raw measurements
 *
 * Display raw amplitude values of all sensors
 *****************************************************************************/
void GUI_DrawRaw(void){
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	; 0x30
 8002610:	af02      	add	r7, sp, #8
	GUI_ClearSite();
 8002612:	f7ff fcb9 	bl	8001f88 <GUI_ClearSite>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002616:	f04f 30ff 	mov.w	r0, #4294967295
 800261a:	f002 fd1d 	bl	8005058 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800261e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002622:	f002 fd01 	bl	8005028 <BSP_LCD_SetTextColor>

	char text[25];
	uint32_t x = 30;
 8002626:	231e      	movs	r3, #30
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t y = 60;
 800262a:	233c      	movs	r3, #60	; 0x3c
 800262c:	623b      	str	r3, [r7, #32]
	//Hall Sensors
	BSP_LCD_SetFont(&Font20);
 800262e:	4843      	ldr	r0, [pc, #268]	; (800273c <GUI_DrawRaw+0x130>)
 8002630:	f002 fd2c 	bl	800508c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Hall Sensors:", LEFT_MODE);
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	b298      	uxth	r0, r3
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	b299      	uxth	r1, r3
 800263c:	2303      	movs	r3, #3
 800263e:	4a40      	ldr	r2, [pc, #256]	; (8002740 <GUI_DrawRaw+0x134>)
 8002640:	f002 fdaa 	bl	8005198 <BSP_LCD_DisplayStringAt>
	y = y+20;
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	3314      	adds	r3, #20
 8002648:	623b      	str	r3, [r7, #32]
	BSP_LCD_SetFont(&Font16);
 800264a:	483e      	ldr	r0, [pc, #248]	; (8002744 <GUI_DrawRaw+0x138>)
 800264c:	f002 fd1e 	bl	800508c <BSP_LCD_SetFont>
	snprintf(text,24,"Right:    %5.2f",(GUI_rawHallRight));
 8002650:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <GUI_DrawRaw+0x13c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff87 	bl	8000568 <__aeabi_f2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	1d38      	adds	r0, r7, #4
 8002660:	e9cd 2300 	strd	r2, r3, [sp]
 8002664:	4a39      	ldr	r2, [pc, #228]	; (800274c <GUI_DrawRaw+0x140>)
 8002666:	2118      	movs	r1, #24
 8002668:	f008 fbce 	bl	800ae08 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	b298      	uxth	r0, r3
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	b299      	uxth	r1, r3
 8002674:	1d3a      	adds	r2, r7, #4
 8002676:	2303      	movs	r3, #3
 8002678:	f002 fd8e 	bl	8005198 <BSP_LCD_DisplayStringAt>
	y = y+20;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	3314      	adds	r3, #20
 8002680:	623b      	str	r3, [r7, #32]
	snprintf(text,24,"Left:     %5.2f",(GUI_rawHallLeft));
 8002682:	4b33      	ldr	r3, [pc, #204]	; (8002750 <GUI_DrawRaw+0x144>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd ff6e 	bl	8000568 <__aeabi_f2d>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	1d38      	adds	r0, r7, #4
 8002692:	e9cd 2300 	strd	r2, r3, [sp]
 8002696:	4a2f      	ldr	r2, [pc, #188]	; (8002754 <GUI_DrawRaw+0x148>)
 8002698:	2118      	movs	r1, #24
 800269a:	f008 fbb5 	bl	800ae08 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	b298      	uxth	r0, r3
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	b299      	uxth	r1, r3
 80026a6:	1d3a      	adds	r2, r7, #4
 80026a8:	2303      	movs	r3, #3
 80026aa:	f002 fd75 	bl	8005198 <BSP_LCD_DisplayStringAt>
	y = y+35;
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	3323      	adds	r3, #35	; 0x23
 80026b2:	623b      	str	r3, [r7, #32]
	//WPC Sensors
	BSP_LCD_SetFont(&Font20);
 80026b4:	4821      	ldr	r0, [pc, #132]	; (800273c <GUI_DrawRaw+0x130>)
 80026b6:	f002 fce9 	bl	800508c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"WPC Sensors:", LEFT_MODE);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	b298      	uxth	r0, r3
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	b299      	uxth	r1, r3
 80026c2:	2303      	movs	r3, #3
 80026c4:	4a24      	ldr	r2, [pc, #144]	; (8002758 <GUI_DrawRaw+0x14c>)
 80026c6:	f002 fd67 	bl	8005198 <BSP_LCD_DisplayStringAt>
	y = y+20;
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	3314      	adds	r3, #20
 80026ce:	623b      	str	r3, [r7, #32]
	BSP_LCD_SetFont(&Font16);
 80026d0:	481c      	ldr	r0, [pc, #112]	; (8002744 <GUI_DrawRaw+0x138>)
 80026d2:	f002 fcdb 	bl	800508c <BSP_LCD_SetFont>
	snprintf(text,24,"Right:    %5.2f",(GUI_rawWpcRight));
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <GUI_DrawRaw+0x150>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff44 	bl	8000568 <__aeabi_f2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	1d38      	adds	r0, r7, #4
 80026e6:	e9cd 2300 	strd	r2, r3, [sp]
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <GUI_DrawRaw+0x140>)
 80026ec:	2118      	movs	r1, #24
 80026ee:	f008 fb8b 	bl	800ae08 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	b298      	uxth	r0, r3
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	b299      	uxth	r1, r3
 80026fa:	1d3a      	adds	r2, r7, #4
 80026fc:	2303      	movs	r3, #3
 80026fe:	f002 fd4b 	bl	8005198 <BSP_LCD_DisplayStringAt>
	y = y+20;
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	3314      	adds	r3, #20
 8002706:	623b      	str	r3, [r7, #32]
	snprintf(text,24,"Left:     %5.2f",(GUI_rawWpcLeft));
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <GUI_DrawRaw+0x154>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff2b 	bl	8000568 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	1d38      	adds	r0, r7, #4
 8002718:	e9cd 2300 	strd	r2, r3, [sp]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <GUI_DrawRaw+0x148>)
 800271e:	2118      	movs	r1, #24
 8002720:	f008 fb72 	bl	800ae08 <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	b298      	uxth	r0, r3
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	b299      	uxth	r1, r3
 800272c:	1d3a      	adds	r2, r7, #4
 800272e:	2303      	movs	r3, #3
 8002730:	f002 fd32 	bl	8005198 <BSP_LCD_DisplayStringAt>
}
 8002734:	bf00      	nop
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200002f0 	.word	0x200002f0
 8002740:	0800d4d4 	.word	0x0800d4d4
 8002744:	200002f8 	.word	0x200002f8
 8002748:	20000530 	.word	0x20000530
 800274c:	0800d4e4 	.word	0x0800d4e4
 8002750:	2000052c 	.word	0x2000052c
 8002754:	0800d4f4 	.word	0x0800d4f4
 8002758:	0800d504 	.word	0x0800d504
 800275c:	20000538 	.word	0x20000538
 8002760:	20000534 	.word	0x20000534

08002764 <GUI_SiteHandler>:
 * @brief Manage LCD
 *
 * Read out GUI_inputs and display sites accordingly
 * This Function needs to be called every cycle
 *****************************************************************************/
void GUI_SiteHandler(void){
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	GUI_TSHandler();
 8002768:	f000 f8d8 	bl	800291c <GUI_TSHandler>
	//Init LCD with hint when no site is selected
	switch (GUI_currentSite) {
 800276c:	4b65      	ldr	r3, [pc, #404]	; (8002904 <GUI_SiteHandler+0x1a0>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b05      	cmp	r3, #5
 8002772:	f200 80b2 	bhi.w	80028da <GUI_SiteHandler+0x176>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <GUI_SiteHandler+0x18>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	08002795 	.word	0x08002795
 8002780:	0800282d 	.word	0x0800282d
 8002784:	08002885 	.word	0x08002885
 8002788:	080028db 	.word	0x080028db
 800278c:	080027a1 	.word	0x080027a1
 8002790:	080027cf 	.word	0x080027cf
		case SITE_NONE:
			GUI_DrawHint();
 8002794:	f7ff f8f0 	bl	8001978 <GUI_DrawHint>
			GUI_currentSite = SITE_HINT;
 8002798:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <GUI_SiteHandler+0x1a0>)
 800279a:	2204      	movs	r2, #4
 800279c:	701a      	strb	r2, [r3, #0]
			break;
 800279e:	e0a3      	b.n	80028e8 <GUI_SiteHandler+0x184>
		case SITE_HINT:
			if(GUI_inputBtn | GUI_inputTS){
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <GUI_SiteHandler+0x1a4>)
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	4b59      	ldr	r3, [pc, #356]	; (800290c <GUI_SiteHandler+0x1a8>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8096 	beq.w	80028de <GUI_SiteHandler+0x17a>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 80027b2:	f04f 30ff 	mov.w	r0, #4294967295
 80027b6:	f002 fc83 	bl	80050c0 <BSP_LCD_Clear>
				GUI_DrawTopMode();
 80027ba:	f7ff f9e9 	bl	8001b90 <GUI_DrawTopMode>
				GUI_DrawTopOptions();
 80027be:	f7ff fafb 	bl	8001db8 <GUI_DrawTopOptions>
				GUI_DrawModeSel();
 80027c2:	f7ff f92f 	bl	8001a24 <GUI_DrawModeSel>
				GUI_currentSite = SITE_MAIN;
 80027c6:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <GUI_SiteHandler+0x1a0>)
 80027c8:	2205      	movs	r2, #5
 80027ca:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027cc:	e087      	b.n	80028de <GUI_SiteHandler+0x17a>
		case SITE_MAIN:
			if(GUI_inputTS){
 80027ce:	4b4f      	ldr	r3, [pc, #316]	; (800290c <GUI_SiteHandler+0x1a8>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d014      	beq.n	8002800 <GUI_SiteHandler+0x9c>
				//Display updated mode or go to options
				if (GUI_TSinputType == TOUCH_MODE) {
 80027d6:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <GUI_SiteHandler+0x1ac>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d102      	bne.n	80027e4 <GUI_SiteHandler+0x80>
					GUI_DrawTopMode();
 80027de:	f7ff f9d7 	bl	8001b90 <GUI_DrawTopMode>
					GUI_DrawRaw();
					GUI_DrawTopMode();
				}
				GUI_currentSite = SITE_MEAS;
			}
			break;
 80027e2:	e07e      	b.n	80028e2 <GUI_SiteHandler+0x17e>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 80027e4:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <GUI_SiteHandler+0x1ac>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d17a      	bne.n	80028e2 <GUI_SiteHandler+0x17e>
					GUI_currentSite = SITE_OPTN;
 80027ec:	4b45      	ldr	r3, [pc, #276]	; (8002904 <GUI_SiteHandler+0x1a0>)
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 80027f2:	f7ff fbc9 	bl	8001f88 <GUI_ClearSite>
					GUI_DrawOptions();
 80027f6:	f7ff fd95 	bl	8002324 <GUI_DrawOptions>
					GUI_DrawTopOptions();
 80027fa:	f7ff fadd 	bl	8001db8 <GUI_DrawTopOptions>
			break;
 80027fe:	e070      	b.n	80028e2 <GUI_SiteHandler+0x17e>
			} else if (GUI_inputMeasReady) {
 8002800:	4b44      	ldr	r3, [pc, #272]	; (8002914 <GUI_SiteHandler+0x1b0>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d06c      	beq.n	80028e2 <GUI_SiteHandler+0x17e>
				if(GUI_options[0].active==0){
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <GUI_SiteHandler+0x1b4>)
 800280a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d104      	bne.n	800281c <GUI_SiteHandler+0xb8>
					GUI_DrawMeasurement();
 8002812:	f7ff fbc7 	bl	8001fa4 <GUI_DrawMeasurement>
					GUI_DrawTopMode();
 8002816:	f7ff f9bb 	bl	8001b90 <GUI_DrawTopMode>
 800281a:	e003      	b.n	8002824 <GUI_SiteHandler+0xc0>
					GUI_DrawRaw();
 800281c:	f7ff fef6 	bl	800260c <GUI_DrawRaw>
					GUI_DrawTopMode();
 8002820:	f7ff f9b6 	bl	8001b90 <GUI_DrawTopMode>
				GUI_currentSite = SITE_MEAS;
 8002824:	4b37      	ldr	r3, [pc, #220]	; (8002904 <GUI_SiteHandler+0x1a0>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
			break;
 800282a:	e05a      	b.n	80028e2 <GUI_SiteHandler+0x17e>
		case SITE_MEAS:
			if(GUI_inputTS){
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <GUI_SiteHandler+0x1a8>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d014      	beq.n	800285e <GUI_SiteHandler+0xfa>
				//Display updated mode or go to options
				if (GUI_TSinputType == TOUCH_MODE) {
 8002834:	4b36      	ldr	r3, [pc, #216]	; (8002910 <GUI_SiteHandler+0x1ac>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d102      	bne.n	8002842 <GUI_SiteHandler+0xde>
					GUI_DrawTopMode();
 800283c:	f7ff f9a8 	bl	8001b90 <GUI_DrawTopMode>
					//Raw
					GUI_DrawRaw();
					GUI_DrawTopMode();
				}
			}
			break;
 8002840:	e051      	b.n	80028e6 <GUI_SiteHandler+0x182>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <GUI_SiteHandler+0x1ac>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d14d      	bne.n	80028e6 <GUI_SiteHandler+0x182>
					GUI_currentSite = SITE_OPTN;
 800284a:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <GUI_SiteHandler+0x1a0>)
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 8002850:	f7ff fb9a 	bl	8001f88 <GUI_ClearSite>
					GUI_DrawOptions();
 8002854:	f7ff fd66 	bl	8002324 <GUI_DrawOptions>
					GUI_DrawTopOptions();
 8002858:	f7ff faae 	bl	8001db8 <GUI_DrawTopOptions>
			break;
 800285c:	e043      	b.n	80028e6 <GUI_SiteHandler+0x182>
			} else if (GUI_inputMeasReady) {
 800285e:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <GUI_SiteHandler+0x1b0>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03f      	beq.n	80028e6 <GUI_SiteHandler+0x182>
				if(GUI_options[0].active==0){
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <GUI_SiteHandler+0x1b4>)
 8002868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <GUI_SiteHandler+0x116>
					GUI_DrawMeasurement();
 8002870:	f7ff fb98 	bl	8001fa4 <GUI_DrawMeasurement>
					GUI_DrawTopMode();
 8002874:	f7ff f98c 	bl	8001b90 <GUI_DrawTopMode>
			break;
 8002878:	e035      	b.n	80028e6 <GUI_SiteHandler+0x182>
					GUI_DrawRaw();
 800287a:	f7ff fec7 	bl	800260c <GUI_DrawRaw>
					GUI_DrawTopMode();
 800287e:	f7ff f987 	bl	8001b90 <GUI_DrawTopMode>
			break;
 8002882:	e030      	b.n	80028e6 <GUI_SiteHandler+0x182>
		case SITE_OPTN:
			if(GUI_inputTS){
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <GUI_SiteHandler+0x1a8>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d026      	beq.n	80028da <GUI_SiteHandler+0x176>
			//Display updated mode, updated settings or go to main screen
				if (GUI_TSinputType == TOUCH_MODE) {
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <GUI_SiteHandler+0x1ac>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d102      	bne.n	800289a <GUI_SiteHandler+0x136>
					GUI_DrawTopMode();
 8002894:	f7ff f97c 	bl	8001b90 <GUI_DrawTopMode>
				} else if (GUI_TSinputType == TOUCH_OPTN_CHANGE){
					GUI_DrawOptions();
				}
			}
		default:
			break;
 8002898:	e01f      	b.n	80028da <GUI_SiteHandler+0x176>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <GUI_SiteHandler+0x1ac>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d115      	bne.n	80028ce <GUI_SiteHandler+0x16a>
					GUI_currentSite = SITE_MEAS;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <GUI_SiteHandler+0x1a0>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 80028a8:	f7ff fb6e 	bl	8001f88 <GUI_ClearSite>
					if(GUI_options[0].active==0){
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <GUI_SiteHandler+0x1b4>)
 80028ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d104      	bne.n	80028c0 <GUI_SiteHandler+0x15c>
						GUI_DrawMeasurement();
 80028b6:	f7ff fb75 	bl	8001fa4 <GUI_DrawMeasurement>
						GUI_DrawTopMode();
 80028ba:	f7ff f969 	bl	8001b90 <GUI_DrawTopMode>
 80028be:	e003      	b.n	80028c8 <GUI_SiteHandler+0x164>
						GUI_DrawRaw();
 80028c0:	f7ff fea4 	bl	800260c <GUI_DrawRaw>
						GUI_DrawTopMode();
 80028c4:	f7ff f964 	bl	8001b90 <GUI_DrawTopMode>
					GUI_DrawTopOptions();
 80028c8:	f7ff fa76 	bl	8001db8 <GUI_DrawTopOptions>
			break;
 80028cc:	e005      	b.n	80028da <GUI_SiteHandler+0x176>
				} else if (GUI_TSinputType == TOUCH_OPTN_CHANGE){
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <GUI_SiteHandler+0x1ac>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d101      	bne.n	80028da <GUI_SiteHandler+0x176>
					GUI_DrawOptions();
 80028d6:	f7ff fd25 	bl	8002324 <GUI_DrawOptions>
			break;
 80028da:	bf00      	nop
 80028dc:	e004      	b.n	80028e8 <GUI_SiteHandler+0x184>
			break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <GUI_SiteHandler+0x184>
			break;
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <GUI_SiteHandler+0x184>
			break;
 80028e6:	bf00      	nop
	}

	//Reset Inputs
	GUI_inputBtn = false;
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <GUI_SiteHandler+0x1a4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	GUI_inputTS = false;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <GUI_SiteHandler+0x1a8>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
	GUI_inputMeasReady = false;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <GUI_SiteHandler+0x1b0>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
	GUI_TSinputType = TOUCH_NONE;
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <GUI_SiteHandler+0x1ac>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000053c 	.word	0x2000053c
 8002908:	2000053d 	.word	0x2000053d
 800290c:	2000053e 	.word	0x2000053e
 8002910:	20000540 	.word	0x20000540
 8002914:	2000053f 	.word	0x2000053f
 8002918:	2000019c 	.word	0x2000019c

0800291c <GUI_TSHandler>:
/** ***************************************************************************
 * @brief Handle touch screen inputs
 *
 * Determine touch input from Touch position and current site
 *****************************************************************************/
void GUI_TSHandler(void){
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
	GUI_TS_GetState(&GUI_currentTSstate);
 8002922:	4889      	ldr	r0, [pc, #548]	; (8002b48 <GUI_TSHandler+0x22c>)
 8002924:	f7fe ffb8 	bl	8001898 <GUI_TS_GetState>
	//detect rising edge of touch input
	if ((GUI_currentTSstate.TouchDetected==1) & (GUI_previousTSstate.TouchDetected==0)) {
 8002928:	4b87      	ldr	r3, [pc, #540]	; (8002b48 <GUI_TSHandler+0x22c>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b85      	ldr	r3, [pc, #532]	; (8002b4c <GUI_TSHandler+0x230>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4013      	ands	r3, r2
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 81ca 	beq.w	8002ce2 <GUI_TSHandler+0x3c6>
		//set touch input to true
		GUI_inputTS = true;
 800294e:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <GUI_TSHandler+0x234>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
		uint16_t X,Y;
		X = GUI_currentTSstate.X;
 8002954:	4b7c      	ldr	r3, [pc, #496]	; (8002b48 <GUI_TSHandler+0x22c>)
 8002956:	885b      	ldrh	r3, [r3, #2]
 8002958:	80fb      	strh	r3, [r7, #6]
		Y = GUI_currentTSstate.Y;
 800295a:	4b7b      	ldr	r3, [pc, #492]	; (8002b48 <GUI_TSHandler+0x22c>)
 800295c:	889b      	ldrh	r3, [r3, #4]
 800295e:	80bb      	strh	r3, [r7, #4]
		if (GUI_currentSite == SITE_HINT) {
 8002960:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <GUI_TSHandler+0x238>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d102      	bne.n	800296e <GUI_TSHandler+0x52>
			GUI_TSinputType = TOUCH_GENERAL;
 8002968:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <GUI_TSHandler+0x23c>)
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
		}
		//detect mode change
		if ((GUI_currentSite == SITE_MAIN)|
 800296e:	4b79      	ldr	r3, [pc, #484]	; (8002b54 <GUI_TSHandler+0x238>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b05      	cmp	r3, #5
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2da      	uxtb	r2, r3
 800297c:	4b75      	ldr	r3, [pc, #468]	; (8002b54 <GUI_TSHandler+0x238>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4313      	orrs	r3, r2
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
			(GUI_currentSite == SITE_MEAS)|
			(GUI_currentSite == SITE_OPTN)) {
 8002990:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <GUI_TSHandler+0x238>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b02      	cmp	r3, #2
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
			(GUI_currentSite == SITE_MEAS)|
 800299e:	4313      	orrs	r3, r2
		if ((GUI_currentSite == SITE_MAIN)|
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d07e      	beq.n	8002aa2 <GUI_TSHandler+0x186>
			if ((Y>280) & (X<80) & (GUI_mode != MODE_L)) {
 80029a4:	88bb      	ldrh	r3, [r7, #4]
 80029a6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80029aa:	bf8c      	ite	hi
 80029ac:	2301      	movhi	r3, #1
 80029ae:	2300      	movls	r3, #0
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	2b4f      	cmp	r3, #79	; 0x4f
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4013      	ands	r3, r2
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <GUI_TSHandler+0x240>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <GUI_TSHandler+0xca>
				GUI_TSinputType = TOUCH_MODE;
 80029d8:	4b5f      	ldr	r3, [pc, #380]	; (8002b58 <GUI_TSHandler+0x23c>)
 80029da:	2202      	movs	r2, #2
 80029dc:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_L;
 80029de:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <GUI_TSHandler+0x240>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e047      	b.n	8002a76 <GUI_TSHandler+0x15a>
			} else if ((Y>280) & (80<X) & (X<160) & (GUI_mode != MODE_LN)) {
 80029e6:	88bb      	ldrh	r3, [r7, #4]
 80029e8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80029ec:	bf8c      	ite	hi
 80029ee:	2301      	movhi	r3, #1
 80029f0:	2300      	movls	r3, #0
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	2b50      	cmp	r3, #80	; 0x50
 80029f8:	bf8c      	ite	hi
 80029fa:	2301      	movhi	r3, #1
 80029fc:	2300      	movls	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4013      	ands	r3, r2
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b9f      	cmp	r3, #159	; 0x9f
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	4013      	ands	r3, r2
 8002a14:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <GUI_TSHandler+0x240>)
 8002a16:	7812      	ldrb	r2, [r2, #0]
 8002a18:	2a01      	cmp	r2, #1
 8002a1a:	bf14      	ite	ne
 8002a1c:	2201      	movne	r2, #1
 8002a1e:	2200      	moveq	r2, #0
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <GUI_TSHandler+0x11a>
				GUI_TSinputType = TOUCH_MODE;
 8002a28:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <GUI_TSHandler+0x23c>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_LN;
 8002a2e:	4b4b      	ldr	r3, [pc, #300]	; (8002b5c <GUI_TSHandler+0x240>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e01f      	b.n	8002a76 <GUI_TSHandler+0x15a>
			} else if ((Y>280) & (160<X) & (GUI_mode != MODE_LNPE)) {
 8002a36:	88bb      	ldrh	r3, [r7, #4]
 8002a38:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002a3c:	bf8c      	ite	hi
 8002a3e:	2301      	movhi	r3, #1
 8002a40:	2300      	movls	r3, #0
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	2ba0      	cmp	r3, #160	; 0xa0
 8002a48:	bf8c      	ite	hi
 8002a4a:	2301      	movhi	r3, #1
 8002a4c:	2300      	movls	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	4013      	ands	r3, r2
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <GUI_TSHandler+0x240>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	bf14      	ite	ne
 8002a5e:	2301      	movne	r3, #1
 8002a60:	2300      	moveq	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <GUI_TSHandler+0x15a>
				GUI_TSinputType = TOUCH_MODE;
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <GUI_TSHandler+0x23c>)
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_LNPE;
 8002a70:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <GUI_TSHandler+0x240>)
 8002a72:	2202      	movs	r2, #2
 8002a74:	701a      	strb	r2, [r3, #0]
			}
			//detect option area
			if ((Y<40) & (X>160)) {
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	2b27      	cmp	r3, #39	; 0x27
 8002a7a:	bf94      	ite	ls
 8002a7c:	2301      	movls	r3, #1
 8002a7e:	2300      	movhi	r3, #0
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2ba0      	cmp	r3, #160	; 0xa0
 8002a86:	bf8c      	ite	hi
 8002a88:	2301      	movhi	r3, #1
 8002a8a:	2300      	movls	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <GUI_TSHandler+0x186>
				GUI_TSinputType = TOUCH_OPTN;
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <GUI_TSHandler+0x23c>)
 8002a98:	2203      	movs	r2, #3
 8002a9a:	701a      	strb	r2, [r3, #0]
				HAL_Delay(200);
 8002a9c:	20c8      	movs	r0, #200	; 0xc8
 8002a9e:	f003 fc41 	bl	8006324 <HAL_Delay>
			}
		}
		//detect option changes
		if (GUI_currentSite == SITE_OPTN) {
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <GUI_TSHandler+0x238>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	f040 811b 	bne.w	8002ce2 <GUI_TSHandler+0x3c6>
			if ((80<Y)&(Y<120)){
 8002aac:	88bb      	ldrh	r3, [r7, #4]
 8002aae:	2b50      	cmp	r3, #80	; 0x50
 8002ab0:	bf8c      	ite	hi
 8002ab2:	2301      	movhi	r3, #1
 8002ab4:	2300      	movls	r3, #0
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	88bb      	ldrh	r3, [r7, #4]
 8002aba:	2b77      	cmp	r3, #119	; 0x77
 8002abc:	bf94      	ite	ls
 8002abe:	2301      	movls	r3, #1
 8002ac0:	2300      	movhi	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d04b      	beq.n	8002b64 <GUI_TSHandler+0x248>
				if ((X<120)&(GUI_options[0].active!=0)) {
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	2b77      	cmp	r3, #119	; 0x77
 8002ad0:	bf94      	ite	ls
 8002ad2:	2301      	movls	r3, #1
 8002ad4:	2300      	movhi	r3, #0
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <GUI_TSHandler+0x244>)
 8002ada:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf14      	ite	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00f      	beq.n	8002b10 <GUI_TSHandler+0x1f4>
					GUI_options[0].active=0;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <GUI_TSHandler+0x244>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
					GUI_options[1].disabled = false;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <GUI_TSHandler+0x244>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					GUI_options[2].disabled = false;
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <GUI_TSHandler+0x244>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <GUI_TSHandler+0x23c>)
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e0e8      	b.n	8002ce2 <GUI_TSHandler+0x3c6>
				} else if ((X>120)&(GUI_options[0].active!=1)) {
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	2b78      	cmp	r3, #120	; 0x78
 8002b14:	bf8c      	ite	hi
 8002b16:	2301      	movhi	r3, #1
 8002b18:	2300      	movls	r3, #0
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <GUI_TSHandler+0x244>)
 8002b1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80d6 	beq.w	8002ce2 <GUI_TSHandler+0x3c6>
					GUI_options[0].active=1;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <GUI_TSHandler+0x244>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
					//GUI_options[1].disabled = true;
					//GUI_options[1].active = 0;
					//GUI_options[2].disabled = true;
					//GUI_options[2].active = 0;
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <GUI_TSHandler+0x23c>)
 8002b40:	2204      	movs	r2, #4
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e0cd      	b.n	8002ce2 <GUI_TSHandler+0x3c6>
 8002b46:	bf00      	nop
 8002b48:	200009b4 	.word	0x200009b4
 8002b4c:	200009bc 	.word	0x200009bc
 8002b50:	2000053e 	.word	0x2000053e
 8002b54:	2000053c 	.word	0x2000053c
 8002b58:	20000540 	.word	0x20000540
 8002b5c:	2000051a 	.word	0x2000051a
 8002b60:	2000019c 	.word	0x2000019c
				}
			} else if ((160<Y)&(Y<200)&!(GUI_options[1].disabled)){
 8002b64:	88bb      	ldrh	r3, [r7, #4]
 8002b66:	2ba0      	cmp	r3, #160	; 0xa0
 8002b68:	bf8c      	ite	hi
 8002b6a:	2301      	movhi	r3, #1
 8002b6c:	2300      	movls	r3, #0
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	2bc7      	cmp	r3, #199	; 0xc7
 8002b74:	bf94      	ite	ls
 8002b76:	2301      	movls	r3, #1
 8002b78:	2300      	movhi	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <GUI_TSHandler+0x418>)
 8002b84:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d037      	beq.n	8002c04 <GUI_TSHandler+0x2e8>
				if ((X<120)&(GUI_options[1].active!=0)) {
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	2b77      	cmp	r3, #119	; 0x77
 8002b98:	bf94      	ite	ls
 8002b9a:	2301      	movls	r3, #1
 8002b9c:	2300      	movhi	r3, #0
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <GUI_TSHandler+0x418>)
 8002ba2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <GUI_TSHandler+0x2b4>
					GUI_options[1].active = 0;
 8002bb8:	4b5e      	ldr	r3, [pc, #376]	; (8002d34 <GUI_TSHandler+0x418>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					GUI_options[2].disabled = false;
 8002bc0:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <GUI_TSHandler+0x418>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002bc8:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <GUI_TSHandler+0x41c>)
 8002bca:	2204      	movs	r2, #4
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e088      	b.n	8002ce2 <GUI_TSHandler+0x3c6>
				} else if ((X>120)&(GUI_options[1].active!=1)) {
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b78      	cmp	r3, #120	; 0x78
 8002bd4:	bf8c      	ite	hi
 8002bd6:	2301      	movhi	r3, #1
 8002bd8:	2300      	movls	r3, #0
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <GUI_TSHandler+0x418>)
 8002bde:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d076      	beq.n	8002ce2 <GUI_TSHandler+0x3c6>
					GUI_options[1].active = 1;
 8002bf4:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <GUI_TSHandler+0x418>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					//GUI_options[2].disabled = true;
					//GUI_options[2].active = 0;
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002bfc:	4b4e      	ldr	r3, [pc, #312]	; (8002d38 <GUI_TSHandler+0x41c>)
 8002bfe:	2204      	movs	r2, #4
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e06e      	b.n	8002ce2 <GUI_TSHandler+0x3c6>
				}
			} else if ((240<Y)&(Y<280)&!(GUI_options[2].disabled)){
 8002c04:	88bb      	ldrh	r3, [r7, #4]
 8002c06:	2bf0      	cmp	r3, #240	; 0xf0
 8002c08:	bf8c      	ite	hi
 8002c0a:	2301      	movhi	r3, #1
 8002c0c:	2300      	movls	r3, #0
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	88bb      	ldrh	r3, [r7, #4]
 8002c12:	f240 1117 	movw	r1, #279	; 0x117
 8002c16:	428b      	cmp	r3, r1
 8002c18:	bf94      	ite	ls
 8002c1a:	2301      	movls	r3, #1
 8002c1c:	2300      	movhi	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4013      	ands	r3, r2
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <GUI_TSHandler+0x418>)
 8002c28:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8002c2c:	f083 0301 	eor.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d054      	beq.n	8002ce2 <GUI_TSHandler+0x3c6>
				if ((X<80)&(GUI_options[2].active!=0)) {
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	2b4f      	cmp	r3, #79	; 0x4f
 8002c3c:	bf94      	ite	ls
 8002c3e:	2301      	movls	r3, #1
 8002c40:	2300      	movhi	r3, #0
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <GUI_TSHandler+0x418>)
 8002c46:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	bf14      	ite	ne
 8002c4e:	2301      	movne	r3, #1
 8002c50:	2300      	moveq	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4013      	ands	r3, r2
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <GUI_TSHandler+0x350>
					GUI_options[2].active = 0;
 8002c5c:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <GUI_TSHandler+0x418>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002c64:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <GUI_TSHandler+0x41c>)
 8002c66:	2204      	movs	r2, #4
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e03a      	b.n	8002ce2 <GUI_TSHandler+0x3c6>
				} else if ((X>80)&(X<160)&(GUI_options[2].active!=1)) {
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b50      	cmp	r3, #80	; 0x50
 8002c70:	bf8c      	ite	hi
 8002c72:	2301      	movhi	r3, #1
 8002c74:	2300      	movls	r3, #0
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	2b9f      	cmp	r3, #159	; 0x9f
 8002c7c:	bf94      	ite	ls
 8002c7e:	2301      	movls	r3, #1
 8002c80:	2300      	movhi	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4013      	ands	r3, r2
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <GUI_TSHandler+0x418>)
 8002c8c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <GUI_TSHandler+0x394>
					GUI_options[2].active = 1;
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <GUI_TSHandler+0x418>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <GUI_TSHandler+0x41c>)
 8002caa:	2204      	movs	r2, #4
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e018      	b.n	8002ce2 <GUI_TSHandler+0x3c6>
				} else if ((X>160)&(GUI_options[2].active!=2)) {
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	2ba0      	cmp	r3, #160	; 0xa0
 8002cb4:	bf8c      	ite	hi
 8002cb6:	2301      	movhi	r3, #1
 8002cb8:	2300      	movls	r3, #0
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <GUI_TSHandler+0x418>)
 8002cbe:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	bf14      	ite	ne
 8002cc6:	2301      	movne	r3, #1
 8002cc8:	2300      	moveq	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <GUI_TSHandler+0x3c6>
					GUI_options[2].active = 2;
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <GUI_TSHandler+0x418>)
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <GUI_TSHandler+0x41c>)
 8002cde:	2204      	movs	r2, #4
 8002ce0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	//notify analytics
	if ((GUI_TSinputType == TOUCH_OPTN_CHANGE)|(GUI_TSinputType == TOUCH_MODE)) {
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <GUI_TSHandler+0x41c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <GUI_TSHandler+0x41c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <GUI_TSHandler+0x3f0>
		GUI_outOptn = true;
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <GUI_TSHandler+0x420>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
	}
	//save current TS state as previous state
	GUI_previousTSstate.TouchDetected = GUI_currentTSstate.TouchDetected;
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <GUI_TSHandler+0x424>)
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <GUI_TSHandler+0x428>)
 8002d12:	801a      	strh	r2, [r3, #0]
	GUI_previousTSstate.X = GUI_currentTSstate.X;
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <GUI_TSHandler+0x424>)
 8002d16:	885a      	ldrh	r2, [r3, #2]
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <GUI_TSHandler+0x428>)
 8002d1a:	805a      	strh	r2, [r3, #2]
	GUI_previousTSstate.Y = GUI_currentTSstate.Y;
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <GUI_TSHandler+0x424>)
 8002d1e:	889a      	ldrh	r2, [r3, #4]
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <GUI_TSHandler+0x428>)
 8002d22:	809a      	strh	r2, [r3, #4]
	GUI_previousTSstate.Z = GUI_currentTSstate.Z;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <GUI_TSHandler+0x424>)
 8002d26:	88da      	ldrh	r2, [r3, #6]
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <GUI_TSHandler+0x428>)
 8002d2a:	80da      	strh	r2, [r3, #6]
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2000019c 	.word	0x2000019c
 8002d38:	20000540 	.word	0x20000540
 8002d3c:	20000541 	.word	0x20000541
 8002d40:	200009b4 	.word	0x200009b4
 8002d44:	200009bc 	.word	0x200009bc

08002d48 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8002d48:	b598      	push	{r3, r4, r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8002d4c:	f003 fa70 	bl	8006230 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 8002d50:	f000 f92c 	bl	8002fac <SystemClock_Config>

	BSP_LCD_Init();						// Initialize the LCD display
 8002d54:	f002 f872 	bl	8004e3c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8002d58:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f002 f8ef 	bl	8004f40 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8002d62:	2001      	movs	r0, #1
 8002d64:	f002 f950 	bl	8005008 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8002d68:	f002 fd94 	bl	8005894 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f002 f9a6 	bl	80050c0 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8002d74:	f002 f8cc 	bl	8004f10 <BSP_LCD_GetXSize>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	b29c      	uxth	r4, r3
 8002d7c:	f002 f8d4 	bl	8004f28 <BSP_LCD_GetYSize>
 8002d80:	4603      	mov	r3, r0
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4619      	mov	r1, r3
 8002d86:	4620      	mov	r0, r4
 8002d88:	f003 f94e 	bl	8006028 <BSP_TS_Init>

	PB_init();							// Initialize the user pushbutton
 8002d8c:	f000 ff0c 	bl	8003ba8 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8002d90:	f000 ff2a 	bl	8003be8 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8002d94:	2000      	movs	r0, #0
 8002d96:	f001 fc39 	bl	800460c <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f001 fc36 	bl	800460c <BSP_LED_Init>

	gyro_disable();						// Disable gyro, use those analog inputs
 8002da0:	f000 f982 	bl	80030a8 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8002da4:	f000 fa40 	bl	8003228 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8002da8:	f000 faa0 	bl	80032ec <MEAS_timer_init>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8002dac:	2000      	movs	r0, #0
 8002dae:	f001 fcb5 	bl	800471c <BSP_LED_Toggle>

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 8002db2:	f000 ff4b 	bl	8003c4c <PB_pressed>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <main+0x80>
			ANA_inBtn = true;			// Send to analytics handler
 8002dbc:	4b5c      	ldr	r3, [pc, #368]	; (8002f30 <main+0x1e8>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
			GUI_inputBtn = true;		// Send to site handler
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <main+0x1ec>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
		}

		if (MEAS_data_ready) {			// Show data if new data available
 8002dc8:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <main+0x1f0>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <main+0xa4>
			ANA_inAmpLeft = MEAS_amplitude_left;
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	; (8002f3c <main+0x1f4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5a      	ldr	r2, [pc, #360]	; (8002f40 <main+0x1f8>)
 8002dd6:	6013      	str	r3, [r2, #0]
			ANA_inAmpRight = MEAS_amplitude_right;
 8002dd8:	4b5a      	ldr	r3, [pc, #360]	; (8002f44 <main+0x1fc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5a      	ldr	r2, [pc, #360]	; (8002f48 <main+0x200>)
 8002dde:	6013      	str	r3, [r2, #0]
			ANA_inMeasReady = true;		// Send to analytics handler
 8002de0:	4b5a      	ldr	r3, [pc, #360]	; (8002f4c <main+0x204>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
			MEAS_data_ready = false;	// Reset meas data ready bit
 8002de6:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <main+0x1f0>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
		}

		if (ANA_outStartHALL) {
 8002dec:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <main+0x208>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d006      	beq.n	8002e02 <main+0xba>
			ADC3_IN11_IN6_scan_init();
 8002df4:	f000 fb4c 	bl	8003490 <ADC3_IN11_IN6_scan_init>
			ADC3_dual_scan_start();
 8002df8:	f000 fbe6 	bl	80035c8 <ADC3_dual_scan_start>
			ANA_outStartHALL = false;
 8002dfc:	4b54      	ldr	r3, [pc, #336]	; (8002f50 <main+0x208>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
		}

		if (ANA_outStartWPC) {
 8002e02:	4b54      	ldr	r3, [pc, #336]	; (8002f54 <main+0x20c>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <main+0xd0>
			ADC3_IN13_IN4_scan_init();
 8002e0a:	f000 faa5 	bl	8003358 <ADC3_IN13_IN4_scan_init>
			ADC3_dual_scan_start();
 8002e0e:	f000 fbdb 	bl	80035c8 <ADC3_dual_scan_start>
			ANA_outStartWPC = false;
 8002e12:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <main+0x20c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
		}

		if (ANA_outDataReady) {
 8002e18:	4b4f      	ldr	r3, [pc, #316]	; (8002f58 <main+0x210>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d047      	beq.n	8002eb0 <main+0x168>
			//Transfer Data
			if (ANA_inOptn[1]==0) {
 8002e20:	4b4e      	ldr	r3, [pc, #312]	; (8002f5c <main+0x214>)
 8002e22:	885b      	ldrh	r3, [r3, #2]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d12d      	bne.n	8002e84 <main+0x13c>
				//Analysed
				if (ANA_outResults[1]<300) {
 8002e28:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <main+0x218>)
 8002e2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e2e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002f64 <main+0x21c>
 8002e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3a:	d513      	bpl.n	8002e64 <main+0x11c>
					GUI_angle = ANA_outResults[0];
 8002e3c:	4b48      	ldr	r3, [pc, #288]	; (8002f60 <main+0x218>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a49      	ldr	r2, [pc, #292]	; (8002f68 <main+0x220>)
 8002e42:	6013      	str	r3, [r2, #0]
					GUI_distance = ANA_outResults[1];
 8002e44:	4b46      	ldr	r3, [pc, #280]	; (8002f60 <main+0x218>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a48      	ldr	r2, [pc, #288]	; (8002f6c <main+0x224>)
 8002e4a:	6013      	str	r3, [r2, #0]
					GUI_distanceDeviation = ANA_outResults[2];
 8002e4c:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <main+0x218>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a47      	ldr	r2, [pc, #284]	; (8002f70 <main+0x228>)
 8002e52:	6013      	str	r3, [r2, #0]
					GUI_current = ANA_outResults[3];
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <main+0x218>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a46      	ldr	r2, [pc, #280]	; (8002f74 <main+0x22c>)
 8002e5a:	6013      	str	r3, [r2, #0]
					GUI_cable_detected = true;
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <main+0x230>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e01f      	b.n	8002ea4 <main+0x15c>
				} else {
					GUI_angle = 100;
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <main+0x220>)
 8002e66:	4a45      	ldr	r2, [pc, #276]	; (8002f7c <main+0x234>)
 8002e68:	601a      	str	r2, [r3, #0]
					GUI_distance = -1;
 8002e6a:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <main+0x224>)
 8002e6c:	4a44      	ldr	r2, [pc, #272]	; (8002f80 <main+0x238>)
 8002e6e:	601a      	str	r2, [r3, #0]
					GUI_distanceDeviation = -1;
 8002e70:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <main+0x228>)
 8002e72:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <main+0x238>)
 8002e74:	601a      	str	r2, [r3, #0]
					GUI_current = -1;
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <main+0x22c>)
 8002e78:	4a41      	ldr	r2, [pc, #260]	; (8002f80 <main+0x238>)
 8002e7a:	601a      	str	r2, [r3, #0]
					GUI_cable_not_detected = true;
 8002e7c:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <main+0x23c>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e00f      	b.n	8002ea4 <main+0x15c>
				}


			} else {
				//Raw
				GUI_rawHallRight = ANA_outResults[0];
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <main+0x218>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3f      	ldr	r2, [pc, #252]	; (8002f88 <main+0x240>)
 8002e8a:	6013      	str	r3, [r2, #0]
				GUI_rawHallLeft = ANA_outResults[1];
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <main+0x218>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a3e      	ldr	r2, [pc, #248]	; (8002f8c <main+0x244>)
 8002e92:	6013      	str	r3, [r2, #0]
				GUI_rawWpcRight = ANA_outResults[2];
 8002e94:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <main+0x218>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a3d      	ldr	r2, [pc, #244]	; (8002f90 <main+0x248>)
 8002e9a:	6013      	str	r3, [r2, #0]
				GUI_rawWpcLeft = ANA_outResults[3];
 8002e9c:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <main+0x218>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <main+0x24c>)
 8002ea2:	6013      	str	r3, [r2, #0]
			}
			GUI_inputMeasReady = true;
 8002ea4:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <main+0x250>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
			ANA_outDataReady = false;
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <main+0x210>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
		}

		if (ANA_measBusy) {
 8002eb0:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <main+0x254>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <main+0x178>
			BSP_LED_On(LED4);
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f001 fbfb 	bl	80046b4 <BSP_LED_On>
 8002ebe:	e002      	b.n	8002ec6 <main+0x17e>
		} else {
			BSP_LED_Off(LED4);
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f001 fc11 	bl	80046e8 <BSP_LED_Off>
		}

		if (GUI_outOptn) {						// Check if Options were changed
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <main+0x258>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d02a      	beq.n	8002f24 <main+0x1dc>
			ANA_inOptn[0]=GUI_mode;				// Transfer mode
 8002ece:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <main+0x25c>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <main+0x214>)
 8002ed6:	801a      	strh	r2, [r3, #0]
			ANA_inOptn[1]=GUI_options[0].active;// Transfer data type
 8002ed8:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <main+0x260>)
 8002eda:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <main+0x214>)
 8002ee0:	805a      	strh	r2, [r3, #2]
			ANA_inOptn[2]=GUI_options[1].active;// Transfer measuring type
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <main+0x260>)
 8002ee4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <main+0x214>)
 8002eea:	809a      	strh	r2, [r3, #4]
			switch (GUI_options[2].active) {	// Transfer accuracy
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <main+0x260>)
 8002eee:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d00e      	beq.n	8002f14 <main+0x1cc>
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	dc10      	bgt.n	8002f1c <main+0x1d4>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <main+0x1bc>
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d004      	beq.n	8002f0c <main+0x1c4>
					break;
				case 2:
					ANA_inOptn[3]=10;
					break;
				default:
					break;
 8002f02:	e00b      	b.n	8002f1c <main+0x1d4>
					ANA_inOptn[3]=1;
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <main+0x214>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	80da      	strh	r2, [r3, #6]
					break;
 8002f0a:	e008      	b.n	8002f1e <main+0x1d6>
					ANA_inOptn[3]=5;
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <main+0x214>)
 8002f0e:	2205      	movs	r2, #5
 8002f10:	80da      	strh	r2, [r3, #6]
					break;
 8002f12:	e004      	b.n	8002f1e <main+0x1d6>
					ANA_inOptn[3]=10;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <main+0x214>)
 8002f16:	220a      	movs	r2, #10
 8002f18:	80da      	strh	r2, [r3, #6]
					break;
 8002f1a:	e000      	b.n	8002f1e <main+0x1d6>
					break;
 8002f1c:	bf00      	nop
			}
			GUI_outOptn = false;				// Reset option bit
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <main+0x258>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
		}

		//Analytics handler
		ANA_Handler();
 8002f24:	f7fe f94e 	bl	80011c4 <ANA_Handler>

		//Site handler
		GUI_SiteHandler();
 8002f28:	f7ff fc1c 	bl	8002764 <GUI_SiteHandler>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8002f2c:	e73e      	b.n	8002dac <main+0x64>
 8002f2e:	bf00      	nop
 8002f30:	20000504 	.word	0x20000504
 8002f34:	2000053d 	.word	0x2000053d
 8002f38:	20000542 	.word	0x20000542
 8002f3c:	20000544 	.word	0x20000544
 8002f40:	20000508 	.word	0x20000508
 8002f44:	20000548 	.word	0x20000548
 8002f48:	2000050c 	.word	0x2000050c
 8002f4c:	20000505 	.word	0x20000505
 8002f50:	20000510 	.word	0x20000510
 8002f54:	20000511 	.word	0x20000511
 8002f58:	20000512 	.word	0x20000512
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	200009a4 	.word	0x200009a4
 8002f64:	43960000 	.word	0x43960000
 8002f68:	2000051c 	.word	0x2000051c
 8002f6c:	20000520 	.word	0x20000520
 8002f70:	20000524 	.word	0x20000524
 8002f74:	20000528 	.word	0x20000528
 8002f78:	20000518 	.word	0x20000518
 8002f7c:	42c80000 	.word	0x42c80000
 8002f80:	bf800000 	.word	0xbf800000
 8002f84:	20000519 	.word	0x20000519
 8002f88:	20000530 	.word	0x20000530
 8002f8c:	2000052c 	.word	0x2000052c
 8002f90:	20000538 	.word	0x20000538
 8002f94:	20000534 	.word	0x20000534
 8002f98:	2000053f 	.word	0x2000053f
 8002f9c:	20000513 	.word	0x20000513
 8002fa0:	20000541 	.word	0x20000541
 8002fa4:	2000051a 	.word	0x2000051a
 8002fa8:	2000019c 	.word	0x2000019c

08002fac <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0a0      	sub	sp, #128	; 0x80
 8002fb0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fb6:	2230      	movs	r2, #48	; 0x30
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f007 fab2 	bl	800a524 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	2230      	movs	r2, #48	; 0x30
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f007 faa3 	bl	800a524 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	; (800309c <SystemClock_Config+0xf0>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a2d      	ldr	r2, [pc, #180]	; (800309c <SystemClock_Config+0xf0>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <SystemClock_Config+0xf0>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <SystemClock_Config+0xf4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <SystemClock_Config+0xf4>)
 8003004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <SystemClock_Config+0xf4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003016:	2301      	movs	r3, #1
 8003018:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800301a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003020:	2302      	movs	r3, #2
 8003022:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003028:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800302a:	2308      	movs	r3, #8
 800302c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 800302e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003032:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003034:	2302      	movs	r3, #2
 8003036:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003038:	2307      	movs	r3, #7
 800303a:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800303c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003040:	4618      	mov	r0, r3
 8003042:	f005 fbc1 	bl	80087c8 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003046:	230f      	movs	r3, #15
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800304a:	2302      	movs	r3, #2
 800304c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800304e:	2300      	movs	r3, #0
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003052:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003056:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800305c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800305e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003062:	2105      	movs	r1, #5
 8003064:	4618      	mov	r0, r3
 8003066:	f005 fe1f 	bl	8008ca8 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800306a:	2308      	movs	r3, #8
 800306c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800306e:	23c0      	movs	r3, #192	; 0xc0
 8003070:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003072:	2304      	movs	r3, #4
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	4618      	mov	r0, r3
 8003082:	f005 fff9 	bl	8009078 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <SystemClock_Config+0xf8>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <SystemClock_Config+0xf8>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003090:	6053      	str	r3, [r2, #4]
}
 8003092:	bf00      	nop
 8003094:	3780      	adds	r7, #128	; 0x80
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000
 80030a4:	40012300 	.word	0x40012300

080030a8 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <gyro_disable+0xb4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a29      	ldr	r2, [pc, #164]	; (800315c <gyro_disable+0xb4>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <gyro_disable+0xb4>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1; // Reset mode for PC1
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <gyro_disable+0xb8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <gyro_disable+0xb8>)
 80030d0:	f023 030c 	bic.w	r3, r3, #12
 80030d4:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0;	// Set PC1 as output
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <gyro_disable+0xb8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a21      	ldr	r2, [pc, #132]	; (8003160 <gyro_disable+0xb8>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80030e2:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <gyro_disable+0xb8>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <gyro_disable+0xb8>)
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80030ee:	200a      	movs	r0, #10
 80030f0:	f003 f918 	bl	8006324 <HAL_Delay>
	GPIOC->MODER |= GPIO_MODER_MODER1_Msk; // Analog mode PC1 = ADC123_IN11
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <gyro_disable+0xb8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <gyro_disable+0xb8>)
 80030fa:	f043 030c 	orr.w	r3, r3, #12
 80030fe:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8003100:	2300      	movs	r3, #0
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4b15      	ldr	r3, [pc, #84]	; (800315c <gyro_disable+0xb4>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <gyro_disable+0xb4>)
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	6313      	str	r3, [r2, #48]	; 0x30
 8003110:	4b12      	ldr	r3, [pc, #72]	; (800315c <gyro_disable+0xb4>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8;	// Reset speed of PF8
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <gyro_disable+0xbc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a10      	ldr	r2, [pc, #64]	; (8003164 <gyro_disable+0xbc>)
 8003122:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003126:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8;			// Reset alternate func. of PF8
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <gyro_disable+0xbc>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <gyro_disable+0xbc>)
 800312e:	f023 030f 	bic.w	r3, r3, #15
 8003132:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8;			// Reset pulup/down of PF8
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <gyro_disable+0xbc>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <gyro_disable+0xbc>)
 800313a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800313e:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8003140:	200a      	movs	r0, #10
 8003142:	f003 f8ef 	bl	8006324 <HAL_Delay>
	GPIOF->MODER |= GPIO_MODER_MODER8_Msk; // Analog mode for PF6 = ADC3_IN4
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <gyro_disable+0xbc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a06      	ldr	r2, [pc, #24]	; (8003164 <gyro_disable+0xbc>)
 800314c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003150:	6013      	str	r3, [r2, #0]
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	40020800 	.word	0x40020800
 8003164:	40021400 	.word	0x40021400

08003168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	db0b      	blt.n	8003192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4907      	ldr	r1, [pc, #28]	; (80031a0 <__NVIC_EnableIRQ+0x38>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2001      	movs	r0, #1
 800318a:	fa00 f202 	lsl.w	r2, r0, r2
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000e100 	.word	0xe000e100

080031a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db12      	blt.n	80031dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f003 021f 	and.w	r2, r3, #31
 80031bc:	490a      	ldr	r1, [pc, #40]	; (80031e8 <__NVIC_DisableIRQ+0x44>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2001      	movs	r0, #1
 80031c6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ca:	3320      	adds	r3, #32
 80031cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031d0:	f3bf 8f4f 	dsb	sy
}
 80031d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031d6:	f3bf 8f6f 	isb	sy
}
 80031da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100

080031ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	db0c      	blt.n	8003218 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	4907      	ldr	r1, [pc, #28]	; (8003224 <__NVIC_ClearPendingIRQ+0x38>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2001      	movs	r0, #1
 800320e:	fa00 f202 	lsl.w	r2, r0, r2
 8003212:	3360      	adds	r3, #96	; 0x60
 8003214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000e100 	.word	0xe000e100

08003228 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <MEAS_GPIO_analog_init+0x7c>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a1b      	ldr	r2, [pc, #108]	; (80032a4 <MEAS_GPIO_analog_init+0x7c>)
 8003238:	f043 0320 	orr.w	r3, r3, #32
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <MEAS_GPIO_analog_init+0x7c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
	GPIOF->MODER |= (GPIO_MODER_MODER6_Msk);// Analog mode for PF6 = ADC3_IN4
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <MEAS_GPIO_analog_init+0x80>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <MEAS_GPIO_analog_init+0x80>)
 8003250:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003254:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (GPIO_MODER_MODER8_Msk);// Analog mode for PF8 = ADC3_IN6
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <MEAS_GPIO_analog_init+0x80>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <MEAS_GPIO_analog_init+0x80>)
 800325c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003260:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <MEAS_GPIO_analog_init+0x7c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <MEAS_GPIO_analog_init+0x7c>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <MEAS_GPIO_analog_init+0x7c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
	GPIOC->MODER |= (GPIO_MODER_MODER1_Msk);// Analog mode for PC1 = ADC123_IN11
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <MEAS_GPIO_analog_init+0x84>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <MEAS_GPIO_analog_init+0x84>)
 8003284:	f043 030c 	orr.w	r3, r3, #12
 8003288:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODER3_Msk);// Analog mode for PC3 = ADC123_IN13
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <MEAS_GPIO_analog_init+0x84>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a07      	ldr	r2, [pc, #28]	; (80032ac <MEAS_GPIO_analog_init+0x84>)
 8003290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003294:	6013      	str	r3, [r2, #0]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40021400 	.word	0x40021400
 80032ac:	40020800 	.word	0x40020800

080032b0 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <ADC_reset+0x38>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <ADC_reset+0x38>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <ADC_reset+0x38>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <ADC_reset+0x38>)
 80032c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ca:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 80032cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800

080032ec <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <MEAS_timer_init+0x68>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a16      	ldr	r2, [pc, #88]	; (8003354 <MEAS_timer_init+0x68>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <MEAS_timer_init+0x68>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 800330e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003312:	f243 62af 	movw	r2, #13999	; 0x36af
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8003318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800331c:	2209      	movs	r2, #9
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8003320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800332a:	f043 0320 	orr.w	r3, r3, #32
 800332e:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8003330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8003340:	201c      	movs	r0, #28
 8003342:	f7ff ff53 	bl	80031ec <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8003346:	201c      	movs	r0, #28
 8003348:	f7ff ff0e 	bl	8003168 <__NVIC_EnableIRQ>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40023800 	.word	0x40023800

08003358 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	4b45      	ldr	r3, [pc, #276]	; (8003478 <ADC3_IN13_IN4_scan_init+0x120>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	4a44      	ldr	r2, [pc, #272]	; (8003478 <ADC3_IN13_IN4_scan_init+0x120>)
 8003368:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336c:	6453      	str	r3, [r2, #68]	; 0x44
 800336e:	4b42      	ldr	r3, [pc, #264]	; (8003478 <ADC3_IN13_IN4_scan_init+0x120>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= ADC_SQR1_L_0;			// Convert 2 inputs
 800337a:	4b40      	ldr	r3, [pc, #256]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	4a3f      	ldr	r2, [pc, #252]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 8003380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003384:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	4a3c      	ldr	r2, [pc, #240]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 800338c:	f043 030d 	orr.w	r3, r3, #13
 8003390:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8003392:	4b3a      	ldr	r3, [pc, #232]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	4a39      	ldr	r2, [pc, #228]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 800339e:	4b37      	ldr	r3, [pc, #220]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4a36      	ldr	r2, [pc, #216]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4a33      	ldr	r2, [pc, #204]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80033b6:	4b31      	ldr	r3, [pc, #196]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4a30      	ldr	r2, [pc, #192]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 80033bc:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80033c0:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4a2d      	ldr	r2, [pc, #180]	; (800347c <ADC3_IN13_IN4_scan_init+0x124>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80033ce:	2300      	movs	r3, #0
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4b29      	ldr	r3, [pc, #164]	; (8003478 <ADC3_IN13_IN4_scan_init+0x120>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a28      	ldr	r2, [pc, #160]	; (8003478 <ADC3_IN13_IN4_scan_init+0x120>)
 80033d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <ADC3_IN13_IN4_scan_init+0x120>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a24      	ldr	r2, [pc, #144]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80033f6:	bf00      	nop
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f9      	bne.n	80033f8 <ADC3_IN13_IN4_scan_init+0xa0>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <ADC3_IN13_IN4_scan_init+0x12c>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <ADC3_IN13_IN4_scan_init+0x12c>)
 800340a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800340e:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800341a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 800341c:	4b18      	ldr	r3, [pc, #96]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a17      	ldr	r2, [pc, #92]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003426:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8003428:	4b15      	ldr	r3, [pc, #84]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a14      	ldr	r2, [pc, #80]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 800342e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003432:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a11      	ldr	r2, [pc, #68]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 800343a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800343e:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800344a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003452:	f043 0310 	orr.w	r3, r3, #16
 8003456:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 800345a:	2278      	movs	r2, #120	; 0x78
 800345c:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003460:	4a09      	ldr	r2, [pc, #36]	; (8003488 <ADC3_IN13_IN4_scan_init+0x130>)
 8003462:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <ADC3_IN13_IN4_scan_init+0x128>)
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <ADC3_IN13_IN4_scan_init+0x134>)
 8003468:	60da      	str	r2, [r3, #12]

}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40012200 	.word	0x40012200
 8003480:	40026428 	.word	0x40026428
 8003484:	40026400 	.word	0x40026400
 8003488:	4001224c 	.word	0x4001224c
 800348c:	20000550 	.word	0x20000550

08003490 <ADC3_IN11_IN6_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN11_IN6_scan_init(void)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	4b45      	ldr	r3, [pc, #276]	; (80035b0 <ADC3_IN11_IN6_scan_init+0x120>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a44      	ldr	r2, [pc, #272]	; (80035b0 <ADC3_IN11_IN6_scan_init+0x120>)
 80034a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <ADC3_IN11_IN6_scan_init+0x120>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= ADC_SQR1_L_0;			// Convert 2 inputs
 80034b2:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	4a3f      	ldr	r2, [pc, #252]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC3->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	4a3c      	ldr	r2, [pc, #240]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034c4:	f043 030b 	orr.w	r3, r3, #11
 80034c8:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (6UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 80034ca:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	4a39      	ldr	r2, [pc, #228]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034d4:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 80034d6:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a36      	ldr	r2, [pc, #216]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e0:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4a33      	ldr	r2, [pc, #204]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034f4:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80034f8:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 80034fa:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4a2d      	ldr	r2, [pc, #180]	; (80035b4 <ADC3_IN11_IN6_scan_init+0x124>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8003506:	2300      	movs	r3, #0
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <ADC3_IN11_IN6_scan_init+0x120>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a28      	ldr	r2, [pc, #160]	; (80035b0 <ADC3_IN11_IN6_scan_init+0x120>)
 8003510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <ADC3_IN11_IN6_scan_init+0x120>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8003522:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 800352e:	bf00      	nop
 8003530:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f9      	bne.n	8003530 <ADC3_IN11_IN6_scan_init+0xa0>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 800353c:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <ADC3_IN11_IN6_scan_init+0x12c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <ADC3_IN11_IN6_scan_init+0x12c>)
 8003542:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003546:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 800354e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003552:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8003554:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355e:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8003560:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a11      	ldr	r2, [pc, #68]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003576:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0e      	ldr	r2, [pc, #56]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 800357e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003582:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 800358a:	f043 0310 	orr.w	r3, r3, #16
 800358e:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003592:	2278      	movs	r2, #120	; 0x78
 8003594:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 8003598:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <ADC3_IN11_IN6_scan_init+0x130>)
 800359a:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <ADC3_IN11_IN6_scan_init+0x128>)
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <ADC3_IN11_IN6_scan_init+0x134>)
 80035a0:	60da      	str	r2, [r3, #12]

}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40012200 	.word	0x40012200
 80035b8:	40026428 	.word	0x40026428
 80035bc:	40026400 	.word	0x40026400
 80035c0:	4001224c 	.word	0x4001224c
 80035c4:	20000550 	.word	0x20000550

080035c8 <ADC3_dual_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_dual_scan_start(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 80035cc:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <ADC3_dual_scan_start+0x3c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <ADC3_dual_scan_start+0x3c>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 80035d8:	2039      	movs	r0, #57	; 0x39
 80035da:	f7ff fe07 	bl	80031ec <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 80035de:	2039      	movs	r0, #57	; 0x39
 80035e0:	f7ff fdc2 	bl	8003168 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <ADC3_dual_scan_start+0x40>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a07      	ldr	r2, [pc, #28]	; (8003608 <ADC3_dual_scan_start+0x40>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 80035f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6013      	str	r3, [r2, #0]
}
 8003600:	bf00      	nop
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40026428 	.word	0x40026428
 8003608:	40012200 	.word	0x40012200

0800360c <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8003610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6113      	str	r3, [r2, #16]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8003630:	4b14      	ldr	r3, [pc, #80]	; (8003684 <ADC_IRQHandler+0x58>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 800363c:	4911      	ldr	r1, [pc, #68]	; (8003684 <ADC_IRQHandler+0x58>)
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <ADC_IRQHandler+0x5c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	4810      	ldr	r0, [pc, #64]	; (8003688 <ADC_IRQHandler+0x5c>)
 8003646:	6002      	str	r2, [r0, #0]
 8003648:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800364a:	4910      	ldr	r1, [pc, #64]	; (800368c <ADC_IRQHandler+0x60>)
 800364c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8003650:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <ADC_IRQHandler+0x5c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b3b      	cmp	r3, #59	; 0x3b
 8003656:	d912      	bls.n	800367e <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8003658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <ADC_IRQHandler+0x58>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a05      	ldr	r2, [pc, #20]	; (8003684 <ADC_IRQHandler+0x58>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8003674:	f7ff fe1c 	bl	80032b0 <ADC_reset>
			MEAS_data_ready = true;
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <ADC_IRQHandler+0x64>)
 800367a:	2201      	movs	r2, #1
 800367c:	701a      	strb	r2, [r3, #0]
		}

	}
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40012200 	.word	0x40012200
 8003688:	2000054c 	.word	0x2000054c
 800368c:	20000550 	.word	0x20000550
 8003690:	20000542 	.word	0x20000542

08003694 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <DMA2_Stream1_IRQHandler+0x7c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d033      	beq.n	800370c <DMA2_Stream1_IRQHandler+0x78>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 80036a4:	2039      	movs	r0, #57	; 0x39
 80036a6:	f7ff fd7d 	bl	80031a4 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 80036aa:	2039      	movs	r0, #57	; 0x39
 80036ac:	f7ff fd9e 	bl	80031ec <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80036b0:	4b18      	ldr	r3, [pc, #96]	; (8003714 <DMA2_Stream1_IRQHandler+0x80>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a17      	ldr	r2, [pc, #92]	; (8003714 <DMA2_Stream1_IRQHandler+0x80>)
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80036bc:	bf00      	nop
 80036be:	4b15      	ldr	r3, [pc, #84]	; (8003714 <DMA2_Stream1_IRQHandler+0x80>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f9      	bne.n	80036be <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <DMA2_Stream1_IRQHandler+0x7c>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4a10      	ldr	r2, [pc, #64]	; (8003710 <DMA2_Stream1_IRQHandler+0x7c>)
 80036d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036d4:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80036d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <DMA2_Stream1_IRQHandler+0x84>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <DMA2_Stream1_IRQHandler+0x84>)
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <DMA2_Stream1_IRQHandler+0x84>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <DMA2_Stream1_IRQHandler+0x84>)
 80036f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036fc:	6093      	str	r3, [r2, #8]
		ADC_reset();
 80036fe:	f7ff fdd7 	bl	80032b0 <ADC_reset>
		MEAS_analyse_data();
 8003702:	f000 f80d 	bl	8003720 <MEAS_analyse_data>
		MEAS_data_ready = true;
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <DMA2_Stream1_IRQHandler+0x88>)
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
	}
}
 800370c:	bf00      	nop
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40026400 	.word	0x40026400
 8003714:	40026428 	.word	0x40026428
 8003718:	40012200 	.word	0x40012200
 800371c:	20000542 	.word	0x20000542

08003720 <MEAS_analyse_data>:

/** ***************************************************************************
 * @brief Analyse data to detect sine amplitude
 *****************************************************************************/
void MEAS_analyse_data(void)
{
 8003720:	b480      	push	{r7}
 8003722:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003726:	af00      	add	r7, sp, #0
	uint32_t buffer_left_channel[ADC_NUMS];
	uint32_t buffer_right_channel[ADC_NUMS];
	for (int i = 0; i < ADC_NUMS; ++i) {
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800372e:	e01d      	b.n	800376c <MEAS_analyse_data+0x4c>
		buffer_left_channel[i] = ADC_samples[2*i];
 8003730:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4ac4      	ldr	r2, [pc, #784]	; (8003a48 <MEAS_analyse_data+0x328>)
 8003738:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800373c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003740:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		buffer_right_channel[i] = ADC_samples[((2*i)+1)];
 8003748:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	3301      	adds	r3, #1
 8003750:	4abd      	ldr	r2, [pc, #756]	; (8003a48 <MEAS_analyse_data+0x328>)
 8003752:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003756:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800375a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800375e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < ADC_NUMS; ++i) {
 8003762:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003766:	3301      	adds	r3, #1
 8003768:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800376c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003770:	2b3b      	cmp	r3, #59	; 0x3b
 8003772:	dddd      	ble.n	8003730 <MEAS_analyse_data+0x10>
	}

	//sort arrays from low to high
	uint32_t temp_left;
	uint32_t temp_right;
	for (int i = 0; i < ADC_NUMS; ++i) {
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800377a:	e067      	b.n	800384c <MEAS_analyse_data+0x12c>
		for (int j = i+1; j < ADC_NUMS; ++j) {
 800377c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003780:	3301      	adds	r3, #1
 8003782:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8003786:	e058      	b.n	800383a <MEAS_analyse_data+0x11a>
			if (buffer_left_channel[i]>buffer_left_channel[j]) {
 8003788:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800378c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003790:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003794:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003798:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800379c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d91b      	bls.n	80037dc <MEAS_analyse_data+0xbc>
				temp_left = buffer_left_channel[i];
 80037a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80037a8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
				buffer_left_channel[i]=buffer_left_channel[j];
 80037b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80037b8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80037bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80037c4:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80037c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				buffer_left_channel[j]=temp_left;
 80037cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80037d0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80037d4:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 80037d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			if (buffer_right_channel[i]>buffer_right_channel[j]) {
 80037dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037e0:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80037e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037ec:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80037f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d91b      	bls.n	8003830 <MEAS_analyse_data+0x110>
				temp_right = buffer_right_channel[i];
 80037f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037fc:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003804:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
				buffer_right_channel[i]=buffer_right_channel[j];
 8003808:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800380c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003814:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003818:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				buffer_right_channel[j]=temp_right;
 8003820:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003824:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003828:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800382c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = i+1; j < ADC_NUMS; ++j) {
 8003830:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003834:	3301      	adds	r3, #1
 8003836:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800383a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800383e:	2b3b      	cmp	r3, #59	; 0x3b
 8003840:	dda2      	ble.n	8003788 <MEAS_analyse_data+0x68>
	for (int i = 0; i < ADC_NUMS; ++i) {
 8003842:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003846:	3301      	adds	r3, #1
 8003848:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800384c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003850:	2b3b      	cmp	r3, #59	; 0x3b
 8003852:	dd93      	ble.n	800377c <MEAS_analyse_data+0x5c>


	uint32_t values_left[10];
	uint32_t values_right[10];
	//select 5 lowest values
	for (int i = 0; i < 5; ++i) {
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800385a:	e01b      	b.n	8003894 <MEAS_analyse_data+0x174>
		values_left[i]=buffer_left_channel[i];
 800385c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003860:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8003864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800386c:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8003870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		values_right[i]=buffer_right_channel[i];
 8003874:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003878:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800387c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003880:	463b      	mov	r3, r7
 8003882:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8003886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 5; ++i) {
 800388a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800388e:	3301      	adds	r3, #1
 8003890:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8003894:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8003898:	2b04      	cmp	r3, #4
 800389a:	dddf      	ble.n	800385c <MEAS_analyse_data+0x13c>
	}

	//select 5 highest values
	for (int i = 0; i < 5; ++i) {
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80038a2:	e021      	b.n	80038e8 <MEAS_analyse_data+0x1c8>
		values_left[i+5]=buffer_left_channel[i+55];
 80038a4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038a8:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80038ac:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038b0:	1d5a      	adds	r2, r3, #5
 80038b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80038b6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80038ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		values_right[i+5]=buffer_right_channel[i+55];
 80038c2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038c6:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80038ca:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038ce:	1d5a      	adds	r2, r3, #5
 80038d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038d4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80038d8:	463b      	mov	r3, r7
 80038da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 5; ++i) {
 80038de:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038e2:	3301      	adds	r3, #1
 80038e4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80038e8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	ddd9      	ble.n	80038a4 <MEAS_analyse_data+0x184>
	}

	//check if values mean around middle of ADC range
	uint32_t check_sum_left = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	uint32_t check_sum_right = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	for (int i = 0; i < 10; ++i) {
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8003902:	e019      	b.n	8003938 <MEAS_analyse_data+0x218>
		check_sum_left += values_left[i];
 8003904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003908:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8003914:	4413      	add	r3, r2
 8003916:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
		check_sum_right += values_right[i];
 800391a:	463b      	mov	r3, r7
 800391c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8003920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003924:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8003928:	4413      	add	r3, r2
 800392a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	for (int i = 0; i < 10; ++i) {
 800392e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003932:	3301      	adds	r3, #1
 8003934:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8003938:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800393c:	2b09      	cmp	r3, #9
 800393e:	dde1      	ble.n	8003904 <MEAS_analyse_data+0x1e4>
	}
	check_sum_left = check_sum_left / 10;
 8003940:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8003944:	4a41      	ldr	r2, [pc, #260]	; (8003a4c <MEAS_analyse_data+0x32c>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	check_sum_right = check_sum_right / 10;
 8003950:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003954:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <MEAS_analyse_data+0x32c>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	08db      	lsrs	r3, r3, #3
 800395c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

	//convert low values to high values
	for (int i = 0; i < 5; ++i) {
 8003960:	2300      	movs	r3, #0
 8003962:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8003966:	e020      	b.n	80039aa <MEAS_analyse_data+0x28a>
		values_left[i] = ADC_MAX_VALUE - values_left[i];
 8003968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800396c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003974:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8003978:	330f      	adds	r3, #15
 800397a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800397e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003982:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		values_right[i] = ADC_MAX_VALUE - values_right[i];
 8003986:	463b      	mov	r3, r7
 8003988:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8003994:	330f      	adds	r3, #15
 8003996:	463a      	mov	r2, r7
 8003998:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800399c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (int i = 0; i < 5; ++i) {
 80039a0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80039a4:	3301      	adds	r3, #1
 80039a6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80039aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	ddda      	ble.n	8003968 <MEAS_analyse_data+0x248>
	}

	//calculate mean of all 10 values
	uint32_t sum_left = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	uint32_t sum_right = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (int i = 0; i < 10; ++i) {
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80039c4:	e019      	b.n	80039fa <MEAS_analyse_data+0x2da>
		sum_left += values_left[i];
 80039c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ca:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80039ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80039d6:	4413      	add	r3, r2
 80039d8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		sum_right += values_right[i];
 80039dc:	463b      	mov	r3, r7
 80039de:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80039e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e6:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80039ea:	4413      	add	r3, r2
 80039ec:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (int i = 0; i < 10; ++i) {
 80039f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80039f4:	3301      	adds	r3, #1
 80039f6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80039fa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80039fe:	2b09      	cmp	r3, #9
 8003a00:	dde1      	ble.n	80039c6 <MEAS_analyse_data+0x2a6>
	}
	sum_left = sum_left / 10;
 8003a02:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003a06:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <MEAS_analyse_data+0x32c>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	08db      	lsrs	r3, r3, #3
 8003a0e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	sum_right = sum_right / 10;
 8003a12:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a16:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <MEAS_analyse_data+0x32c>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	08db      	lsrs	r3, r3, #3
 8003a1e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

	MEAS_amplitude_left = sum_left-(ADC_MAX_VALUE/2);
 8003a22:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003a26:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <MEAS_analyse_data+0x330>)
 8003a2c:	6013      	str	r3, [r2, #0]
	MEAS_amplitude_right = sum_right-(ADC_MAX_VALUE/2);
 8003a2e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a32:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8003a36:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <MEAS_analyse_data+0x334>)
 8003a38:	6013      	str	r3, [r2, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	20000550 	.word	0x20000550
 8003a4c:	cccccccd 	.word	0xcccccccd
 8003a50:	20000544 	.word	0x20000544
 8003a54:	20000548 	.word	0x20000548

08003a58 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8003a58:	b598      	push	{r3, r4, r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8003a5c:	481f      	ldr	r0, [pc, #124]	; (8003adc <MENU_check_transition+0x84>)
 8003a5e:	f002 fb29 	bl	80060b4 <BSP_TS_GetState>
#ifdef EVAL_REV_E
// Evalboard revision E (blue) has an inverted y-axis in the touch controller
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
	if (TS_State.TouchDetected) {		// If a touch was detected
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <MENU_check_transition+0x84>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d036      	beq.n	8003ad8 <MENU_check_transition+0x80>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <MENU_check_transition+0x88>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d132      	bne.n	8003ad8 <MENU_check_transition+0x80>
			item_old = item_new;		// Store old item
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <MENU_check_transition+0x8c>)
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <MENU_check_transition+0x90>)
 8003a78:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8003a7a:	f001 fa55 	bl	8004f28 <BSP_LCD_GetYSize>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	3b28      	subs	r3, #40	; 0x28
 8003a82:	4a16      	ldr	r2, [pc, #88]	; (8003adc <MENU_check_transition+0x84>)
 8003a84:	8892      	ldrh	r2, [r2, #4]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d226      	bcs.n	8003ad8 <MENU_check_transition+0x80>
 8003a8a:	f001 fa4d 	bl	8004f28 <BSP_LCD_GetYSize>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4a12      	ldr	r2, [pc, #72]	; (8003adc <MENU_check_transition+0x84>)
 8003a92:	8892      	ldrh	r2, [r2, #4]
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d91f      	bls.n	8003ad8 <MENU_check_transition+0x80>
				item_new = TS_State.X	// Calculate new item
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <MENU_check_transition+0x84>)
 8003a9a:	885b      	ldrh	r3, [r3, #2]
 8003a9c:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8003a9e:	f001 fa37 	bl	8004f10 <BSP_LCD_GetXSize>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003aaa:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8003aac:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <MENU_check_transition+0x8c>)
 8003aae:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <MENU_check_transition+0x8c>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d902      	bls.n	8003abe <MENU_check_transition+0x66>
					item_new = MENU_NONE;	// Out of bounds
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <MENU_check_transition+0x8c>)
 8003aba:	2206      	movs	r2, #6
 8003abc:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <MENU_check_transition+0x8c>)
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <MENU_check_transition+0x90>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d106      	bne.n	8003ad8 <MENU_check_transition+0x80>
					item_new = MENU_NONE;
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <MENU_check_transition+0x8c>)
 8003acc:	2206      	movs	r2, #6
 8003ace:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <MENU_check_transition+0x90>)
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	4b02      	ldr	r3, [pc, #8]	; (8003ae0 <MENU_check_transition+0x88>)
 8003ad6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8003ad8:	bf00      	nop
 8003ada:	bd98      	pop	{r3, r4, r7, pc}
 8003adc:	20000730 	.word	0x20000730
 8003ae0:	2000026e 	.word	0x2000026e
 8003ae4:	2000026f 	.word	0x2000026f
 8003ae8:	20000270 	.word	0x20000270

08003aec <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <EXTI15_10_IRQHandler+0x40>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d014      	beq.n	8003b26 <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <EXTI15_10_IRQHandler+0x40>)
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <EXTI15_10_IRQHandler+0x40>)
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8003b08:	f002 fac8 	bl	800609c <BSP_TS_ITGetStatus>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8003b12:	f002 fb81 	bl	8006218 <BSP_TS_ITClear>
			MENU_check_transition();
 8003b16:	f7ff ff9f 	bl	8003a58 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <EXTI15_10_IRQHandler+0x40>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4a03      	ldr	r2, [pc, #12]	; (8003b2c <EXTI15_10_IRQHandler+0x40>)
 8003b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b24:	6153      	str	r3, [r2, #20]
	}
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <__NVIC_EnableIRQ>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	db0b      	blt.n	8003b5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	f003 021f 	and.w	r2, r3, #31
 8003b48:	4907      	ldr	r1, [pc, #28]	; (8003b68 <__NVIC_EnableIRQ+0x38>)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2001      	movs	r0, #1
 8003b52:	fa00 f202 	lsl.w	r2, r0, r2
 8003b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000e100 	.word	0xe000e100

08003b6c <__NVIC_ClearPendingIRQ>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	db0c      	blt.n	8003b98 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	f003 021f 	and.w	r2, r3, #31
 8003b84:	4907      	ldr	r1, [pc, #28]	; (8003ba4 <__NVIC_ClearPendingIRQ+0x38>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b92:	3360      	adds	r3, #96	; 0x60
 8003b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000e100 	.word	0xe000e100

08003ba8 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <PB_init+0x38>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <PB_init+0x38>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <PB_init+0x38>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <PB_init+0x3c>)
 8003bcc:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <PB_init+0x3c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40020000 	.word	0x40020000

08003be8 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <PB_enableIRQ+0x58>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <PB_enableIRQ+0x58>)
 8003bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <PB_enableIRQ+0x58>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <PB_enableIRQ+0x5c>)
 8003c0c:	4a0d      	ldr	r2, [pc, #52]	; (8003c44 <PB_enableIRQ+0x5c>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <PB_enableIRQ+0x60>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <PB_enableIRQ+0x60>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <PB_enableIRQ+0x60>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <PB_enableIRQ+0x60>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8003c2a:	2006      	movs	r0, #6
 8003c2c:	f7ff ff9e 	bl	8003b6c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8003c30:	2006      	movs	r0, #6
 8003c32:	f7ff ff7d 	bl	8003b30 <__NVIC_EnableIRQ>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40013c00 	.word	0x40013c00

08003c4c <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <PB_pressed+0x20>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <PB_pressed+0x20>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
	return pressed;
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	20000738 	.word	0x20000738

08003c70 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <EXTI0_IRQHandler+0x2c>)
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <EXTI0_IRQHandler+0x2c>)
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <EXTI0_IRQHandler+0x2c>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <EXTI0_IRQHandler+0x30>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
	}
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40013c00 	.word	0x40013c00
 8003ca0:	20000738 	.word	0x20000738

08003ca4 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8003cb6:	e7fe      	b.n	8003cb6 <HardFault_Handler+0x4>

08003cb8 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8003cbc:	e7fe      	b.n	8003cbc <MemManage_Handler+0x4>

08003cbe <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8003cc2:	e7fe      	b.n	8003cc2 <BusFault_Handler+0x4>

08003cc4 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8003cc8:	e7fe      	b.n	8003cc8 <UsageFault_Handler+0x4>

08003cca <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
}
 8003cea:	bf00      	nop
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003cf8:	f002 faf4 	bl	80062e4 <HAL_IncTick>
}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d04:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <SystemInit+0x60>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <SystemInit+0x60>)
 8003d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <SystemInit+0x64>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <SystemInit+0x64>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <SystemInit+0x64>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <SystemInit+0x64>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <SystemInit+0x64>)
 8003d2c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <SystemInit+0x64>)
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <SystemInit+0x68>)
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <SystemInit+0x64>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <SystemInit+0x64>)
 8003d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <SystemInit+0x64>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SystemInit+0x60>)
 8003d50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d54:	609a      	str	r2, [r3, #8]
#endif
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00
 8003d64:	40023800 	.word	0x40023800
 8003d68:	24003010 	.word	0x24003010

08003d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003da4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d72:	e003      	b.n	8003d7c <LoopCopyDataInit>

08003d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d7a:	3104      	adds	r1, #4

08003d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d7c:	480b      	ldr	r0, [pc, #44]	; (8003dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d84:	d3f6      	bcc.n	8003d74 <CopyDataInit>
  ldr  r2, =_sbss
 8003d86:	4a0b      	ldr	r2, [pc, #44]	; (8003db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d88:	e002      	b.n	8003d90 <LoopFillZerobss>

08003d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d8c:	f842 3b04 	str.w	r3, [r2], #4

08003d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d94:	d3f9      	bcc.n	8003d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d96:	f7ff ffb3 	bl	8003d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d9a:	f006 fb9f 	bl	800a4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d9e:	f7fe ffd3 	bl	8002d48 <main>
  bx  lr    
 8003da2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003da4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003da8:	0801130c 	.word	0x0801130c
  ldr  r0, =_sdata
 8003dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003db0:	200004e8 	.word	0x200004e8
  ldr  r2, =_sbss
 8003db4:	200004e8 	.word	0x200004e8
  ldr  r3, = _ebss
 8003db8:	20000ad8 	.word	0x20000ad8

08003dbc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dbc:	e7fe      	b.n	8003dbc <CAN1_RX0_IRQHandler>

08003dbe <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003dc2:	f000 feed 	bl	8004ba0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8003dc6:	20ca      	movs	r0, #202	; 0xca
 8003dc8:	f000 f95d 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003dcc:	20c3      	movs	r0, #195	; 0xc3
 8003dce:	f000 f967 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8003dd2:	2008      	movs	r0, #8
 8003dd4:	f000 f964 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003dd8:	2050      	movs	r0, #80	; 0x50
 8003dda:	f000 f961 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8003dde:	20cf      	movs	r0, #207	; 0xcf
 8003de0:	f000 f951 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f000 f95b 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8003dea:	20c1      	movs	r0, #193	; 0xc1
 8003dec:	f000 f958 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8003df0:	2030      	movs	r0, #48	; 0x30
 8003df2:	f000 f955 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8003df6:	20ed      	movs	r0, #237	; 0xed
 8003df8:	f000 f945 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003dfc:	2064      	movs	r0, #100	; 0x64
 8003dfe:	f000 f94f 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8003e02:	2003      	movs	r0, #3
 8003e04:	f000 f94c 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003e08:	2012      	movs	r0, #18
 8003e0a:	f000 f949 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8003e0e:	2081      	movs	r0, #129	; 0x81
 8003e10:	f000 f946 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003e14:	20e8      	movs	r0, #232	; 0xe8
 8003e16:	f000 f936 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003e1a:	2085      	movs	r0, #133	; 0x85
 8003e1c:	f000 f940 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e20:	2000      	movs	r0, #0
 8003e22:	f000 f93d 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003e26:	2078      	movs	r0, #120	; 0x78
 8003e28:	f000 f93a 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003e2c:	20cb      	movs	r0, #203	; 0xcb
 8003e2e:	f000 f92a 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8003e32:	2039      	movs	r0, #57	; 0x39
 8003e34:	f000 f934 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8003e38:	202c      	movs	r0, #44	; 0x2c
 8003e3a:	f000 f931 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e3e:	2000      	movs	r0, #0
 8003e40:	f000 f92e 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003e44:	2034      	movs	r0, #52	; 0x34
 8003e46:	f000 f92b 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8003e4a:	2002      	movs	r0, #2
 8003e4c:	f000 f928 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8003e50:	20f7      	movs	r0, #247	; 0xf7
 8003e52:	f000 f918 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8003e56:	2020      	movs	r0, #32
 8003e58:	f000 f922 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8003e5c:	20ea      	movs	r0, #234	; 0xea
 8003e5e:	f000 f912 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f000 f91c 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f000 f919 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8003e6e:	20b1      	movs	r0, #177	; 0xb1
 8003e70:	f000 f909 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f000 f913 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003e7a:	201b      	movs	r0, #27
 8003e7c:	f000 f910 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003e80:	20b6      	movs	r0, #182	; 0xb6
 8003e82:	f000 f900 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003e86:	200a      	movs	r0, #10
 8003e88:	f000 f90a 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003e8c:	20a2      	movs	r0, #162	; 0xa2
 8003e8e:	f000 f907 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8003e92:	20c0      	movs	r0, #192	; 0xc0
 8003e94:	f000 f8f7 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003e98:	2010      	movs	r0, #16
 8003e9a:	f000 f901 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003e9e:	20c1      	movs	r0, #193	; 0xc1
 8003ea0:	f000 f8f1 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003ea4:	2010      	movs	r0, #16
 8003ea6:	f000 f8fb 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003eaa:	20c5      	movs	r0, #197	; 0xc5
 8003eac:	f000 f8eb 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8003eb0:	2045      	movs	r0, #69	; 0x45
 8003eb2:	f000 f8f5 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003eb6:	2015      	movs	r0, #21
 8003eb8:	f000 f8f2 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003ebc:	20c7      	movs	r0, #199	; 0xc7
 8003ebe:	f000 f8e2 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8003ec2:	2090      	movs	r0, #144	; 0x90
 8003ec4:	f000 f8ec 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003ec8:	2036      	movs	r0, #54	; 0x36
 8003eca:	f000 f8dc 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003ece:	20c8      	movs	r0, #200	; 0xc8
 8003ed0:	f000 f8e6 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003ed4:	20f2      	movs	r0, #242	; 0xf2
 8003ed6:	f000 f8d6 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003eda:	2000      	movs	r0, #0
 8003edc:	f000 f8e0 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8003ee0:	20b0      	movs	r0, #176	; 0xb0
 8003ee2:	f000 f8d0 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003ee6:	20c2      	movs	r0, #194	; 0xc2
 8003ee8:	f000 f8da 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003eec:	20b6      	movs	r0, #182	; 0xb6
 8003eee:	f000 f8ca 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003ef2:	200a      	movs	r0, #10
 8003ef4:	f000 f8d4 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003ef8:	20a7      	movs	r0, #167	; 0xa7
 8003efa:	f000 f8d1 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8003efe:	2027      	movs	r0, #39	; 0x27
 8003f00:	f000 f8ce 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003f04:	2004      	movs	r0, #4
 8003f06:	f000 f8cb 	bl	80040a0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003f0a:	202a      	movs	r0, #42	; 0x2a
 8003f0c:	f000 f8bb 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f000 f8c5 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f000 f8c2 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f000 f8bf 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8003f22:	20ef      	movs	r0, #239	; 0xef
 8003f24:	f000 f8bc 	bl	80040a0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003f28:	202b      	movs	r0, #43	; 0x2b
 8003f2a:	f000 f8ac 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f000 f8b6 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003f34:	2000      	movs	r0, #0
 8003f36:	f000 f8b3 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f000 f8b0 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003f40:	203f      	movs	r0, #63	; 0x3f
 8003f42:	f000 f8ad 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003f46:	20f6      	movs	r0, #246	; 0xf6
 8003f48:	f000 f89d 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	f000 f8a7 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003f52:	2000      	movs	r0, #0
 8003f54:	f000 f8a4 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003f58:	2006      	movs	r0, #6
 8003f5a:	f000 f8a1 	bl	80040a0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8003f5e:	202c      	movs	r0, #44	; 0x2c
 8003f60:	f000 f891 	bl	8004086 <ili9341_WriteReg>
  LCD_Delay(200);
 8003f64:	20c8      	movs	r0, #200	; 0xc8
 8003f66:	f000 ff09 	bl	8004d7c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8003f6a:	2026      	movs	r0, #38	; 0x26
 8003f6c:	f000 f88b 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003f70:	2001      	movs	r0, #1
 8003f72:	f000 f895 	bl	80040a0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8003f76:	20e0      	movs	r0, #224	; 0xe0
 8003f78:	f000 f885 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003f7c:	200f      	movs	r0, #15
 8003f7e:	f000 f88f 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8003f82:	2029      	movs	r0, #41	; 0x29
 8003f84:	f000 f88c 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003f88:	2024      	movs	r0, #36	; 0x24
 8003f8a:	f000 f889 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003f8e:	200c      	movs	r0, #12
 8003f90:	f000 f886 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003f94:	200e      	movs	r0, #14
 8003f96:	f000 f883 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003f9a:	2009      	movs	r0, #9
 8003f9c:	f000 f880 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003fa0:	204e      	movs	r0, #78	; 0x4e
 8003fa2:	f000 f87d 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003fa6:	2078      	movs	r0, #120	; 0x78
 8003fa8:	f000 f87a 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003fac:	203c      	movs	r0, #60	; 0x3c
 8003fae:	f000 f877 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003fb2:	2009      	movs	r0, #9
 8003fb4:	f000 f874 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003fb8:	2013      	movs	r0, #19
 8003fba:	f000 f871 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003fbe:	2005      	movs	r0, #5
 8003fc0:	f000 f86e 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003fc4:	2017      	movs	r0, #23
 8003fc6:	f000 f86b 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003fca:	2011      	movs	r0, #17
 8003fcc:	f000 f868 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f000 f865 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003fd6:	20e1      	movs	r0, #225	; 0xe1
 8003fd8:	f000 f855 	bl	8004086 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f000 f85f 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8003fe2:	2016      	movs	r0, #22
 8003fe4:	f000 f85c 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003fe8:	201b      	movs	r0, #27
 8003fea:	f000 f859 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003fee:	2004      	movs	r0, #4
 8003ff0:	f000 f856 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003ff4:	2011      	movs	r0, #17
 8003ff6:	f000 f853 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003ffa:	2007      	movs	r0, #7
 8003ffc:	f000 f850 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8004000:	2031      	movs	r0, #49	; 0x31
 8004002:	f000 f84d 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8004006:	2033      	movs	r0, #51	; 0x33
 8004008:	f000 f84a 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800400c:	2042      	movs	r0, #66	; 0x42
 800400e:	f000 f847 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8004012:	2005      	movs	r0, #5
 8004014:	f000 f844 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8004018:	200c      	movs	r0, #12
 800401a:	f000 f841 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800401e:	200a      	movs	r0, #10
 8004020:	f000 f83e 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8004024:	2028      	movs	r0, #40	; 0x28
 8004026:	f000 f83b 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800402a:	202f      	movs	r0, #47	; 0x2f
 800402c:	f000 f838 	bl	80040a0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8004030:	200f      	movs	r0, #15
 8004032:	f000 f835 	bl	80040a0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8004036:	2011      	movs	r0, #17
 8004038:	f000 f825 	bl	8004086 <ili9341_WriteReg>
  LCD_Delay(200);
 800403c:	20c8      	movs	r0, #200	; 0xc8
 800403e:	f000 fe9d 	bl	8004d7c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8004042:	2029      	movs	r0, #41	; 0x29
 8004044:	f000 f81f 	bl	8004086 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8004048:	202c      	movs	r0, #44	; 0x2c
 800404a:	f000 f81c 	bl	8004086 <ili9341_WriteReg>
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}

08004052 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8004056:	f000 fda3 	bl	8004ba0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800405a:	2103      	movs	r1, #3
 800405c:	20d3      	movs	r0, #211	; 0xd3
 800405e:	f000 f82c 	bl	80040ba <ili9341_ReadData>
 8004062:	4603      	mov	r3, r0
 8004064:	b29b      	uxth	r3, r3
}
 8004066:	4618      	mov	r0, r3
 8004068:	bd80      	pop	{r7, pc}

0800406a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800406e:	2029      	movs	r0, #41	; 0x29
 8004070:	f000 f809 	bl	8004086 <ili9341_WriteReg>
}
 8004074:	bf00      	nop
 8004076:	bd80      	pop	{r7, pc}

08004078 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800407c:	2028      	movs	r0, #40	; 0x28
 800407e:	f000 f802 	bl	8004086 <ili9341_WriteReg>
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}

08004086 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	4603      	mov	r3, r0
 800408e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fe1e 	bl	8004cd4 <LCD_IO_WriteReg>
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fdef 	bl	8004c90 <LCD_IO_WriteData>
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	460a      	mov	r2, r1
 80040c4:	80fb      	strh	r3, [r7, #6]
 80040c6:	4613      	mov	r3, r2
 80040c8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80040ca:	797a      	ldrb	r2, [r7, #5]
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fe21 	bl	8004d18 <LCD_IO_ReadData>
 80040d6:	4603      	mov	r3, r0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80040e4:	23f0      	movs	r3, #240	; 0xf0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80040f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fa59 	bl	80045c8 <stmpe811_GetInstance>
 8004116:	4603      	mov	r3, r0
 8004118:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2bff      	cmp	r3, #255	; 0xff
 800411e:	d112      	bne.n	8004146 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8004120:	2000      	movs	r0, #0
 8004122:	f000 fa51 	bl	80045c8 <stmpe811_GetInstance>
 8004126:	4603      	mov	r3, r0
 8004128:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800412a:	7bbb      	ldrb	r3, [r7, #14]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d80a      	bhi.n	8004146 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8004130:	7bbb      	ldrb	r3, [r7, #14]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	b2d1      	uxtb	r1, r2
 8004136:	4a06      	ldr	r2, [pc, #24]	; (8004150 <stmpe811_Init+0x4c>)
 8004138:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800413a:	f000 fe2a 	bl	8004d92 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f807 	bl	8004154 <stmpe811_Reset>
    }
  }
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	2000073c 	.word	0x2000073c

08004154 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2202      	movs	r2, #2
 8004164:	2103      	movs	r1, #3
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fe1f 	bl	8004daa <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800416c:	200a      	movs	r0, #10
 800416e:	f000 fe59 	bl	8004e24 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2200      	movs	r2, #0
 8004178:	2103      	movs	r1, #3
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fe15 	bl	8004daa <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8004180:	2002      	movs	r0, #2
 8004182:	f000 fe4f 	bl	8004e24 <IOE_Delay>
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800418e:	b590      	push	{r4, r7, lr}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8004198:	f000 fdfb 	bl	8004d92 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fe14 	bl	8004dd0 <IOE_Read>
 80041a8:	4603      	mov	r3, r0
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fe0b 	bl	8004dd0 <IOE_Read>
 80041ba:	4603      	mov	r3, r0
 80041bc:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80041be:	4323      	orrs	r3, r4
 80041c0:	b21b      	sxth	r3, r3
 80041c2:	b29b      	uxth	r3, r3
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd90      	pop	{r4, r7, pc}

080041cc <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2109      	movs	r1, #9
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fdf5 	bl	8004dd0 <IOE_Read>
 80041e6:	4603      	mov	r3, r0
 80041e8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	2109      	movs	r1, #9
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fdd5 	bl	8004daa <IOE_Write>
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2109      	movs	r1, #9
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fdd7 	bl	8004dd0 <IOE_Read>
 8004222:	4603      	mov	r3, r0
 8004224:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	2109      	movs	r1, #9
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fdb7 	bl	8004daa <IOE_Write>
    
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	460a      	mov	r2, r1
 800424e:	80fb      	strh	r3, [r7, #6]
 8004250:	4613      	mov	r3, r2
 8004252:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	210a      	movs	r1, #10
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fdb6 	bl	8004dd0 <IOE_Read>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	797b      	ldrb	r3, [r7, #5]
 800426c:	4313      	orrs	r3, r2
 800426e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	210a      	movs	r1, #10
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fd96 	bl	8004daa <IOE_Write>
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	4603      	mov	r3, r0
 800428e:	460a      	mov	r2, r1
 8004290:	80fb      	strh	r3, [r7, #6]
 8004292:	4613      	mov	r3, r2
 8004294:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	210a      	movs	r1, #10
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fd95 	bl	8004dd0 <IOE_Read>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80042aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	b25a      	sxtb	r2, r3
 80042b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b6:	4013      	ands	r3, r2
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	210a      	movs	r1, #10
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fd70 	bl	8004daa <IOE_Write>
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	460a      	mov	r2, r1
 80042dc:	80fb      	strh	r3, [r7, #6]
 80042de:	4613      	mov	r3, r2
 80042e0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	210b      	movs	r1, #11
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fd71 	bl	8004dd0 <IOE_Read>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	797b      	ldrb	r3, [r7, #5]
 80042f4:	4013      	ands	r3, r2
 80042f6:	b2db      	uxtb	r3, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	460a      	mov	r2, r1
 800430a:	80fb      	strh	r3, [r7, #6]
 800430c:	4613      	mov	r3, r2
 800430e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	797a      	ldrb	r2, [r7, #5]
 8004316:	210b      	movs	r1, #11
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fd46 	bl	8004daa <IOE_Write>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	6039      	str	r1, [r7, #0]
 8004330:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2117      	movs	r1, #23
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fd47 	bl	8004dd0 <IOE_Read>
 8004342:	4603      	mov	r3, r0
 8004344:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	b25b      	sxtb	r3, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	b25a      	sxtb	r2, r3
 800434e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004352:	4013      	ands	r3, r2
 8004354:	b25b      	sxtb	r3, r3
 8004356:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	2117      	movs	r1, #23
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fd22 	bl	8004daa <IOE_Write>
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	4603      	mov	r3, r0
 8004376:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2104      	movs	r1, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fd26 	bl	8004dd0 <IOE_Read>
 8004384:	4603      	mov	r3, r0
 8004386:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	f023 0304 	bic.w	r3, r3, #4
 800438e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	2104      	movs	r1, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fd06 	bl	8004daa <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	21f0      	movs	r1, #240	; 0xf0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ffbf 	bl	8004326 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	2104      	movs	r1, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fcf6 	bl	8004daa <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2249      	movs	r2, #73	; 0x49
 80043c4:	2120      	movs	r1, #32
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fcef 	bl	8004daa <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80043cc:	2002      	movs	r0, #2
 80043ce:	f000 fd29 	bl	8004e24 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2201      	movs	r2, #1
 80043d8:	2121      	movs	r1, #33	; 0x21
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fce5 	bl	8004daa <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	229a      	movs	r2, #154	; 0x9a
 80043e6:	2141      	movs	r1, #65	; 0x41
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fcde 	bl	8004daa <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2201      	movs	r2, #1
 80043f4:	214a      	movs	r1, #74	; 0x4a
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fcd7 	bl	8004daa <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2201      	movs	r2, #1
 8004402:	214b      	movs	r1, #75	; 0x4b
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fcd0 	bl	8004daa <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2200      	movs	r2, #0
 8004410:	214b      	movs	r1, #75	; 0x4b
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fcc9 	bl	8004daa <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2201      	movs	r2, #1
 800441e:	2156      	movs	r1, #86	; 0x56
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fcc2 	bl	8004daa <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2201      	movs	r2, #1
 800442c:	2158      	movs	r1, #88	; 0x58
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fcbb 	bl	8004daa <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2201      	movs	r2, #1
 800443a:	2140      	movs	r1, #64	; 0x40
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fcb4 	bl	8004daa <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	22ff      	movs	r2, #255	; 0xff
 8004448:	210b      	movs	r1, #11
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fcad 	bl	8004daa <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8004450:	2002      	movs	r0, #2
 8004452:	f000 fce7 	bl	8004e24 <IOE_Delay>
}
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2140      	movs	r1, #64	; 0x40
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fcac 	bl	8004dd0 <IOE_Read>
 8004478:	4603      	mov	r3, r0
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800448a:	7bbb      	ldrb	r3, [r7, #14]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	214c      	movs	r1, #76	; 0x4c
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fc9a 	bl	8004dd0 <IOE_Read>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
 80044a6:	e00d      	b.n	80044c4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2201      	movs	r2, #1
 80044ae:	214b      	movs	r1, #75	; 0x4b
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fc7a 	bl	8004daa <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2200      	movs	r2, #0
 80044bc:	214b      	movs	r1, #75	; 0x4b
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fc73 	bl	8004daa <IOE_Write>
  }
  
  return ret;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80044dc:	89fb      	ldrh	r3, [r7, #14]
 80044de:	b2d8      	uxtb	r0, r3
 80044e0:	f107 0210 	add.w	r2, r7, #16
 80044e4:	2304      	movs	r3, #4
 80044e6:	21d7      	movs	r1, #215	; 0xd7
 80044e8:	f000 fc85 	bl	8004df6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80044ec:	7c3b      	ldrb	r3, [r7, #16]
 80044ee:	061a      	lsls	r2, r3, #24
 80044f0:	7c7b      	ldrb	r3, [r7, #17]
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	431a      	orrs	r2, r3
 80044f6:	7cbb      	ldrb	r3, [r7, #18]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	4313      	orrs	r3, r2
 80044fc:	7cfa      	ldrb	r2, [r7, #19]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	0d1b      	lsrs	r3, r3, #20
 8004506:	b29a      	uxth	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29b      	uxth	r3, r3
 8004512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2201      	movs	r2, #1
 8004522:	214b      	movs	r1, #75	; 0x4b
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fc40 	bl	8004daa <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2200      	movs	r2, #0
 8004530:	214b      	movs	r1, #75	; 0x4b
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fc39 	bl	8004daa <IOE_Write>
}
 8004538:	bf00      	nop
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800454a:	f000 fc28 	bl	8004d9e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	211f      	movs	r1, #31
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fe76 	bl	8004244 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fe36 	bl	80041cc <stmpe811_EnableGlobalIT>
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fe47 	bl	8004208 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	211f      	movs	r1, #31
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fe81 	bl	8004286 <stmpe811_DisableITSource>
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	211f      	movs	r1, #31
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fe99 	bl	80042d2 <stmpe811_ReadGITStatus>
 80045a0:	4603      	mov	r3, r0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	211f      	movs	r1, #31
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fea1 	bl	8004300 <stmpe811_ClearGlobalIT>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	e00b      	b.n	80045f4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <stmpe811_GetInstance+0x40>)
 80045e0:	5cd3      	ldrb	r3, [r2, r3]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d101      	bne.n	80045ee <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	e006      	b.n	80045fc <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	3301      	adds	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d9f0      	bls.n	80045dc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80045fa:	23ff      	movs	r3, #255	; 0xff
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	2000073c 	.word	0x2000073c

0800460c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10e      	bne.n	800463a <BSP_LED_Init+0x2e>
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <BSP_LED_Init+0x9c>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <BSP_LED_Init+0x9c>)
 8004626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800462a:	6313      	str	r3, [r2, #48]	; 0x30
 800462c:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <BSP_LED_Init+0x9c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	e010      	b.n	800465c <BSP_LED_Init+0x50>
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10d      	bne.n	800465c <BSP_LED_Init+0x50>
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <BSP_LED_Init+0x9c>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <BSP_LED_Init+0x9c>)
 800464a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800464e:	6313      	str	r3, [r2, #48]	; 0x30
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <BSP_LED_Init+0x9c>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	4a13      	ldr	r2, [pc, #76]	; (80046ac <BSP_LED_Init+0xa0>)
 8004660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004666:	2301      	movs	r3, #1
 8004668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800466a:	2301      	movs	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800466e:	2302      	movs	r3, #2
 8004670:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <BSP_LED_Init+0xa4>)
 8004676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467a:	f107 0214 	add.w	r2, r7, #20
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f002 fbd9 	bl	8006e38 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <BSP_LED_Init+0xa4>)
 800468a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	4a06      	ldr	r2, [pc, #24]	; (80046ac <BSP_LED_Init+0xa0>)
 8004692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004696:	2200      	movs	r2, #0
 8004698:	4619      	mov	r1, r3
 800469a:	f002 fd79 	bl	8007190 <HAL_GPIO_WritePin>
}
 800469e:	bf00      	nop
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	0800d52c 	.word	0x0800d52c
 80046b0:	200002d8 	.word	0x200002d8

080046b4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <BSP_LED_On+0x2c>)
 80046c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	4a06      	ldr	r2, [pc, #24]	; (80046e4 <BSP_LED_On+0x30>)
 80046ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046ce:	2201      	movs	r2, #1
 80046d0:	4619      	mov	r1, r3
 80046d2:	f002 fd5d 	bl	8007190 <HAL_GPIO_WritePin>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	200002d8 	.word	0x200002d8
 80046e4:	0800d52c 	.word	0x0800d52c

080046e8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	4a07      	ldr	r2, [pc, #28]	; (8004714 <BSP_LED_Off+0x2c>)
 80046f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	4a06      	ldr	r2, [pc, #24]	; (8004718 <BSP_LED_Off+0x30>)
 80046fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004702:	2200      	movs	r2, #0
 8004704:	4619      	mov	r1, r3
 8004706:	f002 fd43 	bl	8007190 <HAL_GPIO_WritePin>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	200002d8 	.word	0x200002d8
 8004718:	0800d52c 	.word	0x0800d52c

0800471c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	4a07      	ldr	r2, [pc, #28]	; (8004748 <BSP_LED_Toggle+0x2c>)
 800472a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	4906      	ldr	r1, [pc, #24]	; (800474c <BSP_LED_Toggle+0x30>)
 8004732:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f002 fd42 	bl	80071c2 <HAL_GPIO_TogglePin>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	200002d8 	.word	0x200002d8
 800474c:	0800d52c 	.word	0x0800d52c

08004750 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a33      	ldr	r2, [pc, #204]	; (800482c <I2Cx_MspInit+0xdc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d15f      	bne.n	8004822 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	4b32      	ldr	r3, [pc, #200]	; (8004830 <I2Cx_MspInit+0xe0>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	4a31      	ldr	r2, [pc, #196]	; (8004830 <I2Cx_MspInit+0xe0>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	6313      	str	r3, [r2, #48]	; 0x30
 8004772:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <I2Cx_MspInit+0xe0>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <I2Cx_MspInit+0xe0>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <I2Cx_MspInit+0xe0>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6313      	str	r3, [r2, #48]	; 0x30
 800478e:	4b28      	ldr	r3, [pc, #160]	; (8004830 <I2Cx_MspInit+0xe0>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800479a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800479e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80047a0:	2312      	movs	r3, #18
 80047a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80047a8:	2302      	movs	r3, #2
 80047aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80047ac:	2304      	movs	r3, #4
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	4619      	mov	r1, r3
 80047b6:	481f      	ldr	r0, [pc, #124]	; (8004834 <I2Cx_MspInit+0xe4>)
 80047b8:	f002 fb3e 	bl	8006e38 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80047bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047c0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80047c2:	f107 0314 	add.w	r3, r7, #20
 80047c6:	4619      	mov	r1, r3
 80047c8:	481b      	ldr	r0, [pc, #108]	; (8004838 <I2Cx_MspInit+0xe8>)
 80047ca:	f002 fb35 	bl	8006e38 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <I2Cx_MspInit+0xe0>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a16      	ldr	r2, [pc, #88]	; (8004830 <I2Cx_MspInit+0xe0>)
 80047d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <I2Cx_MspInit+0xe0>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <I2Cx_MspInit+0xe0>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	4a10      	ldr	r2, [pc, #64]	; (8004830 <I2Cx_MspInit+0xe0>)
 80047f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047f4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80047f6:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <I2Cx_MspInit+0xe0>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4a0d      	ldr	r2, [pc, #52]	; (8004830 <I2Cx_MspInit+0xe0>)
 80047fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004800:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004802:	2200      	movs	r2, #0
 8004804:	210f      	movs	r1, #15
 8004806:	2048      	movs	r0, #72	; 0x48
 8004808:	f001 fe8b 	bl	8006522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800480c:	2048      	movs	r0, #72	; 0x48
 800480e:	f001 fea4 	bl	800655a <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004812:	2200      	movs	r2, #0
 8004814:	210f      	movs	r1, #15
 8004816:	2049      	movs	r0, #73	; 0x49
 8004818:	f001 fe83 	bl	8006522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800481c:	2049      	movs	r0, #73	; 0x49
 800481e:	f001 fe9c 	bl	800655a <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8004822:	bf00      	nop
 8004824:	3728      	adds	r7, #40	; 0x28
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40005c00 	.word	0x40005c00
 8004830:	40023800 	.word	0x40023800
 8004834:	40020000 	.word	0x40020000
 8004838:	40020800 	.word	0x40020800

0800483c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8004840:	4814      	ldr	r0, [pc, #80]	; (8004894 <I2Cx_Init+0x58>)
 8004842:	f003 f981 	bl	8007b48 <HAL_I2C_GetState>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d121      	bne.n	8004890 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <I2Cx_Init+0x58>)
 800484e:	4a12      	ldr	r2, [pc, #72]	; (8004898 <I2Cx_Init+0x5c>)
 8004850:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <I2Cx_Init+0x58>)
 8004854:	4a11      	ldr	r2, [pc, #68]	; (800489c <I2Cx_Init+0x60>)
 8004856:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <I2Cx_Init+0x58>)
 800485a:	2200      	movs	r2, #0
 800485c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800485e:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <I2Cx_Init+0x58>)
 8004860:	2200      	movs	r2, #0
 8004862:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <I2Cx_Init+0x58>)
 8004866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800486a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <I2Cx_Init+0x58>)
 800486e:	2200      	movs	r2, #0
 8004870:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <I2Cx_Init+0x58>)
 8004874:	2200      	movs	r2, #0
 8004876:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <I2Cx_Init+0x58>)
 800487a:	2200      	movs	r2, #0
 800487c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <I2Cx_Init+0x58>)
 8004880:	2200      	movs	r2, #0
 8004882:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8004884:	4803      	ldr	r0, [pc, #12]	; (8004894 <I2Cx_Init+0x58>)
 8004886:	f7ff ff63 	bl	8004750 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800488a:	4802      	ldr	r0, [pc, #8]	; (8004894 <I2Cx_Init+0x58>)
 800488c:	f002 fcb4 	bl	80071f8 <HAL_I2C_Init>
  }
}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200009c4 	.word	0x200009c4
 8004898:	40005c00 	.word	0x40005c00
 800489c:	000186a0 	.word	0x000186a0

080048a0 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <I2Cx_ITConfig+0x58>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <I2Cx_ITConfig+0x58>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6313      	str	r3, [r2, #48]	; 0x30
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <I2Cx_ITConfig+0x58>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80048c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80048c8:	2301      	movs	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <I2Cx_ITConfig+0x5c>)
 80048d2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4809      	ldr	r0, [pc, #36]	; (8004900 <I2Cx_ITConfig+0x60>)
 80048da:	f002 faad 	bl	8006e38 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80048de:	2200      	movs	r2, #0
 80048e0:	210f      	movs	r1, #15
 80048e2:	2028      	movs	r0, #40	; 0x28
 80048e4:	f001 fe1d 	bl	8006522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80048e8:	2028      	movs	r0, #40	; 0x28
 80048ea:	f001 fe36 	bl	800655a <HAL_NVIC_EnableIRQ>
}
 80048ee:	bf00      	nop
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	10210000 	.word	0x10210000
 8004900:	40020000 	.word	0x40020000

08004904 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af04      	add	r7, sp, #16
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
 800490e:	460b      	mov	r3, r1
 8004910:	71bb      	strb	r3, [r7, #6]
 8004912:	4613      	mov	r3, r2
 8004914:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	b299      	uxth	r1, r3
 800491e:	79bb      	ldrb	r3, [r7, #6]
 8004920:	b29a      	uxth	r2, r3
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <I2Cx_WriteData+0x4c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	9302      	str	r3, [sp, #8]
 8004928:	2301      	movs	r3, #1
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	1d7b      	adds	r3, r7, #5
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2301      	movs	r3, #1
 8004932:	4808      	ldr	r0, [pc, #32]	; (8004954 <I2Cx_WriteData+0x50>)
 8004934:	f002 fde8 	bl	8007508 <HAL_I2C_Mem_Write>
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8004942:	f000 f863 	bl	8004a0c <I2Cx_Error>
  }        
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	200002e0 	.word	0x200002e0
 8004954:	200009c4 	.word	0x200009c4

08004958 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af04      	add	r7, sp, #16
 800495e:	4603      	mov	r3, r0
 8004960:	460a      	mov	r2, r1
 8004962:	71fb      	strb	r3, [r7, #7]
 8004964:	4613      	mov	r3, r2
 8004966:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	b299      	uxth	r1, r3
 8004974:	79bb      	ldrb	r3, [r7, #6]
 8004976:	b29a      	uxth	r2, r3
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <I2Cx_ReadData+0x50>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	9302      	str	r3, [sp, #8]
 800497e:	2301      	movs	r3, #1
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	f107 030e 	add.w	r3, r7, #14
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2301      	movs	r3, #1
 800498a:	4808      	ldr	r0, [pc, #32]	; (80049ac <I2Cx_ReadData+0x54>)
 800498c:	f002 feb6 	bl	80076fc <HAL_I2C_Mem_Read>
 8004990:	4603      	mov	r3, r0
 8004992:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800499a:	f000 f837 	bl	8004a0c <I2Cx_Error>
  
  }
  return value;
 800499e:	7bbb      	ldrb	r3, [r7, #14]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200002e0 	.word	0x200002e0
 80049ac:	200009c4 	.word	0x200009c4

080049b0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af04      	add	r7, sp, #16
 80049b6:	603a      	str	r2, [r7, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
 80049be:	460b      	mov	r3, r1
 80049c0:	71bb      	strb	r3, [r7, #6]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	b299      	uxth	r1, r3
 80049ce:	79bb      	ldrb	r3, [r7, #6]
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <I2Cx_ReadBuffer+0x54>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	9302      	str	r3, [sp, #8]
 80049d8:	88bb      	ldrh	r3, [r7, #4]
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2301      	movs	r3, #1
 80049e2:	4809      	ldr	r0, [pc, #36]	; (8004a08 <I2Cx_ReadBuffer+0x58>)
 80049e4:	f002 fe8a 	bl	80076fc <HAL_I2C_Mem_Read>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e002      	b.n	80049fc <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80049f6:	f000 f809 	bl	8004a0c <I2Cx_Error>

    return 1;
 80049fa:	2301      	movs	r3, #1
  }
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	200002e0 	.word	0x200002e0
 8004a08:	200009c4 	.word	0x200009c4

08004a0c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004a10:	4803      	ldr	r0, [pc, #12]	; (8004a20 <I2Cx_Error+0x14>)
 8004a12:	f002 fd35 	bl	8007480 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8004a16:	f7ff ff11 	bl	800483c <I2Cx_Init>
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	200009c4 	.word	0x200009c4

08004a24 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004a28:	4819      	ldr	r0, [pc, #100]	; (8004a90 <SPIx_Init+0x6c>)
 8004a2a:	f005 faf6 	bl	800a01a <HAL_SPI_GetState>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d12b      	bne.n	8004a8c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004a34:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <SPIx_Init+0x6c>)
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <SPIx_Init+0x70>)
 8004a38:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <SPIx_Init+0x6c>)
 8004a3c:	2218      	movs	r2, #24
 8004a3e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <SPIx_Init+0x6c>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <SPIx_Init+0x6c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <SPIx_Init+0x6c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8004a52:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <SPIx_Init+0x6c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <SPIx_Init+0x6c>)
 8004a5a:	2207      	movs	r2, #7
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <SPIx_Init+0x6c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <SPIx_Init+0x6c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8004a6a:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <SPIx_Init+0x6c>)
 8004a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a70:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <SPIx_Init+0x6c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <SPIx_Init+0x6c>)
 8004a7a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a7e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8004a80:	4803      	ldr	r0, [pc, #12]	; (8004a90 <SPIx_Init+0x6c>)
 8004a82:	f000 f853 	bl	8004b2c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004a86:	4802      	ldr	r0, [pc, #8]	; (8004a90 <SPIx_Init+0x6c>)
 8004a88:	f004 fd3d 	bl	8009506 <HAL_SPI_Init>
  } 
}
 8004a8c:	bf00      	nop
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000740 	.word	0x20000740
 8004a94:	40015000 	.word	0x40015000

08004a98 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <SPIx_Read+0x38>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f107 0108 	add.w	r1, r7, #8
 8004ab2:	4808      	ldr	r0, [pc, #32]	; (8004ad4 <SPIx_Read+0x3c>)
 8004ab4:	f004 ff24 	bl	8009900 <HAL_SPI_Receive>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8004ac2:	f000 f827 	bl	8004b14 <SPIx_Error>
  }
  
  return readvalue;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200002e4 	.word	0x200002e4
 8004ad4:	20000740 	.word	0x20000740

08004ad8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <SPIx_Write+0x34>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1db9      	adds	r1, r7, #6
 8004aec:	2201      	movs	r2, #1
 8004aee:	4808      	ldr	r0, [pc, #32]	; (8004b10 <SPIx_Write+0x38>)
 8004af0:	f004 fdb0 	bl	8009654 <HAL_SPI_Transmit>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8004afe:	f000 f809 	bl	8004b14 <SPIx_Error>
  }
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200002e4 	.word	0x200002e4
 8004b10:	20000740 	.word	0x20000740

08004b14 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004b18:	4803      	ldr	r0, [pc, #12]	; (8004b28 <SPIx_Error+0x14>)
 8004b1a:	f004 fd5f 	bl	80095dc <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8004b1e:	f7ff ff81 	bl	8004a24 <SPIx_Init>
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000740 	.word	0x20000740

08004b2c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <SPIx_MspInit+0x6c>)
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <SPIx_MspInit+0x6c>)
 8004b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b42:	6453      	str	r3, [r2, #68]	; 0x44
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <SPIx_MspInit+0x6c>)
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <SPIx_MspInit+0x6c>)
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	4a0f      	ldr	r2, [pc, #60]	; (8004b98 <SPIx_MspInit+0x6c>)
 8004b5a:	f043 0320 	orr.w	r3, r3, #32
 8004b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <SPIx_MspInit+0x6c>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004b6c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8004b72:	2302      	movs	r3, #2
 8004b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8004b76:	2302      	movs	r3, #2
 8004b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004b7e:	2305      	movs	r3, #5
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	4619      	mov	r1, r3
 8004b88:	4804      	ldr	r0, [pc, #16]	; (8004b9c <SPIx_MspInit+0x70>)
 8004b8a:	f002 f955 	bl	8006e38 <HAL_GPIO_Init>
}
 8004b8e:	bf00      	nop
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40021400 	.word	0x40021400

08004ba0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8004ba6:	4b36      	ldr	r3, [pc, #216]	; (8004c80 <LCD_IO_Init+0xe0>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d164      	bne.n	8004c78 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8004bae:	4b34      	ldr	r3, [pc, #208]	; (8004c80 <LCD_IO_Init+0xe0>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	4a31      	ldr	r2, [pc, #196]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004bbe:	f043 0308 	orr.w	r3, r3, #8
 8004bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc4:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8004bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004bde:	2302      	movs	r3, #2
 8004be0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8004be2:	f107 030c 	add.w	r3, r7, #12
 8004be6:	4619      	mov	r1, r3
 8004be8:	4827      	ldr	r0, [pc, #156]	; (8004c88 <LCD_IO_Init+0xe8>)
 8004bea:	f002 f925 	bl	8006e38 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004bf8:	f043 0308 	orr.w	r3, r3, #8
 8004bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8004c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004c10:	2301      	movs	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	4619      	mov	r1, r3
 8004c22:	4819      	ldr	r0, [pc, #100]	; (8004c88 <LCD_IO_Init+0xe8>)
 8004c24:	f002 f908 	bl	8006e38 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8004c28:	2300      	movs	r3, #0
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	6313      	str	r3, [r2, #48]	; 0x30
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <LCD_IO_Init+0xe4>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8004c44:	2304      	movs	r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004c50:	2302      	movs	r3, #2
 8004c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	4619      	mov	r1, r3
 8004c5a:	480c      	ldr	r0, [pc, #48]	; (8004c8c <LCD_IO_Init+0xec>)
 8004c5c:	f002 f8ec 	bl	8006e38 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8004c60:	2200      	movs	r2, #0
 8004c62:	2104      	movs	r1, #4
 8004c64:	4809      	ldr	r0, [pc, #36]	; (8004c8c <LCD_IO_Init+0xec>)
 8004c66:	f002 fa93 	bl	8007190 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	2104      	movs	r1, #4
 8004c6e:	4807      	ldr	r0, [pc, #28]	; (8004c8c <LCD_IO_Init+0xec>)
 8004c70:	f002 fa8e 	bl	8007190 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8004c74:	f7ff fed6 	bl	8004a24 <SPIx_Init>
  }
}
 8004c78:	bf00      	nop
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000798 	.word	0x20000798
 8004c84:	40023800 	.word	0x40023800
 8004c88:	40020c00 	.word	0x40020c00
 8004c8c:	40020800 	.word	0x40020800

08004c90 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ca0:	480a      	ldr	r0, [pc, #40]	; (8004ccc <LCD_IO_WriteData+0x3c>)
 8004ca2:	f002 fa75 	bl	8007190 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2104      	movs	r1, #4
 8004caa:	4809      	ldr	r0, [pc, #36]	; (8004cd0 <LCD_IO_WriteData+0x40>)
 8004cac:	f002 fa70 	bl	8007190 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff10 	bl	8004ad8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004cb8:	2201      	movs	r2, #1
 8004cba:	2104      	movs	r1, #4
 8004cbc:	4804      	ldr	r0, [pc, #16]	; (8004cd0 <LCD_IO_WriteData+0x40>)
 8004cbe:	f002 fa67 	bl	8007190 <HAL_GPIO_WritePin>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40020c00 	.word	0x40020c00
 8004cd0:	40020800 	.word	0x40020800

08004cd4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ce4:	480a      	ldr	r0, [pc, #40]	; (8004d10 <LCD_IO_WriteReg+0x3c>)
 8004ce6:	f002 fa53 	bl	8007190 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8004cea:	2200      	movs	r2, #0
 8004cec:	2104      	movs	r1, #4
 8004cee:	4809      	ldr	r0, [pc, #36]	; (8004d14 <LCD_IO_WriteReg+0x40>)
 8004cf0:	f002 fa4e 	bl	8007190 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff feed 	bl	8004ad8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2104      	movs	r1, #4
 8004d02:	4804      	ldr	r0, [pc, #16]	; (8004d14 <LCD_IO_WriteReg+0x40>)
 8004d04:	f002 fa44 	bl	8007190 <HAL_GPIO_WritePin>
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40020c00 	.word	0x40020c00
 8004d14:	40020800 	.word	0x40020800

08004d18 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	460a      	mov	r2, r1
 8004d22:	80fb      	strh	r3, [r7, #6]
 8004d24:	4613      	mov	r3, r2
 8004d26:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2104      	movs	r1, #4
 8004d30:	4810      	ldr	r0, [pc, #64]	; (8004d74 <LCD_IO_ReadData+0x5c>)
 8004d32:	f002 fa2d 	bl	8007190 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004d36:	2200      	movs	r2, #0
 8004d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d3c:	480e      	ldr	r0, [pc, #56]	; (8004d78 <LCD_IO_ReadData+0x60>)
 8004d3e:	f002 fa27 	bl	8007190 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fec7 	bl	8004ad8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8004d4a:	797b      	ldrb	r3, [r7, #5]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fea3 	bl	8004a98 <SPIx_Read>
 8004d52:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004d54:	2201      	movs	r2, #1
 8004d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d5a:	4807      	ldr	r0, [pc, #28]	; (8004d78 <LCD_IO_ReadData+0x60>)
 8004d5c:	f002 fa18 	bl	8007190 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004d60:	2201      	movs	r2, #1
 8004d62:	2104      	movs	r1, #4
 8004d64:	4803      	ldr	r0, [pc, #12]	; (8004d74 <LCD_IO_ReadData+0x5c>)
 8004d66:	f002 fa13 	bl	8007190 <HAL_GPIO_WritePin>
  
  return readvalue;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40020800 	.word	0x40020800
 8004d78:	40020c00 	.word	0x40020c00

08004d7c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 facd 	bl	8006324 <HAL_Delay>
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8004d96:	f7ff fd51 	bl	800483c <I2Cx_Init>
}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8004da2:	f7ff fd7d 	bl	80048a0 <I2Cx_ITConfig>
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}

08004daa <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	4603      	mov	r3, r0
 8004db2:	71fb      	strb	r3, [r7, #7]
 8004db4:	460b      	mov	r3, r1
 8004db6:	71bb      	strb	r3, [r7, #6]
 8004db8:	4613      	mov	r3, r2
 8004dba:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8004dbc:	797a      	ldrb	r2, [r7, #5]
 8004dbe:	79b9      	ldrb	r1, [r7, #6]
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fd9e 	bl	8004904 <I2Cx_WriteData>
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	460a      	mov	r2, r1
 8004dda:	71fb      	strb	r3, [r7, #7]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8004de0:	79ba      	ldrb	r2, [r7, #6]
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fdb6 	bl	8004958 <I2Cx_ReadData>
 8004dec:	4603      	mov	r3, r0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	603a      	str	r2, [r7, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4603      	mov	r3, r0
 8004e02:	71fb      	strb	r3, [r7, #7]
 8004e04:	460b      	mov	r3, r1
 8004e06:	71bb      	strb	r3, [r7, #6]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8004e0c:	88bb      	ldrh	r3, [r7, #4]
 8004e0e:	79b9      	ldrb	r1, [r7, #6]
 8004e10:	79f8      	ldrb	r0, [r7, #7]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	f7ff fdcc 	bl	80049b0 <I2Cx_ReadBuffer>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	b29b      	uxth	r3, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 fa79 	bl	8006324 <HAL_Delay>
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e42:	4a2e      	ldr	r2, [pc, #184]	; (8004efc <BSP_LCD_Init+0xc0>)
 8004e44:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8004e46:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e48:	2209      	movs	r2, #9
 8004e4a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8004e4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e54:	221d      	movs	r2, #29
 8004e56:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8004e58:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8004e5e:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e60:	f240 120d 	movw	r2, #269	; 0x10d
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e68:	f240 1243 	movw	r2, #323	; 0x143
 8004e6c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8004e6e:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e70:	f240 1217 	movw	r2, #279	; 0x117
 8004e74:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e78:	f240 1247 	movw	r2, #327	; 0x147
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <BSP_LCD_Init+0xc4>)
 8004e98:	2208      	movs	r2, #8
 8004e9a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004e9c:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <BSP_LCD_Init+0xc4>)
 8004e9e:	22c0      	movs	r2, #192	; 0xc0
 8004ea0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8004ea2:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <BSP_LCD_Init+0xc4>)
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <BSP_LCD_Init+0xc4>)
 8004eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8004eb0:	4813      	ldr	r0, [pc, #76]	; (8004f00 <BSP_LCD_Init+0xc4>)
 8004eb2:	f004 f8e1 	bl	8009078 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8004ece:	f000 fcf1 	bl	80058b4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8004ed2:	4809      	ldr	r0, [pc, #36]	; (8004ef8 <BSP_LCD_Init+0xbc>)
 8004ed4:	f003 f99e 	bl	8008214 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <BSP_LCD_Init+0xc8>)
 8004eda:	4a0b      	ldr	r2, [pc, #44]	; (8004f08 <BSP_LCD_Init+0xcc>)
 8004edc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <BSP_LCD_Init+0xc8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8004ee6:	f000 fed5 	bl	8005c94 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004eea:	4808      	ldr	r0, [pc, #32]	; (8004f0c <BSP_LCD_Init+0xd0>)
 8004eec:	f000 f8ce 	bl	800508c <BSP_LCD_SetFont>

  return LCD_OK;
 8004ef0:	2300      	movs	r3, #0
}  
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000a18 	.word	0x20000a18
 8004efc:	40016800 	.word	0x40016800
 8004f00:	200007dc 	.word	0x200007dc
 8004f04:	20000ac0 	.word	0x20000ac0
 8004f08:	20000278 	.word	0x20000278
 8004f0c:	200002e8 	.word	0x200002e8

08004f10 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <BSP_LCD_GetXSize+0x14>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	4798      	blx	r3
 8004f1c:	4603      	mov	r3, r0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000ac0 	.word	0x20000ac0

08004f28 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <BSP_LCD_GetYSize+0x14>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	4798      	blx	r3
 8004f34:	4603      	mov	r3, r0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000ac0 	.word	0x20000ac0

08004f40 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b090      	sub	sp, #64	; 0x40
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	6039      	str	r1, [r7, #0]
 8004f4a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004f50:	f7ff ffde 	bl	8004f10 <BSP_LCD_GetXSize>
 8004f54:	4603      	mov	r3, r0
 8004f56:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004f5c:	f7ff ffe4 	bl	8004f28 <BSP_LCD_GetYSize>
 8004f60:	4603      	mov	r3, r0
 8004f62:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8004f6c:	23ff      	movs	r3, #255	; 0xff
 8004f6e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004f86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004f8c:	2307      	movs	r3, #7
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004f90:	f7ff ffbe 	bl	8004f10 <BSP_LCD_GetXSize>
 8004f94:	4603      	mov	r3, r0
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004f98:	f7ff ffc6 	bl	8004f28 <BSP_LCD_GetYSize>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	f107 030c 	add.w	r3, r7, #12
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4814      	ldr	r0, [pc, #80]	; (8004ffc <BSP_LCD_LayerDefaultInit+0xbc>)
 8004faa:	f003 fa0d 	bl	80083c8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	4913      	ldr	r1, [pc, #76]	; (8005000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	490e      	ldr	r1, [pc, #56]	; (8005000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <BSP_LCD_LayerDefaultInit+0xc4>)
 8004fd6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004fd8:	88fa      	ldrh	r2, [r7, #6]
 8004fda:	4909      	ldr	r1, [pc, #36]	; (8005000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004fea:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8004fec:	4803      	ldr	r0, [pc, #12]	; (8004ffc <BSP_LCD_LayerDefaultInit+0xbc>)
 8004fee:	f003 fa29 	bl	8008444 <HAL_LTDC_EnableDither>
}
 8004ff2:	bf00      	nop
 8004ff4:	3740      	adds	r7, #64	; 0x40
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000a18 	.word	0x20000a18
 8005000:	20000810 	.word	0x20000810
 8005004:	200002e8 	.word	0x200002e8

08005008 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <BSP_LCD_SelectLayer+0x1c>)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6013      	str	r3, [r2, #0]
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	2000080c 	.word	0x2000080c

08005028 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <BSP_LCD_SetTextColor+0x28>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4907      	ldr	r1, [pc, #28]	; (8005054 <BSP_LCD_SetTextColor+0x2c>)
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	2000080c 	.word	0x2000080c
 8005054:	20000810 	.word	0x20000810

08005058 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <BSP_LCD_SetBackColor+0x2c>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4908      	ldr	r1, [pc, #32]	; (8005088 <BSP_LCD_SetBackColor+0x30>)
 8005066:	4613      	mov	r3, r2
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	3304      	adds	r3, #4
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000080c 	.word	0x2000080c
 8005088:	20000810 	.word	0x20000810

0800508c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <BSP_LCD_SetFont+0x2c>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4908      	ldr	r1, [pc, #32]	; (80050bc <BSP_LCD_SetFont+0x30>)
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3308      	adds	r3, #8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	2000080c 	.word	0x2000080c
 80050bc:	20000810 	.word	0x20000810

080050c0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80050c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <BSP_LCD_Clear+0x48>)
 80050ca:	681c      	ldr	r4, [r3, #0]
 80050cc:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <BSP_LCD_Clear+0x48>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0e      	ldr	r2, [pc, #56]	; (800510c <BSP_LCD_Clear+0x4c>)
 80050d2:	2134      	movs	r1, #52	; 0x34
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	335c      	adds	r3, #92	; 0x5c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	461e      	mov	r6, r3
 80050e0:	f7ff ff16 	bl	8004f10 <BSP_LCD_GetXSize>
 80050e4:	4605      	mov	r5, r0
 80050e6:	f7ff ff1f 	bl	8004f28 <BSP_LCD_GetYSize>
 80050ea:	4602      	mov	r2, r0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	462a      	mov	r2, r5
 80050f8:	4631      	mov	r1, r6
 80050fa:	4620      	mov	r0, r4
 80050fc:	f000 fd92 	bl	8005c24 <FillBuffer>
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005108:	2000080c 	.word	0x2000080c
 800510c:	20000a18 	.word	0x20000a18

08005110 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	80fb      	strh	r3, [r7, #6]
 800511a:	460b      	mov	r3, r1
 800511c:	80bb      	strh	r3, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005122:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <BSP_LCD_DisplayChar+0x80>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	491b      	ldr	r1, [pc, #108]	; (8005194 <BSP_LCD_DisplayChar+0x84>)
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	3308      	adds	r3, #8
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800513e:	4b14      	ldr	r3, [pc, #80]	; (8005190 <BSP_LCD_DisplayChar+0x80>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4c14      	ldr	r4, [pc, #80]	; (8005194 <BSP_LCD_DisplayChar+0x84>)
 8005144:	4613      	mov	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4423      	add	r3, r4
 800514e:	3308      	adds	r3, #8
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005154:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005158:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <BSP_LCD_DisplayChar+0x80>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4c0d      	ldr	r4, [pc, #52]	; (8005194 <BSP_LCD_DisplayChar+0x84>)
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4423      	add	r3, r4
 8005168:	3308      	adds	r3, #8
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	889b      	ldrh	r3, [r3, #4]
 800516e:	3307      	adds	r3, #7
 8005170:	2b00      	cmp	r3, #0
 8005172:	da00      	bge.n	8005176 <BSP_LCD_DisplayChar+0x66>
 8005174:	3307      	adds	r3, #7
 8005176:	10db      	asrs	r3, r3, #3
 8005178:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800517c:	18ca      	adds	r2, r1, r3
 800517e:	88b9      	ldrh	r1, [r7, #4]
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fc94 	bl	8005ab0 <DrawChar>
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	2000080c 	.word	0x2000080c
 8005194:	20000810 	.word	0x20000810

08005198 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8005198:	b5b0      	push	{r4, r5, r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	60ba      	str	r2, [r7, #8]
 80051a0:	461a      	mov	r2, r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	81fb      	strh	r3, [r7, #14]
 80051a6:	460b      	mov	r3, r1
 80051a8:	81bb      	strh	r3, [r7, #12]
 80051aa:	4613      	mov	r3, r2
 80051ac:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80051ae:	2301      	movs	r3, #1
 80051b0:	83fb      	strh	r3, [r7, #30]
 80051b2:	2300      	movs	r3, #0
 80051b4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80051b6:	2300      	movs	r3, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80051c2:	e002      	b.n	80051ca <BSP_LCD_DisplayStringAt+0x32>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	617a      	str	r2, [r7, #20]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f6      	bne.n	80051c4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80051d6:	f7ff fe9b 	bl	8004f10 <BSP_LCD_GetXSize>
 80051da:	4601      	mov	r1, r0
 80051dc:	4b4b      	ldr	r3, [pc, #300]	; (800530c <BSP_LCD_DisplayStringAt+0x174>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	484b      	ldr	r0, [pc, #300]	; (8005310 <BSP_LCD_DisplayStringAt+0x178>)
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4403      	add	r3, r0
 80051ec:	3308      	adds	r3, #8
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	889b      	ldrh	r3, [r3, #4]
 80051f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80051f6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d01c      	beq.n	8005238 <BSP_LCD_DisplayStringAt+0xa0>
 80051fe:	2b03      	cmp	r3, #3
 8005200:	dc33      	bgt.n	800526a <BSP_LCD_DisplayStringAt+0xd2>
 8005202:	2b01      	cmp	r3, #1
 8005204:	d002      	beq.n	800520c <BSP_LCD_DisplayStringAt+0x74>
 8005206:	2b02      	cmp	r3, #2
 8005208:	d019      	beq.n	800523e <BSP_LCD_DisplayStringAt+0xa6>
 800520a:	e02e      	b.n	800526a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	1ad1      	subs	r1, r2, r3
 8005212:	4b3e      	ldr	r3, [pc, #248]	; (800530c <BSP_LCD_DisplayStringAt+0x174>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	483e      	ldr	r0, [pc, #248]	; (8005310 <BSP_LCD_DisplayStringAt+0x178>)
 8005218:	4613      	mov	r3, r2
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4403      	add	r3, r0
 8005222:	3308      	adds	r3, #8
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	889b      	ldrh	r3, [r3, #4]
 8005228:	fb03 f301 	mul.w	r3, r3, r1
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	89fb      	ldrh	r3, [r7, #14]
 8005232:	4413      	add	r3, r2
 8005234:	83fb      	strh	r3, [r7, #30]
      break;
 8005236:	e01b      	b.n	8005270 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8005238:	89fb      	ldrh	r3, [r7, #14]
 800523a:	83fb      	strh	r3, [r7, #30]
      break;
 800523c:	e018      	b.n	8005270 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	b299      	uxth	r1, r3
 8005246:	4b31      	ldr	r3, [pc, #196]	; (800530c <BSP_LCD_DisplayStringAt+0x174>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4831      	ldr	r0, [pc, #196]	; (8005310 <BSP_LCD_DisplayStringAt+0x178>)
 800524c:	4613      	mov	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4403      	add	r3, r0
 8005256:	3308      	adds	r3, #8
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	889b      	ldrh	r3, [r3, #4]
 800525c:	fb11 f303 	smulbb	r3, r1, r3
 8005260:	b29a      	uxth	r2, r3
 8005262:	89fb      	ldrh	r3, [r7, #14]
 8005264:	4413      	add	r3, r2
 8005266:	83fb      	strh	r3, [r7, #30]
      break;
 8005268:	e002      	b.n	8005270 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800526a:	89fb      	ldrh	r3, [r7, #14]
 800526c:	83fb      	strh	r3, [r7, #30]
      break;
 800526e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005270:	e01a      	b.n	80052a8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	89b9      	ldrh	r1, [r7, #12]
 8005278:	8bfb      	ldrh	r3, [r7, #30]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff ff48 	bl	8005110 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8005280:	4b22      	ldr	r3, [pc, #136]	; (800530c <BSP_LCD_DisplayStringAt+0x174>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4922      	ldr	r1, [pc, #136]	; (8005310 <BSP_LCD_DisplayStringAt+0x178>)
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	3308      	adds	r3, #8
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	889a      	ldrh	r2, [r3, #4]
 8005296:	8bfb      	ldrh	r3, [r7, #30]
 8005298:	4413      	add	r3, r2
 800529a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	3301      	adds	r3, #1
 80052a0:	60bb      	str	r3, [r7, #8]
    i++;
 80052a2:	8bbb      	ldrh	r3, [r7, #28]
 80052a4:	3301      	adds	r3, #1
 80052a6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2dc      	uxtb	r4, r3
 80052b6:	f7ff fe2b 	bl	8004f10 <BSP_LCD_GetXSize>
 80052ba:	8bb9      	ldrh	r1, [r7, #28]
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <BSP_LCD_DisplayStringAt+0x174>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4d13      	ldr	r5, [pc, #76]	; (8005310 <BSP_LCD_DisplayStringAt+0x178>)
 80052c2:	4613      	mov	r3, r2
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	442b      	add	r3, r5
 80052cc:	3308      	adds	r3, #8
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	889b      	ldrh	r3, [r3, #4]
 80052d2:	fb03 f301 	mul.w	r3, r3, r1
 80052d6:	1ac3      	subs	r3, r0, r3
 80052d8:	b299      	uxth	r1, r3
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <BSP_LCD_DisplayStringAt+0x174>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	480c      	ldr	r0, [pc, #48]	; (8005310 <BSP_LCD_DisplayStringAt+0x178>)
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4403      	add	r3, r0
 80052ea:	3308      	adds	r3, #8
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	889b      	ldrh	r3, [r3, #4]
 80052f0:	4299      	cmp	r1, r3
 80052f2:	bf2c      	ite	cs
 80052f4:	2301      	movcs	r3, #1
 80052f6:	2300      	movcc	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	4023      	ands	r3, r4
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1b7      	bne.n	8005272 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bdb0      	pop	{r4, r5, r7, pc}
 800530c:	2000080c 	.word	0x2000080c
 8005310:	20000810 	.word	0x20000810

08005314 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005314:	b5b0      	push	{r4, r5, r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af02      	add	r7, sp, #8
 800531a:	4603      	mov	r3, r0
 800531c:	80fb      	strh	r3, [r7, #6]
 800531e:	460b      	mov	r3, r1
 8005320:	80bb      	strh	r3, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800532a:	4b16      	ldr	r3, [pc, #88]	; (8005384 <BSP_LCD_DrawHLine+0x70>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a16      	ldr	r2, [pc, #88]	; (8005388 <BSP_LCD_DrawHLine+0x74>)
 8005330:	2134      	movs	r1, #52	; 0x34
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	335c      	adds	r3, #92	; 0x5c
 800533a:	681c      	ldr	r4, [r3, #0]
 800533c:	f7ff fde8 	bl	8004f10 <BSP_LCD_GetXSize>
 8005340:	4602      	mov	r2, r0
 8005342:	88bb      	ldrh	r3, [r7, #4]
 8005344:	fb03 f202 	mul.w	r2, r3, r2
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4423      	add	r3, r4
 8005350:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <BSP_LCD_DrawHLine+0x70>)
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	887c      	ldrh	r4, [r7, #2]
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <BSP_LCD_DrawHLine+0x70>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4d0b      	ldr	r5, [pc, #44]	; (800538c <BSP_LCD_DrawHLine+0x78>)
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	442b      	add	r3, r5
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	2300      	movs	r3, #0
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2301      	movs	r3, #1
 8005374:	4622      	mov	r2, r4
 8005376:	f000 fc55 	bl	8005c24 <FillBuffer>
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bdb0      	pop	{r4, r5, r7, pc}
 8005382:	bf00      	nop
 8005384:	2000080c 	.word	0x2000080c
 8005388:	20000a18 	.word	0x20000a18
 800538c:	20000810 	.word	0x20000810

08005390 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005392:	b087      	sub	sp, #28
 8005394:	af02      	add	r7, sp, #8
 8005396:	4603      	mov	r3, r0
 8005398:	80fb      	strh	r3, [r7, #6]
 800539a:	460b      	mov	r3, r1
 800539c:	80bb      	strh	r3, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <BSP_LCD_DrawVLine+0x78>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <BSP_LCD_DrawVLine+0x7c>)
 80053ac:	2134      	movs	r1, #52	; 0x34
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	335c      	adds	r3, #92	; 0x5c
 80053b6:	681c      	ldr	r4, [r3, #0]
 80053b8:	f7ff fdaa 	bl	8004f10 <BSP_LCD_GetXSize>
 80053bc:	4602      	mov	r2, r0
 80053be:	88bb      	ldrh	r3, [r7, #4]
 80053c0:	fb03 f202 	mul.w	r2, r3, r2
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4423      	add	r3, r4
 80053cc:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <BSP_LCD_DrawVLine+0x78>)
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	68fd      	ldr	r5, [r7, #12]
 80053d4:	887e      	ldrh	r6, [r7, #2]
 80053d6:	f7ff fd9b 	bl	8004f10 <BSP_LCD_GetXSize>
 80053da:	4603      	mov	r3, r0
 80053dc:	1e59      	subs	r1, r3, #1
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <BSP_LCD_DrawVLine+0x78>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	480b      	ldr	r0, [pc, #44]	; (8005410 <BSP_LCD_DrawVLine+0x80>)
 80053e4:	4613      	mov	r3, r2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4403      	add	r3, r0
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	9100      	str	r1, [sp, #0]
 80053f4:	4633      	mov	r3, r6
 80053f6:	2201      	movs	r2, #1
 80053f8:	4629      	mov	r1, r5
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 fc12 	bl	8005c24 <FillBuffer>
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005408:	2000080c 	.word	0x2000080c
 800540c:	20000a18 	.word	0x20000a18
 8005410:	20000810 	.word	0x20000810

08005414 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b08b      	sub	sp, #44	; 0x2c
 8005418:	af00      	add	r7, sp, #0
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	4623      	mov	r3, r4
 8005424:	80fb      	strh	r3, [r7, #6]
 8005426:	4603      	mov	r3, r0
 8005428:	80bb      	strh	r3, [r7, #4]
 800542a:	460b      	mov	r3, r1
 800542c:	807b      	strh	r3, [r7, #2]
 800542e:	4613      	mov	r3, r2
 8005430:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8005432:	2300      	movs	r3, #0
 8005434:	823b      	strh	r3, [r7, #16]
 8005436:	2300      	movs	r3, #0
 8005438:	81fb      	strh	r3, [r7, #14]
 800543a:	2300      	movs	r3, #0
 800543c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800543e:	2300      	movs	r3, #0
 8005440:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005442:	2300      	movs	r3, #0
 8005444:	847b      	strh	r3, [r7, #34]	; 0x22
 8005446:	2300      	movs	r3, #0
 8005448:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800544a:	2300      	movs	r3, #0
 800544c:	83fb      	strh	r3, [r7, #30]
 800544e:	2300      	movs	r3, #0
 8005450:	83bb      	strh	r3, [r7, #28]
 8005452:	2300      	movs	r3, #0
 8005454:	837b      	strh	r3, [r7, #26]
 8005456:	2300      	movs	r3, #0
 8005458:	833b      	strh	r3, [r7, #24]
 800545a:	2300      	movs	r3, #0
 800545c:	82fb      	strh	r3, [r7, #22]
 800545e:	2300      	movs	r3, #0
 8005460:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8005466:	887a      	ldrh	r2, [r7, #2]
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	bfb8      	it	lt
 8005470:	425b      	neglt	r3, r3
 8005472:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8005474:	883a      	ldrh	r2, [r7, #0]
 8005476:	88bb      	ldrh	r3, [r7, #4]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	bfb8      	it	lt
 800547e:	425b      	neglt	r3, r3
 8005480:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8005486:	88bb      	ldrh	r3, [r7, #4]
 8005488:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	429a      	cmp	r2, r3
 8005490:	d304      	bcc.n	800549c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8005496:	2301      	movs	r3, #1
 8005498:	843b      	strh	r3, [r7, #32]
 800549a:	e005      	b.n	80054a8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800549c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054a0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80054a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054a6:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80054a8:	883a      	ldrh	r2, [r7, #0]
 80054aa:	88bb      	ldrh	r3, [r7, #4]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d304      	bcc.n	80054ba <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80054b0:	2301      	movs	r3, #1
 80054b2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80054b4:	2301      	movs	r3, #1
 80054b6:	83bb      	strh	r3, [r7, #28]
 80054b8:	e005      	b.n	80054c6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80054ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054be:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80054c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054c4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80054c6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80054ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	db10      	blt.n	80054f4 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80054d2:	2300      	movs	r3, #0
 80054d4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80054d6:	2300      	movs	r3, #0
 80054d8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80054da:	8a3b      	ldrh	r3, [r7, #16]
 80054dc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80054de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80054e2:	0fda      	lsrs	r2, r3, #31
 80054e4:	4413      	add	r3, r2
 80054e6:	105b      	asrs	r3, r3, #1
 80054e8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80054ea:	89fb      	ldrh	r3, [r7, #14]
 80054ec:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80054ee:	8a3b      	ldrh	r3, [r7, #16]
 80054f0:	82bb      	strh	r3, [r7, #20]
 80054f2:	e00f      	b.n	8005514 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80054f4:	2300      	movs	r3, #0
 80054f6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80054f8:	2300      	movs	r3, #0
 80054fa:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8005500:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005504:	0fda      	lsrs	r2, r3, #31
 8005506:	4413      	add	r3, r2
 8005508:	105b      	asrs	r3, r3, #1
 800550a:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 800550c:	8a3b      	ldrh	r3, [r7, #16]
 800550e:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8005510:	89fb      	ldrh	r3, [r7, #14]
 8005512:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8005514:	2300      	movs	r3, #0
 8005516:	827b      	strh	r3, [r7, #18]
 8005518:	e037      	b.n	800558a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800551a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800551c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800551e:	4b20      	ldr	r3, [pc, #128]	; (80055a0 <BSP_LCD_DrawLine+0x18c>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4c20      	ldr	r4, [pc, #128]	; (80055a4 <BSP_LCD_DrawLine+0x190>)
 8005524:	4613      	mov	r3, r2
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4423      	add	r3, r4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	f000 fa95 	bl	8005a60 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8005536:	8b3a      	ldrh	r2, [r7, #24]
 8005538:	8afb      	ldrh	r3, [r7, #22]
 800553a:	4413      	add	r3, r2
 800553c:	b29b      	uxth	r3, r3
 800553e:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8005540:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005544:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005548:	429a      	cmp	r2, r3
 800554a:	db0e      	blt.n	800556a <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 800554c:	8b3a      	ldrh	r2, [r7, #24]
 800554e:	8b7b      	ldrh	r3, [r7, #26]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	b29b      	uxth	r3, r3
 8005554:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8005556:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005558:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800555a:	4413      	add	r3, r2
 800555c:	b29b      	uxth	r3, r3
 800555e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8005560:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005562:	8bfb      	ldrh	r3, [r7, #30]
 8005564:	4413      	add	r3, r2
 8005566:	b29b      	uxth	r3, r3
 8005568:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800556a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800556c:	8c3b      	ldrh	r3, [r7, #32]
 800556e:	4413      	add	r3, r2
 8005570:	b29b      	uxth	r3, r3
 8005572:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8005574:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005576:	8bbb      	ldrh	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	b29b      	uxth	r3, r3
 800557c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800557e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005582:	b29b      	uxth	r3, r3
 8005584:	3301      	adds	r3, #1
 8005586:	b29b      	uxth	r3, r3
 8005588:	827b      	strh	r3, [r7, #18]
 800558a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800558e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005592:	429a      	cmp	r2, r3
 8005594:	ddc1      	ble.n	800551a <BSP_LCD_DrawLine+0x106>
  }
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	372c      	adds	r7, #44	; 0x2c
 800559c:	46bd      	mov	sp, r7
 800559e:	bd90      	pop	{r4, r7, pc}
 80055a0:	2000080c 	.word	0x2000080c
 80055a4:	20000810 	.word	0x20000810

080055a8 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4623      	mov	r3, r4
 80055b8:	80fb      	strh	r3, [r7, #6]
 80055ba:	4603      	mov	r3, r0
 80055bc:	80bb      	strh	r3, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	807b      	strh	r3, [r7, #2]
 80055c2:	4613      	mov	r3, r2
 80055c4:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	88b9      	ldrh	r1, [r7, #4]
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fea1 	bl	8005314 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80055d2:	88ba      	ldrh	r2, [r7, #4]
 80055d4:	883b      	ldrh	r3, [r7, #0]
 80055d6:	4413      	add	r3, r2
 80055d8:	b299      	uxth	r1, r3
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff fe98 	bl	8005314 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80055e4:	883a      	ldrh	r2, [r7, #0]
 80055e6:	88b9      	ldrh	r1, [r7, #4]
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fed0 	bl	8005390 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	4413      	add	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	883a      	ldrh	r2, [r7, #0]
 80055fa:	88b9      	ldrh	r1, [r7, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fec7 	bl	8005390 <BSP_LCD_DrawVLine>
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bd90      	pop	{r4, r7, pc}
	...

0800560c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	80fb      	strh	r3, [r7, #6]
 8005616:	460b      	mov	r3, r1
 8005618:	80bb      	strh	r3, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	f1c3 0303 	rsb	r3, r3, #3
 8005626:	617b      	str	r3, [r7, #20]
  curx = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800562c:	887b      	ldrh	r3, [r7, #2]
 800562e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8005630:	e0c7      	b.n	80057c2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	b29a      	uxth	r2, r3
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	4413      	add	r3, r2
 800563a:	b298      	uxth	r0, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	b29b      	uxth	r3, r3
 8005640:	88ba      	ldrh	r2, [r7, #4]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	b299      	uxth	r1, r3
 8005646:	4b64      	ldr	r3, [pc, #400]	; (80057d8 <BSP_LCD_DrawCircle+0x1cc>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4c64      	ldr	r4, [pc, #400]	; (80057dc <BSP_LCD_DrawCircle+0x1d0>)
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4423      	add	r3, r4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	f000 fa01 	bl	8005a60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	b29b      	uxth	r3, r3
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	b298      	uxth	r0, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	b29b      	uxth	r3, r3
 800566c:	88ba      	ldrh	r2, [r7, #4]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	b299      	uxth	r1, r3
 8005672:	4b59      	ldr	r3, [pc, #356]	; (80057d8 <BSP_LCD_DrawCircle+0x1cc>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4c59      	ldr	r4, [pc, #356]	; (80057dc <BSP_LCD_DrawCircle+0x1d0>)
 8005678:	4613      	mov	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4423      	add	r3, r4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	f000 f9eb 	bl	8005a60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	b29a      	uxth	r2, r3
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	4413      	add	r3, r2
 8005692:	b298      	uxth	r0, r3
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	b29b      	uxth	r3, r3
 8005698:	88ba      	ldrh	r2, [r7, #4]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	b299      	uxth	r1, r3
 800569e:	4b4e      	ldr	r3, [pc, #312]	; (80057d8 <BSP_LCD_DrawCircle+0x1cc>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4c4e      	ldr	r4, [pc, #312]	; (80057dc <BSP_LCD_DrawCircle+0x1d0>)
 80056a4:	4613      	mov	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4423      	add	r3, r4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	f000 f9d5 	bl	8005a60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	b298      	uxth	r0, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	88ba      	ldrh	r2, [r7, #4]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	b299      	uxth	r1, r3
 80056ca:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <BSP_LCD_DrawCircle+0x1cc>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4c43      	ldr	r4, [pc, #268]	; (80057dc <BSP_LCD_DrawCircle+0x1d0>)
 80056d0:	4613      	mov	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4423      	add	r3, r4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	f000 f9bf 	bl	8005a60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	4413      	add	r3, r2
 80056ea:	b298      	uxth	r0, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	88bb      	ldrh	r3, [r7, #4]
 80056f2:	4413      	add	r3, r2
 80056f4:	b299      	uxth	r1, r3
 80056f6:	4b38      	ldr	r3, [pc, #224]	; (80057d8 <BSP_LCD_DrawCircle+0x1cc>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4c38      	ldr	r4, [pc, #224]	; (80057dc <BSP_LCD_DrawCircle+0x1d0>)
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4423      	add	r3, r4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	f000 f9a9 	bl	8005a60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	b29b      	uxth	r3, r3
 8005712:	88fa      	ldrh	r2, [r7, #6]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	b298      	uxth	r0, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	b29a      	uxth	r2, r3
 800571c:	88bb      	ldrh	r3, [r7, #4]
 800571e:	4413      	add	r3, r2
 8005720:	b299      	uxth	r1, r3
 8005722:	4b2d      	ldr	r3, [pc, #180]	; (80057d8 <BSP_LCD_DrawCircle+0x1cc>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4c2d      	ldr	r4, [pc, #180]	; (80057dc <BSP_LCD_DrawCircle+0x1d0>)
 8005728:	4613      	mov	r3, r2
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4423      	add	r3, r4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	f000 f993 	bl	8005a60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	b29a      	uxth	r2, r3
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	4413      	add	r3, r2
 8005742:	b298      	uxth	r0, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	b29a      	uxth	r2, r3
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	b299      	uxth	r1, r3
 800574e:	4b22      	ldr	r3, [pc, #136]	; (80057d8 <BSP_LCD_DrawCircle+0x1cc>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4c22      	ldr	r4, [pc, #136]	; (80057dc <BSP_LCD_DrawCircle+0x1d0>)
 8005754:	4613      	mov	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4423      	add	r3, r4
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	f000 f97d 	bl	8005a60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	b29b      	uxth	r3, r3
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	b298      	uxth	r0, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	b29a      	uxth	r2, r3
 8005774:	88bb      	ldrh	r3, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	b299      	uxth	r1, r3
 800577a:	4b17      	ldr	r3, [pc, #92]	; (80057d8 <BSP_LCD_DrawCircle+0x1cc>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4c17      	ldr	r4, [pc, #92]	; (80057dc <BSP_LCD_DrawCircle+0x1d0>)
 8005780:	4613      	mov	r3, r2
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4423      	add	r3, r4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	f000 f967 	bl	8005a60 <BSP_LCD_DrawPixel>

    if (d < 0)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	da06      	bge.n	80057a6 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	3306      	adds	r3, #6
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e00a      	b.n	80057bc <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	009a      	lsls	r2, r3, #2
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	330a      	adds	r3, #10
 80057b4:	617b      	str	r3, [r7, #20]
      cury--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	3301      	adds	r3, #1
 80057c0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	f67f af33 	bls.w	8005632 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	2000080c 	.word	0x2000080c
 80057dc:	20000810 	.word	0x20000810

080057e0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80057e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e4:	b086      	sub	sp, #24
 80057e6:	af02      	add	r7, sp, #8
 80057e8:	4604      	mov	r4, r0
 80057ea:	4608      	mov	r0, r1
 80057ec:	4611      	mov	r1, r2
 80057ee:	461a      	mov	r2, r3
 80057f0:	4623      	mov	r3, r4
 80057f2:	80fb      	strh	r3, [r7, #6]
 80057f4:	4603      	mov	r3, r0
 80057f6:	80bb      	strh	r3, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	807b      	strh	r3, [r7, #2]
 80057fc:	4613      	mov	r3, r2
 80057fe:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005804:	4b20      	ldr	r3, [pc, #128]	; (8005888 <BSP_LCD_FillRect+0xa8>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4920      	ldr	r1, [pc, #128]	; (800588c <BSP_LCD_FillRect+0xac>)
 800580a:	4613      	mov	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fc06 	bl	8005028 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <BSP_LCD_FillRect+0xa8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <BSP_LCD_FillRect+0xb0>)
 8005822:	2134      	movs	r1, #52	; 0x34
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	4413      	add	r3, r2
 800582a:	335c      	adds	r3, #92	; 0x5c
 800582c:	681c      	ldr	r4, [r3, #0]
 800582e:	f7ff fb6f 	bl	8004f10 <BSP_LCD_GetXSize>
 8005832:	4602      	mov	r2, r0
 8005834:	88bb      	ldrh	r3, [r7, #4]
 8005836:	fb03 f202 	mul.w	r2, r3, r2
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4423      	add	r3, r4
 8005842:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8005844:	4b10      	ldr	r3, [pc, #64]	; (8005888 <BSP_LCD_FillRect+0xa8>)
 8005846:	681c      	ldr	r4, [r3, #0]
 8005848:	68fd      	ldr	r5, [r7, #12]
 800584a:	887e      	ldrh	r6, [r7, #2]
 800584c:	f8b7 8000 	ldrh.w	r8, [r7]
 8005850:	f7ff fb5e 	bl	8004f10 <BSP_LCD_GetXSize>
 8005854:	4602      	mov	r2, r0
 8005856:	887b      	ldrh	r3, [r7, #2]
 8005858:	1ad1      	subs	r1, r2, r3
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <BSP_LCD_FillRect+0xa8>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	480b      	ldr	r0, [pc, #44]	; (800588c <BSP_LCD_FillRect+0xac>)
 8005860:	4613      	mov	r3, r2
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4403      	add	r3, r0
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	9100      	str	r1, [sp, #0]
 8005870:	4643      	mov	r3, r8
 8005872:	4632      	mov	r2, r6
 8005874:	4629      	mov	r1, r5
 8005876:	4620      	mov	r0, r4
 8005878:	f000 f9d4 	bl	8005c24 <FillBuffer>
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005886:	bf00      	nop
 8005888:	2000080c 	.word	0x2000080c
 800588c:	20000810 	.word	0x20000810
 8005890:	20000a18 	.word	0x20000a18

08005894 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <BSP_LCD_DisplayOn+0x1c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80058a2:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <BSP_LCD_DisplayOn+0x1c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4798      	blx	r3
  }
}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000ac0 	.word	0x20000ac0

080058b4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	; 0x38
 80058b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	4b61      	ldr	r3, [pc, #388]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	4a60      	ldr	r2, [pc, #384]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 80058c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058c8:	6453      	str	r3, [r2, #68]	; 0x44
 80058ca:	4b5e      	ldr	r3, [pc, #376]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058d2:	623b      	str	r3, [r7, #32]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	4b5a      	ldr	r3, [pc, #360]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	4a59      	ldr	r2, [pc, #356]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 80058e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058e4:	6313      	str	r3, [r2, #48]	; 0x30
 80058e6:	4b57      	ldr	r3, [pc, #348]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4a52      	ldr	r2, [pc, #328]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	6313      	str	r3, [r2, #48]	; 0x30
 8005902:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	4b4c      	ldr	r3, [pc, #304]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	4a4b      	ldr	r2, [pc, #300]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005918:	f043 0302 	orr.w	r3, r3, #2
 800591c:	6313      	str	r3, [r2, #48]	; 0x30
 800591e:	4b49      	ldr	r3, [pc, #292]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	4b45      	ldr	r3, [pc, #276]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4a44      	ldr	r2, [pc, #272]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	6313      	str	r3, [r2, #48]	; 0x30
 800593a:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	4b3e      	ldr	r3, [pc, #248]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	4a3d      	ldr	r2, [pc, #244]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005950:	f043 0308 	orr.w	r3, r3, #8
 8005954:	6313      	str	r3, [r2, #48]	; 0x30
 8005956:	4b3b      	ldr	r3, [pc, #236]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	4a36      	ldr	r2, [pc, #216]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 800596c:	f043 0320 	orr.w	r3, r3, #32
 8005970:	6313      	str	r3, [r2, #48]	; 0x30
 8005972:	4b34      	ldr	r3, [pc, #208]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800597e:	2300      	movs	r3, #0
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	4b30      	ldr	r3, [pc, #192]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	4a2f      	ldr	r2, [pc, #188]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598c:	6313      	str	r3, [r2, #48]	; 0x30
 800598e:	4b2d      	ldr	r3, [pc, #180]	; (8005a44 <BSP_LCD_MspInit+0x190>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800599a:	f641 0358 	movw	r3, #6232	; 0x1858
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80059a0:	2302      	movs	r3, #2
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80059a8:	2302      	movs	r3, #2
 80059aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80059ac:	230e      	movs	r3, #14
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80059b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059b4:	4619      	mov	r1, r3
 80059b6:	4824      	ldr	r0, [pc, #144]	; (8005a48 <BSP_LCD_MspInit+0x194>)
 80059b8:	f001 fa3e 	bl	8006e38 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80059bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80059c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059c6:	4619      	mov	r1, r3
 80059c8:	4820      	ldr	r0, [pc, #128]	; (8005a4c <BSP_LCD_MspInit+0x198>)
 80059ca:	f001 fa35 	bl	8006e38 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80059ce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80059d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d8:	4619      	mov	r1, r3
 80059da:	481d      	ldr	r0, [pc, #116]	; (8005a50 <BSP_LCD_MspInit+0x19c>)
 80059dc:	f001 fa2c 	bl	8006e38 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80059e0:	2348      	movs	r3, #72	; 0x48
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80059e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e8:	4619      	mov	r1, r3
 80059ea:	481a      	ldr	r0, [pc, #104]	; (8005a54 <BSP_LCD_MspInit+0x1a0>)
 80059ec:	f001 fa24 	bl	8006e38 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80059f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80059f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059fa:	4619      	mov	r1, r3
 80059fc:	4816      	ldr	r0, [pc, #88]	; (8005a58 <BSP_LCD_MspInit+0x1a4>)
 80059fe:	f001 fa1b 	bl	8006e38 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8005a02:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4813      	ldr	r0, [pc, #76]	; (8005a5c <BSP_LCD_MspInit+0x1a8>)
 8005a10:	f001 fa12 	bl	8006e38 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8005a14:	2303      	movs	r3, #3
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8005a18:	2309      	movs	r3, #9
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a20:	4619      	mov	r1, r3
 8005a22:	480a      	ldr	r0, [pc, #40]	; (8005a4c <BSP_LCD_MspInit+0x198>)
 8005a24:	f001 fa08 	bl	8006e38 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8005a28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a32:	4619      	mov	r1, r3
 8005a34:	4809      	ldr	r0, [pc, #36]	; (8005a5c <BSP_LCD_MspInit+0x1a8>)
 8005a36:	f001 f9ff 	bl	8006e38 <HAL_GPIO_Init>
}
 8005a3a:	bf00      	nop
 8005a3c:	3738      	adds	r7, #56	; 0x38
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40020000 	.word	0x40020000
 8005a4c:	40020400 	.word	0x40020400
 8005a50:	40020800 	.word	0x40020800
 8005a54:	40020c00 	.word	0x40020c00
 8005a58:	40021400 	.word	0x40021400
 8005a5c:	40021800 	.word	0x40021800

08005a60 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005a60:	b5b0      	push	{r4, r5, r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	603a      	str	r2, [r7, #0]
 8005a6a:	80fb      	strh	r3, [r7, #6]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  //*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  //rotate 180°
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code;
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <BSP_LCD_DrawPixel+0x48>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <BSP_LCD_DrawPixel+0x4c>)
 8005a76:	2134      	movs	r1, #52	; 0x34
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	335c      	adds	r3, #92	; 0x5c
 8005a80:	681c      	ldr	r4, [r3, #0]
 8005a82:	88fd      	ldrh	r5, [r7, #6]
 8005a84:	f7ff fa44 	bl	8004f10 <BSP_LCD_GetXSize>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	88bb      	ldrh	r3, [r7, #4]
 8005a8c:	fb03 f302 	mul.w	r3, r3, r2
 8005a90:	442b      	add	r3, r5
 8005a92:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4423      	add	r3, r4
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	6013      	str	r3, [r2, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa8:	2000080c 	.word	0x2000080c
 8005aac:	20000a18 	.word	0x20000a18

08005ab0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	603a      	str	r2, [r7, #0]
 8005aba:	80fb      	strh	r3, [r7, #6]
 8005abc:	460b      	mov	r3, r1
 8005abe:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8005acc:	4b53      	ldr	r3, [pc, #332]	; (8005c1c <DrawChar+0x16c>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4953      	ldr	r1, [pc, #332]	; (8005c20 <DrawChar+0x170>)
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	3308      	adds	r3, #8
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	88db      	ldrh	r3, [r3, #6]
 8005ae2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005ae4:	4b4d      	ldr	r3, [pc, #308]	; (8005c1c <DrawChar+0x16c>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	494d      	ldr	r1, [pc, #308]	; (8005c20 <DrawChar+0x170>)
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	3308      	adds	r3, #8
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	889b      	ldrh	r3, [r3, #4]
 8005afa:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8005afc:	8a3b      	ldrh	r3, [r7, #16]
 8005afe:	3307      	adds	r3, #7
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	da00      	bge.n	8005b06 <DrawChar+0x56>
 8005b04:	3307      	adds	r3, #7
 8005b06:	10db      	asrs	r3, r3, #3
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	8a3b      	ldrh	r3, [r7, #16]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	e076      	b.n	8005c0a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005b1c:	8a3b      	ldrh	r3, [r7, #16]
 8005b1e:	3307      	adds	r3, #7
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	da00      	bge.n	8005b26 <DrawChar+0x76>
 8005b24:	3307      	adds	r3, #7
 8005b26:	10db      	asrs	r3, r3, #3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	fb03 f302 	mul.w	r3, r3, r2
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	4413      	add	r3, r2
 8005b34:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8005b36:	8a3b      	ldrh	r3, [r7, #16]
 8005b38:	3307      	adds	r3, #7
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da00      	bge.n	8005b40 <DrawChar+0x90>
 8005b3e:	3307      	adds	r3, #7
 8005b40:	10db      	asrs	r3, r3, #3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d002      	beq.n	8005b4c <DrawChar+0x9c>
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d004      	beq.n	8005b54 <DrawChar+0xa4>
 8005b4a:	e00c      	b.n	8005b66 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	617b      	str	r3, [r7, #20]
      break;
 8005b52:	e016      	b.n	8005b82 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	3201      	adds	r2, #1
 8005b5e:	7812      	ldrb	r2, [r2, #0]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
      break;
 8005b64:	e00d      	b.n	8005b82 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	041a      	lsls	r2, r3, #16
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	4313      	orrs	r3, r2
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	3202      	adds	r2, #2
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
      break;
 8005b80:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e036      	b.n	8005bf6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005b88:	8a3a      	ldrh	r2, [r7, #16]
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	1ad2      	subs	r2, r2, r3
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	4413      	add	r3, r2
 8005b92:	3b01      	subs	r3, #1
 8005b94:	2201      	movs	r2, #1
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	4413      	add	r3, r2
 8005bac:	b298      	uxth	r0, r3
 8005bae:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <DrawChar+0x16c>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	491b      	ldr	r1, [pc, #108]	; (8005c20 <DrawChar+0x170>)
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	88bb      	ldrh	r3, [r7, #4]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f7ff ff4c 	bl	8005a60 <BSP_LCD_DrawPixel>
 8005bc8:	e012      	b.n	8005bf0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	b298      	uxth	r0, r3
 8005bd4:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <DrawChar+0x16c>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	4911      	ldr	r1, [pc, #68]	; (8005c20 <DrawChar+0x170>)
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	3304      	adds	r3, #4
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	88bb      	ldrh	r3, [r7, #4]
 8005bea:	4619      	mov	r1, r3
 8005bec:	f7ff ff38 	bl	8005a60 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	8a3b      	ldrh	r3, [r7, #16]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d3c4      	bcc.n	8005b88 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8005bfe:	88bb      	ldrh	r3, [r7, #4]
 8005c00:	3301      	adds	r3, #1
 8005c02:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	8a7b      	ldrh	r3, [r7, #18]
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d384      	bcc.n	8005b1c <DrawChar+0x6c>
  }
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	2000080c 	.word	0x2000080c
 8005c20:	20000810 	.word	0x20000810

08005c24 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8005c32:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <FillBuffer+0x68>)
 8005c34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005c38:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <FillBuffer+0x68>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8005c40:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <FillBuffer+0x68>)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8005c46:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <FillBuffer+0x68>)
 8005c48:	4a11      	ldr	r2, [pc, #68]	; (8005c90 <FillBuffer+0x6c>)
 8005c4a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8005c4c:	480f      	ldr	r0, [pc, #60]	; (8005c8c <FillBuffer+0x68>)
 8005c4e:	f000 fe5d 	bl	800690c <HAL_DMA2D_Init>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d115      	bne.n	8005c84 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	480c      	ldr	r0, [pc, #48]	; (8005c8c <FillBuffer+0x68>)
 8005c5c:	f000 ffbe 	bl	8006bdc <HAL_DMA2D_ConfigLayer>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10e      	bne.n	8005c84 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69f9      	ldr	r1, [r7, #28]
 8005c70:	4806      	ldr	r0, [pc, #24]	; (8005c8c <FillBuffer+0x68>)
 8005c72:	f000 fe9e 	bl	80069b2 <HAL_DMA2D_Start>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8005c7c:	210a      	movs	r1, #10
 8005c7e:	4803      	ldr	r0, [pc, #12]	; (8005c8c <FillBuffer+0x68>)
 8005c80:	f000 fec2 	bl	8006a08 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	2000079c 	.word	0x2000079c
 8005c90:	4002b000 	.word	0x4002b000

08005c94 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005c98:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005c9a:	4a2a      	ldr	r2, [pc, #168]	; (8005d44 <BSP_SDRAM_Init+0xb0>)
 8005c9c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8005c9e:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <BSP_SDRAM_Init+0xb4>)
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8005ca4:	4b28      	ldr	r3, [pc, #160]	; (8005d48 <BSP_SDRAM_Init+0xb4>)
 8005ca6:	2207      	movs	r2, #7
 8005ca8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8005caa:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <BSP_SDRAM_Init+0xb4>)
 8005cac:	2204      	movs	r2, #4
 8005cae:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8005cb0:	4b25      	ldr	r3, [pc, #148]	; (8005d48 <BSP_SDRAM_Init+0xb4>)
 8005cb2:	2207      	movs	r2, #7
 8005cb4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8005cb6:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <BSP_SDRAM_Init+0xb4>)
 8005cb8:	2202      	movs	r2, #2
 8005cba:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8005cbc:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <BSP_SDRAM_Init+0xb4>)
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8005cc2:	4b21      	ldr	r3, [pc, #132]	; (8005d48 <BSP_SDRAM_Init+0xb4>)
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005cce:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005cda:	4b19      	ldr	r3, [pc, #100]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005cdc:	2210      	movs	r2, #16
 8005cde:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005ce0:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005ce2:	2240      	movs	r2, #64	; 0x40
 8005ce4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8005ce6:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005ce8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005cec:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005cee:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cfa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8005cfc:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8005d02:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d08:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	480c      	ldr	r0, [pc, #48]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005d0e:	f000 f87f 	bl	8005e10 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8005d12:	490d      	ldr	r1, [pc, #52]	; (8005d48 <BSP_SDRAM_Init+0xb4>)
 8005d14:	480a      	ldr	r0, [pc, #40]	; (8005d40 <BSP_SDRAM_Init+0xac>)
 8005d16:	f003 fb6d 	bl	80093f4 <HAL_SDRAM_Init>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <BSP_SDRAM_Init+0xb8>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <BSP_SDRAM_Init+0xb8>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005d2e:	f240 506a 	movw	r0, #1386	; 0x56a
 8005d32:	f000 f80d 	bl	8005d50 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <BSP_SDRAM_Init+0xb8>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000828 	.word	0x20000828
 8005d44:	a0000140 	.word	0xa0000140
 8005d48:	2000085c 	.word	0x2000085c
 8005d4c:	20000308 	.word	0x20000308

08005d50 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d62:	4b29      	ldr	r3, [pc, #164]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d64:	2208      	movs	r2, #8
 8005d66:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005d68:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005d6e:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d78:	4923      	ldr	r1, [pc, #140]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d7a:	4824      	ldr	r0, [pc, #144]	; (8005e0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d7c:	f003 fb78 	bl	8009470 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005d80:	2001      	movs	r0, #1
 8005d82:	f000 facf 	bl	8006324 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8005d86:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d88:	2202      	movs	r2, #2
 8005d8a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d8e:	2208      	movs	r2, #8
 8005d90:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8005d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005da2:	4919      	ldr	r1, [pc, #100]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005da4:	4819      	ldr	r0, [pc, #100]	; (8005e0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005da6:	f003 fb63 	bl	8009470 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005daa:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dac:	2203      	movs	r2, #3
 8005dae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005db0:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005db2:	2208      	movs	r2, #8
 8005db4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005db8:	2204      	movs	r2, #4
 8005dba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005dbc:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dc6:	4910      	ldr	r1, [pc, #64]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dc8:	4810      	ldr	r0, [pc, #64]	; (8005e0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005dca:	f003 fb51 	bl	8009470 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8005dce:	f44f 730c 	mov.w	r3, #560	; 0x230
 8005dd2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005dda:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005ddc:	2208      	movs	r2, #8
 8005dde:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005de0:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4a07      	ldr	r2, [pc, #28]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005df0:	4905      	ldr	r1, [pc, #20]	; (8005e08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005df2:	4806      	ldr	r0, [pc, #24]	; (8005e0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005df4:	f003 fb3c 	bl	8009470 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4804      	ldr	r0, [pc, #16]	; (8005e0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005dfc:	f003 fb63 	bl	80094c6 <HAL_SDRAM_ProgramRefreshRate>
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20000878 	.word	0x20000878
 8005e0c:	20000828 	.word	0x20000828

08005e10 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b090      	sub	sp, #64	; 0x40
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80ec 	beq.w	8005ffa <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005e22:	2300      	movs	r3, #0
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e26:	4b77      	ldr	r3, [pc, #476]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	4a76      	ldr	r2, [pc, #472]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	6393      	str	r3, [r2, #56]	; 0x38
 8005e32:	4b74      	ldr	r3, [pc, #464]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
 8005e42:	4b70      	ldr	r3, [pc, #448]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	4a6f      	ldr	r2, [pc, #444]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4e:	4b6d      	ldr	r3, [pc, #436]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	623b      	str	r3, [r7, #32]
 8005e5e:	4b69      	ldr	r3, [pc, #420]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	4a68      	ldr	r2, [pc, #416]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	6313      	str	r3, [r2, #48]	; 0x30
 8005e6a:	4b66      	ldr	r3, [pc, #408]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	4b62      	ldr	r3, [pc, #392]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	4a61      	ldr	r2, [pc, #388]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e80:	f043 0304 	orr.w	r3, r3, #4
 8005e84:	6313      	str	r3, [r2, #48]	; 0x30
 8005e86:	4b5f      	ldr	r3, [pc, #380]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	4a5a      	ldr	r2, [pc, #360]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005e9c:	f043 0308 	orr.w	r3, r3, #8
 8005ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea2:	4b58      	ldr	r3, [pc, #352]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	4b54      	ldr	r3, [pc, #336]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	4a53      	ldr	r2, [pc, #332]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005eb8:	f043 0310 	orr.w	r3, r3, #16
 8005ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ebe:	4b51      	ldr	r3, [pc, #324]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	4b4d      	ldr	r3, [pc, #308]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	4a4c      	ldr	r2, [pc, #304]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005ed4:	f043 0320 	orr.w	r3, r3, #32
 8005ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eda:	4b4a      	ldr	r3, [pc, #296]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	4b46      	ldr	r3, [pc, #280]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	4a45      	ldr	r2, [pc, #276]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ef6:	4b43      	ldr	r3, [pc, #268]	; (8006004 <BSP_SDRAM_MspInit+0x1f4>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8005f02:	2302      	movs	r3, #2
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8005f06:	2302      	movs	r3, #2
 8005f08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8005f0e:	230c      	movs	r3, #12
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8005f12:	2360      	movs	r3, #96	; 0x60
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8005f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	483a      	ldr	r0, [pc, #232]	; (8006008 <BSP_SDRAM_MspInit+0x1f8>)
 8005f1e:	f000 ff8b 	bl	8006e38 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8005f22:	2301      	movs	r3, #1
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8005f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4837      	ldr	r0, [pc, #220]	; (800600c <BSP_SDRAM_MspInit+0x1fc>)
 8005f2e:	f000 ff83 	bl	8006e38 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8005f32:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4834      	ldr	r0, [pc, #208]	; (8006010 <BSP_SDRAM_MspInit+0x200>)
 8005f40:	f000 ff7a 	bl	8006e38 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8005f44:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8005f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4830      	ldr	r0, [pc, #192]	; (8006014 <BSP_SDRAM_MspInit+0x204>)
 8005f52:	f000 ff71 	bl	8006e38 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8005f56:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8005f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f60:	4619      	mov	r1, r3
 8005f62:	482d      	ldr	r0, [pc, #180]	; (8006018 <BSP_SDRAM_MspInit+0x208>)
 8005f64:	f000 ff68 	bl	8006e38 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8005f68:	f248 1333 	movw	r3, #33075	; 0x8133
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f72:	4619      	mov	r1, r3
 8005f74:	4829      	ldr	r0, [pc, #164]	; (800601c <BSP_SDRAM_MspInit+0x20c>)
 8005f76:	f000 ff5f 	bl	8006e38 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005f7a:	4b29      	ldr	r3, [pc, #164]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005f80:	4b27      	ldr	r3, [pc, #156]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005f86:	4b26      	ldr	r3, [pc, #152]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f94:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f96:	4b22      	ldr	r3, [pc, #136]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f9c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fa4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005fac:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fb2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005fba:	4b19      	ldr	r3, [pc, #100]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005fc0:	4b17      	ldr	r3, [pc, #92]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005fc6:	4b16      	ldr	r3, [pc, #88]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8005fcc:	4b14      	ldr	r3, [pc, #80]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <BSP_SDRAM_MspInit+0x214>)
 8005fd0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a12      	ldr	r2, [pc, #72]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd8:	4a11      	ldr	r2, [pc, #68]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8005fde:	4810      	ldr	r0, [pc, #64]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fe0:	f000 fb84 	bl	80066ec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8005fe4:	480e      	ldr	r0, [pc, #56]	; (8006020 <BSP_SDRAM_MspInit+0x210>)
 8005fe6:	f000 fad3 	bl	8006590 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005fea:	2200      	movs	r2, #0
 8005fec:	210f      	movs	r1, #15
 8005fee:	2038      	movs	r0, #56	; 0x38
 8005ff0:	f000 fa97 	bl	8006522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005ff4:	2038      	movs	r0, #56	; 0x38
 8005ff6:	f000 fab0 	bl	800655a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8005ffa:	bf00      	nop
 8005ffc:	3740      	adds	r7, #64	; 0x40
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40023800 	.word	0x40023800
 8006008:	40020400 	.word	0x40020400
 800600c:	40020800 	.word	0x40020800
 8006010:	40020c00 	.word	0x40020c00
 8006014:	40021000 	.word	0x40021000
 8006018:	40021400 	.word	0x40021400
 800601c:	40021800 	.word	0x40021800
 8006020:	20000888 	.word	0x20000888
 8006024:	40026410 	.word	0x40026410

08006028 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	4603      	mov	r3, r0
 8006030:	460a      	mov	r2, r1
 8006032:	80fb      	strh	r3, [r7, #6]
 8006034:	4613      	mov	r3, r2
 8006036:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <BSP_TS_Init+0x64>)
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8006042:	4a13      	ldr	r2, [pc, #76]	; (8006090 <BSP_TS_Init+0x68>)
 8006044:	88bb      	ldrh	r3, [r7, #4]
 8006046:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <BSP_TS_Init+0x6c>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2082      	movs	r0, #130	; 0x82
 800604e:	4798      	blx	r3
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	f640 0311 	movw	r3, #2065	; 0x811
 8006058:	429a      	cmp	r2, r3
 800605a:	d104      	bne.n	8006066 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800605c:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <BSP_TS_Init+0x70>)
 800605e:	4a0d      	ldr	r2, [pc, #52]	; (8006094 <BSP_TS_Init+0x6c>)
 8006060:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <BSP_TS_Init+0x70>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2082      	movs	r0, #130	; 0x82
 8006074:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <BSP_TS_Init+0x70>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2082      	movs	r0, #130	; 0x82
 800607e:	4798      	blx	r3
  }

  return ret;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	200008ec 	.word	0x200008ec
 8006090:	200008ee 	.word	0x200008ee
 8006094:	200002b0 	.word	0x200002b0
 8006098:	200008e8 	.word	0x200008e8

0800609c <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 80060a0:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <BSP_TS_ITGetStatus+0x14>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	2082      	movs	r0, #130	; 0x82
 80060a8:	4798      	blx	r3
 80060aa:	4603      	mov	r3, r0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	200008e8 	.word	0x200008e8

080060b4 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80060bc:	4b4f      	ldr	r3, [pc, #316]	; (80061fc <BSP_TS_GetState+0x148>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2082      	movs	r0, #130	; 0x82
 80060c4:	4798      	blx	r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 808d 	beq.w	80061f2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80060d8:	4b48      	ldr	r3, [pc, #288]	; (80061fc <BSP_TS_GetState+0x148>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f107 020c 	add.w	r2, r7, #12
 80060e2:	f107 010e 	add.w	r1, r7, #14
 80060e6:	2082      	movs	r0, #130	; 0x82
 80060e8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80060ea:	89bb      	ldrh	r3, [r7, #12]
 80060ec:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80060f4:	89bb      	ldrh	r3, [r7, #12]
 80060f6:	4a42      	ldr	r2, [pc, #264]	; (8006200 <BSP_TS_GetState+0x14c>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	08db      	lsrs	r3, r3, #3
 80060fe:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8006100:	8abb      	ldrh	r3, [r7, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	82bb      	strh	r3, [r7, #20]
 800610a:	e008      	b.n	800611e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800610c:	4b3d      	ldr	r3, [pc, #244]	; (8006204 <BSP_TS_GetState+0x150>)
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	8aba      	ldrh	r2, [r7, #20]
 8006112:	429a      	cmp	r2, r3
 8006114:	d903      	bls.n	800611e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8006116:	4b3b      	ldr	r3, [pc, #236]	; (8006204 <BSP_TS_GetState+0x150>)
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	3b01      	subs	r3, #1
 800611c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800611e:	8abb      	ldrh	r3, [r7, #20]
 8006120:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8006122:	89fb      	ldrh	r3, [r7, #14]
 8006124:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006128:	4293      	cmp	r3, r2
 800612a:	d806      	bhi.n	800613a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800612c:	89fb      	ldrh	r3, [r7, #14]
 800612e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8006132:	330e      	adds	r3, #14
 8006134:	b29b      	uxth	r3, r3
 8006136:	81fb      	strh	r3, [r7, #14]
 8006138:	e005      	b.n	8006146 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800613a:	89fb      	ldrh	r3, [r7, #14]
 800613c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8006140:	3308      	adds	r3, #8
 8006142:	b29b      	uxth	r3, r3
 8006144:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8006146:	89fb      	ldrh	r3, [r7, #14]
 8006148:	4a2f      	ldr	r2, [pc, #188]	; (8006208 <BSP_TS_GetState+0x154>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	08db      	lsrs	r3, r3, #3
 8006150:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8006152:	8afb      	ldrh	r3, [r7, #22]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	82fb      	strh	r3, [r7, #22]
 800615c:	e008      	b.n	8006170 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800615e:	4b2b      	ldr	r3, [pc, #172]	; (800620c <BSP_TS_GetState+0x158>)
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	8afa      	ldrh	r2, [r7, #22]
 8006164:	429a      	cmp	r2, r3
 8006166:	d903      	bls.n	8006170 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8006168:	4b28      	ldr	r3, [pc, #160]	; (800620c <BSP_TS_GetState+0x158>)
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	3b01      	subs	r3, #1
 800616e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8006170:	8afb      	ldrh	r3, [r7, #22]
 8006172:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	461a      	mov	r2, r3
 8006178:	4b25      	ldr	r3, [pc, #148]	; (8006210 <BSP_TS_GetState+0x15c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d906      	bls.n	800618e <BSP_TS_GetState+0xda>
 8006180:	89fa      	ldrh	r2, [r7, #14]
 8006182:	4b23      	ldr	r3, [pc, #140]	; (8006210 <BSP_TS_GetState+0x15c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	b29b      	uxth	r3, r3
 800618c:	e005      	b.n	800619a <BSP_TS_GetState+0xe6>
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <BSP_TS_GetState+0x15c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b29a      	uxth	r2, r3
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	b29b      	uxth	r3, r3
 800619a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800619c:	89bb      	ldrh	r3, [r7, #12]
 800619e:	461a      	mov	r2, r3
 80061a0:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <BSP_TS_GetState+0x160>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d906      	bls.n	80061b6 <BSP_TS_GetState+0x102>
 80061a8:	89ba      	ldrh	r2, [r7, #12]
 80061aa:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <BSP_TS_GetState+0x160>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	e005      	b.n	80061c2 <BSP_TS_GetState+0x10e>
 80061b6:	4b17      	ldr	r3, [pc, #92]	; (8006214 <BSP_TS_GetState+0x160>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	89bb      	ldrh	r3, [r7, #12]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80061c4:	8a7a      	ldrh	r2, [r7, #18]
 80061c6:	8a3b      	ldrh	r3, [r7, #16]
 80061c8:	4413      	add	r3, r2
 80061ca:	2b05      	cmp	r3, #5
 80061cc:	dd07      	ble.n	80061de <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80061ce:	89fb      	ldrh	r3, [r7, #14]
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <BSP_TS_GetState+0x15c>)
 80061d4:	601a      	str	r2, [r3, #0]
      _y = y; 
 80061d6:	89bb      	ldrh	r3, [r7, #12]
 80061d8:	461a      	mov	r2, r3
 80061da:	4b0e      	ldr	r3, [pc, #56]	; (8006214 <BSP_TS_GetState+0x160>)
 80061dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80061de:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <BSP_TS_GetState+0x15c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80061e8:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <BSP_TS_GetState+0x160>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	809a      	strh	r2, [r3, #4]
  }
}
 80061f2:	bf00      	nop
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	200008e8 	.word	0x200008e8
 8006200:	ba2e8ba3 	.word	0xba2e8ba3
 8006204:	200008ee 	.word	0x200008ee
 8006208:	88888889 	.word	0x88888889
 800620c:	200008ec 	.word	0x200008ec
 8006210:	200008f0 	.word	0x200008f0
 8006214:	200008f4 	.word	0x200008f4

08006218 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 800621c:	4b03      	ldr	r3, [pc, #12]	; (800622c <BSP_TS_ITClear+0x14>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	2082      	movs	r0, #130	; 0x82
 8006224:	4798      	blx	r3
}
 8006226:	bf00      	nop
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200008e8 	.word	0x200008e8

08006230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006234:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <HAL_Init+0x40>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a0d      	ldr	r2, [pc, #52]	; (8006270 <HAL_Init+0x40>)
 800623a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800623e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_Init+0x40>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <HAL_Init+0x40>)
 8006246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800624a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800624c:	4b08      	ldr	r3, [pc, #32]	; (8006270 <HAL_Init+0x40>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a07      	ldr	r2, [pc, #28]	; (8006270 <HAL_Init+0x40>)
 8006252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006258:	2003      	movs	r0, #3
 800625a:	f000 f957 	bl	800650c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800625e:	200f      	movs	r0, #15
 8006260:	f000 f810 	bl	8006284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006264:	f000 f806 	bl	8006274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40023c00 	.word	0x40023c00

08006274 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <HAL_InitTick+0x54>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	4b12      	ldr	r3, [pc, #72]	; (80062dc <HAL_InitTick+0x58>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	4619      	mov	r1, r3
 8006296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800629a:	fbb3 f3f1 	udiv	r3, r3, r1
 800629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f967 	bl	8006576 <HAL_SYSTICK_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e00e      	b.n	80062d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b0f      	cmp	r3, #15
 80062b6:	d80a      	bhi.n	80062ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062b8:	2200      	movs	r2, #0
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	f000 f92f 	bl	8006522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062c4:	4a06      	ldr	r2, [pc, #24]	; (80062e0 <HAL_InitTick+0x5c>)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e000      	b.n	80062d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000274 	.word	0x20000274
 80062dc:	20000310 	.word	0x20000310
 80062e0:	2000030c 	.word	0x2000030c

080062e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_IncTick+0x20>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <HAL_IncTick+0x24>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4413      	add	r3, r2
 80062f4:	4a04      	ldr	r2, [pc, #16]	; (8006308 <HAL_IncTick+0x24>)
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000310 	.word	0x20000310
 8006308:	20000ac4 	.word	0x20000ac4

0800630c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return uwTick;
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <HAL_GetTick+0x14>)
 8006312:	681b      	ldr	r3, [r3, #0]
}
 8006314:	4618      	mov	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000ac4 	.word	0x20000ac4

08006324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800632c:	f7ff ffee 	bl	800630c <HAL_GetTick>
 8006330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d005      	beq.n	800634a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800633e:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <HAL_Delay+0x44>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800634a:	bf00      	nop
 800634c:	f7ff ffde 	bl	800630c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	429a      	cmp	r2, r3
 800635a:	d8f7      	bhi.n	800634c <HAL_Delay+0x28>
  {
  }
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000310 	.word	0x20000310

0800636c <__NVIC_SetPriorityGrouping>:
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <__NVIC_SetPriorityGrouping+0x44>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006388:	4013      	ands	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800639e:	4a04      	ldr	r2, [pc, #16]	; (80063b0 <__NVIC_SetPriorityGrouping+0x44>)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	60d3      	str	r3, [r2, #12]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	e000ed00 	.word	0xe000ed00

080063b4 <__NVIC_GetPriorityGrouping>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <__NVIC_GetPriorityGrouping+0x18>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	f003 0307 	and.w	r3, r3, #7
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	e000ed00 	.word	0xe000ed00

080063d0 <__NVIC_EnableIRQ>:
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	db0b      	blt.n	80063fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	f003 021f 	and.w	r2, r3, #31
 80063e8:	4907      	ldr	r1, [pc, #28]	; (8006408 <__NVIC_EnableIRQ+0x38>)
 80063ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	2001      	movs	r0, #1
 80063f2:	fa00 f202 	lsl.w	r2, r0, r2
 80063f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	e000e100 	.word	0xe000e100

0800640c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	6039      	str	r1, [r7, #0]
 8006416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641c:	2b00      	cmp	r3, #0
 800641e:	db0a      	blt.n	8006436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	b2da      	uxtb	r2, r3
 8006424:	490c      	ldr	r1, [pc, #48]	; (8006458 <__NVIC_SetPriority+0x4c>)
 8006426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800642a:	0112      	lsls	r2, r2, #4
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	440b      	add	r3, r1
 8006430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006434:	e00a      	b.n	800644c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	b2da      	uxtb	r2, r3
 800643a:	4908      	ldr	r1, [pc, #32]	; (800645c <__NVIC_SetPriority+0x50>)
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	3b04      	subs	r3, #4
 8006444:	0112      	lsls	r2, r2, #4
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	440b      	add	r3, r1
 800644a:	761a      	strb	r2, [r3, #24]
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	e000e100 	.word	0xe000e100
 800645c:	e000ed00 	.word	0xe000ed00

08006460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006460:	b480      	push	{r7}
 8006462:	b089      	sub	sp, #36	; 0x24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f1c3 0307 	rsb	r3, r3, #7
 800647a:	2b04      	cmp	r3, #4
 800647c:	bf28      	it	cs
 800647e:	2304      	movcs	r3, #4
 8006480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	3304      	adds	r3, #4
 8006486:	2b06      	cmp	r3, #6
 8006488:	d902      	bls.n	8006490 <NVIC_EncodePriority+0x30>
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	3b03      	subs	r3, #3
 800648e:	e000      	b.n	8006492 <NVIC_EncodePriority+0x32>
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006494:	f04f 32ff 	mov.w	r2, #4294967295
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43da      	mvns	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	401a      	ands	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064a8:	f04f 31ff 	mov.w	r1, #4294967295
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	fa01 f303 	lsl.w	r3, r1, r3
 80064b2:	43d9      	mvns	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b8:	4313      	orrs	r3, r2
         );
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3724      	adds	r7, #36	; 0x24
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064d8:	d301      	bcc.n	80064de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064da:	2301      	movs	r3, #1
 80064dc:	e00f      	b.n	80064fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064de:	4a0a      	ldr	r2, [pc, #40]	; (8006508 <SysTick_Config+0x40>)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064e6:	210f      	movs	r1, #15
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	f7ff ff8e 	bl	800640c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <SysTick_Config+0x40>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064f6:	4b04      	ldr	r3, [pc, #16]	; (8006508 <SysTick_Config+0x40>)
 80064f8:	2207      	movs	r2, #7
 80064fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	e000e010 	.word	0xe000e010

0800650c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff ff29 	bl	800636c <__NVIC_SetPriorityGrouping>
}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006522:	b580      	push	{r7, lr}
 8006524:	b086      	sub	sp, #24
 8006526:	af00      	add	r7, sp, #0
 8006528:	4603      	mov	r3, r0
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006534:	f7ff ff3e 	bl	80063b4 <__NVIC_GetPriorityGrouping>
 8006538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	6978      	ldr	r0, [r7, #20]
 8006540:	f7ff ff8e 	bl	8006460 <NVIC_EncodePriority>
 8006544:	4602      	mov	r2, r0
 8006546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff ff5d 	bl	800640c <__NVIC_SetPriority>
}
 8006552:	bf00      	nop
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	4603      	mov	r3, r0
 8006562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff ff31 	bl	80063d0 <__NVIC_EnableIRQ>
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff ffa2 	bl	80064c8 <SysTick_Config>
 8006584:	4603      	mov	r3, r0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800659c:	f7ff feb6 	bl	800630c <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e099      	b.n	80066e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0201 	bic.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065cc:	e00f      	b.n	80065ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065ce:	f7ff fe9d 	bl	800630c <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b05      	cmp	r3, #5
 80065da:	d908      	bls.n	80065ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2203      	movs	r2, #3
 80065e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e078      	b.n	80066e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e8      	bne.n	80065ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4b38      	ldr	r3, [pc, #224]	; (80066e8 <HAL_DMA_Init+0x158>)
 8006608:	4013      	ands	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800661a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	2b04      	cmp	r3, #4
 8006646:	d107      	bne.n	8006658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	4313      	orrs	r3, r2
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	2b04      	cmp	r3, #4
 8006680:	d117      	bne.n	80066b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00e      	beq.n	80066b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8bd 	bl	8006814 <DMA_CheckFifoParam>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2240      	movs	r2, #64	; 0x40
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80066ae:	2301      	movs	r3, #1
 80066b0:	e016      	b.n	80066e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f874 	bl	80067a8 <DMA_CalcBaseAndBitshift>
 80066c0:	4603      	mov	r3, r0
 80066c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c8:	223f      	movs	r2, #63	; 0x3f
 80066ca:	409a      	lsls	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	f010803f 	.word	0xf010803f

080066ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e050      	b.n	80067a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d101      	bne.n	800670e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800670a:	2302      	movs	r3, #2
 800670c:	e048      	b.n	80067a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0201 	bic.w	r2, r2, #1
 800671c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2200      	movs	r2, #0
 800672c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2221      	movs	r2, #33	; 0x21
 800674c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f82a 	bl	80067a8 <DMA_CalcBaseAndBitshift>
 8006754:	4603      	mov	r3, r0
 8006756:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006780:	223f      	movs	r2, #63	; 0x3f
 8006782:	409a      	lsls	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	3b10      	subs	r3, #16
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <DMA_CalcBaseAndBitshift+0x64>)
 80067ba:	fba2 2303 	umull	r2, r3, r2, r3
 80067be:	091b      	lsrs	r3, r3, #4
 80067c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <DMA_CalcBaseAndBitshift+0x68>)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d909      	bls.n	80067ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	659a      	str	r2, [r3, #88]	; 0x58
 80067e8:	e007      	b.n	80067fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	aaaaaaab 	.word	0xaaaaaaab
 8006810:	08010f14 	.word	0x08010f14

08006814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d11f      	bne.n	800686e <DMA_CheckFifoParam+0x5a>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d856      	bhi.n	80068e2 <DMA_CheckFifoParam+0xce>
 8006834:	a201      	add	r2, pc, #4	; (adr r2, 800683c <DMA_CheckFifoParam+0x28>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	0800684d 	.word	0x0800684d
 8006840:	0800685f 	.word	0x0800685f
 8006844:	0800684d 	.word	0x0800684d
 8006848:	080068e3 	.word	0x080068e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d046      	beq.n	80068e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800685c:	e043      	b.n	80068e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006866:	d140      	bne.n	80068ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800686c:	e03d      	b.n	80068ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006876:	d121      	bne.n	80068bc <DMA_CheckFifoParam+0xa8>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d837      	bhi.n	80068ee <DMA_CheckFifoParam+0xda>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <DMA_CheckFifoParam+0x70>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	08006895 	.word	0x08006895
 8006888:	0800689b 	.word	0x0800689b
 800688c:	08006895 	.word	0x08006895
 8006890:	080068ad 	.word	0x080068ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
      break;
 8006898:	e030      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d025      	beq.n	80068f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068aa:	e022      	b.n	80068f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068b4:	d11f      	bne.n	80068f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068ba:	e01c      	b.n	80068f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d903      	bls.n	80068ca <DMA_CheckFifoParam+0xb6>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d003      	beq.n	80068d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068c8:	e018      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	73fb      	strb	r3, [r7, #15]
      break;
 80068ce:	e015      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00e      	beq.n	80068fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
      break;
 80068e0:	e00b      	b.n	80068fa <DMA_CheckFifoParam+0xe6>
      break;
 80068e2:	bf00      	nop
 80068e4:	e00a      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068e6:	bf00      	nop
 80068e8:	e008      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068ea:	bf00      	nop
 80068ec:	e006      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068ee:	bf00      	nop
 80068f0:	e004      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068f2:	bf00      	nop
 80068f4:	e002      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;   
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068fa:	bf00      	nop
    }
  } 
  
  return status; 
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop

0800690c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e03b      	b.n	8006996 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f833 	bl	800699e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	f023 0107 	bic.w	r1, r3, #7
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006976:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68d1      	ldr	r1, [r2, #12]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	430b      	orrs	r3, r1
 8006984:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b086      	sub	sp, #24
 80069b6:	af02      	add	r7, sp, #8
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_DMA2D_Start+0x1c>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e018      	b.n	8006a00 <HAL_DMA2D_Start+0x4e>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f989 	bl	8006d00 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d056      	beq.n	8006ad2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006a24:	f7ff fc72 	bl	800630c <HAL_GetTick>
 8006a28:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a2a:	e04b      	b.n	8006ac4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d023      	beq.n	8006a86 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4c:	f043 0202 	orr.w	r2, r3, #2
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	f043 0201 	orr.w	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2221      	movs	r2, #33	; 0x21
 8006a70:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2204      	movs	r2, #4
 8006a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e0a5      	b.n	8006bd2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d01a      	beq.n	8006ac4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006a8e:	f7ff fc3d 	bl	800630c <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d302      	bcc.n	8006aa4 <HAL_DMA2D_PollForTransfer+0x9c>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10f      	bne.n	8006ac4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e086      	b.n	8006bd2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0ac      	beq.n	8006a2c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d061      	beq.n	8006bb8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006af4:	f7ff fc0a 	bl	800630c <HAL_GetTick>
 8006af8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006afa:	e056      	b.n	8006baa <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d02e      	beq.n	8006b6c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	f043 0204 	orr.w	r2, r3, #4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	f043 0202 	orr.w	r2, r3, #2
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	f043 0201 	orr.w	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2229      	movs	r2, #41	; 0x29
 8006b56:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2204      	movs	r2, #4
 8006b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e032      	b.n	8006bd2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d01a      	beq.n	8006baa <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006b74:	f7ff fbca 	bl	800630c <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d302      	bcc.n	8006b8a <HAL_DMA2D_PollForTransfer+0x182>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10f      	bne.n	8006baa <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	f043 0220 	orr.w	r2, r3, #32
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2203      	movs	r2, #3
 8006b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e013      	b.n	8006bd2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0a1      	beq.n	8006afc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2212      	movs	r2, #18
 8006bbe:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_DMA2D_ConfigLayer+0x20>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e079      	b.n	8006cf0 <HAL_DMA2D_ConfigLayer+0x114>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	3318      	adds	r3, #24
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	041b      	lsls	r3, r3, #16
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006c26:	4b35      	ldr	r3, [pc, #212]	; (8006cfc <HAL_DMA2D_ConfigLayer+0x120>)
 8006c28:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b0a      	cmp	r3, #10
 8006c30:	d003      	beq.n	8006c3a <HAL_DMA2D_ConfigLayer+0x5e>
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b09      	cmp	r3, #9
 8006c38:	d107      	bne.n	8006c4a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e005      	b.n	8006c56 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	061b      	lsls	r3, r3, #24
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d120      	bne.n	8006c9e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	43db      	mvns	r3, r3
 8006c66:	ea02 0103 	and.w	r1, r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b0a      	cmp	r3, #10
 8006c84:	d003      	beq.n	8006c8e <HAL_DMA2D_ConfigLayer+0xb2>
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d127      	bne.n	8006cde <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c9c:	e01f      	b.n	8006cde <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	ea02 0103 	and.w	r1, r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	6812      	ldr	r2, [r2, #0]
 8006cbe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b0a      	cmp	r3, #10
 8006cc6:	d003      	beq.n	8006cd0 <HAL_DMA2D_ConfigLayer+0xf4>
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b09      	cmp	r3, #9
 8006cce:	d106      	bne.n	8006cde <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006cdc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	ff03000f 	.word	0xff03000f

08006d00 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b08b      	sub	sp, #44	; 0x2c
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d14:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	041a      	lsls	r2, r3, #16
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d38:	d174      	bne.n	8006e24 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d40:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d48:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d50:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d108      	bne.n	8006d72 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	431a      	orrs	r2, r3
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d70:	e053      	b.n	8006e1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d106      	bne.n	8006d88 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
 8006d86:	e048      	b.n	8006e1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d111      	bne.n	8006db4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	0cdb      	lsrs	r3, r3, #19
 8006d94:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	0a9b      	lsrs	r3, r3, #10
 8006d9a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	08db      	lsrs	r3, r3, #3
 8006da0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	02db      	lsls	r3, r3, #11
 8006daa:	4313      	orrs	r3, r2
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
 8006db2:	e032      	b.n	8006e1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d117      	bne.n	8006dec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	0fdb      	lsrs	r3, r3, #31
 8006dc0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	0cdb      	lsrs	r3, r3, #19
 8006dc6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	0adb      	lsrs	r3, r3, #11
 8006dcc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	08db      	lsrs	r3, r3, #3
 8006dd2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	029b      	lsls	r3, r3, #10
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	03db      	lsls	r3, r3, #15
 8006de2:	4313      	orrs	r3, r2
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dea:	e016      	b.n	8006e1a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	0f1b      	lsrs	r3, r3, #28
 8006df0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	0d1b      	lsrs	r3, r3, #20
 8006df6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	0b1b      	lsrs	r3, r3, #12
 8006dfc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	091b      	lsrs	r3, r3, #4
 8006e02:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	011a      	lsls	r2, r3, #4
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	031b      	lsls	r3, r3, #12
 8006e12:	4313      	orrs	r3, r2
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e20:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006e22:	e003      	b.n	8006e2c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	60da      	str	r2, [r3, #12]
}
 8006e2c:	bf00      	nop
 8006e2e:	372c      	adds	r7, #44	; 0x2c
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b089      	sub	sp, #36	; 0x24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	e177      	b.n	8007144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e54:	2201      	movs	r2, #1
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4013      	ands	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	f040 8166 	bne.w	800713e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d00b      	beq.n	8006e92 <HAL_GPIO_Init+0x5a>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d007      	beq.n	8006e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e86:	2b11      	cmp	r3, #17
 8006e88:	d003      	beq.n	8006e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b12      	cmp	r3, #18
 8006e90:	d130      	bne.n	8006ef4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ec8:	2201      	movs	r2, #1
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	091b      	lsrs	r3, r3, #4
 8006ede:	f003 0201 	and.w	r2, r3, #1
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	2203      	movs	r2, #3
 8006f00:	fa02 f303 	lsl.w	r3, r2, r3
 8006f04:	43db      	mvns	r3, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	fa02 f303 	lsl.w	r3, r2, r3
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d003      	beq.n	8006f34 <HAL_GPIO_Init+0xfc>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b12      	cmp	r3, #18
 8006f32:	d123      	bne.n	8006f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	08da      	lsrs	r2, r3, #3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3208      	adds	r2, #8
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	220f      	movs	r2, #15
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	43db      	mvns	r3, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	08da      	lsrs	r2, r3, #3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3208      	adds	r2, #8
 8006f76:	69b9      	ldr	r1, [r7, #24]
 8006f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	2203      	movs	r2, #3
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4013      	ands	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f003 0203 	and.w	r2, r3, #3
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 80c0 	beq.w	800713e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	4b66      	ldr	r3, [pc, #408]	; (800715c <HAL_GPIO_Init+0x324>)
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	4a65      	ldr	r2, [pc, #404]	; (800715c <HAL_GPIO_Init+0x324>)
 8006fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8006fce:	4b63      	ldr	r3, [pc, #396]	; (800715c <HAL_GPIO_Init+0x324>)
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fda:	4a61      	ldr	r2, [pc, #388]	; (8007160 <HAL_GPIO_Init+0x328>)
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	089b      	lsrs	r3, r3, #2
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	220f      	movs	r2, #15
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a58      	ldr	r2, [pc, #352]	; (8007164 <HAL_GPIO_Init+0x32c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d037      	beq.n	8007076 <HAL_GPIO_Init+0x23e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a57      	ldr	r2, [pc, #348]	; (8007168 <HAL_GPIO_Init+0x330>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d031      	beq.n	8007072 <HAL_GPIO_Init+0x23a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a56      	ldr	r2, [pc, #344]	; (800716c <HAL_GPIO_Init+0x334>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d02b      	beq.n	800706e <HAL_GPIO_Init+0x236>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a55      	ldr	r2, [pc, #340]	; (8007170 <HAL_GPIO_Init+0x338>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d025      	beq.n	800706a <HAL_GPIO_Init+0x232>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a54      	ldr	r2, [pc, #336]	; (8007174 <HAL_GPIO_Init+0x33c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01f      	beq.n	8007066 <HAL_GPIO_Init+0x22e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a53      	ldr	r2, [pc, #332]	; (8007178 <HAL_GPIO_Init+0x340>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d019      	beq.n	8007062 <HAL_GPIO_Init+0x22a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a52      	ldr	r2, [pc, #328]	; (800717c <HAL_GPIO_Init+0x344>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d013      	beq.n	800705e <HAL_GPIO_Init+0x226>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a51      	ldr	r2, [pc, #324]	; (8007180 <HAL_GPIO_Init+0x348>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00d      	beq.n	800705a <HAL_GPIO_Init+0x222>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a50      	ldr	r2, [pc, #320]	; (8007184 <HAL_GPIO_Init+0x34c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d007      	beq.n	8007056 <HAL_GPIO_Init+0x21e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a4f      	ldr	r2, [pc, #316]	; (8007188 <HAL_GPIO_Init+0x350>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d101      	bne.n	8007052 <HAL_GPIO_Init+0x21a>
 800704e:	2309      	movs	r3, #9
 8007050:	e012      	b.n	8007078 <HAL_GPIO_Init+0x240>
 8007052:	230a      	movs	r3, #10
 8007054:	e010      	b.n	8007078 <HAL_GPIO_Init+0x240>
 8007056:	2308      	movs	r3, #8
 8007058:	e00e      	b.n	8007078 <HAL_GPIO_Init+0x240>
 800705a:	2307      	movs	r3, #7
 800705c:	e00c      	b.n	8007078 <HAL_GPIO_Init+0x240>
 800705e:	2306      	movs	r3, #6
 8007060:	e00a      	b.n	8007078 <HAL_GPIO_Init+0x240>
 8007062:	2305      	movs	r3, #5
 8007064:	e008      	b.n	8007078 <HAL_GPIO_Init+0x240>
 8007066:	2304      	movs	r3, #4
 8007068:	e006      	b.n	8007078 <HAL_GPIO_Init+0x240>
 800706a:	2303      	movs	r3, #3
 800706c:	e004      	b.n	8007078 <HAL_GPIO_Init+0x240>
 800706e:	2302      	movs	r3, #2
 8007070:	e002      	b.n	8007078 <HAL_GPIO_Init+0x240>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <HAL_GPIO_Init+0x240>
 8007076:	2300      	movs	r3, #0
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	f002 0203 	and.w	r2, r2, #3
 800707e:	0092      	lsls	r2, r2, #2
 8007080:	4093      	lsls	r3, r2
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007088:	4935      	ldr	r1, [pc, #212]	; (8007160 <HAL_GPIO_Init+0x328>)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	089b      	lsrs	r3, r3, #2
 800708e:	3302      	adds	r3, #2
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007096:	4b3d      	ldr	r3, [pc, #244]	; (800718c <HAL_GPIO_Init+0x354>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	43db      	mvns	r3, r3
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	4013      	ands	r3, r2
 80070a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070ba:	4a34      	ldr	r2, [pc, #208]	; (800718c <HAL_GPIO_Init+0x354>)
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <HAL_GPIO_Init+0x354>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	43db      	mvns	r3, r3
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	4013      	ands	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070e4:	4a29      	ldr	r2, [pc, #164]	; (800718c <HAL_GPIO_Init+0x354>)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ea:	4b28      	ldr	r3, [pc, #160]	; (800718c <HAL_GPIO_Init+0x354>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	43db      	mvns	r3, r3
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	4013      	ands	r3, r2
 80070f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800710e:	4a1f      	ldr	r2, [pc, #124]	; (800718c <HAL_GPIO_Init+0x354>)
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007114:	4b1d      	ldr	r3, [pc, #116]	; (800718c <HAL_GPIO_Init+0x354>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	43db      	mvns	r3, r3
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4013      	ands	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007138:	4a14      	ldr	r2, [pc, #80]	; (800718c <HAL_GPIO_Init+0x354>)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	3301      	adds	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b0f      	cmp	r3, #15
 8007148:	f67f ae84 	bls.w	8006e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	3724      	adds	r7, #36	; 0x24
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40023800 	.word	0x40023800
 8007160:	40013800 	.word	0x40013800
 8007164:	40020000 	.word	0x40020000
 8007168:	40020400 	.word	0x40020400
 800716c:	40020800 	.word	0x40020800
 8007170:	40020c00 	.word	0x40020c00
 8007174:	40021000 	.word	0x40021000
 8007178:	40021400 	.word	0x40021400
 800717c:	40021800 	.word	0x40021800
 8007180:	40021c00 	.word	0x40021c00
 8007184:	40022000 	.word	0x40022000
 8007188:	40022400 	.word	0x40022400
 800718c:	40013c00 	.word	0x40013c00

08007190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	807b      	strh	r3, [r7, #2]
 800719c:	4613      	mov	r3, r2
 800719e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071a0:	787b      	ldrb	r3, [r7, #1]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071a6:	887a      	ldrh	r2, [r7, #2]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071ac:	e003      	b.n	80071b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071ae:	887b      	ldrh	r3, [r7, #2]
 80071b0:	041a      	lsls	r2, r3, #16
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	619a      	str	r2, [r3, #24]
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695a      	ldr	r2, [r3, #20]
 80071d2:	887b      	ldrh	r3, [r7, #2]
 80071d4:	401a      	ands	r2, r3
 80071d6:	887b      	ldrh	r3, [r7, #2]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d104      	bne.n	80071e6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071dc:	887b      	ldrh	r3, [r7, #2]
 80071de:	041a      	lsls	r2, r3, #16
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80071e4:	e002      	b.n	80071ec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80071e6:	887a      	ldrh	r2, [r7, #2]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	619a      	str	r2, [r3, #24]
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e12b      	b.n	8007462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f95d 	bl	80074de <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2224      	movs	r2, #36	; 0x24
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0201 	bic.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800724a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800725a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800725c:	f001 fef8 	bl	8009050 <HAL_RCC_GetPCLK1Freq>
 8007260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	4a81      	ldr	r2, [pc, #516]	; (800746c <HAL_I2C_Init+0x274>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d807      	bhi.n	800727c <HAL_I2C_Init+0x84>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4a80      	ldr	r2, [pc, #512]	; (8007470 <HAL_I2C_Init+0x278>)
 8007270:	4293      	cmp	r3, r2
 8007272:	bf94      	ite	ls
 8007274:	2301      	movls	r3, #1
 8007276:	2300      	movhi	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	e006      	b.n	800728a <HAL_I2C_Init+0x92>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a7d      	ldr	r2, [pc, #500]	; (8007474 <HAL_I2C_Init+0x27c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	bf94      	ite	ls
 8007284:	2301      	movls	r3, #1
 8007286:	2300      	movhi	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e0e7      	b.n	8007462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a78      	ldr	r2, [pc, #480]	; (8007478 <HAL_I2C_Init+0x280>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	0c9b      	lsrs	r3, r3, #18
 800729c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a6a      	ldr	r2, [pc, #424]	; (800746c <HAL_I2C_Init+0x274>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d802      	bhi.n	80072cc <HAL_I2C_Init+0xd4>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	3301      	adds	r3, #1
 80072ca:	e009      	b.n	80072e0 <HAL_I2C_Init+0xe8>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	4a69      	ldr	r2, [pc, #420]	; (800747c <HAL_I2C_Init+0x284>)
 80072d8:	fba2 2303 	umull	r2, r3, r2, r3
 80072dc:	099b      	lsrs	r3, r3, #6
 80072de:	3301      	adds	r3, #1
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	430b      	orrs	r3, r1
 80072e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	495c      	ldr	r1, [pc, #368]	; (800746c <HAL_I2C_Init+0x274>)
 80072fc:	428b      	cmp	r3, r1
 80072fe:	d819      	bhi.n	8007334 <HAL_I2C_Init+0x13c>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	1e59      	subs	r1, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	fbb1 f3f3 	udiv	r3, r1, r3
 800730e:	1c59      	adds	r1, r3, #1
 8007310:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007314:	400b      	ands	r3, r1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_I2C_Init+0x138>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1e59      	subs	r1, r3, #1
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	fbb1 f3f3 	udiv	r3, r1, r3
 8007328:	3301      	adds	r3, #1
 800732a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732e:	e051      	b.n	80073d4 <HAL_I2C_Init+0x1dc>
 8007330:	2304      	movs	r3, #4
 8007332:	e04f      	b.n	80073d4 <HAL_I2C_Init+0x1dc>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d111      	bne.n	8007360 <HAL_I2C_Init+0x168>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	1e58      	subs	r0, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	440b      	add	r3, r1
 800734a:	fbb0 f3f3 	udiv	r3, r0, r3
 800734e:	3301      	adds	r3, #1
 8007350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	e012      	b.n	8007386 <HAL_I2C_Init+0x18e>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	1e58      	subs	r0, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6859      	ldr	r1, [r3, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	0099      	lsls	r1, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	fbb0 f3f3 	udiv	r3, r0, r3
 8007376:	3301      	adds	r3, #1
 8007378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_I2C_Init+0x196>
 800738a:	2301      	movs	r3, #1
 800738c:	e022      	b.n	80073d4 <HAL_I2C_Init+0x1dc>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10e      	bne.n	80073b4 <HAL_I2C_Init+0x1bc>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1e58      	subs	r0, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6859      	ldr	r1, [r3, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	440b      	add	r3, r1
 80073a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80073a8:	3301      	adds	r3, #1
 80073aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b2:	e00f      	b.n	80073d4 <HAL_I2C_Init+0x1dc>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1e58      	subs	r0, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	0099      	lsls	r1, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80073ca:	3301      	adds	r3, #1
 80073cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	6809      	ldr	r1, [r1, #0]
 80073d8:	4313      	orrs	r3, r2
 80073da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6911      	ldr	r1, [r2, #16]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68d2      	ldr	r2, [r2, #12]
 800740e:	4311      	orrs	r1, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	430b      	orrs	r3, r1
 8007416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	000186a0 	.word	0x000186a0
 8007470:	001e847f 	.word	0x001e847f
 8007474:	003d08ff 	.word	0x003d08ff
 8007478:	431bde83 	.word	0x431bde83
 800747c:	10624dd3 	.word	0x10624dd3

08007480 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e021      	b.n	80074d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2224      	movs	r2, #36	; 0x24
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f821 	bl	80074f2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	4608      	mov	r0, r1
 8007512:	4611      	mov	r1, r2
 8007514:	461a      	mov	r2, r3
 8007516:	4603      	mov	r3, r0
 8007518:	817b      	strh	r3, [r7, #10]
 800751a:	460b      	mov	r3, r1
 800751c:	813b      	strh	r3, [r7, #8]
 800751e:	4613      	mov	r3, r2
 8007520:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007522:	f7fe fef3 	bl	800630c <HAL_GetTick>
 8007526:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b20      	cmp	r3, #32
 8007532:	f040 80d9 	bne.w	80076e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	2319      	movs	r3, #25
 800753c:	2201      	movs	r2, #1
 800753e:	496d      	ldr	r1, [pc, #436]	; (80076f4 <HAL_I2C_Mem_Write+0x1ec>)
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fc89 	bl	8007e58 <I2C_WaitOnFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800754c:	2302      	movs	r3, #2
 800754e:	e0cc      	b.n	80076ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_I2C_Mem_Write+0x56>
 800755a:	2302      	movs	r3, #2
 800755c:	e0c5      	b.n	80076ea <HAL_I2C_Mem_Write+0x1e2>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b01      	cmp	r3, #1
 8007572:	d007      	beq.n	8007584 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007592:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2221      	movs	r2, #33	; 0x21
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2240      	movs	r2, #64	; 0x40
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a3a      	ldr	r2, [r7, #32]
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a4d      	ldr	r2, [pc, #308]	; (80076f8 <HAL_I2C_Mem_Write+0x1f0>)
 80075c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075c6:	88f8      	ldrh	r0, [r7, #6]
 80075c8:	893a      	ldrh	r2, [r7, #8]
 80075ca:	8979      	ldrh	r1, [r7, #10]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4603      	mov	r3, r0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fac4 	bl	8007b64 <I2C_RequestMemoryWrite>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d052      	beq.n	8007688 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e081      	b.n	80076ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fd0a 	bl	8008004 <I2C_WaitOnTXEFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00d      	beq.n	8007612 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d107      	bne.n	800760e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e06b      	b.n	80076ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29a      	uxth	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d11b      	bne.n	8007688 <HAL_I2C_Mem_Write+0x180>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007654:	2b00      	cmp	r3, #0
 8007656:	d017      	beq.n	8007688 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1aa      	bne.n	80075e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fcf6 	bl	8008086 <I2C_WaitOnBTFFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00d      	beq.n	80076bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d107      	bne.n	80076b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e016      	b.n	80076ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	e000      	b.n	80076ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
  }
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	00100002 	.word	0x00100002
 80076f8:	ffff0000 	.word	0xffff0000

080076fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08c      	sub	sp, #48	; 0x30
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	461a      	mov	r2, r3
 800770a:	4603      	mov	r3, r0
 800770c:	817b      	strh	r3, [r7, #10]
 800770e:	460b      	mov	r3, r1
 8007710:	813b      	strh	r3, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007716:	f7fe fdf9 	bl	800630c <HAL_GetTick>
 800771a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b20      	cmp	r3, #32
 8007726:	f040 8208 	bne.w	8007b3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	2319      	movs	r3, #25
 8007730:	2201      	movs	r2, #1
 8007732:	497b      	ldr	r1, [pc, #492]	; (8007920 <HAL_I2C_Mem_Read+0x224>)
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fb8f 	bl	8007e58 <I2C_WaitOnFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
 8007742:	e1fb      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <HAL_I2C_Mem_Read+0x56>
 800774e:	2302      	movs	r3, #2
 8007750:	e1f4      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b01      	cmp	r3, #1
 8007766:	d007      	beq.n	8007778 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0201 	orr.w	r2, r2, #1
 8007776:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007786:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2222      	movs	r2, #34	; 0x22
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2240      	movs	r2, #64	; 0x40
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80077a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4a5b      	ldr	r2, [pc, #364]	; (8007924 <HAL_I2C_Mem_Read+0x228>)
 80077b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077ba:	88f8      	ldrh	r0, [r7, #6]
 80077bc:	893a      	ldrh	r2, [r7, #8]
 80077be:	8979      	ldrh	r1, [r7, #10]
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	9301      	str	r3, [sp, #4]
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	4603      	mov	r3, r0
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 fa5e 	bl	8007c8c <I2C_RequestMemoryRead>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e1b0      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d113      	bne.n	800780a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e2:	2300      	movs	r3, #0
 80077e4:	623b      	str	r3, [r7, #32]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	623b      	str	r3, [r7, #32]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	623b      	str	r3, [r7, #32]
 80077f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	e184      	b.n	8007b14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800780e:	2b01      	cmp	r3, #1
 8007810:	d11b      	bne.n	800784a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	61fb      	str	r3, [r7, #28]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	61fb      	str	r3, [r7, #28]
 8007836:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e164      	b.n	8007b14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784e:	2b02      	cmp	r3, #2
 8007850:	d11b      	bne.n	800788a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007860:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007872:	2300      	movs	r3, #0
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	e144      	b.n	8007b14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	617b      	str	r3, [r7, #20]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80078a0:	e138      	b.n	8007b14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	f200 80f1 	bhi.w	8007a8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d123      	bne.n	80078fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fc25 	bl	8008108 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e139      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691a      	ldr	r2, [r3, #16]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078fa:	e10b      	b.n	8007b14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007900:	2b02      	cmp	r3, #2
 8007902:	d14e      	bne.n	80079a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	2200      	movs	r2, #0
 800790c:	4906      	ldr	r1, [pc, #24]	; (8007928 <HAL_I2C_Mem_Read+0x22c>)
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 faa2 	bl	8007e58 <I2C_WaitOnFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e10e      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
 800791e:	bf00      	nop
 8007920:	00100002 	.word	0x00100002
 8007924:	ffff0000 	.word	0xffff0000
 8007928:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800793a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691a      	ldr	r2, [r3, #16]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079a0:	e0b8      	b.n	8007b14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a8:	2200      	movs	r2, #0
 80079aa:	4966      	ldr	r1, [pc, #408]	; (8007b44 <HAL_I2C_Mem_Read+0x448>)
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fa53 	bl	8007e58 <I2C_WaitOnFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0bf      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691a      	ldr	r2, [r3, #16]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	2200      	movs	r2, #0
 8007a06:	494f      	ldr	r1, [pc, #316]	; (8007b44 <HAL_I2C_Mem_Read+0x448>)
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fa25 	bl	8007e58 <I2C_WaitOnFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e091      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691a      	ldr	r2, [r3, #16]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a8c:	e042      	b.n	8007b14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 fb38 	bl	8008108 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e04c      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	b2d2      	uxtb	r2, r2
 8007aae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d118      	bne.n	8007b14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f47f aec2 	bne.w	80078a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	e000      	b.n	8007b3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007b3a:	2302      	movs	r3, #2
  }
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3728      	adds	r7, #40	; 0x28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	00010004 	.word	0x00010004

08007b48 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b56:	b2db      	uxtb	r3, r3
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	817b      	strh	r3, [r7, #10]
 8007b76:	460b      	mov	r3, r1
 8007b78:	813b      	strh	r3, [r7, #8]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f95c 	bl	8007e58 <I2C_WaitOnFlagUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00c      	beq.n	8007bc0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e05f      	b.n	8007c80 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bc0:	897b      	ldrh	r3, [r7, #10]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	492c      	ldr	r1, [pc, #176]	; (8007c88 <I2C_RequestMemoryWrite+0x124>)
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f995 	bl	8007f06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e04c      	b.n	8007c80 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfe:	6a39      	ldr	r1, [r7, #32]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f9ff 	bl	8008004 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00d      	beq.n	8007c28 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d107      	bne.n	8007c24 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e02b      	b.n	8007c80 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c28:	88fb      	ldrh	r3, [r7, #6]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d105      	bne.n	8007c3a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c2e:	893b      	ldrh	r3, [r7, #8]
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	611a      	str	r2, [r3, #16]
 8007c38:	e021      	b.n	8007c7e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c3a:	893b      	ldrh	r3, [r7, #8]
 8007c3c:	0a1b      	lsrs	r3, r3, #8
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	6a39      	ldr	r1, [r7, #32]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f9d9 	bl	8008004 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00d      	beq.n	8007c74 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d107      	bne.n	8007c70 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e005      	b.n	8007c80 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c74:	893b      	ldrh	r3, [r7, #8]
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	00010002 	.word	0x00010002

08007c8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	4608      	mov	r0, r1
 8007c96:	4611      	mov	r1, r2
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	817b      	strh	r3, [r7, #10]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	813b      	strh	r3, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f8c0 	bl	8007e58 <I2C_WaitOnFlagUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00c      	beq.n	8007cf8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e0a9      	b.n	8007e4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cf8:	897b      	ldrh	r3, [r7, #10]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	6a3a      	ldr	r2, [r7, #32]
 8007d0c:	4951      	ldr	r1, [pc, #324]	; (8007e54 <I2C_RequestMemoryRead+0x1c8>)
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 f8f9 	bl	8007f06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e096      	b.n	8007e4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d36:	6a39      	ldr	r1, [r7, #32]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f963 	bl	8008004 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00d      	beq.n	8007d60 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d107      	bne.n	8007d5c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e075      	b.n	8007e4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d105      	bne.n	8007d72 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d66:	893b      	ldrh	r3, [r7, #8]
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	611a      	str	r2, [r3, #16]
 8007d70:	e021      	b.n	8007db6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d72:	893b      	ldrh	r3, [r7, #8]
 8007d74:	0a1b      	lsrs	r3, r3, #8
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d82:	6a39      	ldr	r1, [r7, #32]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 f93d 	bl	8008004 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00d      	beq.n	8007dac <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d107      	bne.n	8007da8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007da6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e04f      	b.n	8007e4c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dac:	893b      	ldrh	r3, [r7, #8]
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db8:	6a39      	ldr	r1, [r7, #32]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f922 	bl	8008004 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00d      	beq.n	8007de2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d107      	bne.n	8007dde <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ddc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e034      	b.n	8007e4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 f82a 	bl	8007e58 <I2C_WaitOnFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00c      	beq.n	8007e24 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e013      	b.n	8007e4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e24:	897b      	ldrh	r3, [r7, #10]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f043 0301 	orr.w	r3, r3, #1
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	6a3a      	ldr	r2, [r7, #32]
 8007e38:	4906      	ldr	r1, [pc, #24]	; (8007e54 <I2C_RequestMemoryRead+0x1c8>)
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 f863 	bl	8007f06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e000      	b.n	8007e4c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	00010002 	.word	0x00010002

08007e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e68:	e025      	b.n	8007eb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d021      	beq.n	8007eb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e72:	f7fe fa4b 	bl	800630c <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d302      	bcc.n	8007e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d116      	bne.n	8007eb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f043 0220 	orr.w	r2, r3, #32
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e023      	b.n	8007efe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	0c1b      	lsrs	r3, r3, #16
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d10d      	bne.n	8007edc <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	43da      	mvns	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bf0c      	ite	eq
 8007ed2:	2301      	moveq	r3, #1
 8007ed4:	2300      	movne	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	e00c      	b.n	8007ef6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	43da      	mvns	r2, r3
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	bf0c      	ite	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	2300      	movne	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d0b6      	beq.n	8007e6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f14:	e051      	b.n	8007fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f24:	d123      	bne.n	8007f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	f043 0204 	orr.w	r2, r3, #4
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e046      	b.n	8007ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f74:	d021      	beq.n	8007fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f76:	f7fe f9c9 	bl	800630c <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d302      	bcc.n	8007f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d116      	bne.n	8007fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f043 0220 	orr.w	r2, r3, #32
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e020      	b.n	8007ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d10c      	bne.n	8007fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	43da      	mvns	r2, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bf14      	ite	ne
 8007fd6:	2301      	movne	r3, #1
 8007fd8:	2300      	moveq	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	e00b      	b.n	8007ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	43da      	mvns	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bf14      	ite	ne
 8007ff0:	2301      	movne	r3, #1
 8007ff2:	2300      	moveq	r3, #0
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d18d      	bne.n	8007f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008010:	e02d      	b.n	800806e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f8ce 	bl	80081b4 <I2C_IsAcknowledgeFailed>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e02d      	b.n	800807e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d021      	beq.n	800806e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802a:	f7fe f96f 	bl	800630c <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d116      	bne.n	800806e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	f043 0220 	orr.w	r2, r3, #32
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e007      	b.n	800807e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008078:	2b80      	cmp	r3, #128	; 0x80
 800807a:	d1ca      	bne.n	8008012 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008092:	e02d      	b.n	80080f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f000 f88d 	bl	80081b4 <I2C_IsAcknowledgeFailed>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e02d      	b.n	8008100 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080aa:	d021      	beq.n	80080f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ac:	f7fe f92e 	bl	800630c <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d302      	bcc.n	80080c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d116      	bne.n	80080f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	f043 0220 	orr.w	r2, r3, #32
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e007      	b.n	8008100 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d1ca      	bne.n	8008094 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008114:	e042      	b.n	800819c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	f003 0310 	and.w	r3, r3, #16
 8008120:	2b10      	cmp	r3, #16
 8008122:	d119      	bne.n	8008158 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0210 	mvn.w	r2, #16
 800812c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e029      	b.n	80081ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008158:	f7fe f8d8 	bl	800630c <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	429a      	cmp	r2, r3
 8008166:	d302      	bcc.n	800816e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d116      	bne.n	800819c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	f043 0220 	orr.w	r2, r3, #32
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e007      	b.n	80081ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b40      	cmp	r3, #64	; 0x40
 80081a8:	d1b5      	bne.n	8008116 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ca:	d11b      	bne.n	8008204 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	f043 0204 	orr.w	r2, r3, #4
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e000      	b.n	8008206 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e0bf      	b.n	80083a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8ba 	bl	80083b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008256:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6999      	ldr	r1, [r3, #24]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800826c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6899      	ldr	r1, [r3, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b4a      	ldr	r3, [pc, #296]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 8008288:	400b      	ands	r3, r1
 800828a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6899      	ldr	r1, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68d9      	ldr	r1, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 80082b6:	400b      	ands	r3, r1
 80082b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68d9      	ldr	r1, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1a      	ldr	r2, [r3, #32]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6919      	ldr	r1, [r3, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b33      	ldr	r3, [pc, #204]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 80082e4:	400b      	ands	r3, r1
 80082e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	041b      	lsls	r3, r3, #16
 80082ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6919      	ldr	r1, [r3, #16]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6959      	ldr	r1, [r3, #20]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 8008312:	400b      	ands	r3, r1
 8008314:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6959      	ldr	r1, [r3, #20]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0206 	orr.w	r2, r2, #6
 8008382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	f000f800 	.word	0xf000f800

080083b4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80083c8:	b5b0      	push	{r4, r5, r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_LTDC_ConfigLayer+0x1a>
 80083de:	2302      	movs	r3, #2
 80083e0:	e02c      	b.n	800843c <HAL_LTDC_ConfigLayer+0x74>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2202      	movs	r2, #2
 80083ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2134      	movs	r1, #52	; 0x34
 80083f8:	fb01 f303 	mul.w	r3, r1, r3
 80083fc:	4413      	add	r3, r2
 80083fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4614      	mov	r4, r2
 8008406:	461d      	mov	r5, r3
 8008408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800840a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800840c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800840e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 f83b 	bl	8008498 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2201      	movs	r2, #1
 8008428:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bdb0      	pop	{r4, r5, r7, pc}

08008444 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008452:	2b01      	cmp	r3, #1
 8008454:	d101      	bne.n	800845a <HAL_LTDC_EnableDither+0x16>
 8008456:	2302      	movs	r3, #2
 8008458:	e016      	b.n	8008488 <HAL_LTDC_EnableDither+0x44>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2202      	movs	r2, #2
 8008466:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <HAL_LTDC_EnableDither+0x50>)
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	4a09      	ldr	r2, [pc, #36]	; (8008494 <HAL_LTDC_EnableDither+0x50>)
 8008470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008474:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	40016800 	.word	0x40016800

08008498 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008498:	b480      	push	{r7}
 800849a:	b089      	sub	sp, #36	; 0x24
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	0c1b      	lsrs	r3, r3, #16
 80084b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b4:	4413      	add	r3, r2
 80084b6:	041b      	lsls	r3, r3, #16
 80084b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	01db      	lsls	r3, r3, #7
 80084c4:	4413      	add	r3, r2
 80084c6:	3384      	adds	r3, #132	; 0x84
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	6812      	ldr	r2, [r2, #0]
 80084ce:	4611      	mov	r1, r2
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	01d2      	lsls	r2, r2, #7
 80084d4:	440a      	add	r2, r1
 80084d6:	3284      	adds	r2, #132	; 0x84
 80084d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80084dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	0c1b      	lsrs	r3, r3, #16
 80084ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ee:	4413      	add	r3, r2
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4619      	mov	r1, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	01db      	lsls	r3, r3, #7
 80084fc:	440b      	add	r3, r1
 80084fe:	3384      	adds	r3, #132	; 0x84
 8008500:	4619      	mov	r1, r3
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4313      	orrs	r3, r2
 8008506:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008516:	4413      	add	r3, r2
 8008518:	041b      	lsls	r3, r3, #16
 800851a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	01db      	lsls	r3, r3, #7
 8008526:	4413      	add	r3, r2
 8008528:	3384      	adds	r3, #132	; 0x84
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	4611      	mov	r1, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	01d2      	lsls	r2, r2, #7
 8008536:	440a      	add	r2, r1
 8008538:	3284      	adds	r2, #132	; 0x84
 800853a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800853e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800854e:	4413      	add	r3, r2
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4619      	mov	r1, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	01db      	lsls	r3, r3, #7
 800855c:	440b      	add	r3, r1
 800855e:	3384      	adds	r3, #132	; 0x84
 8008560:	4619      	mov	r1, r3
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4313      	orrs	r3, r2
 8008566:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	01db      	lsls	r3, r3, #7
 8008572:	4413      	add	r3, r2
 8008574:	3384      	adds	r3, #132	; 0x84
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	4611      	mov	r1, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	01d2      	lsls	r2, r2, #7
 8008582:	440a      	add	r2, r1
 8008584:	3284      	adds	r2, #132	; 0x84
 8008586:	f023 0307 	bic.w	r3, r3, #7
 800858a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	01db      	lsls	r3, r3, #7
 8008596:	4413      	add	r3, r2
 8008598:	3384      	adds	r3, #132	; 0x84
 800859a:	461a      	mov	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80085b2:	041b      	lsls	r3, r3, #16
 80085b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	061b      	lsls	r3, r3, #24
 80085bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	01db      	lsls	r3, r3, #7
 80085c8:	4413      	add	r3, r2
 80085ca:	3384      	adds	r3, #132	; 0x84
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	01db      	lsls	r3, r3, #7
 80085d8:	4413      	add	r3, r2
 80085da:	3384      	adds	r3, #132	; 0x84
 80085dc:	461a      	mov	r2, r3
 80085de:	2300      	movs	r3, #0
 80085e0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085e8:	461a      	mov	r2, r3
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	431a      	orrs	r2, r3
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	431a      	orrs	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4619      	mov	r1, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	01db      	lsls	r3, r3, #7
 80085fc:	440b      	add	r3, r1
 80085fe:	3384      	adds	r3, #132	; 0x84
 8008600:	4619      	mov	r1, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	4313      	orrs	r3, r2
 8008606:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	01db      	lsls	r3, r3, #7
 8008612:	4413      	add	r3, r2
 8008614:	3384      	adds	r3, #132	; 0x84
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	6812      	ldr	r2, [r2, #0]
 800861c:	4611      	mov	r1, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	01d2      	lsls	r2, r2, #7
 8008622:	440a      	add	r2, r1
 8008624:	3284      	adds	r2, #132	; 0x84
 8008626:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800862a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	01db      	lsls	r3, r3, #7
 8008636:	4413      	add	r3, r2
 8008638:	3384      	adds	r3, #132	; 0x84
 800863a:	461a      	mov	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	01db      	lsls	r3, r3, #7
 800864c:	4413      	add	r3, r2
 800864e:	3384      	adds	r3, #132	; 0x84
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	4611      	mov	r1, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	01d2      	lsls	r2, r2, #7
 800865c:	440a      	add	r2, r1
 800865e:	3284      	adds	r2, #132	; 0x84
 8008660:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008664:	f023 0307 	bic.w	r3, r3, #7
 8008668:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	69da      	ldr	r2, [r3, #28]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	68f9      	ldr	r1, [r7, #12]
 8008674:	6809      	ldr	r1, [r1, #0]
 8008676:	4608      	mov	r0, r1
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	01c9      	lsls	r1, r1, #7
 800867c:	4401      	add	r1, r0
 800867e:	3184      	adds	r1, #132	; 0x84
 8008680:	4313      	orrs	r3, r2
 8008682:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	01db      	lsls	r3, r3, #7
 800868e:	4413      	add	r3, r2
 8008690:	3384      	adds	r3, #132	; 0x84
 8008692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	01db      	lsls	r3, r3, #7
 800869e:	4413      	add	r3, r2
 80086a0:	3384      	adds	r3, #132	; 0x84
 80086a2:	461a      	mov	r2, r3
 80086a4:	2300      	movs	r3, #0
 80086a6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	01db      	lsls	r3, r3, #7
 80086b2:	4413      	add	r3, r2
 80086b4:	3384      	adds	r3, #132	; 0x84
 80086b6:	461a      	mov	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80086c6:	2304      	movs	r3, #4
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e01b      	b.n	8008704 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d102      	bne.n	80086da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80086d4:	2303      	movs	r3, #3
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	e014      	b.n	8008704 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d00b      	beq.n	80086fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d007      	beq.n	80086fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d003      	beq.n	80086fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086f6:	2b07      	cmp	r3, #7
 80086f8:	d102      	bne.n	8008700 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80086fa:	2302      	movs	r3, #2
 80086fc:	61fb      	str	r3, [r7, #28]
 80086fe:	e001      	b.n	8008704 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008700:	2301      	movs	r3, #1
 8008702:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	01db      	lsls	r3, r3, #7
 800870e:	4413      	add	r3, r2
 8008710:	3384      	adds	r3, #132	; 0x84
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	4611      	mov	r1, r2
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	01d2      	lsls	r2, r2, #7
 800871e:	440a      	add	r2, r1
 8008720:	3284      	adds	r2, #132	; 0x84
 8008722:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008726:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	fb02 f303 	mul.w	r3, r2, r3
 8008732:	041a      	lsls	r2, r3, #16
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6859      	ldr	r1, [r3, #4]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	1acb      	subs	r3, r1, r3
 800873e:	69f9      	ldr	r1, [r7, #28]
 8008740:	fb01 f303 	mul.w	r3, r1, r3
 8008744:	3303      	adds	r3, #3
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	6809      	ldr	r1, [r1, #0]
 800874a:	4608      	mov	r0, r1
 800874c:	6879      	ldr	r1, [r7, #4]
 800874e:	01c9      	lsls	r1, r1, #7
 8008750:	4401      	add	r1, r0
 8008752:	3184      	adds	r1, #132	; 0x84
 8008754:	4313      	orrs	r3, r2
 8008756:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	01db      	lsls	r3, r3, #7
 8008762:	4413      	add	r3, r2
 8008764:	3384      	adds	r3, #132	; 0x84
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	4611      	mov	r1, r2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	01d2      	lsls	r2, r2, #7
 8008772:	440a      	add	r2, r1
 8008774:	3284      	adds	r2, #132	; 0x84
 8008776:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800877a:	f023 0307 	bic.w	r3, r3, #7
 800877e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	01db      	lsls	r3, r3, #7
 800878a:	4413      	add	r3, r2
 800878c:	3384      	adds	r3, #132	; 0x84
 800878e:	461a      	mov	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	01db      	lsls	r3, r3, #7
 80087a0:	4413      	add	r3, r2
 80087a2:	3384      	adds	r3, #132	; 0x84
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	6812      	ldr	r2, [r2, #0]
 80087aa:	4611      	mov	r1, r2
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	01d2      	lsls	r2, r2, #7
 80087b0:	440a      	add	r2, r1
 80087b2:	3284      	adds	r2, #132	; 0x84
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	6013      	str	r3, [r2, #0]
}
 80087ba:	bf00      	nop
 80087bc:	3724      	adds	r7, #36	; 0x24
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e25b      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d075      	beq.n	80088d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087e6:	4ba3      	ldr	r3, [pc, #652]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f003 030c 	and.w	r3, r3, #12
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d00c      	beq.n	800880c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087f2:	4ba0      	ldr	r3, [pc, #640]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	d112      	bne.n	8008824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087fe:	4b9d      	ldr	r3, [pc, #628]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800880a:	d10b      	bne.n	8008824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800880c:	4b99      	ldr	r3, [pc, #612]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d05b      	beq.n	80088d0 <HAL_RCC_OscConfig+0x108>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d157      	bne.n	80088d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e236      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800882c:	d106      	bne.n	800883c <HAL_RCC_OscConfig+0x74>
 800882e:	4b91      	ldr	r3, [pc, #580]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a90      	ldr	r2, [pc, #576]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e01d      	b.n	8008878 <HAL_RCC_OscConfig+0xb0>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008844:	d10c      	bne.n	8008860 <HAL_RCC_OscConfig+0x98>
 8008846:	4b8b      	ldr	r3, [pc, #556]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a8a      	ldr	r2, [pc, #552]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 800884c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	4b88      	ldr	r3, [pc, #544]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a87      	ldr	r2, [pc, #540]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	e00b      	b.n	8008878 <HAL_RCC_OscConfig+0xb0>
 8008860:	4b84      	ldr	r3, [pc, #528]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a83      	ldr	r2, [pc, #524]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	4b81      	ldr	r3, [pc, #516]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a80      	ldr	r2, [pc, #512]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d013      	beq.n	80088a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008880:	f7fd fd44 	bl	800630c <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008888:	f7fd fd40 	bl	800630c <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	; 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e1fb      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800889a:	4b76      	ldr	r3, [pc, #472]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCC_OscConfig+0xc0>
 80088a6:	e014      	b.n	80088d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088a8:	f7fd fd30 	bl	800630c <HAL_GetTick>
 80088ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088b0:	f7fd fd2c 	bl	800630c <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b64      	cmp	r3, #100	; 0x64
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e1e7      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088c2:	4b6c      	ldr	r3, [pc, #432]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f0      	bne.n	80088b0 <HAL_RCC_OscConfig+0xe8>
 80088ce:	e000      	b.n	80088d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d063      	beq.n	80089a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088de:	4b65      	ldr	r3, [pc, #404]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 030c 	and.w	r3, r3, #12
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00b      	beq.n	8008902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ea:	4b62      	ldr	r3, [pc, #392]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d11c      	bne.n	8008930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088f6:	4b5f      	ldr	r3, [pc, #380]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d116      	bne.n	8008930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008902:	4b5c      	ldr	r3, [pc, #368]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <HAL_RCC_OscConfig+0x152>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d001      	beq.n	800891a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e1bb      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800891a:	4b56      	ldr	r3, [pc, #344]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	4952      	ldr	r1, [pc, #328]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 800892a:	4313      	orrs	r3, r2
 800892c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800892e:	e03a      	b.n	80089a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d020      	beq.n	800897a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008938:	4b4f      	ldr	r3, [pc, #316]	; (8008a78 <HAL_RCC_OscConfig+0x2b0>)
 800893a:	2201      	movs	r2, #1
 800893c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800893e:	f7fd fce5 	bl	800630c <HAL_GetTick>
 8008942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008944:	e008      	b.n	8008958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008946:	f7fd fce1 	bl	800630c <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d901      	bls.n	8008958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e19c      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008958:	4b46      	ldr	r3, [pc, #280]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0f0      	beq.n	8008946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008964:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	4940      	ldr	r1, [pc, #256]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008974:	4313      	orrs	r3, r2
 8008976:	600b      	str	r3, [r1, #0]
 8008978:	e015      	b.n	80089a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800897a:	4b3f      	ldr	r3, [pc, #252]	; (8008a78 <HAL_RCC_OscConfig+0x2b0>)
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008980:	f7fd fcc4 	bl	800630c <HAL_GetTick>
 8008984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008986:	e008      	b.n	800899a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008988:	f7fd fcc0 	bl	800630c <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e17b      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800899a:	4b36      	ldr	r3, [pc, #216]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1f0      	bne.n	8008988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0308 	and.w	r3, r3, #8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d030      	beq.n	8008a14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d016      	beq.n	80089e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089ba:	4b30      	ldr	r3, [pc, #192]	; (8008a7c <HAL_RCC_OscConfig+0x2b4>)
 80089bc:	2201      	movs	r2, #1
 80089be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c0:	f7fd fca4 	bl	800630c <HAL_GetTick>
 80089c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089c6:	e008      	b.n	80089da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089c8:	f7fd fca0 	bl	800630c <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e15b      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089da:	4b26      	ldr	r3, [pc, #152]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 80089dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0f0      	beq.n	80089c8 <HAL_RCC_OscConfig+0x200>
 80089e6:	e015      	b.n	8008a14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089e8:	4b24      	ldr	r3, [pc, #144]	; (8008a7c <HAL_RCC_OscConfig+0x2b4>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089ee:	f7fd fc8d 	bl	800630c <HAL_GetTick>
 80089f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f4:	e008      	b.n	8008a08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089f6:	f7fd fc89 	bl	800630c <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d901      	bls.n	8008a08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e144      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a08:	4b1a      	ldr	r3, [pc, #104]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1f0      	bne.n	80089f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80a0 	beq.w	8008b62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a22:	2300      	movs	r3, #0
 8008a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a26:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10f      	bne.n	8008a52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a32:	2300      	movs	r3, #0
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	4a0e      	ldr	r2, [pc, #56]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a40:	6413      	str	r3, [r2, #64]	; 0x40
 8008a42:	4b0c      	ldr	r3, [pc, #48]	; (8008a74 <HAL_RCC_OscConfig+0x2ac>)
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a4a:	60bb      	str	r3, [r7, #8]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a52:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <HAL_RCC_OscConfig+0x2b8>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d121      	bne.n	8008aa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a5e:	4b08      	ldr	r3, [pc, #32]	; (8008a80 <HAL_RCC_OscConfig+0x2b8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a07      	ldr	r2, [pc, #28]	; (8008a80 <HAL_RCC_OscConfig+0x2b8>)
 8008a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a6a:	f7fd fc4f 	bl	800630c <HAL_GetTick>
 8008a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a70:	e011      	b.n	8008a96 <HAL_RCC_OscConfig+0x2ce>
 8008a72:	bf00      	nop
 8008a74:	40023800 	.word	0x40023800
 8008a78:	42470000 	.word	0x42470000
 8008a7c:	42470e80 	.word	0x42470e80
 8008a80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a84:	f7fd fc42 	bl	800630c <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d901      	bls.n	8008a96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e0fd      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a96:	4b81      	ldr	r3, [pc, #516]	; (8008c9c <HAL_RCC_OscConfig+0x4d4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0f0      	beq.n	8008a84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d106      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x2f0>
 8008aaa:	4b7d      	ldr	r3, [pc, #500]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aae:	4a7c      	ldr	r2, [pc, #496]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008ab0:	f043 0301 	orr.w	r3, r3, #1
 8008ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab6:	e01c      	b.n	8008af2 <HAL_RCC_OscConfig+0x32a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2b05      	cmp	r3, #5
 8008abe:	d10c      	bne.n	8008ada <HAL_RCC_OscConfig+0x312>
 8008ac0:	4b77      	ldr	r3, [pc, #476]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac4:	4a76      	ldr	r2, [pc, #472]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008ac6:	f043 0304 	orr.w	r3, r3, #4
 8008aca:	6713      	str	r3, [r2, #112]	; 0x70
 8008acc:	4b74      	ldr	r3, [pc, #464]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad0:	4a73      	ldr	r2, [pc, #460]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008ad2:	f043 0301 	orr.w	r3, r3, #1
 8008ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ad8:	e00b      	b.n	8008af2 <HAL_RCC_OscConfig+0x32a>
 8008ada:	4b71      	ldr	r3, [pc, #452]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ade:	4a70      	ldr	r2, [pc, #448]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008ae0:	f023 0301 	bic.w	r3, r3, #1
 8008ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ae6:	4b6e      	ldr	r3, [pc, #440]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aea:	4a6d      	ldr	r2, [pc, #436]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008aec:	f023 0304 	bic.w	r3, r3, #4
 8008af0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d015      	beq.n	8008b26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afa:	f7fd fc07 	bl	800630c <HAL_GetTick>
 8008afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b00:	e00a      	b.n	8008b18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b02:	f7fd fc03 	bl	800630c <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d901      	bls.n	8008b18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e0bc      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b18:	4b61      	ldr	r3, [pc, #388]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d0ee      	beq.n	8008b02 <HAL_RCC_OscConfig+0x33a>
 8008b24:	e014      	b.n	8008b50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b26:	f7fd fbf1 	bl	800630c <HAL_GetTick>
 8008b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b2c:	e00a      	b.n	8008b44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b2e:	f7fd fbed 	bl	800630c <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e0a6      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b44:	4b56      	ldr	r3, [pc, #344]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1ee      	bne.n	8008b2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d105      	bne.n	8008b62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b56:	4b52      	ldr	r3, [pc, #328]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	4a51      	ldr	r2, [pc, #324]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 8092 	beq.w	8008c90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b6c:	4b4c      	ldr	r3, [pc, #304]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 030c 	and.w	r3, r3, #12
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d05c      	beq.n	8008c32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d141      	bne.n	8008c04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b80:	4b48      	ldr	r3, [pc, #288]	; (8008ca4 <HAL_RCC_OscConfig+0x4dc>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b86:	f7fd fbc1 	bl	800630c <HAL_GetTick>
 8008b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b8c:	e008      	b.n	8008ba0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b8e:	f7fd fbbd 	bl	800630c <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e078      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ba0:	4b3f      	ldr	r3, [pc, #252]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f0      	bne.n	8008b8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69da      	ldr	r2, [r3, #28]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	019b      	lsls	r3, r3, #6
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	085b      	lsrs	r3, r3, #1
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	041b      	lsls	r3, r3, #16
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	061b      	lsls	r3, r3, #24
 8008bd0:	4933      	ldr	r1, [pc, #204]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bd6:	4b33      	ldr	r3, [pc, #204]	; (8008ca4 <HAL_RCC_OscConfig+0x4dc>)
 8008bd8:	2201      	movs	r2, #1
 8008bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bdc:	f7fd fb96 	bl	800630c <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be4:	f7fd fb92 	bl	800630c <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e04d      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bf6:	4b2a      	ldr	r3, [pc, #168]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0f0      	beq.n	8008be4 <HAL_RCC_OscConfig+0x41c>
 8008c02:	e045      	b.n	8008c90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c04:	4b27      	ldr	r3, [pc, #156]	; (8008ca4 <HAL_RCC_OscConfig+0x4dc>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c0a:	f7fd fb7f 	bl	800630c <HAL_GetTick>
 8008c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c10:	e008      	b.n	8008c24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c12:	f7fd fb7b 	bl	800630c <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e036      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c24:	4b1e      	ldr	r3, [pc, #120]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1f0      	bne.n	8008c12 <HAL_RCC_OscConfig+0x44a>
 8008c30:	e02e      	b.n	8008c90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e029      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c3e:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <HAL_RCC_OscConfig+0x4d8>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d11c      	bne.n	8008c8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d115      	bne.n	8008c8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c66:	4013      	ands	r3, r2
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10d      	bne.n	8008c8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d106      	bne.n	8008c8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d001      	beq.n	8008c90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e000      	b.n	8008c92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	40007000 	.word	0x40007000
 8008ca0:	40023800 	.word	0x40023800
 8008ca4:	42470060 	.word	0x42470060

08008ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0cc      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cbc:	4b68      	ldr	r3, [pc, #416]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d90c      	bls.n	8008ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cca:	4b65      	ldr	r3, [pc, #404]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	b2d2      	uxtb	r2, r2
 8008cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cd2:	4b63      	ldr	r3, [pc, #396]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 030f 	and.w	r3, r3, #15
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d001      	beq.n	8008ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e0b8      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d020      	beq.n	8008d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cfc:	4b59      	ldr	r3, [pc, #356]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	4a58      	ldr	r2, [pc, #352]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d14:	4b53      	ldr	r3, [pc, #332]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4a52      	ldr	r2, [pc, #328]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d20:	4b50      	ldr	r3, [pc, #320]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	494d      	ldr	r1, [pc, #308]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d044      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d107      	bne.n	8008d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d46:	4b47      	ldr	r3, [pc, #284]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d119      	bne.n	8008d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e07f      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d003      	beq.n	8008d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d107      	bne.n	8008d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d66:	4b3f      	ldr	r3, [pc, #252]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e06f      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d76:	4b3b      	ldr	r3, [pc, #236]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e067      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d86:	4b37      	ldr	r3, [pc, #220]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f023 0203 	bic.w	r2, r3, #3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	4934      	ldr	r1, [pc, #208]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d98:	f7fd fab8 	bl	800630c <HAL_GetTick>
 8008d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d9e:	e00a      	b.n	8008db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008da0:	f7fd fab4 	bl	800630c <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e04f      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db6:	4b2b      	ldr	r3, [pc, #172]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f003 020c 	and.w	r2, r3, #12
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d1eb      	bne.n	8008da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dc8:	4b25      	ldr	r3, [pc, #148]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 030f 	and.w	r3, r3, #15
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d20c      	bcs.n	8008df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dd6:	4b22      	ldr	r3, [pc, #136]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dde:	4b20      	ldr	r3, [pc, #128]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d001      	beq.n	8008df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e032      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d008      	beq.n	8008e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dfc:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	4916      	ldr	r1, [pc, #88]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0308 	and.w	r3, r3, #8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e1a:	4b12      	ldr	r3, [pc, #72]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	490e      	ldr	r1, [pc, #56]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e2e:	f000 f821 	bl	8008e74 <HAL_RCC_GetSysClockFreq>
 8008e32:	4602      	mov	r2, r0
 8008e34:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	091b      	lsrs	r3, r3, #4
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	490a      	ldr	r1, [pc, #40]	; (8008e68 <HAL_RCC_ClockConfig+0x1c0>)
 8008e40:	5ccb      	ldrb	r3, [r1, r3]
 8008e42:	fa22 f303 	lsr.w	r3, r2, r3
 8008e46:	4a09      	ldr	r2, [pc, #36]	; (8008e6c <HAL_RCC_ClockConfig+0x1c4>)
 8008e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e4a:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fd fa18 	bl	8006284 <HAL_InitTick>

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	40023c00 	.word	0x40023c00
 8008e64:	40023800 	.word	0x40023800
 8008e68:	0800d514 	.word	0x0800d514
 8008e6c:	20000274 	.word	0x20000274
 8008e70:	2000030c 	.word	0x2000030c

08008e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e8c:	4b67      	ldr	r3, [pc, #412]	; (800902c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 030c 	and.w	r3, r3, #12
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d00d      	beq.n	8008eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	f200 80bd 	bhi.w	8009018 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d003      	beq.n	8008eae <HAL_RCC_GetSysClockFreq+0x3a>
 8008ea6:	e0b7      	b.n	8009018 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ea8:	4b61      	ldr	r3, [pc, #388]	; (8009030 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008eaa:	60bb      	str	r3, [r7, #8]
       break;
 8008eac:	e0b7      	b.n	800901e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008eae:	4b61      	ldr	r3, [pc, #388]	; (8009034 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008eb0:	60bb      	str	r3, [r7, #8]
      break;
 8008eb2:	e0b4      	b.n	800901e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008eb4:	4b5d      	ldr	r3, [pc, #372]	; (800902c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ebc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ebe:	4b5b      	ldr	r3, [pc, #364]	; (800902c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d04d      	beq.n	8008f66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eca:	4b58      	ldr	r3, [pc, #352]	; (800902c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	099b      	lsrs	r3, r3, #6
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008eda:	f04f 0100 	mov.w	r1, #0
 8008ede:	ea02 0800 	and.w	r8, r2, r0
 8008ee2:	ea03 0901 	and.w	r9, r3, r1
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	4649      	mov	r1, r9
 8008eea:	f04f 0200 	mov.w	r2, #0
 8008eee:	f04f 0300 	mov.w	r3, #0
 8008ef2:	014b      	lsls	r3, r1, #5
 8008ef4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008ef8:	0142      	lsls	r2, r0, #5
 8008efa:	4610      	mov	r0, r2
 8008efc:	4619      	mov	r1, r3
 8008efe:	ebb0 0008 	subs.w	r0, r0, r8
 8008f02:	eb61 0109 	sbc.w	r1, r1, r9
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	f04f 0300 	mov.w	r3, #0
 8008f0e:	018b      	lsls	r3, r1, #6
 8008f10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008f14:	0182      	lsls	r2, r0, #6
 8008f16:	1a12      	subs	r2, r2, r0
 8008f18:	eb63 0301 	sbc.w	r3, r3, r1
 8008f1c:	f04f 0000 	mov.w	r0, #0
 8008f20:	f04f 0100 	mov.w	r1, #0
 8008f24:	00d9      	lsls	r1, r3, #3
 8008f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f2a:	00d0      	lsls	r0, r2, #3
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	eb12 0208 	adds.w	r2, r2, r8
 8008f34:	eb43 0309 	adc.w	r3, r3, r9
 8008f38:	f04f 0000 	mov.w	r0, #0
 8008f3c:	f04f 0100 	mov.w	r1, #0
 8008f40:	0259      	lsls	r1, r3, #9
 8008f42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008f46:	0250      	lsls	r0, r2, #9
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4619      	mov	r1, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	f7f7 fe36 	bl	8000bc8 <__aeabi_uldivmod>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4613      	mov	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e04a      	b.n	8008ffc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f66:	4b31      	ldr	r3, [pc, #196]	; (800902c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	099b      	lsrs	r3, r3, #6
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	f04f 0300 	mov.w	r3, #0
 8008f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008f76:	f04f 0100 	mov.w	r1, #0
 8008f7a:	ea02 0400 	and.w	r4, r2, r0
 8008f7e:	ea03 0501 	and.w	r5, r3, r1
 8008f82:	4620      	mov	r0, r4
 8008f84:	4629      	mov	r1, r5
 8008f86:	f04f 0200 	mov.w	r2, #0
 8008f8a:	f04f 0300 	mov.w	r3, #0
 8008f8e:	014b      	lsls	r3, r1, #5
 8008f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008f94:	0142      	lsls	r2, r0, #5
 8008f96:	4610      	mov	r0, r2
 8008f98:	4619      	mov	r1, r3
 8008f9a:	1b00      	subs	r0, r0, r4
 8008f9c:	eb61 0105 	sbc.w	r1, r1, r5
 8008fa0:	f04f 0200 	mov.w	r2, #0
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	018b      	lsls	r3, r1, #6
 8008faa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008fae:	0182      	lsls	r2, r0, #6
 8008fb0:	1a12      	subs	r2, r2, r0
 8008fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8008fb6:	f04f 0000 	mov.w	r0, #0
 8008fba:	f04f 0100 	mov.w	r1, #0
 8008fbe:	00d9      	lsls	r1, r3, #3
 8008fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fc4:	00d0      	lsls	r0, r2, #3
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	1912      	adds	r2, r2, r4
 8008fcc:	eb45 0303 	adc.w	r3, r5, r3
 8008fd0:	f04f 0000 	mov.w	r0, #0
 8008fd4:	f04f 0100 	mov.w	r1, #0
 8008fd8:	0299      	lsls	r1, r3, #10
 8008fda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008fde:	0290      	lsls	r0, r2, #10
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	461a      	mov	r2, r3
 8008fec:	f04f 0300 	mov.w	r3, #0
 8008ff0:	f7f7 fdea 	bl	8000bc8 <__aeabi_uldivmod>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ffc:	4b0b      	ldr	r3, [pc, #44]	; (800902c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	0c1b      	lsrs	r3, r3, #16
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	3301      	adds	r3, #1
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	fbb2 f3f3 	udiv	r3, r2, r3
 8009014:	60bb      	str	r3, [r7, #8]
      break;
 8009016:	e002      	b.n	800901e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009018:	4b05      	ldr	r3, [pc, #20]	; (8009030 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800901a:	60bb      	str	r3, [r7, #8]
      break;
 800901c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800901e:	68bb      	ldr	r3, [r7, #8]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800902a:	bf00      	nop
 800902c:	40023800 	.word	0x40023800
 8009030:	00f42400 	.word	0x00f42400
 8009034:	007a1200 	.word	0x007a1200

08009038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009038:	b480      	push	{r7}
 800903a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800903c:	4b03      	ldr	r3, [pc, #12]	; (800904c <HAL_RCC_GetHCLKFreq+0x14>)
 800903e:	681b      	ldr	r3, [r3, #0]
}
 8009040:	4618      	mov	r0, r3
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20000274 	.word	0x20000274

08009050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009054:	f7ff fff0 	bl	8009038 <HAL_RCC_GetHCLKFreq>
 8009058:	4602      	mov	r2, r0
 800905a:	4b05      	ldr	r3, [pc, #20]	; (8009070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	0a9b      	lsrs	r3, r3, #10
 8009060:	f003 0307 	and.w	r3, r3, #7
 8009064:	4903      	ldr	r1, [pc, #12]	; (8009074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009066:	5ccb      	ldrb	r3, [r1, r3]
 8009068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800906c:	4618      	mov	r0, r3
 800906e:	bd80      	pop	{r7, pc}
 8009070:	40023800 	.word	0x40023800
 8009074:	0800d524 	.word	0x0800d524

08009078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10b      	bne.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800909c:	2b00      	cmp	r3, #0
 800909e:	d105      	bne.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d075      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80090ac:	4bad      	ldr	r3, [pc, #692]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80090b2:	f7fd f92b 	bl	800630c <HAL_GetTick>
 80090b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090b8:	e008      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80090ba:	f7fd f927 	bl	800630c <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d901      	bls.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e18b      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090cc:	4ba6      	ldr	r3, [pc, #664]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1f0      	bne.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d009      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	019a      	lsls	r2, r3, #6
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	071b      	lsls	r3, r3, #28
 80090f0:	499d      	ldr	r1, [pc, #628]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01f      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009104:	4b98      	ldr	r3, [pc, #608]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910a:	0f1b      	lsrs	r3, r3, #28
 800910c:	f003 0307 	and.w	r3, r3, #7
 8009110:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	019a      	lsls	r2, r3, #6
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	061b      	lsls	r3, r3, #24
 800911e:	431a      	orrs	r2, r3
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	071b      	lsls	r3, r3, #28
 8009124:	4990      	ldr	r1, [pc, #576]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009126:	4313      	orrs	r3, r2
 8009128:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800912c:	4b8e      	ldr	r3, [pc, #568]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800912e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009132:	f023 021f 	bic.w	r2, r3, #31
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	3b01      	subs	r3, #1
 800913c:	498a      	ldr	r1, [pc, #552]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800913e:	4313      	orrs	r3, r2
 8009140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00d      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	019a      	lsls	r2, r3, #6
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	061b      	lsls	r3, r3, #24
 800915c:	431a      	orrs	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	071b      	lsls	r3, r3, #28
 8009164:	4980      	ldr	r1, [pc, #512]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009166:	4313      	orrs	r3, r2
 8009168:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800916c:	4b7d      	ldr	r3, [pc, #500]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800916e:	2201      	movs	r2, #1
 8009170:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009172:	f7fd f8cb 	bl	800630c <HAL_GetTick>
 8009176:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009178:	e008      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800917a:	f7fd f8c7 	bl	800630c <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	2b02      	cmp	r3, #2
 8009186:	d901      	bls.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e12b      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800918c:	4b76      	ldr	r3, [pc, #472]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0f0      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d079      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80091b0:	4b6e      	ldr	r3, [pc, #440]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091b6:	f7fd f8a9 	bl	800630c <HAL_GetTick>
 80091ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091bc:	e008      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80091be:	f7fd f8a5 	bl	800630c <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d901      	bls.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e109      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091d0:	4b65      	ldr	r3, [pc, #404]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091dc:	d0ef      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d020      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80091ea:	4b5f      	ldr	r3, [pc, #380]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f0:	0f1b      	lsrs	r3, r3, #28
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	019a      	lsls	r2, r3, #6
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	061b      	lsls	r3, r3, #24
 8009204:	431a      	orrs	r2, r3
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	071b      	lsls	r3, r3, #28
 800920a:	4957      	ldr	r1, [pc, #348]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800920c:	4313      	orrs	r3, r2
 800920e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009212:	4b55      	ldr	r3, [pc, #340]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009218:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	3b01      	subs	r3, #1
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	4950      	ldr	r1, [pc, #320]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009226:	4313      	orrs	r3, r2
 8009228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d01e      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009238:	4b4b      	ldr	r3, [pc, #300]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800923e:	0e1b      	lsrs	r3, r3, #24
 8009240:	f003 030f 	and.w	r3, r3, #15
 8009244:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	019a      	lsls	r2, r3, #6
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	061b      	lsls	r3, r3, #24
 8009250:	431a      	orrs	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	071b      	lsls	r3, r3, #28
 8009258:	4943      	ldr	r1, [pc, #268]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800925a:	4313      	orrs	r3, r2
 800925c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009260:	4b41      	ldr	r3, [pc, #260]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	493e      	ldr	r1, [pc, #248]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009270:	4313      	orrs	r3, r2
 8009272:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009276:	4b3d      	ldr	r3, [pc, #244]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009278:	2201      	movs	r2, #1
 800927a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800927c:	f7fd f846 	bl	800630c <HAL_GetTick>
 8009280:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009282:	e008      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009284:	f7fd f842 	bl	800630c <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e0a6      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009296:	4b34      	ldr	r3, [pc, #208]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800929e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a2:	d1ef      	bne.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 808d 	beq.w	80093cc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	4b2c      	ldr	r3, [pc, #176]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	4a2b      	ldr	r2, [pc, #172]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80092bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c0:	6413      	str	r3, [r2, #64]	; 0x40
 80092c2:	4b29      	ldr	r3, [pc, #164]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80092ce:	4b28      	ldr	r3, [pc, #160]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a27      	ldr	r2, [pc, #156]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80092d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092da:	f7fd f817 	bl	800630c <HAL_GetTick>
 80092de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80092e0:	e008      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80092e2:	f7fd f813 	bl	800630c <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d901      	bls.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e077      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80092f4:	4b1e      	ldr	r3, [pc, #120]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0f0      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009300:	4b19      	ldr	r3, [pc, #100]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009308:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d039      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	429a      	cmp	r2, r3
 800931c:	d032      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800931e:	4b12      	ldr	r3, [pc, #72]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009326:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009328:	4b12      	ldr	r3, [pc, #72]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800932a:	2201      	movs	r2, #1
 800932c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800932e:	4b11      	ldr	r3, [pc, #68]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009334:	4a0c      	ldr	r2, [pc, #48]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800933a:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b01      	cmp	r3, #1
 8009344:	d11e      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009346:	f7fc ffe1 	bl	800630c <HAL_GetTick>
 800934a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800934c:	e014      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800934e:	f7fc ffdd 	bl	800630c <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	f241 3288 	movw	r2, #5000	; 0x1388
 800935c:	4293      	cmp	r3, r2
 800935e:	d90b      	bls.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e03f      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8009364:	42470068 	.word	0x42470068
 8009368:	40023800 	.word	0x40023800
 800936c:	42470070 	.word	0x42470070
 8009370:	40007000 	.word	0x40007000
 8009374:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009378:	4b1c      	ldr	r3, [pc, #112]	; (80093ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800937a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0e4      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009390:	d10d      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x336>
 8009392:	4b16      	ldr	r3, [pc, #88]	; (80093ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80093a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093a6:	4911      	ldr	r1, [pc, #68]	; (80093ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	608b      	str	r3, [r1, #8]
 80093ac:	e005      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 80093ae:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	4a0e      	ldr	r2, [pc, #56]	; (80093ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80093b8:	6093      	str	r3, [r2, #8]
 80093ba:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093c6:	4909      	ldr	r1, [pc, #36]	; (80093ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0310 	and.w	r3, r3, #16
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d004      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80093de:	4b04      	ldr	r3, [pc, #16]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80093e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	40023800 	.word	0x40023800
 80093f0:	424711e0 	.word	0x424711e0

080093f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e025      	b.n	8009454 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d106      	bne.n	8009422 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f81d 	bl	800945c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2202      	movs	r2, #2
 8009426:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3304      	adds	r3, #4
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f000 ff0f 	bl	800a258 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	461a      	mov	r2, r3
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	f000 ff7a 	bl	800a33e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d101      	bne.n	800948c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009488:	2302      	movs	r3, #2
 800948a:	e018      	b.n	80094be <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 ffcd 	bl	800a43c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d104      	bne.n	80094b4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2205      	movs	r2, #5
 80094ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80094b2:	e003      	b.n	80094bc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d101      	bne.n	80094e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80094dc:	2302      	movs	r3, #2
 80094de:	e00e      	b.n	80094fe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 ffe0 	bl	800a4b4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e05d      	b.n	80095d4 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d106      	bne.n	8009532 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f87d 	bl	800962c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2202      	movs	r2, #2
 8009536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009548:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800956e:	431a      	orrs	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	ea42 0103 	orr.w	r1, r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	f003 0104 	and.w	r1, r3, #4
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095a8:	d104      	bne.n	80095b4 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80095b2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	69da      	ldr	r2, [r3, #28]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e01a      	b.n	8009624 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2202      	movs	r2, #2
 80095f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009604:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f81a 	bl	8009640 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	4613      	mov	r3, r2
 8009662:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_SPI_Transmit+0x22>
 8009672:	2302      	movs	r3, #2
 8009674:	e140      	b.n	80098f8 <HAL_SPI_Transmit+0x2a4>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800967e:	f7fc fe45 	bl	800630c <HAL_GetTick>
 8009682:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b01      	cmp	r3, #1
 8009692:	d002      	beq.n	800969a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009694:	2302      	movs	r3, #2
 8009696:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009698:	e125      	b.n	80098e6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <HAL_SPI_Transmit+0x52>
 80096a0:	88fb      	ldrh	r3, [r7, #6]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80096aa:	e11c      	b.n	80098e6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2203      	movs	r2, #3
 80096b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	88fa      	ldrh	r2, [r7, #6]
 80096c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	88fa      	ldrh	r2, [r7, #6]
 80096ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096f2:	d107      	bne.n	8009704 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009702:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970c:	d10f      	bne.n	800972e <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800972c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	d007      	beq.n	800974c <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800974a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009754:	d14b      	bne.n	80097ee <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <HAL_SPI_Transmit+0x110>
 800975e:	8afb      	ldrh	r3, [r7, #22]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d13e      	bne.n	80097e2 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009768:	881a      	ldrh	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009774:	1c9a      	adds	r2, r3, #2
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800977e:	b29b      	uxth	r3, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009788:	e02b      	b.n	80097e2 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f003 0302 	and.w	r3, r3, #2
 8009794:	2b02      	cmp	r3, #2
 8009796:	d112      	bne.n	80097be <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979c:	881a      	ldrh	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	1c9a      	adds	r2, r3, #2
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80097bc:	e011      	b.n	80097e2 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097be:	f7fc fda5 	bl	800630c <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d803      	bhi.n	80097d6 <HAL_SPI_Transmit+0x182>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d102      	bne.n	80097dc <HAL_SPI_Transmit+0x188>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097e0:	e081      	b.n	80098e6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1ce      	bne.n	800978a <HAL_SPI_Transmit+0x136>
 80097ec:	e04c      	b.n	8009888 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <HAL_SPI_Transmit+0x1a8>
 80097f6:	8afb      	ldrh	r3, [r7, #22]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d140      	bne.n	800987e <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	330c      	adds	r3, #12
 8009806:	7812      	ldrb	r2, [r2, #0]
 8009808:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009818:	b29b      	uxth	r3, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009822:	e02c      	b.n	800987e <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	2b02      	cmp	r3, #2
 8009830:	d113      	bne.n	800985a <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	330c      	adds	r3, #12
 800983c:	7812      	ldrb	r2, [r2, #0]
 800983e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	86da      	strh	r2, [r3, #54]	; 0x36
 8009858:	e011      	b.n	800987e <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800985a:	f7fc fd57 	bl	800630c <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d803      	bhi.n	8009872 <HAL_SPI_Transmit+0x21e>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009870:	d102      	bne.n	8009878 <HAL_SPI_Transmit+0x224>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d102      	bne.n	800987e <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800987c:	e033      	b.n	80098e6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009882:	b29b      	uxth	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1cd      	bne.n	8009824 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009890:	d107      	bne.n	80098a2 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098a0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fc94 	bl	800a1d4 <SPI_EndRxTxTransaction>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2220      	movs	r2, #32
 80098b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10a      	bne.n	80098d6 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098c0:	2300      	movs	r3, #0
 80098c2:	613b      	str	r3, [r7, #16]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	613b      	str	r3, [r7, #16]
 80098d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	77fb      	strb	r3, [r7, #31]
 80098e2:	e000      	b.n	80098e6 <HAL_SPI_Transmit+0x292>
  }

error:
 80098e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af02      	add	r7, sp, #8
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	4613      	mov	r3, r2
 800990e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800991c:	d112      	bne.n	8009944 <HAL_SPI_Receive+0x44>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10e      	bne.n	8009944 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2204      	movs	r2, #4
 800992a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800992e:	88fa      	ldrh	r2, [r7, #6]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	4613      	mov	r3, r2
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 f95f 	bl	8009bfe <HAL_SPI_TransmitReceive>
 8009940:	4603      	mov	r3, r0
 8009942:	e158      	b.n	8009bf6 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800994a:	2b01      	cmp	r3, #1
 800994c:	d101      	bne.n	8009952 <HAL_SPI_Receive+0x52>
 800994e:	2302      	movs	r3, #2
 8009950:	e151      	b.n	8009bf6 <HAL_SPI_Receive+0x2f6>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800995a:	f7fc fcd7 	bl	800630c <HAL_GetTick>
 800995e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b01      	cmp	r3, #1
 800996a:	d002      	beq.n	8009972 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800996c:	2302      	movs	r3, #2
 800996e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009970:	e138      	b.n	8009be4 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <HAL_SPI_Receive+0x7e>
 8009978:	88fb      	ldrh	r3, [r7, #6]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d102      	bne.n	8009984 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009982:	e12f      	b.n	8009be4 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2204      	movs	r2, #4
 8009988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	88fa      	ldrh	r2, [r7, #6]
 800999c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	88fa      	ldrh	r2, [r7, #6]
 80099a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ca:	d116      	bne.n	80099fa <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099ea:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	3b01      	subs	r3, #1
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a02:	d107      	bne.n	8009a14 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1e:	2b40      	cmp	r3, #64	; 0x40
 8009a20:	d007      	beq.n	8009a32 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d162      	bne.n	8009b00 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009a3a:	e02e      	b.n	8009a9a <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d115      	bne.n	8009a76 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f103 020c 	add.w	r2, r3, #12
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a56:	7812      	ldrb	r2, [r2, #0]
 8009a58:	b2d2      	uxtb	r2, r2
 8009a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a74:	e011      	b.n	8009a9a <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a76:	f7fc fc49 	bl	800630c <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d803      	bhi.n	8009a8e <HAL_SPI_Receive+0x18e>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8c:	d102      	bne.n	8009a94 <HAL_SPI_Receive+0x194>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009a98:	e0a4      	b.n	8009be4 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1cb      	bne.n	8009a3c <HAL_SPI_Receive+0x13c>
 8009aa4:	e031      	b.n	8009b0a <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d113      	bne.n	8009adc <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	b292      	uxth	r2, r2
 8009ac0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	1c9a      	adds	r2, r3, #2
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ada:	e011      	b.n	8009b00 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009adc:	f7fc fc16 	bl	800630c <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d803      	bhi.n	8009af4 <HAL_SPI_Receive+0x1f4>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af2:	d102      	bne.n	8009afa <HAL_SPI_Receive+0x1fa>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009afe:	e071      	b.n	8009be4 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1cd      	bne.n	8009aa6 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b12:	d142      	bne.n	8009b9a <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b22:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 fa81 	bl	800a036 <SPI_WaitFlagStateUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	75fb      	strb	r3, [r7, #23]
      goto error;
 8009b3e:	e051      	b.n	8009be4 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b48:	d107      	bne.n	8009b5a <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	b292      	uxth	r2, r2
 8009b56:	801a      	strh	r2, [r3, #0]
 8009b58:	e008      	b.n	8009b6c <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f103 020c 	add.w	r2, r3, #12
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	7812      	ldrb	r2, [r2, #0]
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2201      	movs	r2, #1
 8009b74:	2101      	movs	r1, #1
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 fa5d 	bl	800a036 <SPI_WaitFlagStateUntilTimeout>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b86:	f043 0202 	orr.w	r2, r3, #2
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	75fb      	strb	r3, [r7, #23]
      goto error;
 8009b92:	e027      	b.n	8009be4 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 fab3 	bl	800a10a <SPI_EndRxTransaction>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2220      	movs	r2, #32
 8009bae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 0310 	and.w	r3, r3, #16
 8009bba:	2b10      	cmp	r3, #16
 8009bbc:	d10a      	bne.n	8009bd4 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc2:	f043 0202 	orr.w	r2, r3, #2
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009bd2:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	75fb      	strb	r3, [r7, #23]
 8009be0:	e000      	b.n	8009be4 <HAL_SPI_Receive+0x2e4>
  }

error :
 8009be2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b08e      	sub	sp, #56	; 0x38
 8009c02:	af02      	add	r7, sp, #8
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
 8009c0a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d101      	bne.n	8009c24 <HAL_SPI_TransmitReceive+0x26>
 8009c20:	2302      	movs	r3, #2
 8009c22:	e1f6      	b.n	800a012 <HAL_SPI_TransmitReceive+0x414>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c2c:	f7fc fb6e 	bl	800630c <HAL_GetTick>
 8009c30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c42:	887b      	ldrh	r3, [r7, #2]
 8009c44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d00f      	beq.n	8009c6e <HAL_SPI_TransmitReceive+0x70>
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c54:	d107      	bne.n	8009c66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d103      	bne.n	8009c66 <HAL_SPI_TransmitReceive+0x68>
 8009c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d003      	beq.n	8009c6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009c66:	2302      	movs	r3, #2
 8009c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c6c:	e1c7      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <HAL_SPI_TransmitReceive+0x82>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <HAL_SPI_TransmitReceive+0x82>
 8009c7a:	887b      	ldrh	r3, [r7, #2]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c86:	e1ba      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	d003      	beq.n	8009c9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2205      	movs	r2, #5
 8009c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	887a      	ldrh	r2, [r7, #2]
 8009cac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	887a      	ldrh	r2, [r7, #2]
 8009cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	887a      	ldrh	r2, [r7, #2]
 8009cbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	887a      	ldrh	r2, [r7, #2]
 8009cc4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cda:	d10f      	bne.n	8009cfc <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cfa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d06:	2b40      	cmp	r3, #64	; 0x40
 8009d08:	d007      	beq.n	8009d1a <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d22:	f040 808b 	bne.w	8009e3c <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <HAL_SPI_TransmitReceive+0x136>
 8009d2e:	8b7b      	ldrh	r3, [r7, #26]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d178      	bne.n	8009e26 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d38:	881a      	ldrh	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	1c9a      	adds	r2, r3, #2
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d58:	e065      	b.n	8009e26 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d12d      	bne.n	8009dc4 <HAL_SPI_TransmitReceive+0x1c6>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d028      	beq.n	8009dc4 <HAL_SPI_TransmitReceive+0x1c6>
 8009d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d125      	bne.n	8009dc4 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7c:	881a      	ldrh	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d88:	1c9a      	adds	r2, r3, #2
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	3b01      	subs	r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10c      	bne.n	8009dc4 <HAL_SPI_TransmitReceive+0x1c6>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db2:	d107      	bne.n	8009dc4 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009dc2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d119      	bne.n	8009e06 <HAL_SPI_TransmitReceive+0x208>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d014      	beq.n	8009e06 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68da      	ldr	r2, [r3, #12]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de6:	b292      	uxth	r2, r2
 8009de8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dee:	1c9a      	adds	r2, r3, #2
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e02:	2301      	movs	r3, #1
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e06:	f7fc fa81 	bl	800630c <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d807      	bhi.n	8009e26 <HAL_SPI_TransmitReceive+0x228>
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	d003      	beq.n	8009e26 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009e24:	e0eb      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d194      	bne.n	8009d5a <HAL_SPI_TransmitReceive+0x15c>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d18f      	bne.n	8009d5a <HAL_SPI_TransmitReceive+0x15c>
 8009e3a:	e08e      	b.n	8009f5a <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <HAL_SPI_TransmitReceive+0x24c>
 8009e44:	8b7b      	ldrh	r3, [r7, #26]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d17d      	bne.n	8009f46 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	330c      	adds	r3, #12
 8009e54:	7812      	ldrb	r2, [r2, #0]
 8009e56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e70:	e069      	b.n	8009f46 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d12e      	bne.n	8009ede <HAL_SPI_TransmitReceive+0x2e0>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d029      	beq.n	8009ede <HAL_SPI_TransmitReceive+0x2e0>
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d126      	bne.n	8009ede <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	330c      	adds	r3, #12
 8009e9a:	7812      	ldrb	r2, [r2, #0]
 8009e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10c      	bne.n	8009ede <HAL_SPI_TransmitReceive+0x2e0>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ecc:	d107      	bne.n	8009ede <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009edc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d119      	bne.n	8009f20 <HAL_SPI_TransmitReceive+0x322>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d014      	beq.n	8009f20 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f00:	b2d2      	uxtb	r2, r2
 8009f02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f20:	f7fc f9f4 	bl	800630c <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d803      	bhi.n	8009f38 <HAL_SPI_TransmitReceive+0x33a>
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f36:	d102      	bne.n	8009f3e <HAL_SPI_TransmitReceive+0x340>
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d103      	bne.n	8009f46 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f44:	e05b      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d190      	bne.n	8009e72 <HAL_SPI_TransmitReceive+0x274>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d18b      	bne.n	8009e72 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f62:	d117      	bne.n	8009f94 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f861 	bl	800a036 <SPI_WaitFlagStateUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7e:	f043 0202 	orr.w	r2, r3, #2
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8009f8c:	e037      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f003 0310 	and.w	r3, r3, #16
 8009f9e:	2b10      	cmp	r3, #16
 8009fa0:	d10d      	bne.n	8009fbe <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa6:	f043 0202 	orr.w	r2, r3, #2
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009fb6:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 f906 	bl	800a1d4 <SPI_EndRxTxTransaction>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009fda:	e010      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10b      	bne.n	8009ffc <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	e000      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8009ffc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a00e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a012:	4618      	mov	r0, r3
 800a014:	3730      	adds	r7, #48	; 0x30
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a028:	b2db      	uxtb	r3, r3
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	603b      	str	r3, [r7, #0]
 800a042:	4613      	mov	r3, r2
 800a044:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a046:	e04c      	b.n	800a0e2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d048      	beq.n	800a0e2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a050:	f7fc f95c 	bl	800630c <HAL_GetTick>
 800a054:	4602      	mov	r2, r0
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d902      	bls.n	800a066 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d13d      	bne.n	800a0e2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a07e:	d111      	bne.n	800a0a4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a088:	d004      	beq.n	800a094 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a092:	d107      	bne.n	800a0a4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ac:	d10f      	bne.n	800a0ce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e00f      	b.n	800a102 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	bf0c      	ite	eq
 800a0f2:	2301      	moveq	r3, #1
 800a0f4:	2300      	movne	r3, #0
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d1a3      	bne.n	800a048 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b086      	sub	sp, #24
 800a10e:	af02      	add	r7, sp, #8
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a11e:	d111      	bne.n	800a144 <SPI_EndRxTransaction+0x3a>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a128:	d004      	beq.n	800a134 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a132:	d107      	bne.n	800a144 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a142:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a14c:	d12a      	bne.n	800a1a4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a156:	d012      	beq.n	800a17e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2200      	movs	r2, #0
 800a160:	2180      	movs	r1, #128	; 0x80
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff ff67 	bl	800a036 <SPI_WaitFlagStateUntilTimeout>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d02d      	beq.n	800a1ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a172:	f043 0220 	orr.w	r2, r3, #32
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e026      	b.n	800a1cc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2200      	movs	r2, #0
 800a186:	2101      	movs	r1, #1
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7ff ff54 	bl	800a036 <SPI_WaitFlagStateUntilTimeout>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01a      	beq.n	800a1ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a198:	f043 0220 	orr.w	r2, r3, #32
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e013      	b.n	800a1cc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff ff41 	bl	800a036 <SPI_WaitFlagStateUntilTimeout>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d007      	beq.n	800a1ca <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1be:	f043 0220 	orr.w	r2, r3, #32
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e000      	b.n	800a1cc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af02      	add	r7, sp, #8
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1e0:	4b1b      	ldr	r3, [pc, #108]	; (800a250 <SPI_EndRxTxTransaction+0x7c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a1b      	ldr	r2, [pc, #108]	; (800a254 <SPI_EndRxTxTransaction+0x80>)
 800a1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ea:	0d5b      	lsrs	r3, r3, #21
 800a1ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1f0:	fb02 f303 	mul.w	r3, r2, r3
 800a1f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1fe:	d112      	bne.n	800a226 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2200      	movs	r2, #0
 800a208:	2180      	movs	r1, #128	; 0x80
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff ff13 	bl	800a036 <SPI_WaitFlagStateUntilTimeout>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d016      	beq.n	800a244 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	f043 0220 	orr.w	r2, r3, #32
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e00f      	b.n	800a246 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00a      	beq.n	800a242 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	3b01      	subs	r3, #1
 800a230:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23c:	2b80      	cmp	r3, #128	; 0x80
 800a23e:	d0f2      	beq.n	800a226 <SPI_EndRxTxTransaction+0x52>
 800a240:	e000      	b.n	800a244 <SPI_EndRxTxTransaction+0x70>
        break;
 800a242:	bf00      	nop
  }

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000274 	.word	0x20000274
 800a254:	165e9f81 	.word	0x165e9f81

0800a258 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d029      	beq.n	800a2c6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a27e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a282:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a28c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a292:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a298:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a29e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a2a4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a2aa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a2b0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a2b6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e034      	b.n	800a330 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2d2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2dc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a2e2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2fa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a304:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a30a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a310:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a316:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a31c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	4313      	orrs	r3, r2
 800a322:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a33e:	b480      	push	{r7}
 800a340:	b087      	sub	sp, #28
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d02e      	beq.n	800a3b6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a364:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	3b01      	subs	r3, #1
 800a372:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a374:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a37e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	3b01      	subs	r3, #1
 800a386:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a388:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	3b01      	subs	r3, #1
 800a390:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a392:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	3b01      	subs	r3, #1
 800a39a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a39c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	609a      	str	r2, [r3, #8]
 800a3b4:	e03b      	b.n	800a42e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3c6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3ec:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3fc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	3b01      	subs	r3, #1
 800a404:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a406:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a410:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	3b01      	subs	r3, #1
 800a418:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a41a:	4313      	orrs	r3, r2
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	371c      	adds	r7, #28
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a458:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	3b01      	subs	r3, #1
 800a460:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a462:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a46a:	4313      	orrs	r3, r2
 800a46c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a474:	f7fb ff4a 	bl	800630c <HAL_GetTick>
 800a478:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a47a:	e010      	b.n	800a49e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d00c      	beq.n	800a49e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d007      	beq.n	800a49a <FMC_SDRAM_SendCommand+0x5e>
 800a48a:	f7fb ff3f 	bl	800630c <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	429a      	cmp	r2, r3
 800a498:	d201      	bcs.n	800a49e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e006      	b.n	800a4ac <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b20      	cmp	r3, #32
 800a4a8:	d0e8      	beq.n	800a47c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695a      	ldr	r2, [r3, #20]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
	...

0800a4dc <__libc_init_array>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	4d0d      	ldr	r5, [pc, #52]	; (800a514 <__libc_init_array+0x38>)
 800a4e0:	4c0d      	ldr	r4, [pc, #52]	; (800a518 <__libc_init_array+0x3c>)
 800a4e2:	1b64      	subs	r4, r4, r5
 800a4e4:	10a4      	asrs	r4, r4, #2
 800a4e6:	2600      	movs	r6, #0
 800a4e8:	42a6      	cmp	r6, r4
 800a4ea:	d109      	bne.n	800a500 <__libc_init_array+0x24>
 800a4ec:	4d0b      	ldr	r5, [pc, #44]	; (800a51c <__libc_init_array+0x40>)
 800a4ee:	4c0c      	ldr	r4, [pc, #48]	; (800a520 <__libc_init_array+0x44>)
 800a4f0:	f002 ff48 	bl	800d384 <_init>
 800a4f4:	1b64      	subs	r4, r4, r5
 800a4f6:	10a4      	asrs	r4, r4, #2
 800a4f8:	2600      	movs	r6, #0
 800a4fa:	42a6      	cmp	r6, r4
 800a4fc:	d105      	bne.n	800a50a <__libc_init_array+0x2e>
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}
 800a500:	f855 3b04 	ldr.w	r3, [r5], #4
 800a504:	4798      	blx	r3
 800a506:	3601      	adds	r6, #1
 800a508:	e7ee      	b.n	800a4e8 <__libc_init_array+0xc>
 800a50a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a50e:	4798      	blx	r3
 800a510:	3601      	adds	r6, #1
 800a512:	e7f2      	b.n	800a4fa <__libc_init_array+0x1e>
 800a514:	08011304 	.word	0x08011304
 800a518:	08011304 	.word	0x08011304
 800a51c:	08011304 	.word	0x08011304
 800a520:	08011308 	.word	0x08011308

0800a524 <memset>:
 800a524:	4402      	add	r2, r0
 800a526:	4603      	mov	r3, r0
 800a528:	4293      	cmp	r3, r2
 800a52a:	d100      	bne.n	800a52e <memset+0xa>
 800a52c:	4770      	bx	lr
 800a52e:	f803 1b01 	strb.w	r1, [r3], #1
 800a532:	e7f9      	b.n	800a528 <memset+0x4>

0800a534 <__cvt>:
 800a534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a538:	ec55 4b10 	vmov	r4, r5, d0
 800a53c:	2d00      	cmp	r5, #0
 800a53e:	460e      	mov	r6, r1
 800a540:	4619      	mov	r1, r3
 800a542:	462b      	mov	r3, r5
 800a544:	bfbb      	ittet	lt
 800a546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a54a:	461d      	movlt	r5, r3
 800a54c:	2300      	movge	r3, #0
 800a54e:	232d      	movlt	r3, #45	; 0x2d
 800a550:	700b      	strb	r3, [r1, #0]
 800a552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a554:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a558:	4691      	mov	r9, r2
 800a55a:	f023 0820 	bic.w	r8, r3, #32
 800a55e:	bfbc      	itt	lt
 800a560:	4622      	movlt	r2, r4
 800a562:	4614      	movlt	r4, r2
 800a564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a568:	d005      	beq.n	800a576 <__cvt+0x42>
 800a56a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a56e:	d100      	bne.n	800a572 <__cvt+0x3e>
 800a570:	3601      	adds	r6, #1
 800a572:	2102      	movs	r1, #2
 800a574:	e000      	b.n	800a578 <__cvt+0x44>
 800a576:	2103      	movs	r1, #3
 800a578:	ab03      	add	r3, sp, #12
 800a57a:	9301      	str	r3, [sp, #4]
 800a57c:	ab02      	add	r3, sp, #8
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	ec45 4b10 	vmov	d0, r4, r5
 800a584:	4653      	mov	r3, sl
 800a586:	4632      	mov	r2, r6
 800a588:	f000 fcfe 	bl	800af88 <_dtoa_r>
 800a58c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a590:	4607      	mov	r7, r0
 800a592:	d102      	bne.n	800a59a <__cvt+0x66>
 800a594:	f019 0f01 	tst.w	r9, #1
 800a598:	d022      	beq.n	800a5e0 <__cvt+0xac>
 800a59a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a59e:	eb07 0906 	add.w	r9, r7, r6
 800a5a2:	d110      	bne.n	800a5c6 <__cvt+0x92>
 800a5a4:	783b      	ldrb	r3, [r7, #0]
 800a5a6:	2b30      	cmp	r3, #48	; 0x30
 800a5a8:	d10a      	bne.n	800a5c0 <__cvt+0x8c>
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f7f6 fa99 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5b6:	b918      	cbnz	r0, 800a5c0 <__cvt+0x8c>
 800a5b8:	f1c6 0601 	rsb	r6, r6, #1
 800a5bc:	f8ca 6000 	str.w	r6, [sl]
 800a5c0:	f8da 3000 	ldr.w	r3, [sl]
 800a5c4:	4499      	add	r9, r3
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7f6 fa8b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5d2:	b108      	cbz	r0, 800a5d8 <__cvt+0xa4>
 800a5d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5d8:	2230      	movs	r2, #48	; 0x30
 800a5da:	9b03      	ldr	r3, [sp, #12]
 800a5dc:	454b      	cmp	r3, r9
 800a5de:	d307      	bcc.n	800a5f0 <__cvt+0xbc>
 800a5e0:	9b03      	ldr	r3, [sp, #12]
 800a5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e4:	1bdb      	subs	r3, r3, r7
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	b004      	add	sp, #16
 800a5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f0:	1c59      	adds	r1, r3, #1
 800a5f2:	9103      	str	r1, [sp, #12]
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	e7f0      	b.n	800a5da <__cvt+0xa6>

0800a5f8 <__exponent>:
 800a5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2900      	cmp	r1, #0
 800a5fe:	bfb8      	it	lt
 800a600:	4249      	neglt	r1, r1
 800a602:	f803 2b02 	strb.w	r2, [r3], #2
 800a606:	bfb4      	ite	lt
 800a608:	222d      	movlt	r2, #45	; 0x2d
 800a60a:	222b      	movge	r2, #43	; 0x2b
 800a60c:	2909      	cmp	r1, #9
 800a60e:	7042      	strb	r2, [r0, #1]
 800a610:	dd2a      	ble.n	800a668 <__exponent+0x70>
 800a612:	f10d 0407 	add.w	r4, sp, #7
 800a616:	46a4      	mov	ip, r4
 800a618:	270a      	movs	r7, #10
 800a61a:	46a6      	mov	lr, r4
 800a61c:	460a      	mov	r2, r1
 800a61e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a622:	fb07 1516 	mls	r5, r7, r6, r1
 800a626:	3530      	adds	r5, #48	; 0x30
 800a628:	2a63      	cmp	r2, #99	; 0x63
 800a62a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a62e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a632:	4631      	mov	r1, r6
 800a634:	dcf1      	bgt.n	800a61a <__exponent+0x22>
 800a636:	3130      	adds	r1, #48	; 0x30
 800a638:	f1ae 0502 	sub.w	r5, lr, #2
 800a63c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a640:	1c44      	adds	r4, r0, #1
 800a642:	4629      	mov	r1, r5
 800a644:	4561      	cmp	r1, ip
 800a646:	d30a      	bcc.n	800a65e <__exponent+0x66>
 800a648:	f10d 0209 	add.w	r2, sp, #9
 800a64c:	eba2 020e 	sub.w	r2, r2, lr
 800a650:	4565      	cmp	r5, ip
 800a652:	bf88      	it	hi
 800a654:	2200      	movhi	r2, #0
 800a656:	4413      	add	r3, r2
 800a658:	1a18      	subs	r0, r3, r0
 800a65a:	b003      	add	sp, #12
 800a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a65e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a662:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a666:	e7ed      	b.n	800a644 <__exponent+0x4c>
 800a668:	2330      	movs	r3, #48	; 0x30
 800a66a:	3130      	adds	r1, #48	; 0x30
 800a66c:	7083      	strb	r3, [r0, #2]
 800a66e:	70c1      	strb	r1, [r0, #3]
 800a670:	1d03      	adds	r3, r0, #4
 800a672:	e7f1      	b.n	800a658 <__exponent+0x60>

0800a674 <_printf_float>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	ed2d 8b02 	vpush	{d8}
 800a67c:	b08d      	sub	sp, #52	; 0x34
 800a67e:	460c      	mov	r4, r1
 800a680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a684:	4616      	mov	r6, r2
 800a686:	461f      	mov	r7, r3
 800a688:	4605      	mov	r5, r0
 800a68a:	f001 fa69 	bl	800bb60 <_localeconv_r>
 800a68e:	f8d0 a000 	ldr.w	sl, [r0]
 800a692:	4650      	mov	r0, sl
 800a694:	f7f5 fdac 	bl	80001f0 <strlen>
 800a698:	2300      	movs	r3, #0
 800a69a:	930a      	str	r3, [sp, #40]	; 0x28
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	9305      	str	r3, [sp, #20]
 800a6a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a6a8:	3307      	adds	r3, #7
 800a6aa:	f023 0307 	bic.w	r3, r3, #7
 800a6ae:	f103 0208 	add.w	r2, r3, #8
 800a6b2:	f8c8 2000 	str.w	r2, [r8]
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a6be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a6c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6c6:	9307      	str	r3, [sp, #28]
 800a6c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6cc:	ee08 0a10 	vmov	s16, r0
 800a6d0:	4b9f      	ldr	r3, [pc, #636]	; (800a950 <_printf_float+0x2dc>)
 800a6d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6da:	f7f6 fa37 	bl	8000b4c <__aeabi_dcmpun>
 800a6de:	bb88      	cbnz	r0, 800a744 <_printf_float+0xd0>
 800a6e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6e4:	4b9a      	ldr	r3, [pc, #616]	; (800a950 <_printf_float+0x2dc>)
 800a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ea:	f7f6 fa11 	bl	8000b10 <__aeabi_dcmple>
 800a6ee:	bb48      	cbnz	r0, 800a744 <_printf_float+0xd0>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	4640      	mov	r0, r8
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	f7f6 fa00 	bl	8000afc <__aeabi_dcmplt>
 800a6fc:	b110      	cbz	r0, 800a704 <_printf_float+0x90>
 800a6fe:	232d      	movs	r3, #45	; 0x2d
 800a700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a704:	4b93      	ldr	r3, [pc, #588]	; (800a954 <_printf_float+0x2e0>)
 800a706:	4894      	ldr	r0, [pc, #592]	; (800a958 <_printf_float+0x2e4>)
 800a708:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a70c:	bf94      	ite	ls
 800a70e:	4698      	movls	r8, r3
 800a710:	4680      	movhi	r8, r0
 800a712:	2303      	movs	r3, #3
 800a714:	6123      	str	r3, [r4, #16]
 800a716:	9b05      	ldr	r3, [sp, #20]
 800a718:	f023 0204 	bic.w	r2, r3, #4
 800a71c:	6022      	str	r2, [r4, #0]
 800a71e:	f04f 0900 	mov.w	r9, #0
 800a722:	9700      	str	r7, [sp, #0]
 800a724:	4633      	mov	r3, r6
 800a726:	aa0b      	add	r2, sp, #44	; 0x2c
 800a728:	4621      	mov	r1, r4
 800a72a:	4628      	mov	r0, r5
 800a72c:	f000 f9d8 	bl	800aae0 <_printf_common>
 800a730:	3001      	adds	r0, #1
 800a732:	f040 8090 	bne.w	800a856 <_printf_float+0x1e2>
 800a736:	f04f 30ff 	mov.w	r0, #4294967295
 800a73a:	b00d      	add	sp, #52	; 0x34
 800a73c:	ecbd 8b02 	vpop	{d8}
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	4642      	mov	r2, r8
 800a746:	464b      	mov	r3, r9
 800a748:	4640      	mov	r0, r8
 800a74a:	4649      	mov	r1, r9
 800a74c:	f7f6 f9fe 	bl	8000b4c <__aeabi_dcmpun>
 800a750:	b140      	cbz	r0, 800a764 <_printf_float+0xf0>
 800a752:	464b      	mov	r3, r9
 800a754:	2b00      	cmp	r3, #0
 800a756:	bfbc      	itt	lt
 800a758:	232d      	movlt	r3, #45	; 0x2d
 800a75a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a75e:	487f      	ldr	r0, [pc, #508]	; (800a95c <_printf_float+0x2e8>)
 800a760:	4b7f      	ldr	r3, [pc, #508]	; (800a960 <_printf_float+0x2ec>)
 800a762:	e7d1      	b.n	800a708 <_printf_float+0x94>
 800a764:	6863      	ldr	r3, [r4, #4]
 800a766:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a76a:	9206      	str	r2, [sp, #24]
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	d13f      	bne.n	800a7f0 <_printf_float+0x17c>
 800a770:	2306      	movs	r3, #6
 800a772:	6063      	str	r3, [r4, #4]
 800a774:	9b05      	ldr	r3, [sp, #20]
 800a776:	6861      	ldr	r1, [r4, #4]
 800a778:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a77c:	2300      	movs	r3, #0
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	ab0a      	add	r3, sp, #40	; 0x28
 800a782:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a786:	ab09      	add	r3, sp, #36	; 0x24
 800a788:	ec49 8b10 	vmov	d0, r8, r9
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	6022      	str	r2, [r4, #0]
 800a790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a794:	4628      	mov	r0, r5
 800a796:	f7ff fecd 	bl	800a534 <__cvt>
 800a79a:	9b06      	ldr	r3, [sp, #24]
 800a79c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a79e:	2b47      	cmp	r3, #71	; 0x47
 800a7a0:	4680      	mov	r8, r0
 800a7a2:	d108      	bne.n	800a7b6 <_printf_float+0x142>
 800a7a4:	1cc8      	adds	r0, r1, #3
 800a7a6:	db02      	blt.n	800a7ae <_printf_float+0x13a>
 800a7a8:	6863      	ldr	r3, [r4, #4]
 800a7aa:	4299      	cmp	r1, r3
 800a7ac:	dd41      	ble.n	800a832 <_printf_float+0x1be>
 800a7ae:	f1ab 0b02 	sub.w	fp, fp, #2
 800a7b2:	fa5f fb8b 	uxtb.w	fp, fp
 800a7b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7ba:	d820      	bhi.n	800a7fe <_printf_float+0x18a>
 800a7bc:	3901      	subs	r1, #1
 800a7be:	465a      	mov	r2, fp
 800a7c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7c4:	9109      	str	r1, [sp, #36]	; 0x24
 800a7c6:	f7ff ff17 	bl	800a5f8 <__exponent>
 800a7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7cc:	1813      	adds	r3, r2, r0
 800a7ce:	2a01      	cmp	r2, #1
 800a7d0:	4681      	mov	r9, r0
 800a7d2:	6123      	str	r3, [r4, #16]
 800a7d4:	dc02      	bgt.n	800a7dc <_printf_float+0x168>
 800a7d6:	6822      	ldr	r2, [r4, #0]
 800a7d8:	07d2      	lsls	r2, r2, #31
 800a7da:	d501      	bpl.n	800a7e0 <_printf_float+0x16c>
 800a7dc:	3301      	adds	r3, #1
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d09c      	beq.n	800a722 <_printf_float+0xae>
 800a7e8:	232d      	movs	r3, #45	; 0x2d
 800a7ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ee:	e798      	b.n	800a722 <_printf_float+0xae>
 800a7f0:	9a06      	ldr	r2, [sp, #24]
 800a7f2:	2a47      	cmp	r2, #71	; 0x47
 800a7f4:	d1be      	bne.n	800a774 <_printf_float+0x100>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1bc      	bne.n	800a774 <_printf_float+0x100>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e7b9      	b.n	800a772 <_printf_float+0xfe>
 800a7fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a802:	d118      	bne.n	800a836 <_printf_float+0x1c2>
 800a804:	2900      	cmp	r1, #0
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	dd0b      	ble.n	800a822 <_printf_float+0x1ae>
 800a80a:	6121      	str	r1, [r4, #16]
 800a80c:	b913      	cbnz	r3, 800a814 <_printf_float+0x1a0>
 800a80e:	6822      	ldr	r2, [r4, #0]
 800a810:	07d0      	lsls	r0, r2, #31
 800a812:	d502      	bpl.n	800a81a <_printf_float+0x1a6>
 800a814:	3301      	adds	r3, #1
 800a816:	440b      	add	r3, r1
 800a818:	6123      	str	r3, [r4, #16]
 800a81a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a81c:	f04f 0900 	mov.w	r9, #0
 800a820:	e7de      	b.n	800a7e0 <_printf_float+0x16c>
 800a822:	b913      	cbnz	r3, 800a82a <_printf_float+0x1b6>
 800a824:	6822      	ldr	r2, [r4, #0]
 800a826:	07d2      	lsls	r2, r2, #31
 800a828:	d501      	bpl.n	800a82e <_printf_float+0x1ba>
 800a82a:	3302      	adds	r3, #2
 800a82c:	e7f4      	b.n	800a818 <_printf_float+0x1a4>
 800a82e:	2301      	movs	r3, #1
 800a830:	e7f2      	b.n	800a818 <_printf_float+0x1a4>
 800a832:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a838:	4299      	cmp	r1, r3
 800a83a:	db05      	blt.n	800a848 <_printf_float+0x1d4>
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	6121      	str	r1, [r4, #16]
 800a840:	07d8      	lsls	r0, r3, #31
 800a842:	d5ea      	bpl.n	800a81a <_printf_float+0x1a6>
 800a844:	1c4b      	adds	r3, r1, #1
 800a846:	e7e7      	b.n	800a818 <_printf_float+0x1a4>
 800a848:	2900      	cmp	r1, #0
 800a84a:	bfd4      	ite	le
 800a84c:	f1c1 0202 	rsble	r2, r1, #2
 800a850:	2201      	movgt	r2, #1
 800a852:	4413      	add	r3, r2
 800a854:	e7e0      	b.n	800a818 <_printf_float+0x1a4>
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	055a      	lsls	r2, r3, #21
 800a85a:	d407      	bmi.n	800a86c <_printf_float+0x1f8>
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	4642      	mov	r2, r8
 800a860:	4631      	mov	r1, r6
 800a862:	4628      	mov	r0, r5
 800a864:	47b8      	blx	r7
 800a866:	3001      	adds	r0, #1
 800a868:	d12c      	bne.n	800a8c4 <_printf_float+0x250>
 800a86a:	e764      	b.n	800a736 <_printf_float+0xc2>
 800a86c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a870:	f240 80e0 	bls.w	800aa34 <_printf_float+0x3c0>
 800a874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a878:	2200      	movs	r2, #0
 800a87a:	2300      	movs	r3, #0
 800a87c:	f7f6 f934 	bl	8000ae8 <__aeabi_dcmpeq>
 800a880:	2800      	cmp	r0, #0
 800a882:	d034      	beq.n	800a8ee <_printf_float+0x27a>
 800a884:	4a37      	ldr	r2, [pc, #220]	; (800a964 <_printf_float+0x2f0>)
 800a886:	2301      	movs	r3, #1
 800a888:	4631      	mov	r1, r6
 800a88a:	4628      	mov	r0, r5
 800a88c:	47b8      	blx	r7
 800a88e:	3001      	adds	r0, #1
 800a890:	f43f af51 	beq.w	800a736 <_printf_float+0xc2>
 800a894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a898:	429a      	cmp	r2, r3
 800a89a:	db02      	blt.n	800a8a2 <_printf_float+0x22e>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	07d8      	lsls	r0, r3, #31
 800a8a0:	d510      	bpl.n	800a8c4 <_printf_float+0x250>
 800a8a2:	ee18 3a10 	vmov	r3, s16
 800a8a6:	4652      	mov	r2, sl
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f af41 	beq.w	800a736 <_printf_float+0xc2>
 800a8b4:	f04f 0800 	mov.w	r8, #0
 800a8b8:	f104 091a 	add.w	r9, r4, #26
 800a8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	4543      	cmp	r3, r8
 800a8c2:	dc09      	bgt.n	800a8d8 <_printf_float+0x264>
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	079b      	lsls	r3, r3, #30
 800a8c8:	f100 8105 	bmi.w	800aad6 <_printf_float+0x462>
 800a8cc:	68e0      	ldr	r0, [r4, #12]
 800a8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8d0:	4298      	cmp	r0, r3
 800a8d2:	bfb8      	it	lt
 800a8d4:	4618      	movlt	r0, r3
 800a8d6:	e730      	b.n	800a73a <_printf_float+0xc6>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	464a      	mov	r2, r9
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b8      	blx	r7
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	f43f af27 	beq.w	800a736 <_printf_float+0xc2>
 800a8e8:	f108 0801 	add.w	r8, r8, #1
 800a8ec:	e7e6      	b.n	800a8bc <_printf_float+0x248>
 800a8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dc39      	bgt.n	800a968 <_printf_float+0x2f4>
 800a8f4:	4a1b      	ldr	r2, [pc, #108]	; (800a964 <_printf_float+0x2f0>)
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	f43f af19 	beq.w	800a736 <_printf_float+0xc2>
 800a904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a908:	4313      	orrs	r3, r2
 800a90a:	d102      	bne.n	800a912 <_printf_float+0x29e>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	07d9      	lsls	r1, r3, #31
 800a910:	d5d8      	bpl.n	800a8c4 <_printf_float+0x250>
 800a912:	ee18 3a10 	vmov	r3, s16
 800a916:	4652      	mov	r2, sl
 800a918:	4631      	mov	r1, r6
 800a91a:	4628      	mov	r0, r5
 800a91c:	47b8      	blx	r7
 800a91e:	3001      	adds	r0, #1
 800a920:	f43f af09 	beq.w	800a736 <_printf_float+0xc2>
 800a924:	f04f 0900 	mov.w	r9, #0
 800a928:	f104 0a1a 	add.w	sl, r4, #26
 800a92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a92e:	425b      	negs	r3, r3
 800a930:	454b      	cmp	r3, r9
 800a932:	dc01      	bgt.n	800a938 <_printf_float+0x2c4>
 800a934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a936:	e792      	b.n	800a85e <_printf_float+0x1ea>
 800a938:	2301      	movs	r3, #1
 800a93a:	4652      	mov	r2, sl
 800a93c:	4631      	mov	r1, r6
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f aef7 	beq.w	800a736 <_printf_float+0xc2>
 800a948:	f109 0901 	add.w	r9, r9, #1
 800a94c:	e7ee      	b.n	800a92c <_printf_float+0x2b8>
 800a94e:	bf00      	nop
 800a950:	7fefffff 	.word	0x7fefffff
 800a954:	08010f20 	.word	0x08010f20
 800a958:	08010f24 	.word	0x08010f24
 800a95c:	08010f2c 	.word	0x08010f2c
 800a960:	08010f28 	.word	0x08010f28
 800a964:	08010f30 	.word	0x08010f30
 800a968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a96a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a96c:	429a      	cmp	r2, r3
 800a96e:	bfa8      	it	ge
 800a970:	461a      	movge	r2, r3
 800a972:	2a00      	cmp	r2, #0
 800a974:	4691      	mov	r9, r2
 800a976:	dc37      	bgt.n	800a9e8 <_printf_float+0x374>
 800a978:	f04f 0b00 	mov.w	fp, #0
 800a97c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a980:	f104 021a 	add.w	r2, r4, #26
 800a984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a986:	9305      	str	r3, [sp, #20]
 800a988:	eba3 0309 	sub.w	r3, r3, r9
 800a98c:	455b      	cmp	r3, fp
 800a98e:	dc33      	bgt.n	800a9f8 <_printf_float+0x384>
 800a990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a994:	429a      	cmp	r2, r3
 800a996:	db3b      	blt.n	800aa10 <_printf_float+0x39c>
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	07da      	lsls	r2, r3, #31
 800a99c:	d438      	bmi.n	800aa10 <_printf_float+0x39c>
 800a99e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a0:	9b05      	ldr	r3, [sp, #20]
 800a9a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	eba2 0901 	sub.w	r9, r2, r1
 800a9aa:	4599      	cmp	r9, r3
 800a9ac:	bfa8      	it	ge
 800a9ae:	4699      	movge	r9, r3
 800a9b0:	f1b9 0f00 	cmp.w	r9, #0
 800a9b4:	dc35      	bgt.n	800aa22 <_printf_float+0x3ae>
 800a9b6:	f04f 0800 	mov.w	r8, #0
 800a9ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9be:	f104 0a1a 	add.w	sl, r4, #26
 800a9c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9c6:	1a9b      	subs	r3, r3, r2
 800a9c8:	eba3 0309 	sub.w	r3, r3, r9
 800a9cc:	4543      	cmp	r3, r8
 800a9ce:	f77f af79 	ble.w	800a8c4 <_printf_float+0x250>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	4652      	mov	r2, sl
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4628      	mov	r0, r5
 800a9da:	47b8      	blx	r7
 800a9dc:	3001      	adds	r0, #1
 800a9de:	f43f aeaa 	beq.w	800a736 <_printf_float+0xc2>
 800a9e2:	f108 0801 	add.w	r8, r8, #1
 800a9e6:	e7ec      	b.n	800a9c2 <_printf_float+0x34e>
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4642      	mov	r2, r8
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	47b8      	blx	r7
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	d1c0      	bne.n	800a978 <_printf_float+0x304>
 800a9f6:	e69e      	b.n	800a736 <_printf_float+0xc2>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	9205      	str	r2, [sp, #20]
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	f43f ae97 	beq.w	800a736 <_printf_float+0xc2>
 800aa08:	9a05      	ldr	r2, [sp, #20]
 800aa0a:	f10b 0b01 	add.w	fp, fp, #1
 800aa0e:	e7b9      	b.n	800a984 <_printf_float+0x310>
 800aa10:	ee18 3a10 	vmov	r3, s16
 800aa14:	4652      	mov	r2, sl
 800aa16:	4631      	mov	r1, r6
 800aa18:	4628      	mov	r0, r5
 800aa1a:	47b8      	blx	r7
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d1be      	bne.n	800a99e <_printf_float+0x32a>
 800aa20:	e689      	b.n	800a736 <_printf_float+0xc2>
 800aa22:	9a05      	ldr	r2, [sp, #20]
 800aa24:	464b      	mov	r3, r9
 800aa26:	4442      	add	r2, r8
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	47b8      	blx	r7
 800aa2e:	3001      	adds	r0, #1
 800aa30:	d1c1      	bne.n	800a9b6 <_printf_float+0x342>
 800aa32:	e680      	b.n	800a736 <_printf_float+0xc2>
 800aa34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa36:	2a01      	cmp	r2, #1
 800aa38:	dc01      	bgt.n	800aa3e <_printf_float+0x3ca>
 800aa3a:	07db      	lsls	r3, r3, #31
 800aa3c:	d538      	bpl.n	800aab0 <_printf_float+0x43c>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4642      	mov	r2, r8
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f ae74 	beq.w	800a736 <_printf_float+0xc2>
 800aa4e:	ee18 3a10 	vmov	r3, s16
 800aa52:	4652      	mov	r2, sl
 800aa54:	4631      	mov	r1, r6
 800aa56:	4628      	mov	r0, r5
 800aa58:	47b8      	blx	r7
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	f43f ae6b 	beq.w	800a736 <_printf_float+0xc2>
 800aa60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa64:	2200      	movs	r2, #0
 800aa66:	2300      	movs	r3, #0
 800aa68:	f7f6 f83e 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa6c:	b9d8      	cbnz	r0, 800aaa6 <_printf_float+0x432>
 800aa6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa70:	f108 0201 	add.w	r2, r8, #1
 800aa74:	3b01      	subs	r3, #1
 800aa76:	4631      	mov	r1, r6
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b8      	blx	r7
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d10e      	bne.n	800aa9e <_printf_float+0x42a>
 800aa80:	e659      	b.n	800a736 <_printf_float+0xc2>
 800aa82:	2301      	movs	r3, #1
 800aa84:	4652      	mov	r2, sl
 800aa86:	4631      	mov	r1, r6
 800aa88:	4628      	mov	r0, r5
 800aa8a:	47b8      	blx	r7
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f43f ae52 	beq.w	800a736 <_printf_float+0xc2>
 800aa92:	f108 0801 	add.w	r8, r8, #1
 800aa96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	4543      	cmp	r3, r8
 800aa9c:	dcf1      	bgt.n	800aa82 <_printf_float+0x40e>
 800aa9e:	464b      	mov	r3, r9
 800aaa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aaa4:	e6dc      	b.n	800a860 <_printf_float+0x1ec>
 800aaa6:	f04f 0800 	mov.w	r8, #0
 800aaaa:	f104 0a1a 	add.w	sl, r4, #26
 800aaae:	e7f2      	b.n	800aa96 <_printf_float+0x422>
 800aab0:	2301      	movs	r3, #1
 800aab2:	4642      	mov	r2, r8
 800aab4:	e7df      	b.n	800aa76 <_printf_float+0x402>
 800aab6:	2301      	movs	r3, #1
 800aab8:	464a      	mov	r2, r9
 800aaba:	4631      	mov	r1, r6
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f ae38 	beq.w	800a736 <_printf_float+0xc2>
 800aac6:	f108 0801 	add.w	r8, r8, #1
 800aaca:	68e3      	ldr	r3, [r4, #12]
 800aacc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aace:	1a5b      	subs	r3, r3, r1
 800aad0:	4543      	cmp	r3, r8
 800aad2:	dcf0      	bgt.n	800aab6 <_printf_float+0x442>
 800aad4:	e6fa      	b.n	800a8cc <_printf_float+0x258>
 800aad6:	f04f 0800 	mov.w	r8, #0
 800aada:	f104 0919 	add.w	r9, r4, #25
 800aade:	e7f4      	b.n	800aaca <_printf_float+0x456>

0800aae0 <_printf_common>:
 800aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	4616      	mov	r6, r2
 800aae6:	4699      	mov	r9, r3
 800aae8:	688a      	ldr	r2, [r1, #8]
 800aaea:	690b      	ldr	r3, [r1, #16]
 800aaec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	bfb8      	it	lt
 800aaf4:	4613      	movlt	r3, r2
 800aaf6:	6033      	str	r3, [r6, #0]
 800aaf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aafc:	4607      	mov	r7, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	b10a      	cbz	r2, 800ab06 <_printf_common+0x26>
 800ab02:	3301      	adds	r3, #1
 800ab04:	6033      	str	r3, [r6, #0]
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	0699      	lsls	r1, r3, #26
 800ab0a:	bf42      	ittt	mi
 800ab0c:	6833      	ldrmi	r3, [r6, #0]
 800ab0e:	3302      	addmi	r3, #2
 800ab10:	6033      	strmi	r3, [r6, #0]
 800ab12:	6825      	ldr	r5, [r4, #0]
 800ab14:	f015 0506 	ands.w	r5, r5, #6
 800ab18:	d106      	bne.n	800ab28 <_printf_common+0x48>
 800ab1a:	f104 0a19 	add.w	sl, r4, #25
 800ab1e:	68e3      	ldr	r3, [r4, #12]
 800ab20:	6832      	ldr	r2, [r6, #0]
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	42ab      	cmp	r3, r5
 800ab26:	dc26      	bgt.n	800ab76 <_printf_common+0x96>
 800ab28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab2c:	1e13      	subs	r3, r2, #0
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	bf18      	it	ne
 800ab32:	2301      	movne	r3, #1
 800ab34:	0692      	lsls	r2, r2, #26
 800ab36:	d42b      	bmi.n	800ab90 <_printf_common+0xb0>
 800ab38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4638      	mov	r0, r7
 800ab40:	47c0      	blx	r8
 800ab42:	3001      	adds	r0, #1
 800ab44:	d01e      	beq.n	800ab84 <_printf_common+0xa4>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	68e5      	ldr	r5, [r4, #12]
 800ab4a:	6832      	ldr	r2, [r6, #0]
 800ab4c:	f003 0306 	and.w	r3, r3, #6
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	bf08      	it	eq
 800ab54:	1aad      	subeq	r5, r5, r2
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	6922      	ldr	r2, [r4, #16]
 800ab5a:	bf0c      	ite	eq
 800ab5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab60:	2500      	movne	r5, #0
 800ab62:	4293      	cmp	r3, r2
 800ab64:	bfc4      	itt	gt
 800ab66:	1a9b      	subgt	r3, r3, r2
 800ab68:	18ed      	addgt	r5, r5, r3
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	341a      	adds	r4, #26
 800ab6e:	42b5      	cmp	r5, r6
 800ab70:	d11a      	bne.n	800aba8 <_printf_common+0xc8>
 800ab72:	2000      	movs	r0, #0
 800ab74:	e008      	b.n	800ab88 <_printf_common+0xa8>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4652      	mov	r2, sl
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	47c0      	blx	r8
 800ab80:	3001      	adds	r0, #1
 800ab82:	d103      	bne.n	800ab8c <_printf_common+0xac>
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	e7c6      	b.n	800ab1e <_printf_common+0x3e>
 800ab90:	18e1      	adds	r1, r4, r3
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	2030      	movs	r0, #48	; 0x30
 800ab96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab9a:	4422      	add	r2, r4
 800ab9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aba4:	3302      	adds	r3, #2
 800aba6:	e7c7      	b.n	800ab38 <_printf_common+0x58>
 800aba8:	2301      	movs	r3, #1
 800abaa:	4622      	mov	r2, r4
 800abac:	4649      	mov	r1, r9
 800abae:	4638      	mov	r0, r7
 800abb0:	47c0      	blx	r8
 800abb2:	3001      	adds	r0, #1
 800abb4:	d0e6      	beq.n	800ab84 <_printf_common+0xa4>
 800abb6:	3601      	adds	r6, #1
 800abb8:	e7d9      	b.n	800ab6e <_printf_common+0x8e>
	...

0800abbc <_printf_i>:
 800abbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc0:	460c      	mov	r4, r1
 800abc2:	4691      	mov	r9, r2
 800abc4:	7e27      	ldrb	r7, [r4, #24]
 800abc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abc8:	2f78      	cmp	r7, #120	; 0x78
 800abca:	4680      	mov	r8, r0
 800abcc:	469a      	mov	sl, r3
 800abce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abd2:	d807      	bhi.n	800abe4 <_printf_i+0x28>
 800abd4:	2f62      	cmp	r7, #98	; 0x62
 800abd6:	d80a      	bhi.n	800abee <_printf_i+0x32>
 800abd8:	2f00      	cmp	r7, #0
 800abda:	f000 80d8 	beq.w	800ad8e <_printf_i+0x1d2>
 800abde:	2f58      	cmp	r7, #88	; 0x58
 800abe0:	f000 80a3 	beq.w	800ad2a <_printf_i+0x16e>
 800abe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abec:	e03a      	b.n	800ac64 <_printf_i+0xa8>
 800abee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abf2:	2b15      	cmp	r3, #21
 800abf4:	d8f6      	bhi.n	800abe4 <_printf_i+0x28>
 800abf6:	a001      	add	r0, pc, #4	; (adr r0, 800abfc <_printf_i+0x40>)
 800abf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abfc:	0800ac55 	.word	0x0800ac55
 800ac00:	0800ac69 	.word	0x0800ac69
 800ac04:	0800abe5 	.word	0x0800abe5
 800ac08:	0800abe5 	.word	0x0800abe5
 800ac0c:	0800abe5 	.word	0x0800abe5
 800ac10:	0800abe5 	.word	0x0800abe5
 800ac14:	0800ac69 	.word	0x0800ac69
 800ac18:	0800abe5 	.word	0x0800abe5
 800ac1c:	0800abe5 	.word	0x0800abe5
 800ac20:	0800abe5 	.word	0x0800abe5
 800ac24:	0800abe5 	.word	0x0800abe5
 800ac28:	0800ad75 	.word	0x0800ad75
 800ac2c:	0800ac99 	.word	0x0800ac99
 800ac30:	0800ad57 	.word	0x0800ad57
 800ac34:	0800abe5 	.word	0x0800abe5
 800ac38:	0800abe5 	.word	0x0800abe5
 800ac3c:	0800ad97 	.word	0x0800ad97
 800ac40:	0800abe5 	.word	0x0800abe5
 800ac44:	0800ac99 	.word	0x0800ac99
 800ac48:	0800abe5 	.word	0x0800abe5
 800ac4c:	0800abe5 	.word	0x0800abe5
 800ac50:	0800ad5f 	.word	0x0800ad5f
 800ac54:	680b      	ldr	r3, [r1, #0]
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	600a      	str	r2, [r1, #0]
 800ac5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac64:	2301      	movs	r3, #1
 800ac66:	e0a3      	b.n	800adb0 <_printf_i+0x1f4>
 800ac68:	6825      	ldr	r5, [r4, #0]
 800ac6a:	6808      	ldr	r0, [r1, #0]
 800ac6c:	062e      	lsls	r6, r5, #24
 800ac6e:	f100 0304 	add.w	r3, r0, #4
 800ac72:	d50a      	bpl.n	800ac8a <_printf_i+0xce>
 800ac74:	6805      	ldr	r5, [r0, #0]
 800ac76:	600b      	str	r3, [r1, #0]
 800ac78:	2d00      	cmp	r5, #0
 800ac7a:	da03      	bge.n	800ac84 <_printf_i+0xc8>
 800ac7c:	232d      	movs	r3, #45	; 0x2d
 800ac7e:	426d      	negs	r5, r5
 800ac80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac84:	485e      	ldr	r0, [pc, #376]	; (800ae00 <_printf_i+0x244>)
 800ac86:	230a      	movs	r3, #10
 800ac88:	e019      	b.n	800acbe <_printf_i+0x102>
 800ac8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac8e:	6805      	ldr	r5, [r0, #0]
 800ac90:	600b      	str	r3, [r1, #0]
 800ac92:	bf18      	it	ne
 800ac94:	b22d      	sxthne	r5, r5
 800ac96:	e7ef      	b.n	800ac78 <_printf_i+0xbc>
 800ac98:	680b      	ldr	r3, [r1, #0]
 800ac9a:	6825      	ldr	r5, [r4, #0]
 800ac9c:	1d18      	adds	r0, r3, #4
 800ac9e:	6008      	str	r0, [r1, #0]
 800aca0:	0628      	lsls	r0, r5, #24
 800aca2:	d501      	bpl.n	800aca8 <_printf_i+0xec>
 800aca4:	681d      	ldr	r5, [r3, #0]
 800aca6:	e002      	b.n	800acae <_printf_i+0xf2>
 800aca8:	0669      	lsls	r1, r5, #25
 800acaa:	d5fb      	bpl.n	800aca4 <_printf_i+0xe8>
 800acac:	881d      	ldrh	r5, [r3, #0]
 800acae:	4854      	ldr	r0, [pc, #336]	; (800ae00 <_printf_i+0x244>)
 800acb0:	2f6f      	cmp	r7, #111	; 0x6f
 800acb2:	bf0c      	ite	eq
 800acb4:	2308      	moveq	r3, #8
 800acb6:	230a      	movne	r3, #10
 800acb8:	2100      	movs	r1, #0
 800acba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acbe:	6866      	ldr	r6, [r4, #4]
 800acc0:	60a6      	str	r6, [r4, #8]
 800acc2:	2e00      	cmp	r6, #0
 800acc4:	bfa2      	ittt	ge
 800acc6:	6821      	ldrge	r1, [r4, #0]
 800acc8:	f021 0104 	bicge.w	r1, r1, #4
 800accc:	6021      	strge	r1, [r4, #0]
 800acce:	b90d      	cbnz	r5, 800acd4 <_printf_i+0x118>
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	d04d      	beq.n	800ad70 <_printf_i+0x1b4>
 800acd4:	4616      	mov	r6, r2
 800acd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800acda:	fb03 5711 	mls	r7, r3, r1, r5
 800acde:	5dc7      	ldrb	r7, [r0, r7]
 800ace0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ace4:	462f      	mov	r7, r5
 800ace6:	42bb      	cmp	r3, r7
 800ace8:	460d      	mov	r5, r1
 800acea:	d9f4      	bls.n	800acd6 <_printf_i+0x11a>
 800acec:	2b08      	cmp	r3, #8
 800acee:	d10b      	bne.n	800ad08 <_printf_i+0x14c>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	07df      	lsls	r7, r3, #31
 800acf4:	d508      	bpl.n	800ad08 <_printf_i+0x14c>
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4299      	cmp	r1, r3
 800acfc:	bfde      	ittt	le
 800acfe:	2330      	movle	r3, #48	; 0x30
 800ad00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad08:	1b92      	subs	r2, r2, r6
 800ad0a:	6122      	str	r2, [r4, #16]
 800ad0c:	f8cd a000 	str.w	sl, [sp]
 800ad10:	464b      	mov	r3, r9
 800ad12:	aa03      	add	r2, sp, #12
 800ad14:	4621      	mov	r1, r4
 800ad16:	4640      	mov	r0, r8
 800ad18:	f7ff fee2 	bl	800aae0 <_printf_common>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d14c      	bne.n	800adba <_printf_i+0x1fe>
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	b004      	add	sp, #16
 800ad26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2a:	4835      	ldr	r0, [pc, #212]	; (800ae00 <_printf_i+0x244>)
 800ad2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	680e      	ldr	r6, [r1, #0]
 800ad34:	061f      	lsls	r7, r3, #24
 800ad36:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad3a:	600e      	str	r6, [r1, #0]
 800ad3c:	d514      	bpl.n	800ad68 <_printf_i+0x1ac>
 800ad3e:	07d9      	lsls	r1, r3, #31
 800ad40:	bf44      	itt	mi
 800ad42:	f043 0320 	orrmi.w	r3, r3, #32
 800ad46:	6023      	strmi	r3, [r4, #0]
 800ad48:	b91d      	cbnz	r5, 800ad52 <_printf_i+0x196>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	f023 0320 	bic.w	r3, r3, #32
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	2310      	movs	r3, #16
 800ad54:	e7b0      	b.n	800acb8 <_printf_i+0xfc>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	f043 0320 	orr.w	r3, r3, #32
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	2378      	movs	r3, #120	; 0x78
 800ad60:	4828      	ldr	r0, [pc, #160]	; (800ae04 <_printf_i+0x248>)
 800ad62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad66:	e7e3      	b.n	800ad30 <_printf_i+0x174>
 800ad68:	065e      	lsls	r6, r3, #25
 800ad6a:	bf48      	it	mi
 800ad6c:	b2ad      	uxthmi	r5, r5
 800ad6e:	e7e6      	b.n	800ad3e <_printf_i+0x182>
 800ad70:	4616      	mov	r6, r2
 800ad72:	e7bb      	b.n	800acec <_printf_i+0x130>
 800ad74:	680b      	ldr	r3, [r1, #0]
 800ad76:	6826      	ldr	r6, [r4, #0]
 800ad78:	6960      	ldr	r0, [r4, #20]
 800ad7a:	1d1d      	adds	r5, r3, #4
 800ad7c:	600d      	str	r5, [r1, #0]
 800ad7e:	0635      	lsls	r5, r6, #24
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	d501      	bpl.n	800ad88 <_printf_i+0x1cc>
 800ad84:	6018      	str	r0, [r3, #0]
 800ad86:	e002      	b.n	800ad8e <_printf_i+0x1d2>
 800ad88:	0671      	lsls	r1, r6, #25
 800ad8a:	d5fb      	bpl.n	800ad84 <_printf_i+0x1c8>
 800ad8c:	8018      	strh	r0, [r3, #0]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	6123      	str	r3, [r4, #16]
 800ad92:	4616      	mov	r6, r2
 800ad94:	e7ba      	b.n	800ad0c <_printf_i+0x150>
 800ad96:	680b      	ldr	r3, [r1, #0]
 800ad98:	1d1a      	adds	r2, r3, #4
 800ad9a:	600a      	str	r2, [r1, #0]
 800ad9c:	681e      	ldr	r6, [r3, #0]
 800ad9e:	6862      	ldr	r2, [r4, #4]
 800ada0:	2100      	movs	r1, #0
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7f5 fa2c 	bl	8000200 <memchr>
 800ada8:	b108      	cbz	r0, 800adae <_printf_i+0x1f2>
 800adaa:	1b80      	subs	r0, r0, r6
 800adac:	6060      	str	r0, [r4, #4]
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	2300      	movs	r3, #0
 800adb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb8:	e7a8      	b.n	800ad0c <_printf_i+0x150>
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	4632      	mov	r2, r6
 800adbe:	4649      	mov	r1, r9
 800adc0:	4640      	mov	r0, r8
 800adc2:	47d0      	blx	sl
 800adc4:	3001      	adds	r0, #1
 800adc6:	d0ab      	beq.n	800ad20 <_printf_i+0x164>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	079b      	lsls	r3, r3, #30
 800adcc:	d413      	bmi.n	800adf6 <_printf_i+0x23a>
 800adce:	68e0      	ldr	r0, [r4, #12]
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	4298      	cmp	r0, r3
 800add4:	bfb8      	it	lt
 800add6:	4618      	movlt	r0, r3
 800add8:	e7a4      	b.n	800ad24 <_printf_i+0x168>
 800adda:	2301      	movs	r3, #1
 800addc:	4632      	mov	r2, r6
 800adde:	4649      	mov	r1, r9
 800ade0:	4640      	mov	r0, r8
 800ade2:	47d0      	blx	sl
 800ade4:	3001      	adds	r0, #1
 800ade6:	d09b      	beq.n	800ad20 <_printf_i+0x164>
 800ade8:	3501      	adds	r5, #1
 800adea:	68e3      	ldr	r3, [r4, #12]
 800adec:	9903      	ldr	r1, [sp, #12]
 800adee:	1a5b      	subs	r3, r3, r1
 800adf0:	42ab      	cmp	r3, r5
 800adf2:	dcf2      	bgt.n	800adda <_printf_i+0x21e>
 800adf4:	e7eb      	b.n	800adce <_printf_i+0x212>
 800adf6:	2500      	movs	r5, #0
 800adf8:	f104 0619 	add.w	r6, r4, #25
 800adfc:	e7f5      	b.n	800adea <_printf_i+0x22e>
 800adfe:	bf00      	nop
 800ae00:	08010f32 	.word	0x08010f32
 800ae04:	08010f43 	.word	0x08010f43

0800ae08 <sniprintf>:
 800ae08:	b40c      	push	{r2, r3}
 800ae0a:	b530      	push	{r4, r5, lr}
 800ae0c:	4b17      	ldr	r3, [pc, #92]	; (800ae6c <sniprintf+0x64>)
 800ae0e:	1e0c      	subs	r4, r1, #0
 800ae10:	681d      	ldr	r5, [r3, #0]
 800ae12:	b09d      	sub	sp, #116	; 0x74
 800ae14:	da08      	bge.n	800ae28 <sniprintf+0x20>
 800ae16:	238b      	movs	r3, #139	; 0x8b
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1e:	b01d      	add	sp, #116	; 0x74
 800ae20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae24:	b002      	add	sp, #8
 800ae26:	4770      	bx	lr
 800ae28:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ae2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ae30:	bf14      	ite	ne
 800ae32:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae36:	4623      	moveq	r3, r4
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	9307      	str	r3, [sp, #28]
 800ae3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae40:	9002      	str	r0, [sp, #8]
 800ae42:	9006      	str	r0, [sp, #24]
 800ae44:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ae4a:	ab21      	add	r3, sp, #132	; 0x84
 800ae4c:	a902      	add	r1, sp, #8
 800ae4e:	4628      	mov	r0, r5
 800ae50:	9301      	str	r3, [sp, #4]
 800ae52:	f001 fb33 	bl	800c4bc <_svfiprintf_r>
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	bfbc      	itt	lt
 800ae5a:	238b      	movlt	r3, #139	; 0x8b
 800ae5c:	602b      	strlt	r3, [r5, #0]
 800ae5e:	2c00      	cmp	r4, #0
 800ae60:	d0dd      	beq.n	800ae1e <sniprintf+0x16>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	e7d9      	b.n	800ae1e <sniprintf+0x16>
 800ae6a:	bf00      	nop
 800ae6c:	20000314 	.word	0x20000314

0800ae70 <quorem>:
 800ae70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	6903      	ldr	r3, [r0, #16]
 800ae76:	690c      	ldr	r4, [r1, #16]
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	4607      	mov	r7, r0
 800ae7c:	f2c0 8081 	blt.w	800af82 <quorem+0x112>
 800ae80:	3c01      	subs	r4, #1
 800ae82:	f101 0814 	add.w	r8, r1, #20
 800ae86:	f100 0514 	add.w	r5, r0, #20
 800ae8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aea0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aea4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aea8:	d331      	bcc.n	800af0e <quorem+0x9e>
 800aeaa:	f04f 0e00 	mov.w	lr, #0
 800aeae:	4640      	mov	r0, r8
 800aeb0:	46ac      	mov	ip, r5
 800aeb2:	46f2      	mov	sl, lr
 800aeb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800aeb8:	b293      	uxth	r3, r2
 800aeba:	fb06 e303 	mla	r3, r6, r3, lr
 800aebe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	ebaa 0303 	sub.w	r3, sl, r3
 800aec8:	0c12      	lsrs	r2, r2, #16
 800aeca:	f8dc a000 	ldr.w	sl, [ip]
 800aece:	fb06 e202 	mla	r2, r6, r2, lr
 800aed2:	fa13 f38a 	uxtah	r3, r3, sl
 800aed6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aeda:	fa1f fa82 	uxth.w	sl, r2
 800aede:	f8dc 2000 	ldr.w	r2, [ip]
 800aee2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800aee6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aef0:	4581      	cmp	r9, r0
 800aef2:	f84c 3b04 	str.w	r3, [ip], #4
 800aef6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aefa:	d2db      	bcs.n	800aeb4 <quorem+0x44>
 800aefc:	f855 300b 	ldr.w	r3, [r5, fp]
 800af00:	b92b      	cbnz	r3, 800af0e <quorem+0x9e>
 800af02:	9b01      	ldr	r3, [sp, #4]
 800af04:	3b04      	subs	r3, #4
 800af06:	429d      	cmp	r5, r3
 800af08:	461a      	mov	r2, r3
 800af0a:	d32e      	bcc.n	800af6a <quorem+0xfa>
 800af0c:	613c      	str	r4, [r7, #16]
 800af0e:	4638      	mov	r0, r7
 800af10:	f001 f8be 	bl	800c090 <__mcmp>
 800af14:	2800      	cmp	r0, #0
 800af16:	db24      	blt.n	800af62 <quorem+0xf2>
 800af18:	3601      	adds	r6, #1
 800af1a:	4628      	mov	r0, r5
 800af1c:	f04f 0c00 	mov.w	ip, #0
 800af20:	f858 2b04 	ldr.w	r2, [r8], #4
 800af24:	f8d0 e000 	ldr.w	lr, [r0]
 800af28:	b293      	uxth	r3, r2
 800af2a:	ebac 0303 	sub.w	r3, ip, r3
 800af2e:	0c12      	lsrs	r2, r2, #16
 800af30:	fa13 f38e 	uxtah	r3, r3, lr
 800af34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af42:	45c1      	cmp	r9, r8
 800af44:	f840 3b04 	str.w	r3, [r0], #4
 800af48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af4c:	d2e8      	bcs.n	800af20 <quorem+0xb0>
 800af4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af56:	b922      	cbnz	r2, 800af62 <quorem+0xf2>
 800af58:	3b04      	subs	r3, #4
 800af5a:	429d      	cmp	r5, r3
 800af5c:	461a      	mov	r2, r3
 800af5e:	d30a      	bcc.n	800af76 <quorem+0x106>
 800af60:	613c      	str	r4, [r7, #16]
 800af62:	4630      	mov	r0, r6
 800af64:	b003      	add	sp, #12
 800af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6a:	6812      	ldr	r2, [r2, #0]
 800af6c:	3b04      	subs	r3, #4
 800af6e:	2a00      	cmp	r2, #0
 800af70:	d1cc      	bne.n	800af0c <quorem+0x9c>
 800af72:	3c01      	subs	r4, #1
 800af74:	e7c7      	b.n	800af06 <quorem+0x96>
 800af76:	6812      	ldr	r2, [r2, #0]
 800af78:	3b04      	subs	r3, #4
 800af7a:	2a00      	cmp	r2, #0
 800af7c:	d1f0      	bne.n	800af60 <quorem+0xf0>
 800af7e:	3c01      	subs	r4, #1
 800af80:	e7eb      	b.n	800af5a <quorem+0xea>
 800af82:	2000      	movs	r0, #0
 800af84:	e7ee      	b.n	800af64 <quorem+0xf4>
	...

0800af88 <_dtoa_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	ed2d 8b02 	vpush	{d8}
 800af90:	ec57 6b10 	vmov	r6, r7, d0
 800af94:	b095      	sub	sp, #84	; 0x54
 800af96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af9c:	9105      	str	r1, [sp, #20]
 800af9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800afa2:	4604      	mov	r4, r0
 800afa4:	9209      	str	r2, [sp, #36]	; 0x24
 800afa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800afa8:	b975      	cbnz	r5, 800afc8 <_dtoa_r+0x40>
 800afaa:	2010      	movs	r0, #16
 800afac:	f000 fddc 	bl	800bb68 <malloc>
 800afb0:	4602      	mov	r2, r0
 800afb2:	6260      	str	r0, [r4, #36]	; 0x24
 800afb4:	b920      	cbnz	r0, 800afc0 <_dtoa_r+0x38>
 800afb6:	4bb2      	ldr	r3, [pc, #712]	; (800b280 <_dtoa_r+0x2f8>)
 800afb8:	21ea      	movs	r1, #234	; 0xea
 800afba:	48b2      	ldr	r0, [pc, #712]	; (800b284 <_dtoa_r+0x2fc>)
 800afbc:	f001 fb8e 	bl	800c6dc <__assert_func>
 800afc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afc4:	6005      	str	r5, [r0, #0]
 800afc6:	60c5      	str	r5, [r0, #12]
 800afc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afca:	6819      	ldr	r1, [r3, #0]
 800afcc:	b151      	cbz	r1, 800afe4 <_dtoa_r+0x5c>
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	604a      	str	r2, [r1, #4]
 800afd2:	2301      	movs	r3, #1
 800afd4:	4093      	lsls	r3, r2
 800afd6:	608b      	str	r3, [r1, #8]
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fe1b 	bl	800bc14 <_Bfree>
 800afde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	1e3b      	subs	r3, r7, #0
 800afe6:	bfb9      	ittee	lt
 800afe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800afec:	9303      	strlt	r3, [sp, #12]
 800afee:	2300      	movge	r3, #0
 800aff0:	f8c8 3000 	strge.w	r3, [r8]
 800aff4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aff8:	4ba3      	ldr	r3, [pc, #652]	; (800b288 <_dtoa_r+0x300>)
 800affa:	bfbc      	itt	lt
 800affc:	2201      	movlt	r2, #1
 800affe:	f8c8 2000 	strlt.w	r2, [r8]
 800b002:	ea33 0309 	bics.w	r3, r3, r9
 800b006:	d11b      	bne.n	800b040 <_dtoa_r+0xb8>
 800b008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b00a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b014:	4333      	orrs	r3, r6
 800b016:	f000 857a 	beq.w	800bb0e <_dtoa_r+0xb86>
 800b01a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b01c:	b963      	cbnz	r3, 800b038 <_dtoa_r+0xb0>
 800b01e:	4b9b      	ldr	r3, [pc, #620]	; (800b28c <_dtoa_r+0x304>)
 800b020:	e024      	b.n	800b06c <_dtoa_r+0xe4>
 800b022:	4b9b      	ldr	r3, [pc, #620]	; (800b290 <_dtoa_r+0x308>)
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	9800      	ldr	r0, [sp, #0]
 800b02e:	b015      	add	sp, #84	; 0x54
 800b030:	ecbd 8b02 	vpop	{d8}
 800b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b038:	4b94      	ldr	r3, [pc, #592]	; (800b28c <_dtoa_r+0x304>)
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	3303      	adds	r3, #3
 800b03e:	e7f3      	b.n	800b028 <_dtoa_r+0xa0>
 800b040:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b044:	2200      	movs	r2, #0
 800b046:	ec51 0b17 	vmov	r0, r1, d7
 800b04a:	2300      	movs	r3, #0
 800b04c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b050:	f7f5 fd4a 	bl	8000ae8 <__aeabi_dcmpeq>
 800b054:	4680      	mov	r8, r0
 800b056:	b158      	cbz	r0, 800b070 <_dtoa_r+0xe8>
 800b058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b05a:	2301      	movs	r3, #1
 800b05c:	6013      	str	r3, [r2, #0]
 800b05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 8551 	beq.w	800bb08 <_dtoa_r+0xb80>
 800b066:	488b      	ldr	r0, [pc, #556]	; (800b294 <_dtoa_r+0x30c>)
 800b068:	6018      	str	r0, [r3, #0]
 800b06a:	1e43      	subs	r3, r0, #1
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	e7dd      	b.n	800b02c <_dtoa_r+0xa4>
 800b070:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b074:	aa12      	add	r2, sp, #72	; 0x48
 800b076:	a913      	add	r1, sp, #76	; 0x4c
 800b078:	4620      	mov	r0, r4
 800b07a:	f001 f8ad 	bl	800c1d8 <__d2b>
 800b07e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b082:	4683      	mov	fp, r0
 800b084:	2d00      	cmp	r5, #0
 800b086:	d07c      	beq.n	800b182 <_dtoa_r+0x1fa>
 800b088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b08a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b08e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b092:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b096:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b09a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b09e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0a2:	4b7d      	ldr	r3, [pc, #500]	; (800b298 <_dtoa_r+0x310>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	f7f5 f8fd 	bl	80002a8 <__aeabi_dsub>
 800b0ae:	a36e      	add	r3, pc, #440	; (adr r3, 800b268 <_dtoa_r+0x2e0>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f7f5 fab0 	bl	8000618 <__aeabi_dmul>
 800b0b8:	a36d      	add	r3, pc, #436	; (adr r3, 800b270 <_dtoa_r+0x2e8>)
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	f7f5 f8f5 	bl	80002ac <__adddf3>
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	460f      	mov	r7, r1
 800b0c8:	f7f5 fa3c 	bl	8000544 <__aeabi_i2d>
 800b0cc:	a36a      	add	r3, pc, #424	; (adr r3, 800b278 <_dtoa_r+0x2f0>)
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	f7f5 faa1 	bl	8000618 <__aeabi_dmul>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4630      	mov	r0, r6
 800b0dc:	4639      	mov	r1, r7
 800b0de:	f7f5 f8e5 	bl	80002ac <__adddf3>
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	460f      	mov	r7, r1
 800b0e6:	f7f5 fd47 	bl	8000b78 <__aeabi_d2iz>
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4682      	mov	sl, r0
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 fd02 	bl	8000afc <__aeabi_dcmplt>
 800b0f8:	b148      	cbz	r0, 800b10e <_dtoa_r+0x186>
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f7f5 fa22 	bl	8000544 <__aeabi_i2d>
 800b100:	4632      	mov	r2, r6
 800b102:	463b      	mov	r3, r7
 800b104:	f7f5 fcf0 	bl	8000ae8 <__aeabi_dcmpeq>
 800b108:	b908      	cbnz	r0, 800b10e <_dtoa_r+0x186>
 800b10a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b10e:	f1ba 0f16 	cmp.w	sl, #22
 800b112:	d854      	bhi.n	800b1be <_dtoa_r+0x236>
 800b114:	4b61      	ldr	r3, [pc, #388]	; (800b29c <_dtoa_r+0x314>)
 800b116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b122:	f7f5 fceb 	bl	8000afc <__aeabi_dcmplt>
 800b126:	2800      	cmp	r0, #0
 800b128:	d04b      	beq.n	800b1c2 <_dtoa_r+0x23a>
 800b12a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b12e:	2300      	movs	r3, #0
 800b130:	930e      	str	r3, [sp, #56]	; 0x38
 800b132:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b134:	1b5d      	subs	r5, r3, r5
 800b136:	1e6b      	subs	r3, r5, #1
 800b138:	9304      	str	r3, [sp, #16]
 800b13a:	bf43      	ittte	mi
 800b13c:	2300      	movmi	r3, #0
 800b13e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b142:	9304      	strmi	r3, [sp, #16]
 800b144:	f04f 0800 	movpl.w	r8, #0
 800b148:	f1ba 0f00 	cmp.w	sl, #0
 800b14c:	db3b      	blt.n	800b1c6 <_dtoa_r+0x23e>
 800b14e:	9b04      	ldr	r3, [sp, #16]
 800b150:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b154:	4453      	add	r3, sl
 800b156:	9304      	str	r3, [sp, #16]
 800b158:	2300      	movs	r3, #0
 800b15a:	9306      	str	r3, [sp, #24]
 800b15c:	9b05      	ldr	r3, [sp, #20]
 800b15e:	2b09      	cmp	r3, #9
 800b160:	d869      	bhi.n	800b236 <_dtoa_r+0x2ae>
 800b162:	2b05      	cmp	r3, #5
 800b164:	bfc4      	itt	gt
 800b166:	3b04      	subgt	r3, #4
 800b168:	9305      	strgt	r3, [sp, #20]
 800b16a:	9b05      	ldr	r3, [sp, #20]
 800b16c:	f1a3 0302 	sub.w	r3, r3, #2
 800b170:	bfcc      	ite	gt
 800b172:	2500      	movgt	r5, #0
 800b174:	2501      	movle	r5, #1
 800b176:	2b03      	cmp	r3, #3
 800b178:	d869      	bhi.n	800b24e <_dtoa_r+0x2c6>
 800b17a:	e8df f003 	tbb	[pc, r3]
 800b17e:	4e2c      	.short	0x4e2c
 800b180:	5a4c      	.short	0x5a4c
 800b182:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b186:	441d      	add	r5, r3
 800b188:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b18c:	2b20      	cmp	r3, #32
 800b18e:	bfc1      	itttt	gt
 800b190:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b194:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b198:	fa09 f303 	lslgt.w	r3, r9, r3
 800b19c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1a0:	bfda      	itte	le
 800b1a2:	f1c3 0320 	rsble	r3, r3, #32
 800b1a6:	fa06 f003 	lslle.w	r0, r6, r3
 800b1aa:	4318      	orrgt	r0, r3
 800b1ac:	f7f5 f9ba 	bl	8000524 <__aeabi_ui2d>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b1b8:	3d01      	subs	r5, #1
 800b1ba:	9310      	str	r3, [sp, #64]	; 0x40
 800b1bc:	e771      	b.n	800b0a2 <_dtoa_r+0x11a>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e7b6      	b.n	800b130 <_dtoa_r+0x1a8>
 800b1c2:	900e      	str	r0, [sp, #56]	; 0x38
 800b1c4:	e7b5      	b.n	800b132 <_dtoa_r+0x1aa>
 800b1c6:	f1ca 0300 	rsb	r3, sl, #0
 800b1ca:	9306      	str	r3, [sp, #24]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	eba8 080a 	sub.w	r8, r8, sl
 800b1d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b1d4:	e7c2      	b.n	800b15c <_dtoa_r+0x1d4>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9308      	str	r3, [sp, #32]
 800b1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	dc39      	bgt.n	800b254 <_dtoa_r+0x2cc>
 800b1e0:	f04f 0901 	mov.w	r9, #1
 800b1e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1e8:	464b      	mov	r3, r9
 800b1ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b1ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	6042      	str	r2, [r0, #4]
 800b1f4:	2204      	movs	r2, #4
 800b1f6:	f102 0614 	add.w	r6, r2, #20
 800b1fa:	429e      	cmp	r6, r3
 800b1fc:	6841      	ldr	r1, [r0, #4]
 800b1fe:	d92f      	bls.n	800b260 <_dtoa_r+0x2d8>
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fcc7 	bl	800bb94 <_Balloc>
 800b206:	9000      	str	r0, [sp, #0]
 800b208:	2800      	cmp	r0, #0
 800b20a:	d14b      	bne.n	800b2a4 <_dtoa_r+0x31c>
 800b20c:	4b24      	ldr	r3, [pc, #144]	; (800b2a0 <_dtoa_r+0x318>)
 800b20e:	4602      	mov	r2, r0
 800b210:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b214:	e6d1      	b.n	800afba <_dtoa_r+0x32>
 800b216:	2301      	movs	r3, #1
 800b218:	e7de      	b.n	800b1d8 <_dtoa_r+0x250>
 800b21a:	2300      	movs	r3, #0
 800b21c:	9308      	str	r3, [sp, #32]
 800b21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b220:	eb0a 0903 	add.w	r9, sl, r3
 800b224:	f109 0301 	add.w	r3, r9, #1
 800b228:	2b01      	cmp	r3, #1
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	bfb8      	it	lt
 800b22e:	2301      	movlt	r3, #1
 800b230:	e7dd      	b.n	800b1ee <_dtoa_r+0x266>
 800b232:	2301      	movs	r3, #1
 800b234:	e7f2      	b.n	800b21c <_dtoa_r+0x294>
 800b236:	2501      	movs	r5, #1
 800b238:	2300      	movs	r3, #0
 800b23a:	9305      	str	r3, [sp, #20]
 800b23c:	9508      	str	r5, [sp, #32]
 800b23e:	f04f 39ff 	mov.w	r9, #4294967295
 800b242:	2200      	movs	r2, #0
 800b244:	f8cd 9004 	str.w	r9, [sp, #4]
 800b248:	2312      	movs	r3, #18
 800b24a:	9209      	str	r2, [sp, #36]	; 0x24
 800b24c:	e7cf      	b.n	800b1ee <_dtoa_r+0x266>
 800b24e:	2301      	movs	r3, #1
 800b250:	9308      	str	r3, [sp, #32]
 800b252:	e7f4      	b.n	800b23e <_dtoa_r+0x2b6>
 800b254:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b258:	f8cd 9004 	str.w	r9, [sp, #4]
 800b25c:	464b      	mov	r3, r9
 800b25e:	e7c6      	b.n	800b1ee <_dtoa_r+0x266>
 800b260:	3101      	adds	r1, #1
 800b262:	6041      	str	r1, [r0, #4]
 800b264:	0052      	lsls	r2, r2, #1
 800b266:	e7c6      	b.n	800b1f6 <_dtoa_r+0x26e>
 800b268:	636f4361 	.word	0x636f4361
 800b26c:	3fd287a7 	.word	0x3fd287a7
 800b270:	8b60c8b3 	.word	0x8b60c8b3
 800b274:	3fc68a28 	.word	0x3fc68a28
 800b278:	509f79fb 	.word	0x509f79fb
 800b27c:	3fd34413 	.word	0x3fd34413
 800b280:	08010f61 	.word	0x08010f61
 800b284:	08010f78 	.word	0x08010f78
 800b288:	7ff00000 	.word	0x7ff00000
 800b28c:	08010f5d 	.word	0x08010f5d
 800b290:	08010f54 	.word	0x08010f54
 800b294:	08010f31 	.word	0x08010f31
 800b298:	3ff80000 	.word	0x3ff80000
 800b29c:	08011070 	.word	0x08011070
 800b2a0:	08010fd7 	.word	0x08010fd7
 800b2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a6:	9a00      	ldr	r2, [sp, #0]
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	9b01      	ldr	r3, [sp, #4]
 800b2ac:	2b0e      	cmp	r3, #14
 800b2ae:	f200 80ad 	bhi.w	800b40c <_dtoa_r+0x484>
 800b2b2:	2d00      	cmp	r5, #0
 800b2b4:	f000 80aa 	beq.w	800b40c <_dtoa_r+0x484>
 800b2b8:	f1ba 0f00 	cmp.w	sl, #0
 800b2bc:	dd36      	ble.n	800b32c <_dtoa_r+0x3a4>
 800b2be:	4ac3      	ldr	r2, [pc, #780]	; (800b5cc <_dtoa_r+0x644>)
 800b2c0:	f00a 030f 	and.w	r3, sl, #15
 800b2c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2c8:	ed93 7b00 	vldr	d7, [r3]
 800b2cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b2d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b2d4:	eeb0 8a47 	vmov.f32	s16, s14
 800b2d8:	eef0 8a67 	vmov.f32	s17, s15
 800b2dc:	d016      	beq.n	800b30c <_dtoa_r+0x384>
 800b2de:	4bbc      	ldr	r3, [pc, #752]	; (800b5d0 <_dtoa_r+0x648>)
 800b2e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2e8:	f7f5 fac0 	bl	800086c <__aeabi_ddiv>
 800b2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f0:	f007 070f 	and.w	r7, r7, #15
 800b2f4:	2503      	movs	r5, #3
 800b2f6:	4eb6      	ldr	r6, [pc, #728]	; (800b5d0 <_dtoa_r+0x648>)
 800b2f8:	b957      	cbnz	r7, 800b310 <_dtoa_r+0x388>
 800b2fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2fe:	ec53 2b18 	vmov	r2, r3, d8
 800b302:	f7f5 fab3 	bl	800086c <__aeabi_ddiv>
 800b306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b30a:	e029      	b.n	800b360 <_dtoa_r+0x3d8>
 800b30c:	2502      	movs	r5, #2
 800b30e:	e7f2      	b.n	800b2f6 <_dtoa_r+0x36e>
 800b310:	07f9      	lsls	r1, r7, #31
 800b312:	d508      	bpl.n	800b326 <_dtoa_r+0x39e>
 800b314:	ec51 0b18 	vmov	r0, r1, d8
 800b318:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b31c:	f7f5 f97c 	bl	8000618 <__aeabi_dmul>
 800b320:	ec41 0b18 	vmov	d8, r0, r1
 800b324:	3501      	adds	r5, #1
 800b326:	107f      	asrs	r7, r7, #1
 800b328:	3608      	adds	r6, #8
 800b32a:	e7e5      	b.n	800b2f8 <_dtoa_r+0x370>
 800b32c:	f000 80a6 	beq.w	800b47c <_dtoa_r+0x4f4>
 800b330:	f1ca 0600 	rsb	r6, sl, #0
 800b334:	4ba5      	ldr	r3, [pc, #660]	; (800b5cc <_dtoa_r+0x644>)
 800b336:	4fa6      	ldr	r7, [pc, #664]	; (800b5d0 <_dtoa_r+0x648>)
 800b338:	f006 020f 	and.w	r2, r6, #15
 800b33c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b348:	f7f5 f966 	bl	8000618 <__aeabi_dmul>
 800b34c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b350:	1136      	asrs	r6, r6, #4
 800b352:	2300      	movs	r3, #0
 800b354:	2502      	movs	r5, #2
 800b356:	2e00      	cmp	r6, #0
 800b358:	f040 8085 	bne.w	800b466 <_dtoa_r+0x4de>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1d2      	bne.n	800b306 <_dtoa_r+0x37e>
 800b360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b362:	2b00      	cmp	r3, #0
 800b364:	f000 808c 	beq.w	800b480 <_dtoa_r+0x4f8>
 800b368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b36c:	4b99      	ldr	r3, [pc, #612]	; (800b5d4 <_dtoa_r+0x64c>)
 800b36e:	2200      	movs	r2, #0
 800b370:	4630      	mov	r0, r6
 800b372:	4639      	mov	r1, r7
 800b374:	f7f5 fbc2 	bl	8000afc <__aeabi_dcmplt>
 800b378:	2800      	cmp	r0, #0
 800b37a:	f000 8081 	beq.w	800b480 <_dtoa_r+0x4f8>
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d07d      	beq.n	800b480 <_dtoa_r+0x4f8>
 800b384:	f1b9 0f00 	cmp.w	r9, #0
 800b388:	dd3c      	ble.n	800b404 <_dtoa_r+0x47c>
 800b38a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b38e:	9307      	str	r3, [sp, #28]
 800b390:	2200      	movs	r2, #0
 800b392:	4b91      	ldr	r3, [pc, #580]	; (800b5d8 <_dtoa_r+0x650>)
 800b394:	4630      	mov	r0, r6
 800b396:	4639      	mov	r1, r7
 800b398:	f7f5 f93e 	bl	8000618 <__aeabi_dmul>
 800b39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3a0:	3501      	adds	r5, #1
 800b3a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b3a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f7f5 f8ca 	bl	8000544 <__aeabi_i2d>
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	f7f5 f930 	bl	8000618 <__aeabi_dmul>
 800b3b8:	4b88      	ldr	r3, [pc, #544]	; (800b5dc <_dtoa_r+0x654>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f7f4 ff76 	bl	80002ac <__adddf3>
 800b3c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b3c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d15c      	bne.n	800b48a <_dtoa_r+0x502>
 800b3d0:	4b83      	ldr	r3, [pc, #524]	; (800b5e0 <_dtoa_r+0x658>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	4639      	mov	r1, r7
 800b3d8:	f7f4 ff66 	bl	80002a8 <__aeabi_dsub>
 800b3dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	460f      	mov	r7, r1
 800b3e4:	f7f5 fba8 	bl	8000b38 <__aeabi_dcmpgt>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	f040 8296 	bne.w	800b91a <_dtoa_r+0x992>
 800b3ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	f7f5 fb7f 	bl	8000afc <__aeabi_dcmplt>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f040 8288 	bne.w	800b914 <_dtoa_r+0x98c>
 800b404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b408:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b40c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f2c0 8158 	blt.w	800b6c4 <_dtoa_r+0x73c>
 800b414:	f1ba 0f0e 	cmp.w	sl, #14
 800b418:	f300 8154 	bgt.w	800b6c4 <_dtoa_r+0x73c>
 800b41c:	4b6b      	ldr	r3, [pc, #428]	; (800b5cc <_dtoa_r+0x644>)
 800b41e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b422:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f280 80e3 	bge.w	800b5f4 <_dtoa_r+0x66c>
 800b42e:	9b01      	ldr	r3, [sp, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f300 80df 	bgt.w	800b5f4 <_dtoa_r+0x66c>
 800b436:	f040 826d 	bne.w	800b914 <_dtoa_r+0x98c>
 800b43a:	4b69      	ldr	r3, [pc, #420]	; (800b5e0 <_dtoa_r+0x658>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	4640      	mov	r0, r8
 800b440:	4649      	mov	r1, r9
 800b442:	f7f5 f8e9 	bl	8000618 <__aeabi_dmul>
 800b446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b44a:	f7f5 fb6b 	bl	8000b24 <__aeabi_dcmpge>
 800b44e:	9e01      	ldr	r6, [sp, #4]
 800b450:	4637      	mov	r7, r6
 800b452:	2800      	cmp	r0, #0
 800b454:	f040 8243 	bne.w	800b8de <_dtoa_r+0x956>
 800b458:	9d00      	ldr	r5, [sp, #0]
 800b45a:	2331      	movs	r3, #49	; 0x31
 800b45c:	f805 3b01 	strb.w	r3, [r5], #1
 800b460:	f10a 0a01 	add.w	sl, sl, #1
 800b464:	e23f      	b.n	800b8e6 <_dtoa_r+0x95e>
 800b466:	07f2      	lsls	r2, r6, #31
 800b468:	d505      	bpl.n	800b476 <_dtoa_r+0x4ee>
 800b46a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b46e:	f7f5 f8d3 	bl	8000618 <__aeabi_dmul>
 800b472:	3501      	adds	r5, #1
 800b474:	2301      	movs	r3, #1
 800b476:	1076      	asrs	r6, r6, #1
 800b478:	3708      	adds	r7, #8
 800b47a:	e76c      	b.n	800b356 <_dtoa_r+0x3ce>
 800b47c:	2502      	movs	r5, #2
 800b47e:	e76f      	b.n	800b360 <_dtoa_r+0x3d8>
 800b480:	9b01      	ldr	r3, [sp, #4]
 800b482:	f8cd a01c 	str.w	sl, [sp, #28]
 800b486:	930c      	str	r3, [sp, #48]	; 0x30
 800b488:	e78d      	b.n	800b3a6 <_dtoa_r+0x41e>
 800b48a:	9900      	ldr	r1, [sp, #0]
 800b48c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b48e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b490:	4b4e      	ldr	r3, [pc, #312]	; (800b5cc <_dtoa_r+0x644>)
 800b492:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b496:	4401      	add	r1, r0
 800b498:	9102      	str	r1, [sp, #8]
 800b49a:	9908      	ldr	r1, [sp, #32]
 800b49c:	eeb0 8a47 	vmov.f32	s16, s14
 800b4a0:	eef0 8a67 	vmov.f32	s17, s15
 800b4a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4ac:	2900      	cmp	r1, #0
 800b4ae:	d045      	beq.n	800b53c <_dtoa_r+0x5b4>
 800b4b0:	494c      	ldr	r1, [pc, #304]	; (800b5e4 <_dtoa_r+0x65c>)
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	f7f5 f9da 	bl	800086c <__aeabi_ddiv>
 800b4b8:	ec53 2b18 	vmov	r2, r3, d8
 800b4bc:	f7f4 fef4 	bl	80002a8 <__aeabi_dsub>
 800b4c0:	9d00      	ldr	r5, [sp, #0]
 800b4c2:	ec41 0b18 	vmov	d8, r0, r1
 800b4c6:	4639      	mov	r1, r7
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7f5 fb55 	bl	8000b78 <__aeabi_d2iz>
 800b4ce:	900c      	str	r0, [sp, #48]	; 0x30
 800b4d0:	f7f5 f838 	bl	8000544 <__aeabi_i2d>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f4 fee4 	bl	80002a8 <__aeabi_dsub>
 800b4e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4e2:	3330      	adds	r3, #48	; 0x30
 800b4e4:	f805 3b01 	strb.w	r3, [r5], #1
 800b4e8:	ec53 2b18 	vmov	r2, r3, d8
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	460f      	mov	r7, r1
 800b4f0:	f7f5 fb04 	bl	8000afc <__aeabi_dcmplt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d165      	bne.n	800b5c4 <_dtoa_r+0x63c>
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	4935      	ldr	r1, [pc, #212]	; (800b5d4 <_dtoa_r+0x64c>)
 800b4fe:	2000      	movs	r0, #0
 800b500:	f7f4 fed2 	bl	80002a8 <__aeabi_dsub>
 800b504:	ec53 2b18 	vmov	r2, r3, d8
 800b508:	f7f5 faf8 	bl	8000afc <__aeabi_dcmplt>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	f040 80b9 	bne.w	800b684 <_dtoa_r+0x6fc>
 800b512:	9b02      	ldr	r3, [sp, #8]
 800b514:	429d      	cmp	r5, r3
 800b516:	f43f af75 	beq.w	800b404 <_dtoa_r+0x47c>
 800b51a:	4b2f      	ldr	r3, [pc, #188]	; (800b5d8 <_dtoa_r+0x650>)
 800b51c:	ec51 0b18 	vmov	r0, r1, d8
 800b520:	2200      	movs	r2, #0
 800b522:	f7f5 f879 	bl	8000618 <__aeabi_dmul>
 800b526:	4b2c      	ldr	r3, [pc, #176]	; (800b5d8 <_dtoa_r+0x650>)
 800b528:	ec41 0b18 	vmov	d8, r0, r1
 800b52c:	2200      	movs	r2, #0
 800b52e:	4630      	mov	r0, r6
 800b530:	4639      	mov	r1, r7
 800b532:	f7f5 f871 	bl	8000618 <__aeabi_dmul>
 800b536:	4606      	mov	r6, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	e7c4      	b.n	800b4c6 <_dtoa_r+0x53e>
 800b53c:	ec51 0b17 	vmov	r0, r1, d7
 800b540:	f7f5 f86a 	bl	8000618 <__aeabi_dmul>
 800b544:	9b02      	ldr	r3, [sp, #8]
 800b546:	9d00      	ldr	r5, [sp, #0]
 800b548:	930c      	str	r3, [sp, #48]	; 0x30
 800b54a:	ec41 0b18 	vmov	d8, r0, r1
 800b54e:	4639      	mov	r1, r7
 800b550:	4630      	mov	r0, r6
 800b552:	f7f5 fb11 	bl	8000b78 <__aeabi_d2iz>
 800b556:	9011      	str	r0, [sp, #68]	; 0x44
 800b558:	f7f4 fff4 	bl	8000544 <__aeabi_i2d>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f4 fea0 	bl	80002a8 <__aeabi_dsub>
 800b568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b56a:	3330      	adds	r3, #48	; 0x30
 800b56c:	f805 3b01 	strb.w	r3, [r5], #1
 800b570:	9b02      	ldr	r3, [sp, #8]
 800b572:	429d      	cmp	r5, r3
 800b574:	4606      	mov	r6, r0
 800b576:	460f      	mov	r7, r1
 800b578:	f04f 0200 	mov.w	r2, #0
 800b57c:	d134      	bne.n	800b5e8 <_dtoa_r+0x660>
 800b57e:	4b19      	ldr	r3, [pc, #100]	; (800b5e4 <_dtoa_r+0x65c>)
 800b580:	ec51 0b18 	vmov	r0, r1, d8
 800b584:	f7f4 fe92 	bl	80002ac <__adddf3>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4630      	mov	r0, r6
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f5 fad2 	bl	8000b38 <__aeabi_dcmpgt>
 800b594:	2800      	cmp	r0, #0
 800b596:	d175      	bne.n	800b684 <_dtoa_r+0x6fc>
 800b598:	ec53 2b18 	vmov	r2, r3, d8
 800b59c:	4911      	ldr	r1, [pc, #68]	; (800b5e4 <_dtoa_r+0x65c>)
 800b59e:	2000      	movs	r0, #0
 800b5a0:	f7f4 fe82 	bl	80002a8 <__aeabi_dsub>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f5 faa6 	bl	8000afc <__aeabi_dcmplt>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f43f af27 	beq.w	800b404 <_dtoa_r+0x47c>
 800b5b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5b8:	1e6b      	subs	r3, r5, #1
 800b5ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b5bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5c0:	2b30      	cmp	r3, #48	; 0x30
 800b5c2:	d0f8      	beq.n	800b5b6 <_dtoa_r+0x62e>
 800b5c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b5c8:	e04a      	b.n	800b660 <_dtoa_r+0x6d8>
 800b5ca:	bf00      	nop
 800b5cc:	08011070 	.word	0x08011070
 800b5d0:	08011048 	.word	0x08011048
 800b5d4:	3ff00000 	.word	0x3ff00000
 800b5d8:	40240000 	.word	0x40240000
 800b5dc:	401c0000 	.word	0x401c0000
 800b5e0:	40140000 	.word	0x40140000
 800b5e4:	3fe00000 	.word	0x3fe00000
 800b5e8:	4baf      	ldr	r3, [pc, #700]	; (800b8a8 <_dtoa_r+0x920>)
 800b5ea:	f7f5 f815 	bl	8000618 <__aeabi_dmul>
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	e7ac      	b.n	800b54e <_dtoa_r+0x5c6>
 800b5f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5f8:	9d00      	ldr	r5, [sp, #0]
 800b5fa:	4642      	mov	r2, r8
 800b5fc:	464b      	mov	r3, r9
 800b5fe:	4630      	mov	r0, r6
 800b600:	4639      	mov	r1, r7
 800b602:	f7f5 f933 	bl	800086c <__aeabi_ddiv>
 800b606:	f7f5 fab7 	bl	8000b78 <__aeabi_d2iz>
 800b60a:	9002      	str	r0, [sp, #8]
 800b60c:	f7f4 ff9a 	bl	8000544 <__aeabi_i2d>
 800b610:	4642      	mov	r2, r8
 800b612:	464b      	mov	r3, r9
 800b614:	f7f5 f800 	bl	8000618 <__aeabi_dmul>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f7f4 fe42 	bl	80002a8 <__aeabi_dsub>
 800b624:	9e02      	ldr	r6, [sp, #8]
 800b626:	9f01      	ldr	r7, [sp, #4]
 800b628:	3630      	adds	r6, #48	; 0x30
 800b62a:	f805 6b01 	strb.w	r6, [r5], #1
 800b62e:	9e00      	ldr	r6, [sp, #0]
 800b630:	1bae      	subs	r6, r5, r6
 800b632:	42b7      	cmp	r7, r6
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	d137      	bne.n	800b6aa <_dtoa_r+0x722>
 800b63a:	f7f4 fe37 	bl	80002ac <__adddf3>
 800b63e:	4642      	mov	r2, r8
 800b640:	464b      	mov	r3, r9
 800b642:	4606      	mov	r6, r0
 800b644:	460f      	mov	r7, r1
 800b646:	f7f5 fa77 	bl	8000b38 <__aeabi_dcmpgt>
 800b64a:	b9c8      	cbnz	r0, 800b680 <_dtoa_r+0x6f8>
 800b64c:	4642      	mov	r2, r8
 800b64e:	464b      	mov	r3, r9
 800b650:	4630      	mov	r0, r6
 800b652:	4639      	mov	r1, r7
 800b654:	f7f5 fa48 	bl	8000ae8 <__aeabi_dcmpeq>
 800b658:	b110      	cbz	r0, 800b660 <_dtoa_r+0x6d8>
 800b65a:	9b02      	ldr	r3, [sp, #8]
 800b65c:	07d9      	lsls	r1, r3, #31
 800b65e:	d40f      	bmi.n	800b680 <_dtoa_r+0x6f8>
 800b660:	4620      	mov	r0, r4
 800b662:	4659      	mov	r1, fp
 800b664:	f000 fad6 	bl	800bc14 <_Bfree>
 800b668:	2300      	movs	r3, #0
 800b66a:	702b      	strb	r3, [r5, #0]
 800b66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b66e:	f10a 0001 	add.w	r0, sl, #1
 800b672:	6018      	str	r0, [r3, #0]
 800b674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b676:	2b00      	cmp	r3, #0
 800b678:	f43f acd8 	beq.w	800b02c <_dtoa_r+0xa4>
 800b67c:	601d      	str	r5, [r3, #0]
 800b67e:	e4d5      	b.n	800b02c <_dtoa_r+0xa4>
 800b680:	f8cd a01c 	str.w	sl, [sp, #28]
 800b684:	462b      	mov	r3, r5
 800b686:	461d      	mov	r5, r3
 800b688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b68c:	2a39      	cmp	r2, #57	; 0x39
 800b68e:	d108      	bne.n	800b6a2 <_dtoa_r+0x71a>
 800b690:	9a00      	ldr	r2, [sp, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d1f7      	bne.n	800b686 <_dtoa_r+0x6fe>
 800b696:	9a07      	ldr	r2, [sp, #28]
 800b698:	9900      	ldr	r1, [sp, #0]
 800b69a:	3201      	adds	r2, #1
 800b69c:	9207      	str	r2, [sp, #28]
 800b69e:	2230      	movs	r2, #48	; 0x30
 800b6a0:	700a      	strb	r2, [r1, #0]
 800b6a2:	781a      	ldrb	r2, [r3, #0]
 800b6a4:	3201      	adds	r2, #1
 800b6a6:	701a      	strb	r2, [r3, #0]
 800b6a8:	e78c      	b.n	800b5c4 <_dtoa_r+0x63c>
 800b6aa:	4b7f      	ldr	r3, [pc, #508]	; (800b8a8 <_dtoa_r+0x920>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f7f4 ffb3 	bl	8000618 <__aeabi_dmul>
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	460f      	mov	r7, r1
 800b6ba:	f7f5 fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d09b      	beq.n	800b5fa <_dtoa_r+0x672>
 800b6c2:	e7cd      	b.n	800b660 <_dtoa_r+0x6d8>
 800b6c4:	9a08      	ldr	r2, [sp, #32]
 800b6c6:	2a00      	cmp	r2, #0
 800b6c8:	f000 80c4 	beq.w	800b854 <_dtoa_r+0x8cc>
 800b6cc:	9a05      	ldr	r2, [sp, #20]
 800b6ce:	2a01      	cmp	r2, #1
 800b6d0:	f300 80a8 	bgt.w	800b824 <_dtoa_r+0x89c>
 800b6d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	f000 80a0 	beq.w	800b81c <_dtoa_r+0x894>
 800b6dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6e0:	9e06      	ldr	r6, [sp, #24]
 800b6e2:	4645      	mov	r5, r8
 800b6e4:	9a04      	ldr	r2, [sp, #16]
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	441a      	add	r2, r3
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4498      	add	r8, r3
 800b6ee:	9204      	str	r2, [sp, #16]
 800b6f0:	f000 fb4c 	bl	800bd8c <__i2b>
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	dd0b      	ble.n	800b712 <_dtoa_r+0x78a>
 800b6fa:	9b04      	ldr	r3, [sp, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd08      	ble.n	800b712 <_dtoa_r+0x78a>
 800b700:	42ab      	cmp	r3, r5
 800b702:	9a04      	ldr	r2, [sp, #16]
 800b704:	bfa8      	it	ge
 800b706:	462b      	movge	r3, r5
 800b708:	eba8 0803 	sub.w	r8, r8, r3
 800b70c:	1aed      	subs	r5, r5, r3
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	9b06      	ldr	r3, [sp, #24]
 800b714:	b1fb      	cbz	r3, 800b756 <_dtoa_r+0x7ce>
 800b716:	9b08      	ldr	r3, [sp, #32]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 809f 	beq.w	800b85c <_dtoa_r+0x8d4>
 800b71e:	2e00      	cmp	r6, #0
 800b720:	dd11      	ble.n	800b746 <_dtoa_r+0x7be>
 800b722:	4639      	mov	r1, r7
 800b724:	4632      	mov	r2, r6
 800b726:	4620      	mov	r0, r4
 800b728:	f000 fbec 	bl	800bf04 <__pow5mult>
 800b72c:	465a      	mov	r2, fp
 800b72e:	4601      	mov	r1, r0
 800b730:	4607      	mov	r7, r0
 800b732:	4620      	mov	r0, r4
 800b734:	f000 fb40 	bl	800bdb8 <__multiply>
 800b738:	4659      	mov	r1, fp
 800b73a:	9007      	str	r0, [sp, #28]
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 fa69 	bl	800bc14 <_Bfree>
 800b742:	9b07      	ldr	r3, [sp, #28]
 800b744:	469b      	mov	fp, r3
 800b746:	9b06      	ldr	r3, [sp, #24]
 800b748:	1b9a      	subs	r2, r3, r6
 800b74a:	d004      	beq.n	800b756 <_dtoa_r+0x7ce>
 800b74c:	4659      	mov	r1, fp
 800b74e:	4620      	mov	r0, r4
 800b750:	f000 fbd8 	bl	800bf04 <__pow5mult>
 800b754:	4683      	mov	fp, r0
 800b756:	2101      	movs	r1, #1
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 fb17 	bl	800bd8c <__i2b>
 800b75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b760:	2b00      	cmp	r3, #0
 800b762:	4606      	mov	r6, r0
 800b764:	dd7c      	ble.n	800b860 <_dtoa_r+0x8d8>
 800b766:	461a      	mov	r2, r3
 800b768:	4601      	mov	r1, r0
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 fbca 	bl	800bf04 <__pow5mult>
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	2b01      	cmp	r3, #1
 800b774:	4606      	mov	r6, r0
 800b776:	dd76      	ble.n	800b866 <_dtoa_r+0x8de>
 800b778:	2300      	movs	r3, #0
 800b77a:	9306      	str	r3, [sp, #24]
 800b77c:	6933      	ldr	r3, [r6, #16]
 800b77e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b782:	6918      	ldr	r0, [r3, #16]
 800b784:	f000 fab2 	bl	800bcec <__hi0bits>
 800b788:	f1c0 0020 	rsb	r0, r0, #32
 800b78c:	9b04      	ldr	r3, [sp, #16]
 800b78e:	4418      	add	r0, r3
 800b790:	f010 001f 	ands.w	r0, r0, #31
 800b794:	f000 8086 	beq.w	800b8a4 <_dtoa_r+0x91c>
 800b798:	f1c0 0320 	rsb	r3, r0, #32
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	dd7f      	ble.n	800b8a0 <_dtoa_r+0x918>
 800b7a0:	f1c0 001c 	rsb	r0, r0, #28
 800b7a4:	9b04      	ldr	r3, [sp, #16]
 800b7a6:	4403      	add	r3, r0
 800b7a8:	4480      	add	r8, r0
 800b7aa:	4405      	add	r5, r0
 800b7ac:	9304      	str	r3, [sp, #16]
 800b7ae:	f1b8 0f00 	cmp.w	r8, #0
 800b7b2:	dd05      	ble.n	800b7c0 <_dtoa_r+0x838>
 800b7b4:	4659      	mov	r1, fp
 800b7b6:	4642      	mov	r2, r8
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 fbfd 	bl	800bfb8 <__lshift>
 800b7be:	4683      	mov	fp, r0
 800b7c0:	9b04      	ldr	r3, [sp, #16]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	dd05      	ble.n	800b7d2 <_dtoa_r+0x84a>
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 fbf4 	bl	800bfb8 <__lshift>
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d069      	beq.n	800b8ac <_dtoa_r+0x924>
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4658      	mov	r0, fp
 800b7dc:	f000 fc58 	bl	800c090 <__mcmp>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	da63      	bge.n	800b8ac <_dtoa_r+0x924>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4659      	mov	r1, fp
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 fa34 	bl	800bc58 <__multadd>
 800b7f0:	9b08      	ldr	r3, [sp, #32]
 800b7f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7f6:	4683      	mov	fp, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 818f 	beq.w	800bb1c <_dtoa_r+0xb94>
 800b7fe:	4639      	mov	r1, r7
 800b800:	2300      	movs	r3, #0
 800b802:	220a      	movs	r2, #10
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fa27 	bl	800bc58 <__multadd>
 800b80a:	f1b9 0f00 	cmp.w	r9, #0
 800b80e:	4607      	mov	r7, r0
 800b810:	f300 808e 	bgt.w	800b930 <_dtoa_r+0x9a8>
 800b814:	9b05      	ldr	r3, [sp, #20]
 800b816:	2b02      	cmp	r3, #2
 800b818:	dc50      	bgt.n	800b8bc <_dtoa_r+0x934>
 800b81a:	e089      	b.n	800b930 <_dtoa_r+0x9a8>
 800b81c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b81e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b822:	e75d      	b.n	800b6e0 <_dtoa_r+0x758>
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	1e5e      	subs	r6, r3, #1
 800b828:	9b06      	ldr	r3, [sp, #24]
 800b82a:	42b3      	cmp	r3, r6
 800b82c:	bfbf      	itttt	lt
 800b82e:	9b06      	ldrlt	r3, [sp, #24]
 800b830:	9606      	strlt	r6, [sp, #24]
 800b832:	1af2      	sublt	r2, r6, r3
 800b834:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b836:	bfb6      	itet	lt
 800b838:	189b      	addlt	r3, r3, r2
 800b83a:	1b9e      	subge	r6, r3, r6
 800b83c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	bfb8      	it	lt
 800b842:	2600      	movlt	r6, #0
 800b844:	2b00      	cmp	r3, #0
 800b846:	bfb5      	itete	lt
 800b848:	eba8 0503 	sublt.w	r5, r8, r3
 800b84c:	9b01      	ldrge	r3, [sp, #4]
 800b84e:	2300      	movlt	r3, #0
 800b850:	4645      	movge	r5, r8
 800b852:	e747      	b.n	800b6e4 <_dtoa_r+0x75c>
 800b854:	9e06      	ldr	r6, [sp, #24]
 800b856:	9f08      	ldr	r7, [sp, #32]
 800b858:	4645      	mov	r5, r8
 800b85a:	e74c      	b.n	800b6f6 <_dtoa_r+0x76e>
 800b85c:	9a06      	ldr	r2, [sp, #24]
 800b85e:	e775      	b.n	800b74c <_dtoa_r+0x7c4>
 800b860:	9b05      	ldr	r3, [sp, #20]
 800b862:	2b01      	cmp	r3, #1
 800b864:	dc18      	bgt.n	800b898 <_dtoa_r+0x910>
 800b866:	9b02      	ldr	r3, [sp, #8]
 800b868:	b9b3      	cbnz	r3, 800b898 <_dtoa_r+0x910>
 800b86a:	9b03      	ldr	r3, [sp, #12]
 800b86c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b870:	b9a3      	cbnz	r3, 800b89c <_dtoa_r+0x914>
 800b872:	9b03      	ldr	r3, [sp, #12]
 800b874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b878:	0d1b      	lsrs	r3, r3, #20
 800b87a:	051b      	lsls	r3, r3, #20
 800b87c:	b12b      	cbz	r3, 800b88a <_dtoa_r+0x902>
 800b87e:	9b04      	ldr	r3, [sp, #16]
 800b880:	3301      	adds	r3, #1
 800b882:	9304      	str	r3, [sp, #16]
 800b884:	f108 0801 	add.w	r8, r8, #1
 800b888:	2301      	movs	r3, #1
 800b88a:	9306      	str	r3, [sp, #24]
 800b88c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f47f af74 	bne.w	800b77c <_dtoa_r+0x7f4>
 800b894:	2001      	movs	r0, #1
 800b896:	e779      	b.n	800b78c <_dtoa_r+0x804>
 800b898:	2300      	movs	r3, #0
 800b89a:	e7f6      	b.n	800b88a <_dtoa_r+0x902>
 800b89c:	9b02      	ldr	r3, [sp, #8]
 800b89e:	e7f4      	b.n	800b88a <_dtoa_r+0x902>
 800b8a0:	d085      	beq.n	800b7ae <_dtoa_r+0x826>
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	301c      	adds	r0, #28
 800b8a6:	e77d      	b.n	800b7a4 <_dtoa_r+0x81c>
 800b8a8:	40240000 	.word	0x40240000
 800b8ac:	9b01      	ldr	r3, [sp, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	dc38      	bgt.n	800b924 <_dtoa_r+0x99c>
 800b8b2:	9b05      	ldr	r3, [sp, #20]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	dd35      	ble.n	800b924 <_dtoa_r+0x99c>
 800b8b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b8bc:	f1b9 0f00 	cmp.w	r9, #0
 800b8c0:	d10d      	bne.n	800b8de <_dtoa_r+0x956>
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	464b      	mov	r3, r9
 800b8c6:	2205      	movs	r2, #5
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f000 f9c5 	bl	800bc58 <__multadd>
 800b8ce:	4601      	mov	r1, r0
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	4658      	mov	r0, fp
 800b8d4:	f000 fbdc 	bl	800c090 <__mcmp>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	f73f adbd 	bgt.w	800b458 <_dtoa_r+0x4d0>
 800b8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e0:	9d00      	ldr	r5, [sp, #0]
 800b8e2:	ea6f 0a03 	mvn.w	sl, r3
 800b8e6:	f04f 0800 	mov.w	r8, #0
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 f991 	bl	800bc14 <_Bfree>
 800b8f2:	2f00      	cmp	r7, #0
 800b8f4:	f43f aeb4 	beq.w	800b660 <_dtoa_r+0x6d8>
 800b8f8:	f1b8 0f00 	cmp.w	r8, #0
 800b8fc:	d005      	beq.n	800b90a <_dtoa_r+0x982>
 800b8fe:	45b8      	cmp	r8, r7
 800b900:	d003      	beq.n	800b90a <_dtoa_r+0x982>
 800b902:	4641      	mov	r1, r8
 800b904:	4620      	mov	r0, r4
 800b906:	f000 f985 	bl	800bc14 <_Bfree>
 800b90a:	4639      	mov	r1, r7
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 f981 	bl	800bc14 <_Bfree>
 800b912:	e6a5      	b.n	800b660 <_dtoa_r+0x6d8>
 800b914:	2600      	movs	r6, #0
 800b916:	4637      	mov	r7, r6
 800b918:	e7e1      	b.n	800b8de <_dtoa_r+0x956>
 800b91a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b91c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b920:	4637      	mov	r7, r6
 800b922:	e599      	b.n	800b458 <_dtoa_r+0x4d0>
 800b924:	9b08      	ldr	r3, [sp, #32]
 800b926:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f000 80fd 	beq.w	800bb2a <_dtoa_r+0xba2>
 800b930:	2d00      	cmp	r5, #0
 800b932:	dd05      	ble.n	800b940 <_dtoa_r+0x9b8>
 800b934:	4639      	mov	r1, r7
 800b936:	462a      	mov	r2, r5
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 fb3d 	bl	800bfb8 <__lshift>
 800b93e:	4607      	mov	r7, r0
 800b940:	9b06      	ldr	r3, [sp, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d05c      	beq.n	800ba00 <_dtoa_r+0xa78>
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 f923 	bl	800bb94 <_Balloc>
 800b94e:	4605      	mov	r5, r0
 800b950:	b928      	cbnz	r0, 800b95e <_dtoa_r+0x9d6>
 800b952:	4b80      	ldr	r3, [pc, #512]	; (800bb54 <_dtoa_r+0xbcc>)
 800b954:	4602      	mov	r2, r0
 800b956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b95a:	f7ff bb2e 	b.w	800afba <_dtoa_r+0x32>
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	3202      	adds	r2, #2
 800b962:	0092      	lsls	r2, r2, #2
 800b964:	f107 010c 	add.w	r1, r7, #12
 800b968:	300c      	adds	r0, #12
 800b96a:	f000 f905 	bl	800bb78 <memcpy>
 800b96e:	2201      	movs	r2, #1
 800b970:	4629      	mov	r1, r5
 800b972:	4620      	mov	r0, r4
 800b974:	f000 fb20 	bl	800bfb8 <__lshift>
 800b978:	9b00      	ldr	r3, [sp, #0]
 800b97a:	3301      	adds	r3, #1
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	444b      	add	r3, r9
 800b982:	9307      	str	r3, [sp, #28]
 800b984:	9b02      	ldr	r3, [sp, #8]
 800b986:	f003 0301 	and.w	r3, r3, #1
 800b98a:	46b8      	mov	r8, r7
 800b98c:	9306      	str	r3, [sp, #24]
 800b98e:	4607      	mov	r7, r0
 800b990:	9b01      	ldr	r3, [sp, #4]
 800b992:	4631      	mov	r1, r6
 800b994:	3b01      	subs	r3, #1
 800b996:	4658      	mov	r0, fp
 800b998:	9302      	str	r3, [sp, #8]
 800b99a:	f7ff fa69 	bl	800ae70 <quorem>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	3330      	adds	r3, #48	; 0x30
 800b9a2:	9004      	str	r0, [sp, #16]
 800b9a4:	4641      	mov	r1, r8
 800b9a6:	4658      	mov	r0, fp
 800b9a8:	9308      	str	r3, [sp, #32]
 800b9aa:	f000 fb71 	bl	800c090 <__mcmp>
 800b9ae:	463a      	mov	r2, r7
 800b9b0:	4681      	mov	r9, r0
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fb87 	bl	800c0c8 <__mdiff>
 800b9ba:	68c2      	ldr	r2, [r0, #12]
 800b9bc:	9b08      	ldr	r3, [sp, #32]
 800b9be:	4605      	mov	r5, r0
 800b9c0:	bb02      	cbnz	r2, 800ba04 <_dtoa_r+0xa7c>
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	4658      	mov	r0, fp
 800b9c6:	f000 fb63 	bl	800c090 <__mcmp>
 800b9ca:	9b08      	ldr	r3, [sp, #32]
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b9d6:	f000 f91d 	bl	800bc14 <_Bfree>
 800b9da:	9b05      	ldr	r3, [sp, #20]
 800b9dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9de:	9d01      	ldr	r5, [sp, #4]
 800b9e0:	ea43 0102 	orr.w	r1, r3, r2
 800b9e4:	9b06      	ldr	r3, [sp, #24]
 800b9e6:	430b      	orrs	r3, r1
 800b9e8:	9b08      	ldr	r3, [sp, #32]
 800b9ea:	d10d      	bne.n	800ba08 <_dtoa_r+0xa80>
 800b9ec:	2b39      	cmp	r3, #57	; 0x39
 800b9ee:	d029      	beq.n	800ba44 <_dtoa_r+0xabc>
 800b9f0:	f1b9 0f00 	cmp.w	r9, #0
 800b9f4:	dd01      	ble.n	800b9fa <_dtoa_r+0xa72>
 800b9f6:	9b04      	ldr	r3, [sp, #16]
 800b9f8:	3331      	adds	r3, #49	; 0x31
 800b9fa:	9a02      	ldr	r2, [sp, #8]
 800b9fc:	7013      	strb	r3, [r2, #0]
 800b9fe:	e774      	b.n	800b8ea <_dtoa_r+0x962>
 800ba00:	4638      	mov	r0, r7
 800ba02:	e7b9      	b.n	800b978 <_dtoa_r+0x9f0>
 800ba04:	2201      	movs	r2, #1
 800ba06:	e7e2      	b.n	800b9ce <_dtoa_r+0xa46>
 800ba08:	f1b9 0f00 	cmp.w	r9, #0
 800ba0c:	db06      	blt.n	800ba1c <_dtoa_r+0xa94>
 800ba0e:	9905      	ldr	r1, [sp, #20]
 800ba10:	ea41 0909 	orr.w	r9, r1, r9
 800ba14:	9906      	ldr	r1, [sp, #24]
 800ba16:	ea59 0101 	orrs.w	r1, r9, r1
 800ba1a:	d120      	bne.n	800ba5e <_dtoa_r+0xad6>
 800ba1c:	2a00      	cmp	r2, #0
 800ba1e:	ddec      	ble.n	800b9fa <_dtoa_r+0xa72>
 800ba20:	4659      	mov	r1, fp
 800ba22:	2201      	movs	r2, #1
 800ba24:	4620      	mov	r0, r4
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	f000 fac6 	bl	800bfb8 <__lshift>
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	4683      	mov	fp, r0
 800ba30:	f000 fb2e 	bl	800c090 <__mcmp>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	9b01      	ldr	r3, [sp, #4]
 800ba38:	dc02      	bgt.n	800ba40 <_dtoa_r+0xab8>
 800ba3a:	d1de      	bne.n	800b9fa <_dtoa_r+0xa72>
 800ba3c:	07da      	lsls	r2, r3, #31
 800ba3e:	d5dc      	bpl.n	800b9fa <_dtoa_r+0xa72>
 800ba40:	2b39      	cmp	r3, #57	; 0x39
 800ba42:	d1d8      	bne.n	800b9f6 <_dtoa_r+0xa6e>
 800ba44:	9a02      	ldr	r2, [sp, #8]
 800ba46:	2339      	movs	r3, #57	; 0x39
 800ba48:	7013      	strb	r3, [r2, #0]
 800ba4a:	462b      	mov	r3, r5
 800ba4c:	461d      	mov	r5, r3
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba54:	2a39      	cmp	r2, #57	; 0x39
 800ba56:	d050      	beq.n	800bafa <_dtoa_r+0xb72>
 800ba58:	3201      	adds	r2, #1
 800ba5a:	701a      	strb	r2, [r3, #0]
 800ba5c:	e745      	b.n	800b8ea <_dtoa_r+0x962>
 800ba5e:	2a00      	cmp	r2, #0
 800ba60:	dd03      	ble.n	800ba6a <_dtoa_r+0xae2>
 800ba62:	2b39      	cmp	r3, #57	; 0x39
 800ba64:	d0ee      	beq.n	800ba44 <_dtoa_r+0xabc>
 800ba66:	3301      	adds	r3, #1
 800ba68:	e7c7      	b.n	800b9fa <_dtoa_r+0xa72>
 800ba6a:	9a01      	ldr	r2, [sp, #4]
 800ba6c:	9907      	ldr	r1, [sp, #28]
 800ba6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba72:	428a      	cmp	r2, r1
 800ba74:	d02a      	beq.n	800bacc <_dtoa_r+0xb44>
 800ba76:	4659      	mov	r1, fp
 800ba78:	2300      	movs	r3, #0
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 f8eb 	bl	800bc58 <__multadd>
 800ba82:	45b8      	cmp	r8, r7
 800ba84:	4683      	mov	fp, r0
 800ba86:	f04f 0300 	mov.w	r3, #0
 800ba8a:	f04f 020a 	mov.w	r2, #10
 800ba8e:	4641      	mov	r1, r8
 800ba90:	4620      	mov	r0, r4
 800ba92:	d107      	bne.n	800baa4 <_dtoa_r+0xb1c>
 800ba94:	f000 f8e0 	bl	800bc58 <__multadd>
 800ba98:	4680      	mov	r8, r0
 800ba9a:	4607      	mov	r7, r0
 800ba9c:	9b01      	ldr	r3, [sp, #4]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	e775      	b.n	800b990 <_dtoa_r+0xa08>
 800baa4:	f000 f8d8 	bl	800bc58 <__multadd>
 800baa8:	4639      	mov	r1, r7
 800baaa:	4680      	mov	r8, r0
 800baac:	2300      	movs	r3, #0
 800baae:	220a      	movs	r2, #10
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 f8d1 	bl	800bc58 <__multadd>
 800bab6:	4607      	mov	r7, r0
 800bab8:	e7f0      	b.n	800ba9c <_dtoa_r+0xb14>
 800baba:	f1b9 0f00 	cmp.w	r9, #0
 800babe:	9a00      	ldr	r2, [sp, #0]
 800bac0:	bfcc      	ite	gt
 800bac2:	464d      	movgt	r5, r9
 800bac4:	2501      	movle	r5, #1
 800bac6:	4415      	add	r5, r2
 800bac8:	f04f 0800 	mov.w	r8, #0
 800bacc:	4659      	mov	r1, fp
 800bace:	2201      	movs	r2, #1
 800bad0:	4620      	mov	r0, r4
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	f000 fa70 	bl	800bfb8 <__lshift>
 800bad8:	4631      	mov	r1, r6
 800bada:	4683      	mov	fp, r0
 800badc:	f000 fad8 	bl	800c090 <__mcmp>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	dcb2      	bgt.n	800ba4a <_dtoa_r+0xac2>
 800bae4:	d102      	bne.n	800baec <_dtoa_r+0xb64>
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	07db      	lsls	r3, r3, #31
 800baea:	d4ae      	bmi.n	800ba4a <_dtoa_r+0xac2>
 800baec:	462b      	mov	r3, r5
 800baee:	461d      	mov	r5, r3
 800baf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baf4:	2a30      	cmp	r2, #48	; 0x30
 800baf6:	d0fa      	beq.n	800baee <_dtoa_r+0xb66>
 800baf8:	e6f7      	b.n	800b8ea <_dtoa_r+0x962>
 800bafa:	9a00      	ldr	r2, [sp, #0]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d1a5      	bne.n	800ba4c <_dtoa_r+0xac4>
 800bb00:	f10a 0a01 	add.w	sl, sl, #1
 800bb04:	2331      	movs	r3, #49	; 0x31
 800bb06:	e779      	b.n	800b9fc <_dtoa_r+0xa74>
 800bb08:	4b13      	ldr	r3, [pc, #76]	; (800bb58 <_dtoa_r+0xbd0>)
 800bb0a:	f7ff baaf 	b.w	800b06c <_dtoa_r+0xe4>
 800bb0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f47f aa86 	bne.w	800b022 <_dtoa_r+0x9a>
 800bb16:	4b11      	ldr	r3, [pc, #68]	; (800bb5c <_dtoa_r+0xbd4>)
 800bb18:	f7ff baa8 	b.w	800b06c <_dtoa_r+0xe4>
 800bb1c:	f1b9 0f00 	cmp.w	r9, #0
 800bb20:	dc03      	bgt.n	800bb2a <_dtoa_r+0xba2>
 800bb22:	9b05      	ldr	r3, [sp, #20]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	f73f aec9 	bgt.w	800b8bc <_dtoa_r+0x934>
 800bb2a:	9d00      	ldr	r5, [sp, #0]
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4658      	mov	r0, fp
 800bb30:	f7ff f99e 	bl	800ae70 <quorem>
 800bb34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bb38:	f805 3b01 	strb.w	r3, [r5], #1
 800bb3c:	9a00      	ldr	r2, [sp, #0]
 800bb3e:	1aaa      	subs	r2, r5, r2
 800bb40:	4591      	cmp	r9, r2
 800bb42:	ddba      	ble.n	800baba <_dtoa_r+0xb32>
 800bb44:	4659      	mov	r1, fp
 800bb46:	2300      	movs	r3, #0
 800bb48:	220a      	movs	r2, #10
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f000 f884 	bl	800bc58 <__multadd>
 800bb50:	4683      	mov	fp, r0
 800bb52:	e7eb      	b.n	800bb2c <_dtoa_r+0xba4>
 800bb54:	08010fd7 	.word	0x08010fd7
 800bb58:	08010f30 	.word	0x08010f30
 800bb5c:	08010f54 	.word	0x08010f54

0800bb60 <_localeconv_r>:
 800bb60:	4800      	ldr	r0, [pc, #0]	; (800bb64 <_localeconv_r+0x4>)
 800bb62:	4770      	bx	lr
 800bb64:	20000468 	.word	0x20000468

0800bb68 <malloc>:
 800bb68:	4b02      	ldr	r3, [pc, #8]	; (800bb74 <malloc+0xc>)
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	f000 bbef 	b.w	800c350 <_malloc_r>
 800bb72:	bf00      	nop
 800bb74:	20000314 	.word	0x20000314

0800bb78 <memcpy>:
 800bb78:	440a      	add	r2, r1
 800bb7a:	4291      	cmp	r1, r2
 800bb7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb80:	d100      	bne.n	800bb84 <memcpy+0xc>
 800bb82:	4770      	bx	lr
 800bb84:	b510      	push	{r4, lr}
 800bb86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb8e:	4291      	cmp	r1, r2
 800bb90:	d1f9      	bne.n	800bb86 <memcpy+0xe>
 800bb92:	bd10      	pop	{r4, pc}

0800bb94 <_Balloc>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb98:	4604      	mov	r4, r0
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	b976      	cbnz	r6, 800bbbc <_Balloc+0x28>
 800bb9e:	2010      	movs	r0, #16
 800bba0:	f7ff ffe2 	bl	800bb68 <malloc>
 800bba4:	4602      	mov	r2, r0
 800bba6:	6260      	str	r0, [r4, #36]	; 0x24
 800bba8:	b920      	cbnz	r0, 800bbb4 <_Balloc+0x20>
 800bbaa:	4b18      	ldr	r3, [pc, #96]	; (800bc0c <_Balloc+0x78>)
 800bbac:	4818      	ldr	r0, [pc, #96]	; (800bc10 <_Balloc+0x7c>)
 800bbae:	2166      	movs	r1, #102	; 0x66
 800bbb0:	f000 fd94 	bl	800c6dc <__assert_func>
 800bbb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbb8:	6006      	str	r6, [r0, #0]
 800bbba:	60c6      	str	r6, [r0, #12]
 800bbbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bbbe:	68f3      	ldr	r3, [r6, #12]
 800bbc0:	b183      	cbz	r3, 800bbe4 <_Balloc+0x50>
 800bbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbca:	b9b8      	cbnz	r0, 800bbfc <_Balloc+0x68>
 800bbcc:	2101      	movs	r1, #1
 800bbce:	fa01 f605 	lsl.w	r6, r1, r5
 800bbd2:	1d72      	adds	r2, r6, #5
 800bbd4:	0092      	lsls	r2, r2, #2
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 fb5a 	bl	800c290 <_calloc_r>
 800bbdc:	b160      	cbz	r0, 800bbf8 <_Balloc+0x64>
 800bbde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbe2:	e00e      	b.n	800bc02 <_Balloc+0x6e>
 800bbe4:	2221      	movs	r2, #33	; 0x21
 800bbe6:	2104      	movs	r1, #4
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f000 fb51 	bl	800c290 <_calloc_r>
 800bbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbf0:	60f0      	str	r0, [r6, #12]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d1e4      	bne.n	800bbc2 <_Balloc+0x2e>
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	bd70      	pop	{r4, r5, r6, pc}
 800bbfc:	6802      	ldr	r2, [r0, #0]
 800bbfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc02:	2300      	movs	r3, #0
 800bc04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc08:	e7f7      	b.n	800bbfa <_Balloc+0x66>
 800bc0a:	bf00      	nop
 800bc0c:	08010f61 	.word	0x08010f61
 800bc10:	08010fe8 	.word	0x08010fe8

0800bc14 <_Bfree>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc18:	4605      	mov	r5, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	b976      	cbnz	r6, 800bc3c <_Bfree+0x28>
 800bc1e:	2010      	movs	r0, #16
 800bc20:	f7ff ffa2 	bl	800bb68 <malloc>
 800bc24:	4602      	mov	r2, r0
 800bc26:	6268      	str	r0, [r5, #36]	; 0x24
 800bc28:	b920      	cbnz	r0, 800bc34 <_Bfree+0x20>
 800bc2a:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <_Bfree+0x3c>)
 800bc2c:	4809      	ldr	r0, [pc, #36]	; (800bc54 <_Bfree+0x40>)
 800bc2e:	218a      	movs	r1, #138	; 0x8a
 800bc30:	f000 fd54 	bl	800c6dc <__assert_func>
 800bc34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc38:	6006      	str	r6, [r0, #0]
 800bc3a:	60c6      	str	r6, [r0, #12]
 800bc3c:	b13c      	cbz	r4, 800bc4e <_Bfree+0x3a>
 800bc3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc40:	6862      	ldr	r2, [r4, #4]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc48:	6021      	str	r1, [r4, #0]
 800bc4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
 800bc50:	08010f61 	.word	0x08010f61
 800bc54:	08010fe8 	.word	0x08010fe8

0800bc58 <__multadd>:
 800bc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5c:	690e      	ldr	r6, [r1, #16]
 800bc5e:	4607      	mov	r7, r0
 800bc60:	4698      	mov	r8, r3
 800bc62:	460c      	mov	r4, r1
 800bc64:	f101 0014 	add.w	r0, r1, #20
 800bc68:	2300      	movs	r3, #0
 800bc6a:	6805      	ldr	r5, [r0, #0]
 800bc6c:	b2a9      	uxth	r1, r5
 800bc6e:	fb02 8101 	mla	r1, r2, r1, r8
 800bc72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bc76:	0c2d      	lsrs	r5, r5, #16
 800bc78:	fb02 c505 	mla	r5, r2, r5, ip
 800bc7c:	b289      	uxth	r1, r1
 800bc7e:	3301      	adds	r3, #1
 800bc80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bc84:	429e      	cmp	r6, r3
 800bc86:	f840 1b04 	str.w	r1, [r0], #4
 800bc8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bc8e:	dcec      	bgt.n	800bc6a <__multadd+0x12>
 800bc90:	f1b8 0f00 	cmp.w	r8, #0
 800bc94:	d022      	beq.n	800bcdc <__multadd+0x84>
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	42b3      	cmp	r3, r6
 800bc9a:	dc19      	bgt.n	800bcd0 <__multadd+0x78>
 800bc9c:	6861      	ldr	r1, [r4, #4]
 800bc9e:	4638      	mov	r0, r7
 800bca0:	3101      	adds	r1, #1
 800bca2:	f7ff ff77 	bl	800bb94 <_Balloc>
 800bca6:	4605      	mov	r5, r0
 800bca8:	b928      	cbnz	r0, 800bcb6 <__multadd+0x5e>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	4b0d      	ldr	r3, [pc, #52]	; (800bce4 <__multadd+0x8c>)
 800bcae:	480e      	ldr	r0, [pc, #56]	; (800bce8 <__multadd+0x90>)
 800bcb0:	21b5      	movs	r1, #181	; 0xb5
 800bcb2:	f000 fd13 	bl	800c6dc <__assert_func>
 800bcb6:	6922      	ldr	r2, [r4, #16]
 800bcb8:	3202      	adds	r2, #2
 800bcba:	f104 010c 	add.w	r1, r4, #12
 800bcbe:	0092      	lsls	r2, r2, #2
 800bcc0:	300c      	adds	r0, #12
 800bcc2:	f7ff ff59 	bl	800bb78 <memcpy>
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	4638      	mov	r0, r7
 800bcca:	f7ff ffa3 	bl	800bc14 <_Bfree>
 800bcce:	462c      	mov	r4, r5
 800bcd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bcd4:	3601      	adds	r6, #1
 800bcd6:	f8c3 8014 	str.w	r8, [r3, #20]
 800bcda:	6126      	str	r6, [r4, #16]
 800bcdc:	4620      	mov	r0, r4
 800bcde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce2:	bf00      	nop
 800bce4:	08010fd7 	.word	0x08010fd7
 800bce8:	08010fe8 	.word	0x08010fe8

0800bcec <__hi0bits>:
 800bcec:	0c03      	lsrs	r3, r0, #16
 800bcee:	041b      	lsls	r3, r3, #16
 800bcf0:	b9d3      	cbnz	r3, 800bd28 <__hi0bits+0x3c>
 800bcf2:	0400      	lsls	r0, r0, #16
 800bcf4:	2310      	movs	r3, #16
 800bcf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bcfa:	bf04      	itt	eq
 800bcfc:	0200      	lsleq	r0, r0, #8
 800bcfe:	3308      	addeq	r3, #8
 800bd00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd04:	bf04      	itt	eq
 800bd06:	0100      	lsleq	r0, r0, #4
 800bd08:	3304      	addeq	r3, #4
 800bd0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd0e:	bf04      	itt	eq
 800bd10:	0080      	lsleq	r0, r0, #2
 800bd12:	3302      	addeq	r3, #2
 800bd14:	2800      	cmp	r0, #0
 800bd16:	db05      	blt.n	800bd24 <__hi0bits+0x38>
 800bd18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd1c:	f103 0301 	add.w	r3, r3, #1
 800bd20:	bf08      	it	eq
 800bd22:	2320      	moveq	r3, #32
 800bd24:	4618      	mov	r0, r3
 800bd26:	4770      	bx	lr
 800bd28:	2300      	movs	r3, #0
 800bd2a:	e7e4      	b.n	800bcf6 <__hi0bits+0xa>

0800bd2c <__lo0bits>:
 800bd2c:	6803      	ldr	r3, [r0, #0]
 800bd2e:	f013 0207 	ands.w	r2, r3, #7
 800bd32:	4601      	mov	r1, r0
 800bd34:	d00b      	beq.n	800bd4e <__lo0bits+0x22>
 800bd36:	07da      	lsls	r2, r3, #31
 800bd38:	d424      	bmi.n	800bd84 <__lo0bits+0x58>
 800bd3a:	0798      	lsls	r0, r3, #30
 800bd3c:	bf49      	itett	mi
 800bd3e:	085b      	lsrmi	r3, r3, #1
 800bd40:	089b      	lsrpl	r3, r3, #2
 800bd42:	2001      	movmi	r0, #1
 800bd44:	600b      	strmi	r3, [r1, #0]
 800bd46:	bf5c      	itt	pl
 800bd48:	600b      	strpl	r3, [r1, #0]
 800bd4a:	2002      	movpl	r0, #2
 800bd4c:	4770      	bx	lr
 800bd4e:	b298      	uxth	r0, r3
 800bd50:	b9b0      	cbnz	r0, 800bd80 <__lo0bits+0x54>
 800bd52:	0c1b      	lsrs	r3, r3, #16
 800bd54:	2010      	movs	r0, #16
 800bd56:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd5a:	bf04      	itt	eq
 800bd5c:	0a1b      	lsreq	r3, r3, #8
 800bd5e:	3008      	addeq	r0, #8
 800bd60:	071a      	lsls	r2, r3, #28
 800bd62:	bf04      	itt	eq
 800bd64:	091b      	lsreq	r3, r3, #4
 800bd66:	3004      	addeq	r0, #4
 800bd68:	079a      	lsls	r2, r3, #30
 800bd6a:	bf04      	itt	eq
 800bd6c:	089b      	lsreq	r3, r3, #2
 800bd6e:	3002      	addeq	r0, #2
 800bd70:	07da      	lsls	r2, r3, #31
 800bd72:	d403      	bmi.n	800bd7c <__lo0bits+0x50>
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	f100 0001 	add.w	r0, r0, #1
 800bd7a:	d005      	beq.n	800bd88 <__lo0bits+0x5c>
 800bd7c:	600b      	str	r3, [r1, #0]
 800bd7e:	4770      	bx	lr
 800bd80:	4610      	mov	r0, r2
 800bd82:	e7e8      	b.n	800bd56 <__lo0bits+0x2a>
 800bd84:	2000      	movs	r0, #0
 800bd86:	4770      	bx	lr
 800bd88:	2020      	movs	r0, #32
 800bd8a:	4770      	bx	lr

0800bd8c <__i2b>:
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	460c      	mov	r4, r1
 800bd90:	2101      	movs	r1, #1
 800bd92:	f7ff feff 	bl	800bb94 <_Balloc>
 800bd96:	4602      	mov	r2, r0
 800bd98:	b928      	cbnz	r0, 800bda6 <__i2b+0x1a>
 800bd9a:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <__i2b+0x24>)
 800bd9c:	4805      	ldr	r0, [pc, #20]	; (800bdb4 <__i2b+0x28>)
 800bd9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bda2:	f000 fc9b 	bl	800c6dc <__assert_func>
 800bda6:	2301      	movs	r3, #1
 800bda8:	6144      	str	r4, [r0, #20]
 800bdaa:	6103      	str	r3, [r0, #16]
 800bdac:	bd10      	pop	{r4, pc}
 800bdae:	bf00      	nop
 800bdb0:	08010fd7 	.word	0x08010fd7
 800bdb4:	08010fe8 	.word	0x08010fe8

0800bdb8 <__multiply>:
 800bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	4614      	mov	r4, r2
 800bdbe:	690a      	ldr	r2, [r1, #16]
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	bfb8      	it	lt
 800bdc6:	460b      	movlt	r3, r1
 800bdc8:	460d      	mov	r5, r1
 800bdca:	bfbc      	itt	lt
 800bdcc:	4625      	movlt	r5, r4
 800bdce:	461c      	movlt	r4, r3
 800bdd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bdd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bdd8:	68ab      	ldr	r3, [r5, #8]
 800bdda:	6869      	ldr	r1, [r5, #4]
 800bddc:	eb0a 0709 	add.w	r7, sl, r9
 800bde0:	42bb      	cmp	r3, r7
 800bde2:	b085      	sub	sp, #20
 800bde4:	bfb8      	it	lt
 800bde6:	3101      	addlt	r1, #1
 800bde8:	f7ff fed4 	bl	800bb94 <_Balloc>
 800bdec:	b930      	cbnz	r0, 800bdfc <__multiply+0x44>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	4b42      	ldr	r3, [pc, #264]	; (800befc <__multiply+0x144>)
 800bdf2:	4843      	ldr	r0, [pc, #268]	; (800bf00 <__multiply+0x148>)
 800bdf4:	f240 115d 	movw	r1, #349	; 0x15d
 800bdf8:	f000 fc70 	bl	800c6dc <__assert_func>
 800bdfc:	f100 0614 	add.w	r6, r0, #20
 800be00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800be04:	4633      	mov	r3, r6
 800be06:	2200      	movs	r2, #0
 800be08:	4543      	cmp	r3, r8
 800be0a:	d31e      	bcc.n	800be4a <__multiply+0x92>
 800be0c:	f105 0c14 	add.w	ip, r5, #20
 800be10:	f104 0314 	add.w	r3, r4, #20
 800be14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800be18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800be1c:	9202      	str	r2, [sp, #8]
 800be1e:	ebac 0205 	sub.w	r2, ip, r5
 800be22:	3a15      	subs	r2, #21
 800be24:	f022 0203 	bic.w	r2, r2, #3
 800be28:	3204      	adds	r2, #4
 800be2a:	f105 0115 	add.w	r1, r5, #21
 800be2e:	458c      	cmp	ip, r1
 800be30:	bf38      	it	cc
 800be32:	2204      	movcc	r2, #4
 800be34:	9201      	str	r2, [sp, #4]
 800be36:	9a02      	ldr	r2, [sp, #8]
 800be38:	9303      	str	r3, [sp, #12]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d808      	bhi.n	800be50 <__multiply+0x98>
 800be3e:	2f00      	cmp	r7, #0
 800be40:	dc55      	bgt.n	800beee <__multiply+0x136>
 800be42:	6107      	str	r7, [r0, #16]
 800be44:	b005      	add	sp, #20
 800be46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4a:	f843 2b04 	str.w	r2, [r3], #4
 800be4e:	e7db      	b.n	800be08 <__multiply+0x50>
 800be50:	f8b3 a000 	ldrh.w	sl, [r3]
 800be54:	f1ba 0f00 	cmp.w	sl, #0
 800be58:	d020      	beq.n	800be9c <__multiply+0xe4>
 800be5a:	f105 0e14 	add.w	lr, r5, #20
 800be5e:	46b1      	mov	r9, r6
 800be60:	2200      	movs	r2, #0
 800be62:	f85e 4b04 	ldr.w	r4, [lr], #4
 800be66:	f8d9 b000 	ldr.w	fp, [r9]
 800be6a:	b2a1      	uxth	r1, r4
 800be6c:	fa1f fb8b 	uxth.w	fp, fp
 800be70:	fb0a b101 	mla	r1, sl, r1, fp
 800be74:	4411      	add	r1, r2
 800be76:	f8d9 2000 	ldr.w	r2, [r9]
 800be7a:	0c24      	lsrs	r4, r4, #16
 800be7c:	0c12      	lsrs	r2, r2, #16
 800be7e:	fb0a 2404 	mla	r4, sl, r4, r2
 800be82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800be86:	b289      	uxth	r1, r1
 800be88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be8c:	45f4      	cmp	ip, lr
 800be8e:	f849 1b04 	str.w	r1, [r9], #4
 800be92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800be96:	d8e4      	bhi.n	800be62 <__multiply+0xaa>
 800be98:	9901      	ldr	r1, [sp, #4]
 800be9a:	5072      	str	r2, [r6, r1]
 800be9c:	9a03      	ldr	r2, [sp, #12]
 800be9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bea2:	3304      	adds	r3, #4
 800bea4:	f1b9 0f00 	cmp.w	r9, #0
 800bea8:	d01f      	beq.n	800beea <__multiply+0x132>
 800beaa:	6834      	ldr	r4, [r6, #0]
 800beac:	f105 0114 	add.w	r1, r5, #20
 800beb0:	46b6      	mov	lr, r6
 800beb2:	f04f 0a00 	mov.w	sl, #0
 800beb6:	880a      	ldrh	r2, [r1, #0]
 800beb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bebc:	fb09 b202 	mla	r2, r9, r2, fp
 800bec0:	4492      	add	sl, r2
 800bec2:	b2a4      	uxth	r4, r4
 800bec4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bec8:	f84e 4b04 	str.w	r4, [lr], #4
 800becc:	f851 4b04 	ldr.w	r4, [r1], #4
 800bed0:	f8be 2000 	ldrh.w	r2, [lr]
 800bed4:	0c24      	lsrs	r4, r4, #16
 800bed6:	fb09 2404 	mla	r4, r9, r4, r2
 800beda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bede:	458c      	cmp	ip, r1
 800bee0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bee4:	d8e7      	bhi.n	800beb6 <__multiply+0xfe>
 800bee6:	9a01      	ldr	r2, [sp, #4]
 800bee8:	50b4      	str	r4, [r6, r2]
 800beea:	3604      	adds	r6, #4
 800beec:	e7a3      	b.n	800be36 <__multiply+0x7e>
 800beee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1a5      	bne.n	800be42 <__multiply+0x8a>
 800bef6:	3f01      	subs	r7, #1
 800bef8:	e7a1      	b.n	800be3e <__multiply+0x86>
 800befa:	bf00      	nop
 800befc:	08010fd7 	.word	0x08010fd7
 800bf00:	08010fe8 	.word	0x08010fe8

0800bf04 <__pow5mult>:
 800bf04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf08:	4615      	mov	r5, r2
 800bf0a:	f012 0203 	ands.w	r2, r2, #3
 800bf0e:	4606      	mov	r6, r0
 800bf10:	460f      	mov	r7, r1
 800bf12:	d007      	beq.n	800bf24 <__pow5mult+0x20>
 800bf14:	4c25      	ldr	r4, [pc, #148]	; (800bfac <__pow5mult+0xa8>)
 800bf16:	3a01      	subs	r2, #1
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf1e:	f7ff fe9b 	bl	800bc58 <__multadd>
 800bf22:	4607      	mov	r7, r0
 800bf24:	10ad      	asrs	r5, r5, #2
 800bf26:	d03d      	beq.n	800bfa4 <__pow5mult+0xa0>
 800bf28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bf2a:	b97c      	cbnz	r4, 800bf4c <__pow5mult+0x48>
 800bf2c:	2010      	movs	r0, #16
 800bf2e:	f7ff fe1b 	bl	800bb68 <malloc>
 800bf32:	4602      	mov	r2, r0
 800bf34:	6270      	str	r0, [r6, #36]	; 0x24
 800bf36:	b928      	cbnz	r0, 800bf44 <__pow5mult+0x40>
 800bf38:	4b1d      	ldr	r3, [pc, #116]	; (800bfb0 <__pow5mult+0xac>)
 800bf3a:	481e      	ldr	r0, [pc, #120]	; (800bfb4 <__pow5mult+0xb0>)
 800bf3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bf40:	f000 fbcc 	bl	800c6dc <__assert_func>
 800bf44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf48:	6004      	str	r4, [r0, #0]
 800bf4a:	60c4      	str	r4, [r0, #12]
 800bf4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf54:	b94c      	cbnz	r4, 800bf6a <__pow5mult+0x66>
 800bf56:	f240 2171 	movw	r1, #625	; 0x271
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7ff ff16 	bl	800bd8c <__i2b>
 800bf60:	2300      	movs	r3, #0
 800bf62:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf66:	4604      	mov	r4, r0
 800bf68:	6003      	str	r3, [r0, #0]
 800bf6a:	f04f 0900 	mov.w	r9, #0
 800bf6e:	07eb      	lsls	r3, r5, #31
 800bf70:	d50a      	bpl.n	800bf88 <__pow5mult+0x84>
 800bf72:	4639      	mov	r1, r7
 800bf74:	4622      	mov	r2, r4
 800bf76:	4630      	mov	r0, r6
 800bf78:	f7ff ff1e 	bl	800bdb8 <__multiply>
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	4680      	mov	r8, r0
 800bf80:	4630      	mov	r0, r6
 800bf82:	f7ff fe47 	bl	800bc14 <_Bfree>
 800bf86:	4647      	mov	r7, r8
 800bf88:	106d      	asrs	r5, r5, #1
 800bf8a:	d00b      	beq.n	800bfa4 <__pow5mult+0xa0>
 800bf8c:	6820      	ldr	r0, [r4, #0]
 800bf8e:	b938      	cbnz	r0, 800bfa0 <__pow5mult+0x9c>
 800bf90:	4622      	mov	r2, r4
 800bf92:	4621      	mov	r1, r4
 800bf94:	4630      	mov	r0, r6
 800bf96:	f7ff ff0f 	bl	800bdb8 <__multiply>
 800bf9a:	6020      	str	r0, [r4, #0]
 800bf9c:	f8c0 9000 	str.w	r9, [r0]
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	e7e4      	b.n	800bf6e <__pow5mult+0x6a>
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfaa:	bf00      	nop
 800bfac:	08011138 	.word	0x08011138
 800bfb0:	08010f61 	.word	0x08010f61
 800bfb4:	08010fe8 	.word	0x08010fe8

0800bfb8 <__lshift>:
 800bfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	6849      	ldr	r1, [r1, #4]
 800bfc0:	6923      	ldr	r3, [r4, #16]
 800bfc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfc6:	68a3      	ldr	r3, [r4, #8]
 800bfc8:	4607      	mov	r7, r0
 800bfca:	4691      	mov	r9, r2
 800bfcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfd0:	f108 0601 	add.w	r6, r8, #1
 800bfd4:	42b3      	cmp	r3, r6
 800bfd6:	db0b      	blt.n	800bff0 <__lshift+0x38>
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff fddb 	bl	800bb94 <_Balloc>
 800bfde:	4605      	mov	r5, r0
 800bfe0:	b948      	cbnz	r0, 800bff6 <__lshift+0x3e>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	4b28      	ldr	r3, [pc, #160]	; (800c088 <__lshift+0xd0>)
 800bfe6:	4829      	ldr	r0, [pc, #164]	; (800c08c <__lshift+0xd4>)
 800bfe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bfec:	f000 fb76 	bl	800c6dc <__assert_func>
 800bff0:	3101      	adds	r1, #1
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	e7ee      	b.n	800bfd4 <__lshift+0x1c>
 800bff6:	2300      	movs	r3, #0
 800bff8:	f100 0114 	add.w	r1, r0, #20
 800bffc:	f100 0210 	add.w	r2, r0, #16
 800c000:	4618      	mov	r0, r3
 800c002:	4553      	cmp	r3, sl
 800c004:	db33      	blt.n	800c06e <__lshift+0xb6>
 800c006:	6920      	ldr	r0, [r4, #16]
 800c008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c00c:	f104 0314 	add.w	r3, r4, #20
 800c010:	f019 091f 	ands.w	r9, r9, #31
 800c014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c018:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c01c:	d02b      	beq.n	800c076 <__lshift+0xbe>
 800c01e:	f1c9 0e20 	rsb	lr, r9, #32
 800c022:	468a      	mov	sl, r1
 800c024:	2200      	movs	r2, #0
 800c026:	6818      	ldr	r0, [r3, #0]
 800c028:	fa00 f009 	lsl.w	r0, r0, r9
 800c02c:	4302      	orrs	r2, r0
 800c02e:	f84a 2b04 	str.w	r2, [sl], #4
 800c032:	f853 2b04 	ldr.w	r2, [r3], #4
 800c036:	459c      	cmp	ip, r3
 800c038:	fa22 f20e 	lsr.w	r2, r2, lr
 800c03c:	d8f3      	bhi.n	800c026 <__lshift+0x6e>
 800c03e:	ebac 0304 	sub.w	r3, ip, r4
 800c042:	3b15      	subs	r3, #21
 800c044:	f023 0303 	bic.w	r3, r3, #3
 800c048:	3304      	adds	r3, #4
 800c04a:	f104 0015 	add.w	r0, r4, #21
 800c04e:	4584      	cmp	ip, r0
 800c050:	bf38      	it	cc
 800c052:	2304      	movcc	r3, #4
 800c054:	50ca      	str	r2, [r1, r3]
 800c056:	b10a      	cbz	r2, 800c05c <__lshift+0xa4>
 800c058:	f108 0602 	add.w	r6, r8, #2
 800c05c:	3e01      	subs	r6, #1
 800c05e:	4638      	mov	r0, r7
 800c060:	612e      	str	r6, [r5, #16]
 800c062:	4621      	mov	r1, r4
 800c064:	f7ff fdd6 	bl	800bc14 <_Bfree>
 800c068:	4628      	mov	r0, r5
 800c06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c072:	3301      	adds	r3, #1
 800c074:	e7c5      	b.n	800c002 <__lshift+0x4a>
 800c076:	3904      	subs	r1, #4
 800c078:	f853 2b04 	ldr.w	r2, [r3], #4
 800c07c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c080:	459c      	cmp	ip, r3
 800c082:	d8f9      	bhi.n	800c078 <__lshift+0xc0>
 800c084:	e7ea      	b.n	800c05c <__lshift+0xa4>
 800c086:	bf00      	nop
 800c088:	08010fd7 	.word	0x08010fd7
 800c08c:	08010fe8 	.word	0x08010fe8

0800c090 <__mcmp>:
 800c090:	b530      	push	{r4, r5, lr}
 800c092:	6902      	ldr	r2, [r0, #16]
 800c094:	690c      	ldr	r4, [r1, #16]
 800c096:	1b12      	subs	r2, r2, r4
 800c098:	d10e      	bne.n	800c0b8 <__mcmp+0x28>
 800c09a:	f100 0314 	add.w	r3, r0, #20
 800c09e:	3114      	adds	r1, #20
 800c0a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c0a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c0a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c0ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c0b0:	42a5      	cmp	r5, r4
 800c0b2:	d003      	beq.n	800c0bc <__mcmp+0x2c>
 800c0b4:	d305      	bcc.n	800c0c2 <__mcmp+0x32>
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	bd30      	pop	{r4, r5, pc}
 800c0bc:	4283      	cmp	r3, r0
 800c0be:	d3f3      	bcc.n	800c0a8 <__mcmp+0x18>
 800c0c0:	e7fa      	b.n	800c0b8 <__mcmp+0x28>
 800c0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c6:	e7f7      	b.n	800c0b8 <__mcmp+0x28>

0800c0c8 <__mdiff>:
 800c0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4617      	mov	r7, r2
 800c0d6:	f7ff ffdb 	bl	800c090 <__mcmp>
 800c0da:	1e05      	subs	r5, r0, #0
 800c0dc:	d110      	bne.n	800c100 <__mdiff+0x38>
 800c0de:	4629      	mov	r1, r5
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff fd57 	bl	800bb94 <_Balloc>
 800c0e6:	b930      	cbnz	r0, 800c0f6 <__mdiff+0x2e>
 800c0e8:	4b39      	ldr	r3, [pc, #228]	; (800c1d0 <__mdiff+0x108>)
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	f240 2132 	movw	r1, #562	; 0x232
 800c0f0:	4838      	ldr	r0, [pc, #224]	; (800c1d4 <__mdiff+0x10c>)
 800c0f2:	f000 faf3 	bl	800c6dc <__assert_func>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c100:	bfa4      	itt	ge
 800c102:	463b      	movge	r3, r7
 800c104:	4627      	movge	r7, r4
 800c106:	4630      	mov	r0, r6
 800c108:	6879      	ldr	r1, [r7, #4]
 800c10a:	bfa6      	itte	ge
 800c10c:	461c      	movge	r4, r3
 800c10e:	2500      	movge	r5, #0
 800c110:	2501      	movlt	r5, #1
 800c112:	f7ff fd3f 	bl	800bb94 <_Balloc>
 800c116:	b920      	cbnz	r0, 800c122 <__mdiff+0x5a>
 800c118:	4b2d      	ldr	r3, [pc, #180]	; (800c1d0 <__mdiff+0x108>)
 800c11a:	4602      	mov	r2, r0
 800c11c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c120:	e7e6      	b.n	800c0f0 <__mdiff+0x28>
 800c122:	693e      	ldr	r6, [r7, #16]
 800c124:	60c5      	str	r5, [r0, #12]
 800c126:	6925      	ldr	r5, [r4, #16]
 800c128:	f107 0114 	add.w	r1, r7, #20
 800c12c:	f104 0914 	add.w	r9, r4, #20
 800c130:	f100 0e14 	add.w	lr, r0, #20
 800c134:	f107 0210 	add.w	r2, r7, #16
 800c138:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c13c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c140:	46f2      	mov	sl, lr
 800c142:	2700      	movs	r7, #0
 800c144:	f859 3b04 	ldr.w	r3, [r9], #4
 800c148:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c14c:	fa1f f883 	uxth.w	r8, r3
 800c150:	fa17 f78b 	uxtah	r7, r7, fp
 800c154:	0c1b      	lsrs	r3, r3, #16
 800c156:	eba7 0808 	sub.w	r8, r7, r8
 800c15a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c15e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c162:	fa1f f888 	uxth.w	r8, r8
 800c166:	141f      	asrs	r7, r3, #16
 800c168:	454d      	cmp	r5, r9
 800c16a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c16e:	f84a 3b04 	str.w	r3, [sl], #4
 800c172:	d8e7      	bhi.n	800c144 <__mdiff+0x7c>
 800c174:	1b2b      	subs	r3, r5, r4
 800c176:	3b15      	subs	r3, #21
 800c178:	f023 0303 	bic.w	r3, r3, #3
 800c17c:	3304      	adds	r3, #4
 800c17e:	3415      	adds	r4, #21
 800c180:	42a5      	cmp	r5, r4
 800c182:	bf38      	it	cc
 800c184:	2304      	movcc	r3, #4
 800c186:	4419      	add	r1, r3
 800c188:	4473      	add	r3, lr
 800c18a:	469e      	mov	lr, r3
 800c18c:	460d      	mov	r5, r1
 800c18e:	4565      	cmp	r5, ip
 800c190:	d30e      	bcc.n	800c1b0 <__mdiff+0xe8>
 800c192:	f10c 0203 	add.w	r2, ip, #3
 800c196:	1a52      	subs	r2, r2, r1
 800c198:	f022 0203 	bic.w	r2, r2, #3
 800c19c:	3903      	subs	r1, #3
 800c19e:	458c      	cmp	ip, r1
 800c1a0:	bf38      	it	cc
 800c1a2:	2200      	movcc	r2, #0
 800c1a4:	441a      	add	r2, r3
 800c1a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c1aa:	b17b      	cbz	r3, 800c1cc <__mdiff+0x104>
 800c1ac:	6106      	str	r6, [r0, #16]
 800c1ae:	e7a5      	b.n	800c0fc <__mdiff+0x34>
 800c1b0:	f855 8b04 	ldr.w	r8, [r5], #4
 800c1b4:	fa17 f488 	uxtah	r4, r7, r8
 800c1b8:	1422      	asrs	r2, r4, #16
 800c1ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c1be:	b2a4      	uxth	r4, r4
 800c1c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c1c4:	f84e 4b04 	str.w	r4, [lr], #4
 800c1c8:	1417      	asrs	r7, r2, #16
 800c1ca:	e7e0      	b.n	800c18e <__mdiff+0xc6>
 800c1cc:	3e01      	subs	r6, #1
 800c1ce:	e7ea      	b.n	800c1a6 <__mdiff+0xde>
 800c1d0:	08010fd7 	.word	0x08010fd7
 800c1d4:	08010fe8 	.word	0x08010fe8

0800c1d8 <__d2b>:
 800c1d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1dc:	4689      	mov	r9, r1
 800c1de:	2101      	movs	r1, #1
 800c1e0:	ec57 6b10 	vmov	r6, r7, d0
 800c1e4:	4690      	mov	r8, r2
 800c1e6:	f7ff fcd5 	bl	800bb94 <_Balloc>
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	b930      	cbnz	r0, 800c1fc <__d2b+0x24>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	4b25      	ldr	r3, [pc, #148]	; (800c288 <__d2b+0xb0>)
 800c1f2:	4826      	ldr	r0, [pc, #152]	; (800c28c <__d2b+0xb4>)
 800c1f4:	f240 310a 	movw	r1, #778	; 0x30a
 800c1f8:	f000 fa70 	bl	800c6dc <__assert_func>
 800c1fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c204:	bb35      	cbnz	r5, 800c254 <__d2b+0x7c>
 800c206:	2e00      	cmp	r6, #0
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	d028      	beq.n	800c25e <__d2b+0x86>
 800c20c:	4668      	mov	r0, sp
 800c20e:	9600      	str	r6, [sp, #0]
 800c210:	f7ff fd8c 	bl	800bd2c <__lo0bits>
 800c214:	9900      	ldr	r1, [sp, #0]
 800c216:	b300      	cbz	r0, 800c25a <__d2b+0x82>
 800c218:	9a01      	ldr	r2, [sp, #4]
 800c21a:	f1c0 0320 	rsb	r3, r0, #32
 800c21e:	fa02 f303 	lsl.w	r3, r2, r3
 800c222:	430b      	orrs	r3, r1
 800c224:	40c2      	lsrs	r2, r0
 800c226:	6163      	str	r3, [r4, #20]
 800c228:	9201      	str	r2, [sp, #4]
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	61a3      	str	r3, [r4, #24]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bf14      	ite	ne
 800c232:	2202      	movne	r2, #2
 800c234:	2201      	moveq	r2, #1
 800c236:	6122      	str	r2, [r4, #16]
 800c238:	b1d5      	cbz	r5, 800c270 <__d2b+0x98>
 800c23a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c23e:	4405      	add	r5, r0
 800c240:	f8c9 5000 	str.w	r5, [r9]
 800c244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c248:	f8c8 0000 	str.w	r0, [r8]
 800c24c:	4620      	mov	r0, r4
 800c24e:	b003      	add	sp, #12
 800c250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c258:	e7d5      	b.n	800c206 <__d2b+0x2e>
 800c25a:	6161      	str	r1, [r4, #20]
 800c25c:	e7e5      	b.n	800c22a <__d2b+0x52>
 800c25e:	a801      	add	r0, sp, #4
 800c260:	f7ff fd64 	bl	800bd2c <__lo0bits>
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	6163      	str	r3, [r4, #20]
 800c268:	2201      	movs	r2, #1
 800c26a:	6122      	str	r2, [r4, #16]
 800c26c:	3020      	adds	r0, #32
 800c26e:	e7e3      	b.n	800c238 <__d2b+0x60>
 800c270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c278:	f8c9 0000 	str.w	r0, [r9]
 800c27c:	6918      	ldr	r0, [r3, #16]
 800c27e:	f7ff fd35 	bl	800bcec <__hi0bits>
 800c282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c286:	e7df      	b.n	800c248 <__d2b+0x70>
 800c288:	08010fd7 	.word	0x08010fd7
 800c28c:	08010fe8 	.word	0x08010fe8

0800c290 <_calloc_r>:
 800c290:	b513      	push	{r0, r1, r4, lr}
 800c292:	434a      	muls	r2, r1
 800c294:	4611      	mov	r1, r2
 800c296:	9201      	str	r2, [sp, #4]
 800c298:	f000 f85a 	bl	800c350 <_malloc_r>
 800c29c:	4604      	mov	r4, r0
 800c29e:	b118      	cbz	r0, 800c2a8 <_calloc_r+0x18>
 800c2a0:	9a01      	ldr	r2, [sp, #4]
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	f7fe f93e 	bl	800a524 <memset>
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	b002      	add	sp, #8
 800c2ac:	bd10      	pop	{r4, pc}
	...

0800c2b0 <_free_r>:
 800c2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2b2:	2900      	cmp	r1, #0
 800c2b4:	d048      	beq.n	800c348 <_free_r+0x98>
 800c2b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ba:	9001      	str	r0, [sp, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f1a1 0404 	sub.w	r4, r1, #4
 800c2c2:	bfb8      	it	lt
 800c2c4:	18e4      	addlt	r4, r4, r3
 800c2c6:	f000 fa65 	bl	800c794 <__malloc_lock>
 800c2ca:	4a20      	ldr	r2, [pc, #128]	; (800c34c <_free_r+0x9c>)
 800c2cc:	9801      	ldr	r0, [sp, #4]
 800c2ce:	6813      	ldr	r3, [r2, #0]
 800c2d0:	4615      	mov	r5, r2
 800c2d2:	b933      	cbnz	r3, 800c2e2 <_free_r+0x32>
 800c2d4:	6063      	str	r3, [r4, #4]
 800c2d6:	6014      	str	r4, [r2, #0]
 800c2d8:	b003      	add	sp, #12
 800c2da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2de:	f000 ba5f 	b.w	800c7a0 <__malloc_unlock>
 800c2e2:	42a3      	cmp	r3, r4
 800c2e4:	d90b      	bls.n	800c2fe <_free_r+0x4e>
 800c2e6:	6821      	ldr	r1, [r4, #0]
 800c2e8:	1862      	adds	r2, r4, r1
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	bf04      	itt	eq
 800c2ee:	681a      	ldreq	r2, [r3, #0]
 800c2f0:	685b      	ldreq	r3, [r3, #4]
 800c2f2:	6063      	str	r3, [r4, #4]
 800c2f4:	bf04      	itt	eq
 800c2f6:	1852      	addeq	r2, r2, r1
 800c2f8:	6022      	streq	r2, [r4, #0]
 800c2fa:	602c      	str	r4, [r5, #0]
 800c2fc:	e7ec      	b.n	800c2d8 <_free_r+0x28>
 800c2fe:	461a      	mov	r2, r3
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	b10b      	cbz	r3, 800c308 <_free_r+0x58>
 800c304:	42a3      	cmp	r3, r4
 800c306:	d9fa      	bls.n	800c2fe <_free_r+0x4e>
 800c308:	6811      	ldr	r1, [r2, #0]
 800c30a:	1855      	adds	r5, r2, r1
 800c30c:	42a5      	cmp	r5, r4
 800c30e:	d10b      	bne.n	800c328 <_free_r+0x78>
 800c310:	6824      	ldr	r4, [r4, #0]
 800c312:	4421      	add	r1, r4
 800c314:	1854      	adds	r4, r2, r1
 800c316:	42a3      	cmp	r3, r4
 800c318:	6011      	str	r1, [r2, #0]
 800c31a:	d1dd      	bne.n	800c2d8 <_free_r+0x28>
 800c31c:	681c      	ldr	r4, [r3, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	6053      	str	r3, [r2, #4]
 800c322:	4421      	add	r1, r4
 800c324:	6011      	str	r1, [r2, #0]
 800c326:	e7d7      	b.n	800c2d8 <_free_r+0x28>
 800c328:	d902      	bls.n	800c330 <_free_r+0x80>
 800c32a:	230c      	movs	r3, #12
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	e7d3      	b.n	800c2d8 <_free_r+0x28>
 800c330:	6825      	ldr	r5, [r4, #0]
 800c332:	1961      	adds	r1, r4, r5
 800c334:	428b      	cmp	r3, r1
 800c336:	bf04      	itt	eq
 800c338:	6819      	ldreq	r1, [r3, #0]
 800c33a:	685b      	ldreq	r3, [r3, #4]
 800c33c:	6063      	str	r3, [r4, #4]
 800c33e:	bf04      	itt	eq
 800c340:	1949      	addeq	r1, r1, r5
 800c342:	6021      	streq	r1, [r4, #0]
 800c344:	6054      	str	r4, [r2, #4]
 800c346:	e7c7      	b.n	800c2d8 <_free_r+0x28>
 800c348:	b003      	add	sp, #12
 800c34a:	bd30      	pop	{r4, r5, pc}
 800c34c:	200008f8 	.word	0x200008f8

0800c350 <_malloc_r>:
 800c350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c352:	1ccd      	adds	r5, r1, #3
 800c354:	f025 0503 	bic.w	r5, r5, #3
 800c358:	3508      	adds	r5, #8
 800c35a:	2d0c      	cmp	r5, #12
 800c35c:	bf38      	it	cc
 800c35e:	250c      	movcc	r5, #12
 800c360:	2d00      	cmp	r5, #0
 800c362:	4606      	mov	r6, r0
 800c364:	db01      	blt.n	800c36a <_malloc_r+0x1a>
 800c366:	42a9      	cmp	r1, r5
 800c368:	d903      	bls.n	800c372 <_malloc_r+0x22>
 800c36a:	230c      	movs	r3, #12
 800c36c:	6033      	str	r3, [r6, #0]
 800c36e:	2000      	movs	r0, #0
 800c370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c372:	f000 fa0f 	bl	800c794 <__malloc_lock>
 800c376:	4921      	ldr	r1, [pc, #132]	; (800c3fc <_malloc_r+0xac>)
 800c378:	680a      	ldr	r2, [r1, #0]
 800c37a:	4614      	mov	r4, r2
 800c37c:	b99c      	cbnz	r4, 800c3a6 <_malloc_r+0x56>
 800c37e:	4f20      	ldr	r7, [pc, #128]	; (800c400 <_malloc_r+0xb0>)
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	b923      	cbnz	r3, 800c38e <_malloc_r+0x3e>
 800c384:	4621      	mov	r1, r4
 800c386:	4630      	mov	r0, r6
 800c388:	f000 f998 	bl	800c6bc <_sbrk_r>
 800c38c:	6038      	str	r0, [r7, #0]
 800c38e:	4629      	mov	r1, r5
 800c390:	4630      	mov	r0, r6
 800c392:	f000 f993 	bl	800c6bc <_sbrk_r>
 800c396:	1c43      	adds	r3, r0, #1
 800c398:	d123      	bne.n	800c3e2 <_malloc_r+0x92>
 800c39a:	230c      	movs	r3, #12
 800c39c:	6033      	str	r3, [r6, #0]
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f000 f9fe 	bl	800c7a0 <__malloc_unlock>
 800c3a4:	e7e3      	b.n	800c36e <_malloc_r+0x1e>
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	1b5b      	subs	r3, r3, r5
 800c3aa:	d417      	bmi.n	800c3dc <_malloc_r+0x8c>
 800c3ac:	2b0b      	cmp	r3, #11
 800c3ae:	d903      	bls.n	800c3b8 <_malloc_r+0x68>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	441c      	add	r4, r3
 800c3b4:	6025      	str	r5, [r4, #0]
 800c3b6:	e004      	b.n	800c3c2 <_malloc_r+0x72>
 800c3b8:	6863      	ldr	r3, [r4, #4]
 800c3ba:	42a2      	cmp	r2, r4
 800c3bc:	bf0c      	ite	eq
 800c3be:	600b      	streq	r3, [r1, #0]
 800c3c0:	6053      	strne	r3, [r2, #4]
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f000 f9ec 	bl	800c7a0 <__malloc_unlock>
 800c3c8:	f104 000b 	add.w	r0, r4, #11
 800c3cc:	1d23      	adds	r3, r4, #4
 800c3ce:	f020 0007 	bic.w	r0, r0, #7
 800c3d2:	1ac2      	subs	r2, r0, r3
 800c3d4:	d0cc      	beq.n	800c370 <_malloc_r+0x20>
 800c3d6:	1a1b      	subs	r3, r3, r0
 800c3d8:	50a3      	str	r3, [r4, r2]
 800c3da:	e7c9      	b.n	800c370 <_malloc_r+0x20>
 800c3dc:	4622      	mov	r2, r4
 800c3de:	6864      	ldr	r4, [r4, #4]
 800c3e0:	e7cc      	b.n	800c37c <_malloc_r+0x2c>
 800c3e2:	1cc4      	adds	r4, r0, #3
 800c3e4:	f024 0403 	bic.w	r4, r4, #3
 800c3e8:	42a0      	cmp	r0, r4
 800c3ea:	d0e3      	beq.n	800c3b4 <_malloc_r+0x64>
 800c3ec:	1a21      	subs	r1, r4, r0
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f000 f964 	bl	800c6bc <_sbrk_r>
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	d1dd      	bne.n	800c3b4 <_malloc_r+0x64>
 800c3f8:	e7cf      	b.n	800c39a <_malloc_r+0x4a>
 800c3fa:	bf00      	nop
 800c3fc:	200008f8 	.word	0x200008f8
 800c400:	200008fc 	.word	0x200008fc

0800c404 <__ssputs_r>:
 800c404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c408:	688e      	ldr	r6, [r1, #8]
 800c40a:	429e      	cmp	r6, r3
 800c40c:	4682      	mov	sl, r0
 800c40e:	460c      	mov	r4, r1
 800c410:	4690      	mov	r8, r2
 800c412:	461f      	mov	r7, r3
 800c414:	d838      	bhi.n	800c488 <__ssputs_r+0x84>
 800c416:	898a      	ldrh	r2, [r1, #12]
 800c418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c41c:	d032      	beq.n	800c484 <__ssputs_r+0x80>
 800c41e:	6825      	ldr	r5, [r4, #0]
 800c420:	6909      	ldr	r1, [r1, #16]
 800c422:	eba5 0901 	sub.w	r9, r5, r1
 800c426:	6965      	ldr	r5, [r4, #20]
 800c428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c42c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c430:	3301      	adds	r3, #1
 800c432:	444b      	add	r3, r9
 800c434:	106d      	asrs	r5, r5, #1
 800c436:	429d      	cmp	r5, r3
 800c438:	bf38      	it	cc
 800c43a:	461d      	movcc	r5, r3
 800c43c:	0553      	lsls	r3, r2, #21
 800c43e:	d531      	bpl.n	800c4a4 <__ssputs_r+0xa0>
 800c440:	4629      	mov	r1, r5
 800c442:	f7ff ff85 	bl	800c350 <_malloc_r>
 800c446:	4606      	mov	r6, r0
 800c448:	b950      	cbnz	r0, 800c460 <__ssputs_r+0x5c>
 800c44a:	230c      	movs	r3, #12
 800c44c:	f8ca 3000 	str.w	r3, [sl]
 800c450:	89a3      	ldrh	r3, [r4, #12]
 800c452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	f04f 30ff 	mov.w	r0, #4294967295
 800c45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c460:	6921      	ldr	r1, [r4, #16]
 800c462:	464a      	mov	r2, r9
 800c464:	f7ff fb88 	bl	800bb78 <memcpy>
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c472:	81a3      	strh	r3, [r4, #12]
 800c474:	6126      	str	r6, [r4, #16]
 800c476:	6165      	str	r5, [r4, #20]
 800c478:	444e      	add	r6, r9
 800c47a:	eba5 0509 	sub.w	r5, r5, r9
 800c47e:	6026      	str	r6, [r4, #0]
 800c480:	60a5      	str	r5, [r4, #8]
 800c482:	463e      	mov	r6, r7
 800c484:	42be      	cmp	r6, r7
 800c486:	d900      	bls.n	800c48a <__ssputs_r+0x86>
 800c488:	463e      	mov	r6, r7
 800c48a:	4632      	mov	r2, r6
 800c48c:	6820      	ldr	r0, [r4, #0]
 800c48e:	4641      	mov	r1, r8
 800c490:	f000 f966 	bl	800c760 <memmove>
 800c494:	68a3      	ldr	r3, [r4, #8]
 800c496:	6822      	ldr	r2, [r4, #0]
 800c498:	1b9b      	subs	r3, r3, r6
 800c49a:	4432      	add	r2, r6
 800c49c:	60a3      	str	r3, [r4, #8]
 800c49e:	6022      	str	r2, [r4, #0]
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	e7db      	b.n	800c45c <__ssputs_r+0x58>
 800c4a4:	462a      	mov	r2, r5
 800c4a6:	f000 f981 	bl	800c7ac <_realloc_r>
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d1e1      	bne.n	800c474 <__ssputs_r+0x70>
 800c4b0:	6921      	ldr	r1, [r4, #16]
 800c4b2:	4650      	mov	r0, sl
 800c4b4:	f7ff fefc 	bl	800c2b0 <_free_r>
 800c4b8:	e7c7      	b.n	800c44a <__ssputs_r+0x46>
	...

0800c4bc <_svfiprintf_r>:
 800c4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	4698      	mov	r8, r3
 800c4c2:	898b      	ldrh	r3, [r1, #12]
 800c4c4:	061b      	lsls	r3, r3, #24
 800c4c6:	b09d      	sub	sp, #116	; 0x74
 800c4c8:	4607      	mov	r7, r0
 800c4ca:	460d      	mov	r5, r1
 800c4cc:	4614      	mov	r4, r2
 800c4ce:	d50e      	bpl.n	800c4ee <_svfiprintf_r+0x32>
 800c4d0:	690b      	ldr	r3, [r1, #16]
 800c4d2:	b963      	cbnz	r3, 800c4ee <_svfiprintf_r+0x32>
 800c4d4:	2140      	movs	r1, #64	; 0x40
 800c4d6:	f7ff ff3b 	bl	800c350 <_malloc_r>
 800c4da:	6028      	str	r0, [r5, #0]
 800c4dc:	6128      	str	r0, [r5, #16]
 800c4de:	b920      	cbnz	r0, 800c4ea <_svfiprintf_r+0x2e>
 800c4e0:	230c      	movs	r3, #12
 800c4e2:	603b      	str	r3, [r7, #0]
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	e0d1      	b.n	800c68e <_svfiprintf_r+0x1d2>
 800c4ea:	2340      	movs	r3, #64	; 0x40
 800c4ec:	616b      	str	r3, [r5, #20]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f2:	2320      	movs	r3, #32
 800c4f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4fc:	2330      	movs	r3, #48	; 0x30
 800c4fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c6a8 <_svfiprintf_r+0x1ec>
 800c502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c506:	f04f 0901 	mov.w	r9, #1
 800c50a:	4623      	mov	r3, r4
 800c50c:	469a      	mov	sl, r3
 800c50e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c512:	b10a      	cbz	r2, 800c518 <_svfiprintf_r+0x5c>
 800c514:	2a25      	cmp	r2, #37	; 0x25
 800c516:	d1f9      	bne.n	800c50c <_svfiprintf_r+0x50>
 800c518:	ebba 0b04 	subs.w	fp, sl, r4
 800c51c:	d00b      	beq.n	800c536 <_svfiprintf_r+0x7a>
 800c51e:	465b      	mov	r3, fp
 800c520:	4622      	mov	r2, r4
 800c522:	4629      	mov	r1, r5
 800c524:	4638      	mov	r0, r7
 800c526:	f7ff ff6d 	bl	800c404 <__ssputs_r>
 800c52a:	3001      	adds	r0, #1
 800c52c:	f000 80aa 	beq.w	800c684 <_svfiprintf_r+0x1c8>
 800c530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c532:	445a      	add	r2, fp
 800c534:	9209      	str	r2, [sp, #36]	; 0x24
 800c536:	f89a 3000 	ldrb.w	r3, [sl]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 80a2 	beq.w	800c684 <_svfiprintf_r+0x1c8>
 800c540:	2300      	movs	r3, #0
 800c542:	f04f 32ff 	mov.w	r2, #4294967295
 800c546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c54a:	f10a 0a01 	add.w	sl, sl, #1
 800c54e:	9304      	str	r3, [sp, #16]
 800c550:	9307      	str	r3, [sp, #28]
 800c552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c556:	931a      	str	r3, [sp, #104]	; 0x68
 800c558:	4654      	mov	r4, sl
 800c55a:	2205      	movs	r2, #5
 800c55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c560:	4851      	ldr	r0, [pc, #324]	; (800c6a8 <_svfiprintf_r+0x1ec>)
 800c562:	f7f3 fe4d 	bl	8000200 <memchr>
 800c566:	9a04      	ldr	r2, [sp, #16]
 800c568:	b9d8      	cbnz	r0, 800c5a2 <_svfiprintf_r+0xe6>
 800c56a:	06d0      	lsls	r0, r2, #27
 800c56c:	bf44      	itt	mi
 800c56e:	2320      	movmi	r3, #32
 800c570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c574:	0711      	lsls	r1, r2, #28
 800c576:	bf44      	itt	mi
 800c578:	232b      	movmi	r3, #43	; 0x2b
 800c57a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c57e:	f89a 3000 	ldrb.w	r3, [sl]
 800c582:	2b2a      	cmp	r3, #42	; 0x2a
 800c584:	d015      	beq.n	800c5b2 <_svfiprintf_r+0xf6>
 800c586:	9a07      	ldr	r2, [sp, #28]
 800c588:	4654      	mov	r4, sl
 800c58a:	2000      	movs	r0, #0
 800c58c:	f04f 0c0a 	mov.w	ip, #10
 800c590:	4621      	mov	r1, r4
 800c592:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c596:	3b30      	subs	r3, #48	; 0x30
 800c598:	2b09      	cmp	r3, #9
 800c59a:	d94e      	bls.n	800c63a <_svfiprintf_r+0x17e>
 800c59c:	b1b0      	cbz	r0, 800c5cc <_svfiprintf_r+0x110>
 800c59e:	9207      	str	r2, [sp, #28]
 800c5a0:	e014      	b.n	800c5cc <_svfiprintf_r+0x110>
 800c5a2:	eba0 0308 	sub.w	r3, r0, r8
 800c5a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	9304      	str	r3, [sp, #16]
 800c5ae:	46a2      	mov	sl, r4
 800c5b0:	e7d2      	b.n	800c558 <_svfiprintf_r+0x9c>
 800c5b2:	9b03      	ldr	r3, [sp, #12]
 800c5b4:	1d19      	adds	r1, r3, #4
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	9103      	str	r1, [sp, #12]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	bfbb      	ittet	lt
 800c5be:	425b      	neglt	r3, r3
 800c5c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c5c4:	9307      	strge	r3, [sp, #28]
 800c5c6:	9307      	strlt	r3, [sp, #28]
 800c5c8:	bfb8      	it	lt
 800c5ca:	9204      	strlt	r2, [sp, #16]
 800c5cc:	7823      	ldrb	r3, [r4, #0]
 800c5ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c5d0:	d10c      	bne.n	800c5ec <_svfiprintf_r+0x130>
 800c5d2:	7863      	ldrb	r3, [r4, #1]
 800c5d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d6:	d135      	bne.n	800c644 <_svfiprintf_r+0x188>
 800c5d8:	9b03      	ldr	r3, [sp, #12]
 800c5da:	1d1a      	adds	r2, r3, #4
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	9203      	str	r2, [sp, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	bfb8      	it	lt
 800c5e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5e8:	3402      	adds	r4, #2
 800c5ea:	9305      	str	r3, [sp, #20]
 800c5ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c6b8 <_svfiprintf_r+0x1fc>
 800c5f0:	7821      	ldrb	r1, [r4, #0]
 800c5f2:	2203      	movs	r2, #3
 800c5f4:	4650      	mov	r0, sl
 800c5f6:	f7f3 fe03 	bl	8000200 <memchr>
 800c5fa:	b140      	cbz	r0, 800c60e <_svfiprintf_r+0x152>
 800c5fc:	2340      	movs	r3, #64	; 0x40
 800c5fe:	eba0 000a 	sub.w	r0, r0, sl
 800c602:	fa03 f000 	lsl.w	r0, r3, r0
 800c606:	9b04      	ldr	r3, [sp, #16]
 800c608:	4303      	orrs	r3, r0
 800c60a:	3401      	adds	r4, #1
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c612:	4826      	ldr	r0, [pc, #152]	; (800c6ac <_svfiprintf_r+0x1f0>)
 800c614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c618:	2206      	movs	r2, #6
 800c61a:	f7f3 fdf1 	bl	8000200 <memchr>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d038      	beq.n	800c694 <_svfiprintf_r+0x1d8>
 800c622:	4b23      	ldr	r3, [pc, #140]	; (800c6b0 <_svfiprintf_r+0x1f4>)
 800c624:	bb1b      	cbnz	r3, 800c66e <_svfiprintf_r+0x1b2>
 800c626:	9b03      	ldr	r3, [sp, #12]
 800c628:	3307      	adds	r3, #7
 800c62a:	f023 0307 	bic.w	r3, r3, #7
 800c62e:	3308      	adds	r3, #8
 800c630:	9303      	str	r3, [sp, #12]
 800c632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c634:	4433      	add	r3, r6
 800c636:	9309      	str	r3, [sp, #36]	; 0x24
 800c638:	e767      	b.n	800c50a <_svfiprintf_r+0x4e>
 800c63a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c63e:	460c      	mov	r4, r1
 800c640:	2001      	movs	r0, #1
 800c642:	e7a5      	b.n	800c590 <_svfiprintf_r+0xd4>
 800c644:	2300      	movs	r3, #0
 800c646:	3401      	adds	r4, #1
 800c648:	9305      	str	r3, [sp, #20]
 800c64a:	4619      	mov	r1, r3
 800c64c:	f04f 0c0a 	mov.w	ip, #10
 800c650:	4620      	mov	r0, r4
 800c652:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c656:	3a30      	subs	r2, #48	; 0x30
 800c658:	2a09      	cmp	r2, #9
 800c65a:	d903      	bls.n	800c664 <_svfiprintf_r+0x1a8>
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d0c5      	beq.n	800c5ec <_svfiprintf_r+0x130>
 800c660:	9105      	str	r1, [sp, #20]
 800c662:	e7c3      	b.n	800c5ec <_svfiprintf_r+0x130>
 800c664:	fb0c 2101 	mla	r1, ip, r1, r2
 800c668:	4604      	mov	r4, r0
 800c66a:	2301      	movs	r3, #1
 800c66c:	e7f0      	b.n	800c650 <_svfiprintf_r+0x194>
 800c66e:	ab03      	add	r3, sp, #12
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	462a      	mov	r2, r5
 800c674:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <_svfiprintf_r+0x1f8>)
 800c676:	a904      	add	r1, sp, #16
 800c678:	4638      	mov	r0, r7
 800c67a:	f7fd fffb 	bl	800a674 <_printf_float>
 800c67e:	1c42      	adds	r2, r0, #1
 800c680:	4606      	mov	r6, r0
 800c682:	d1d6      	bne.n	800c632 <_svfiprintf_r+0x176>
 800c684:	89ab      	ldrh	r3, [r5, #12]
 800c686:	065b      	lsls	r3, r3, #25
 800c688:	f53f af2c 	bmi.w	800c4e4 <_svfiprintf_r+0x28>
 800c68c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c68e:	b01d      	add	sp, #116	; 0x74
 800c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c694:	ab03      	add	r3, sp, #12
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	462a      	mov	r2, r5
 800c69a:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <_svfiprintf_r+0x1f8>)
 800c69c:	a904      	add	r1, sp, #16
 800c69e:	4638      	mov	r0, r7
 800c6a0:	f7fe fa8c 	bl	800abbc <_printf_i>
 800c6a4:	e7eb      	b.n	800c67e <_svfiprintf_r+0x1c2>
 800c6a6:	bf00      	nop
 800c6a8:	08011144 	.word	0x08011144
 800c6ac:	0801114e 	.word	0x0801114e
 800c6b0:	0800a675 	.word	0x0800a675
 800c6b4:	0800c405 	.word	0x0800c405
 800c6b8:	0801114a 	.word	0x0801114a

0800c6bc <_sbrk_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4d06      	ldr	r5, [pc, #24]	; (800c6d8 <_sbrk_r+0x1c>)
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	602b      	str	r3, [r5, #0]
 800c6c8:	f000 fe44 	bl	800d354 <_sbrk>
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	d102      	bne.n	800c6d6 <_sbrk_r+0x1a>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	b103      	cbz	r3, 800c6d6 <_sbrk_r+0x1a>
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	20000ac8 	.word	0x20000ac8

0800c6dc <__assert_func>:
 800c6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6de:	4614      	mov	r4, r2
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4b09      	ldr	r3, [pc, #36]	; (800c708 <__assert_func+0x2c>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	68d8      	ldr	r0, [r3, #12]
 800c6ea:	b14c      	cbz	r4, 800c700 <__assert_func+0x24>
 800c6ec:	4b07      	ldr	r3, [pc, #28]	; (800c70c <__assert_func+0x30>)
 800c6ee:	9100      	str	r1, [sp, #0]
 800c6f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6f4:	4906      	ldr	r1, [pc, #24]	; (800c710 <__assert_func+0x34>)
 800c6f6:	462b      	mov	r3, r5
 800c6f8:	f000 f80e 	bl	800c718 <fiprintf>
 800c6fc:	f000 faa4 	bl	800cc48 <abort>
 800c700:	4b04      	ldr	r3, [pc, #16]	; (800c714 <__assert_func+0x38>)
 800c702:	461c      	mov	r4, r3
 800c704:	e7f3      	b.n	800c6ee <__assert_func+0x12>
 800c706:	bf00      	nop
 800c708:	20000314 	.word	0x20000314
 800c70c:	08011155 	.word	0x08011155
 800c710:	08011162 	.word	0x08011162
 800c714:	08011190 	.word	0x08011190

0800c718 <fiprintf>:
 800c718:	b40e      	push	{r1, r2, r3}
 800c71a:	b503      	push	{r0, r1, lr}
 800c71c:	4601      	mov	r1, r0
 800c71e:	ab03      	add	r3, sp, #12
 800c720:	4805      	ldr	r0, [pc, #20]	; (800c738 <fiprintf+0x20>)
 800c722:	f853 2b04 	ldr.w	r2, [r3], #4
 800c726:	6800      	ldr	r0, [r0, #0]
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	f000 f88f 	bl	800c84c <_vfiprintf_r>
 800c72e:	b002      	add	sp, #8
 800c730:	f85d eb04 	ldr.w	lr, [sp], #4
 800c734:	b003      	add	sp, #12
 800c736:	4770      	bx	lr
 800c738:	20000314 	.word	0x20000314

0800c73c <__ascii_mbtowc>:
 800c73c:	b082      	sub	sp, #8
 800c73e:	b901      	cbnz	r1, 800c742 <__ascii_mbtowc+0x6>
 800c740:	a901      	add	r1, sp, #4
 800c742:	b142      	cbz	r2, 800c756 <__ascii_mbtowc+0x1a>
 800c744:	b14b      	cbz	r3, 800c75a <__ascii_mbtowc+0x1e>
 800c746:	7813      	ldrb	r3, [r2, #0]
 800c748:	600b      	str	r3, [r1, #0]
 800c74a:	7812      	ldrb	r2, [r2, #0]
 800c74c:	1e10      	subs	r0, r2, #0
 800c74e:	bf18      	it	ne
 800c750:	2001      	movne	r0, #1
 800c752:	b002      	add	sp, #8
 800c754:	4770      	bx	lr
 800c756:	4610      	mov	r0, r2
 800c758:	e7fb      	b.n	800c752 <__ascii_mbtowc+0x16>
 800c75a:	f06f 0001 	mvn.w	r0, #1
 800c75e:	e7f8      	b.n	800c752 <__ascii_mbtowc+0x16>

0800c760 <memmove>:
 800c760:	4288      	cmp	r0, r1
 800c762:	b510      	push	{r4, lr}
 800c764:	eb01 0402 	add.w	r4, r1, r2
 800c768:	d902      	bls.n	800c770 <memmove+0x10>
 800c76a:	4284      	cmp	r4, r0
 800c76c:	4623      	mov	r3, r4
 800c76e:	d807      	bhi.n	800c780 <memmove+0x20>
 800c770:	1e43      	subs	r3, r0, #1
 800c772:	42a1      	cmp	r1, r4
 800c774:	d008      	beq.n	800c788 <memmove+0x28>
 800c776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c77a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c77e:	e7f8      	b.n	800c772 <memmove+0x12>
 800c780:	4402      	add	r2, r0
 800c782:	4601      	mov	r1, r0
 800c784:	428a      	cmp	r2, r1
 800c786:	d100      	bne.n	800c78a <memmove+0x2a>
 800c788:	bd10      	pop	{r4, pc}
 800c78a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c78e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c792:	e7f7      	b.n	800c784 <memmove+0x24>

0800c794 <__malloc_lock>:
 800c794:	4801      	ldr	r0, [pc, #4]	; (800c79c <__malloc_lock+0x8>)
 800c796:	f000 bc17 	b.w	800cfc8 <__retarget_lock_acquire_recursive>
 800c79a:	bf00      	nop
 800c79c:	20000ad0 	.word	0x20000ad0

0800c7a0 <__malloc_unlock>:
 800c7a0:	4801      	ldr	r0, [pc, #4]	; (800c7a8 <__malloc_unlock+0x8>)
 800c7a2:	f000 bc12 	b.w	800cfca <__retarget_lock_release_recursive>
 800c7a6:	bf00      	nop
 800c7a8:	20000ad0 	.word	0x20000ad0

0800c7ac <_realloc_r>:
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	4614      	mov	r4, r2
 800c7b2:	460e      	mov	r6, r1
 800c7b4:	b921      	cbnz	r1, 800c7c0 <_realloc_r+0x14>
 800c7b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	f7ff bdc8 	b.w	800c350 <_malloc_r>
 800c7c0:	b922      	cbnz	r2, 800c7cc <_realloc_r+0x20>
 800c7c2:	f7ff fd75 	bl	800c2b0 <_free_r>
 800c7c6:	4625      	mov	r5, r4
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7cc:	f000 fc62 	bl	800d094 <_malloc_usable_size_r>
 800c7d0:	42a0      	cmp	r0, r4
 800c7d2:	d20f      	bcs.n	800c7f4 <_realloc_r+0x48>
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	f7ff fdba 	bl	800c350 <_malloc_r>
 800c7dc:	4605      	mov	r5, r0
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d0f2      	beq.n	800c7c8 <_realloc_r+0x1c>
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	f7ff f9c7 	bl	800bb78 <memcpy>
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	f7ff fd5f 	bl	800c2b0 <_free_r>
 800c7f2:	e7e9      	b.n	800c7c8 <_realloc_r+0x1c>
 800c7f4:	4635      	mov	r5, r6
 800c7f6:	e7e7      	b.n	800c7c8 <_realloc_r+0x1c>

0800c7f8 <__sfputc_r>:
 800c7f8:	6893      	ldr	r3, [r2, #8]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	b410      	push	{r4}
 800c800:	6093      	str	r3, [r2, #8]
 800c802:	da08      	bge.n	800c816 <__sfputc_r+0x1e>
 800c804:	6994      	ldr	r4, [r2, #24]
 800c806:	42a3      	cmp	r3, r4
 800c808:	db01      	blt.n	800c80e <__sfputc_r+0x16>
 800c80a:	290a      	cmp	r1, #10
 800c80c:	d103      	bne.n	800c816 <__sfputc_r+0x1e>
 800c80e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c812:	f000 b94b 	b.w	800caac <__swbuf_r>
 800c816:	6813      	ldr	r3, [r2, #0]
 800c818:	1c58      	adds	r0, r3, #1
 800c81a:	6010      	str	r0, [r2, #0]
 800c81c:	7019      	strb	r1, [r3, #0]
 800c81e:	4608      	mov	r0, r1
 800c820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <__sfputs_r>:
 800c826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c828:	4606      	mov	r6, r0
 800c82a:	460f      	mov	r7, r1
 800c82c:	4614      	mov	r4, r2
 800c82e:	18d5      	adds	r5, r2, r3
 800c830:	42ac      	cmp	r4, r5
 800c832:	d101      	bne.n	800c838 <__sfputs_r+0x12>
 800c834:	2000      	movs	r0, #0
 800c836:	e007      	b.n	800c848 <__sfputs_r+0x22>
 800c838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c83c:	463a      	mov	r2, r7
 800c83e:	4630      	mov	r0, r6
 800c840:	f7ff ffda 	bl	800c7f8 <__sfputc_r>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	d1f3      	bne.n	800c830 <__sfputs_r+0xa>
 800c848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c84c <_vfiprintf_r>:
 800c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c850:	460d      	mov	r5, r1
 800c852:	b09d      	sub	sp, #116	; 0x74
 800c854:	4614      	mov	r4, r2
 800c856:	4698      	mov	r8, r3
 800c858:	4606      	mov	r6, r0
 800c85a:	b118      	cbz	r0, 800c864 <_vfiprintf_r+0x18>
 800c85c:	6983      	ldr	r3, [r0, #24]
 800c85e:	b90b      	cbnz	r3, 800c864 <_vfiprintf_r+0x18>
 800c860:	f000 fb14 	bl	800ce8c <__sinit>
 800c864:	4b89      	ldr	r3, [pc, #548]	; (800ca8c <_vfiprintf_r+0x240>)
 800c866:	429d      	cmp	r5, r3
 800c868:	d11b      	bne.n	800c8a2 <_vfiprintf_r+0x56>
 800c86a:	6875      	ldr	r5, [r6, #4]
 800c86c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c86e:	07d9      	lsls	r1, r3, #31
 800c870:	d405      	bmi.n	800c87e <_vfiprintf_r+0x32>
 800c872:	89ab      	ldrh	r3, [r5, #12]
 800c874:	059a      	lsls	r2, r3, #22
 800c876:	d402      	bmi.n	800c87e <_vfiprintf_r+0x32>
 800c878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c87a:	f000 fba5 	bl	800cfc8 <__retarget_lock_acquire_recursive>
 800c87e:	89ab      	ldrh	r3, [r5, #12]
 800c880:	071b      	lsls	r3, r3, #28
 800c882:	d501      	bpl.n	800c888 <_vfiprintf_r+0x3c>
 800c884:	692b      	ldr	r3, [r5, #16]
 800c886:	b9eb      	cbnz	r3, 800c8c4 <_vfiprintf_r+0x78>
 800c888:	4629      	mov	r1, r5
 800c88a:	4630      	mov	r0, r6
 800c88c:	f000 f96e 	bl	800cb6c <__swsetup_r>
 800c890:	b1c0      	cbz	r0, 800c8c4 <_vfiprintf_r+0x78>
 800c892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c894:	07dc      	lsls	r4, r3, #31
 800c896:	d50e      	bpl.n	800c8b6 <_vfiprintf_r+0x6a>
 800c898:	f04f 30ff 	mov.w	r0, #4294967295
 800c89c:	b01d      	add	sp, #116	; 0x74
 800c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a2:	4b7b      	ldr	r3, [pc, #492]	; (800ca90 <_vfiprintf_r+0x244>)
 800c8a4:	429d      	cmp	r5, r3
 800c8a6:	d101      	bne.n	800c8ac <_vfiprintf_r+0x60>
 800c8a8:	68b5      	ldr	r5, [r6, #8]
 800c8aa:	e7df      	b.n	800c86c <_vfiprintf_r+0x20>
 800c8ac:	4b79      	ldr	r3, [pc, #484]	; (800ca94 <_vfiprintf_r+0x248>)
 800c8ae:	429d      	cmp	r5, r3
 800c8b0:	bf08      	it	eq
 800c8b2:	68f5      	ldreq	r5, [r6, #12]
 800c8b4:	e7da      	b.n	800c86c <_vfiprintf_r+0x20>
 800c8b6:	89ab      	ldrh	r3, [r5, #12]
 800c8b8:	0598      	lsls	r0, r3, #22
 800c8ba:	d4ed      	bmi.n	800c898 <_vfiprintf_r+0x4c>
 800c8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8be:	f000 fb84 	bl	800cfca <__retarget_lock_release_recursive>
 800c8c2:	e7e9      	b.n	800c898 <_vfiprintf_r+0x4c>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c8:	2320      	movs	r3, #32
 800c8ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8d2:	2330      	movs	r3, #48	; 0x30
 800c8d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca98 <_vfiprintf_r+0x24c>
 800c8d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8dc:	f04f 0901 	mov.w	r9, #1
 800c8e0:	4623      	mov	r3, r4
 800c8e2:	469a      	mov	sl, r3
 800c8e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8e8:	b10a      	cbz	r2, 800c8ee <_vfiprintf_r+0xa2>
 800c8ea:	2a25      	cmp	r2, #37	; 0x25
 800c8ec:	d1f9      	bne.n	800c8e2 <_vfiprintf_r+0x96>
 800c8ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c8f2:	d00b      	beq.n	800c90c <_vfiprintf_r+0xc0>
 800c8f4:	465b      	mov	r3, fp
 800c8f6:	4622      	mov	r2, r4
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f7ff ff93 	bl	800c826 <__sfputs_r>
 800c900:	3001      	adds	r0, #1
 800c902:	f000 80aa 	beq.w	800ca5a <_vfiprintf_r+0x20e>
 800c906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c908:	445a      	add	r2, fp
 800c90a:	9209      	str	r2, [sp, #36]	; 0x24
 800c90c:	f89a 3000 	ldrb.w	r3, [sl]
 800c910:	2b00      	cmp	r3, #0
 800c912:	f000 80a2 	beq.w	800ca5a <_vfiprintf_r+0x20e>
 800c916:	2300      	movs	r3, #0
 800c918:	f04f 32ff 	mov.w	r2, #4294967295
 800c91c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c920:	f10a 0a01 	add.w	sl, sl, #1
 800c924:	9304      	str	r3, [sp, #16]
 800c926:	9307      	str	r3, [sp, #28]
 800c928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c92c:	931a      	str	r3, [sp, #104]	; 0x68
 800c92e:	4654      	mov	r4, sl
 800c930:	2205      	movs	r2, #5
 800c932:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c936:	4858      	ldr	r0, [pc, #352]	; (800ca98 <_vfiprintf_r+0x24c>)
 800c938:	f7f3 fc62 	bl	8000200 <memchr>
 800c93c:	9a04      	ldr	r2, [sp, #16]
 800c93e:	b9d8      	cbnz	r0, 800c978 <_vfiprintf_r+0x12c>
 800c940:	06d1      	lsls	r1, r2, #27
 800c942:	bf44      	itt	mi
 800c944:	2320      	movmi	r3, #32
 800c946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c94a:	0713      	lsls	r3, r2, #28
 800c94c:	bf44      	itt	mi
 800c94e:	232b      	movmi	r3, #43	; 0x2b
 800c950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c954:	f89a 3000 	ldrb.w	r3, [sl]
 800c958:	2b2a      	cmp	r3, #42	; 0x2a
 800c95a:	d015      	beq.n	800c988 <_vfiprintf_r+0x13c>
 800c95c:	9a07      	ldr	r2, [sp, #28]
 800c95e:	4654      	mov	r4, sl
 800c960:	2000      	movs	r0, #0
 800c962:	f04f 0c0a 	mov.w	ip, #10
 800c966:	4621      	mov	r1, r4
 800c968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c96c:	3b30      	subs	r3, #48	; 0x30
 800c96e:	2b09      	cmp	r3, #9
 800c970:	d94e      	bls.n	800ca10 <_vfiprintf_r+0x1c4>
 800c972:	b1b0      	cbz	r0, 800c9a2 <_vfiprintf_r+0x156>
 800c974:	9207      	str	r2, [sp, #28]
 800c976:	e014      	b.n	800c9a2 <_vfiprintf_r+0x156>
 800c978:	eba0 0308 	sub.w	r3, r0, r8
 800c97c:	fa09 f303 	lsl.w	r3, r9, r3
 800c980:	4313      	orrs	r3, r2
 800c982:	9304      	str	r3, [sp, #16]
 800c984:	46a2      	mov	sl, r4
 800c986:	e7d2      	b.n	800c92e <_vfiprintf_r+0xe2>
 800c988:	9b03      	ldr	r3, [sp, #12]
 800c98a:	1d19      	adds	r1, r3, #4
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	9103      	str	r1, [sp, #12]
 800c990:	2b00      	cmp	r3, #0
 800c992:	bfbb      	ittet	lt
 800c994:	425b      	neglt	r3, r3
 800c996:	f042 0202 	orrlt.w	r2, r2, #2
 800c99a:	9307      	strge	r3, [sp, #28]
 800c99c:	9307      	strlt	r3, [sp, #28]
 800c99e:	bfb8      	it	lt
 800c9a0:	9204      	strlt	r2, [sp, #16]
 800c9a2:	7823      	ldrb	r3, [r4, #0]
 800c9a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c9a6:	d10c      	bne.n	800c9c2 <_vfiprintf_r+0x176>
 800c9a8:	7863      	ldrb	r3, [r4, #1]
 800c9aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ac:	d135      	bne.n	800ca1a <_vfiprintf_r+0x1ce>
 800c9ae:	9b03      	ldr	r3, [sp, #12]
 800c9b0:	1d1a      	adds	r2, r3, #4
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	9203      	str	r2, [sp, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	bfb8      	it	lt
 800c9ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9be:	3402      	adds	r4, #2
 800c9c0:	9305      	str	r3, [sp, #20]
 800c9c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800caa8 <_vfiprintf_r+0x25c>
 800c9c6:	7821      	ldrb	r1, [r4, #0]
 800c9c8:	2203      	movs	r2, #3
 800c9ca:	4650      	mov	r0, sl
 800c9cc:	f7f3 fc18 	bl	8000200 <memchr>
 800c9d0:	b140      	cbz	r0, 800c9e4 <_vfiprintf_r+0x198>
 800c9d2:	2340      	movs	r3, #64	; 0x40
 800c9d4:	eba0 000a 	sub.w	r0, r0, sl
 800c9d8:	fa03 f000 	lsl.w	r0, r3, r0
 800c9dc:	9b04      	ldr	r3, [sp, #16]
 800c9de:	4303      	orrs	r3, r0
 800c9e0:	3401      	adds	r4, #1
 800c9e2:	9304      	str	r3, [sp, #16]
 800c9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e8:	482c      	ldr	r0, [pc, #176]	; (800ca9c <_vfiprintf_r+0x250>)
 800c9ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9ee:	2206      	movs	r2, #6
 800c9f0:	f7f3 fc06 	bl	8000200 <memchr>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d03f      	beq.n	800ca78 <_vfiprintf_r+0x22c>
 800c9f8:	4b29      	ldr	r3, [pc, #164]	; (800caa0 <_vfiprintf_r+0x254>)
 800c9fa:	bb1b      	cbnz	r3, 800ca44 <_vfiprintf_r+0x1f8>
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	3307      	adds	r3, #7
 800ca00:	f023 0307 	bic.w	r3, r3, #7
 800ca04:	3308      	adds	r3, #8
 800ca06:	9303      	str	r3, [sp, #12]
 800ca08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca0a:	443b      	add	r3, r7
 800ca0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca0e:	e767      	b.n	800c8e0 <_vfiprintf_r+0x94>
 800ca10:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca14:	460c      	mov	r4, r1
 800ca16:	2001      	movs	r0, #1
 800ca18:	e7a5      	b.n	800c966 <_vfiprintf_r+0x11a>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	3401      	adds	r4, #1
 800ca1e:	9305      	str	r3, [sp, #20]
 800ca20:	4619      	mov	r1, r3
 800ca22:	f04f 0c0a 	mov.w	ip, #10
 800ca26:	4620      	mov	r0, r4
 800ca28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca2c:	3a30      	subs	r2, #48	; 0x30
 800ca2e:	2a09      	cmp	r2, #9
 800ca30:	d903      	bls.n	800ca3a <_vfiprintf_r+0x1ee>
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0c5      	beq.n	800c9c2 <_vfiprintf_r+0x176>
 800ca36:	9105      	str	r1, [sp, #20]
 800ca38:	e7c3      	b.n	800c9c2 <_vfiprintf_r+0x176>
 800ca3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca3e:	4604      	mov	r4, r0
 800ca40:	2301      	movs	r3, #1
 800ca42:	e7f0      	b.n	800ca26 <_vfiprintf_r+0x1da>
 800ca44:	ab03      	add	r3, sp, #12
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	462a      	mov	r2, r5
 800ca4a:	4b16      	ldr	r3, [pc, #88]	; (800caa4 <_vfiprintf_r+0x258>)
 800ca4c:	a904      	add	r1, sp, #16
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f7fd fe10 	bl	800a674 <_printf_float>
 800ca54:	4607      	mov	r7, r0
 800ca56:	1c78      	adds	r0, r7, #1
 800ca58:	d1d6      	bne.n	800ca08 <_vfiprintf_r+0x1bc>
 800ca5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca5c:	07d9      	lsls	r1, r3, #31
 800ca5e:	d405      	bmi.n	800ca6c <_vfiprintf_r+0x220>
 800ca60:	89ab      	ldrh	r3, [r5, #12]
 800ca62:	059a      	lsls	r2, r3, #22
 800ca64:	d402      	bmi.n	800ca6c <_vfiprintf_r+0x220>
 800ca66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca68:	f000 faaf 	bl	800cfca <__retarget_lock_release_recursive>
 800ca6c:	89ab      	ldrh	r3, [r5, #12]
 800ca6e:	065b      	lsls	r3, r3, #25
 800ca70:	f53f af12 	bmi.w	800c898 <_vfiprintf_r+0x4c>
 800ca74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca76:	e711      	b.n	800c89c <_vfiprintf_r+0x50>
 800ca78:	ab03      	add	r3, sp, #12
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	462a      	mov	r2, r5
 800ca7e:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <_vfiprintf_r+0x258>)
 800ca80:	a904      	add	r1, sp, #16
 800ca82:	4630      	mov	r0, r6
 800ca84:	f7fe f89a 	bl	800abbc <_printf_i>
 800ca88:	e7e4      	b.n	800ca54 <_vfiprintf_r+0x208>
 800ca8a:	bf00      	nop
 800ca8c:	080112bc 	.word	0x080112bc
 800ca90:	080112dc 	.word	0x080112dc
 800ca94:	0801129c 	.word	0x0801129c
 800ca98:	08011144 	.word	0x08011144
 800ca9c:	0801114e 	.word	0x0801114e
 800caa0:	0800a675 	.word	0x0800a675
 800caa4:	0800c827 	.word	0x0800c827
 800caa8:	0801114a 	.word	0x0801114a

0800caac <__swbuf_r>:
 800caac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caae:	460e      	mov	r6, r1
 800cab0:	4614      	mov	r4, r2
 800cab2:	4605      	mov	r5, r0
 800cab4:	b118      	cbz	r0, 800cabe <__swbuf_r+0x12>
 800cab6:	6983      	ldr	r3, [r0, #24]
 800cab8:	b90b      	cbnz	r3, 800cabe <__swbuf_r+0x12>
 800caba:	f000 f9e7 	bl	800ce8c <__sinit>
 800cabe:	4b21      	ldr	r3, [pc, #132]	; (800cb44 <__swbuf_r+0x98>)
 800cac0:	429c      	cmp	r4, r3
 800cac2:	d12b      	bne.n	800cb1c <__swbuf_r+0x70>
 800cac4:	686c      	ldr	r4, [r5, #4]
 800cac6:	69a3      	ldr	r3, [r4, #24]
 800cac8:	60a3      	str	r3, [r4, #8]
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	071a      	lsls	r2, r3, #28
 800cace:	d52f      	bpl.n	800cb30 <__swbuf_r+0x84>
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	b36b      	cbz	r3, 800cb30 <__swbuf_r+0x84>
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	6820      	ldr	r0, [r4, #0]
 800cad8:	1ac0      	subs	r0, r0, r3
 800cada:	6963      	ldr	r3, [r4, #20]
 800cadc:	b2f6      	uxtb	r6, r6
 800cade:	4283      	cmp	r3, r0
 800cae0:	4637      	mov	r7, r6
 800cae2:	dc04      	bgt.n	800caee <__swbuf_r+0x42>
 800cae4:	4621      	mov	r1, r4
 800cae6:	4628      	mov	r0, r5
 800cae8:	f000 f93c 	bl	800cd64 <_fflush_r>
 800caec:	bb30      	cbnz	r0, 800cb3c <__swbuf_r+0x90>
 800caee:	68a3      	ldr	r3, [r4, #8]
 800caf0:	3b01      	subs	r3, #1
 800caf2:	60a3      	str	r3, [r4, #8]
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	1c5a      	adds	r2, r3, #1
 800caf8:	6022      	str	r2, [r4, #0]
 800cafa:	701e      	strb	r6, [r3, #0]
 800cafc:	6963      	ldr	r3, [r4, #20]
 800cafe:	3001      	adds	r0, #1
 800cb00:	4283      	cmp	r3, r0
 800cb02:	d004      	beq.n	800cb0e <__swbuf_r+0x62>
 800cb04:	89a3      	ldrh	r3, [r4, #12]
 800cb06:	07db      	lsls	r3, r3, #31
 800cb08:	d506      	bpl.n	800cb18 <__swbuf_r+0x6c>
 800cb0a:	2e0a      	cmp	r6, #10
 800cb0c:	d104      	bne.n	800cb18 <__swbuf_r+0x6c>
 800cb0e:	4621      	mov	r1, r4
 800cb10:	4628      	mov	r0, r5
 800cb12:	f000 f927 	bl	800cd64 <_fflush_r>
 800cb16:	b988      	cbnz	r0, 800cb3c <__swbuf_r+0x90>
 800cb18:	4638      	mov	r0, r7
 800cb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <__swbuf_r+0x9c>)
 800cb1e:	429c      	cmp	r4, r3
 800cb20:	d101      	bne.n	800cb26 <__swbuf_r+0x7a>
 800cb22:	68ac      	ldr	r4, [r5, #8]
 800cb24:	e7cf      	b.n	800cac6 <__swbuf_r+0x1a>
 800cb26:	4b09      	ldr	r3, [pc, #36]	; (800cb4c <__swbuf_r+0xa0>)
 800cb28:	429c      	cmp	r4, r3
 800cb2a:	bf08      	it	eq
 800cb2c:	68ec      	ldreq	r4, [r5, #12]
 800cb2e:	e7ca      	b.n	800cac6 <__swbuf_r+0x1a>
 800cb30:	4621      	mov	r1, r4
 800cb32:	4628      	mov	r0, r5
 800cb34:	f000 f81a 	bl	800cb6c <__swsetup_r>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d0cb      	beq.n	800cad4 <__swbuf_r+0x28>
 800cb3c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb40:	e7ea      	b.n	800cb18 <__swbuf_r+0x6c>
 800cb42:	bf00      	nop
 800cb44:	080112bc 	.word	0x080112bc
 800cb48:	080112dc 	.word	0x080112dc
 800cb4c:	0801129c 	.word	0x0801129c

0800cb50 <__ascii_wctomb>:
 800cb50:	b149      	cbz	r1, 800cb66 <__ascii_wctomb+0x16>
 800cb52:	2aff      	cmp	r2, #255	; 0xff
 800cb54:	bf85      	ittet	hi
 800cb56:	238a      	movhi	r3, #138	; 0x8a
 800cb58:	6003      	strhi	r3, [r0, #0]
 800cb5a:	700a      	strbls	r2, [r1, #0]
 800cb5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb60:	bf98      	it	ls
 800cb62:	2001      	movls	r0, #1
 800cb64:	4770      	bx	lr
 800cb66:	4608      	mov	r0, r1
 800cb68:	4770      	bx	lr
	...

0800cb6c <__swsetup_r>:
 800cb6c:	4b32      	ldr	r3, [pc, #200]	; (800cc38 <__swsetup_r+0xcc>)
 800cb6e:	b570      	push	{r4, r5, r6, lr}
 800cb70:	681d      	ldr	r5, [r3, #0]
 800cb72:	4606      	mov	r6, r0
 800cb74:	460c      	mov	r4, r1
 800cb76:	b125      	cbz	r5, 800cb82 <__swsetup_r+0x16>
 800cb78:	69ab      	ldr	r3, [r5, #24]
 800cb7a:	b913      	cbnz	r3, 800cb82 <__swsetup_r+0x16>
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f000 f985 	bl	800ce8c <__sinit>
 800cb82:	4b2e      	ldr	r3, [pc, #184]	; (800cc3c <__swsetup_r+0xd0>)
 800cb84:	429c      	cmp	r4, r3
 800cb86:	d10f      	bne.n	800cba8 <__swsetup_r+0x3c>
 800cb88:	686c      	ldr	r4, [r5, #4]
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb90:	0719      	lsls	r1, r3, #28
 800cb92:	d42c      	bmi.n	800cbee <__swsetup_r+0x82>
 800cb94:	06dd      	lsls	r5, r3, #27
 800cb96:	d411      	bmi.n	800cbbc <__swsetup_r+0x50>
 800cb98:	2309      	movs	r3, #9
 800cb9a:	6033      	str	r3, [r6, #0]
 800cb9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cba0:	81a3      	strh	r3, [r4, #12]
 800cba2:	f04f 30ff 	mov.w	r0, #4294967295
 800cba6:	e03e      	b.n	800cc26 <__swsetup_r+0xba>
 800cba8:	4b25      	ldr	r3, [pc, #148]	; (800cc40 <__swsetup_r+0xd4>)
 800cbaa:	429c      	cmp	r4, r3
 800cbac:	d101      	bne.n	800cbb2 <__swsetup_r+0x46>
 800cbae:	68ac      	ldr	r4, [r5, #8]
 800cbb0:	e7eb      	b.n	800cb8a <__swsetup_r+0x1e>
 800cbb2:	4b24      	ldr	r3, [pc, #144]	; (800cc44 <__swsetup_r+0xd8>)
 800cbb4:	429c      	cmp	r4, r3
 800cbb6:	bf08      	it	eq
 800cbb8:	68ec      	ldreq	r4, [r5, #12]
 800cbba:	e7e6      	b.n	800cb8a <__swsetup_r+0x1e>
 800cbbc:	0758      	lsls	r0, r3, #29
 800cbbe:	d512      	bpl.n	800cbe6 <__swsetup_r+0x7a>
 800cbc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbc2:	b141      	cbz	r1, 800cbd6 <__swsetup_r+0x6a>
 800cbc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc8:	4299      	cmp	r1, r3
 800cbca:	d002      	beq.n	800cbd2 <__swsetup_r+0x66>
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7ff fb6f 	bl	800c2b0 <_free_r>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	6363      	str	r3, [r4, #52]	; 0x34
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbdc:	81a3      	strh	r3, [r4, #12]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	6063      	str	r3, [r4, #4]
 800cbe2:	6923      	ldr	r3, [r4, #16]
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	89a3      	ldrh	r3, [r4, #12]
 800cbe8:	f043 0308 	orr.w	r3, r3, #8
 800cbec:	81a3      	strh	r3, [r4, #12]
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	b94b      	cbnz	r3, 800cc06 <__swsetup_r+0x9a>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbfc:	d003      	beq.n	800cc06 <__swsetup_r+0x9a>
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4630      	mov	r0, r6
 800cc02:	f000 fa07 	bl	800d014 <__smakebuf_r>
 800cc06:	89a0      	ldrh	r0, [r4, #12]
 800cc08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc0c:	f010 0301 	ands.w	r3, r0, #1
 800cc10:	d00a      	beq.n	800cc28 <__swsetup_r+0xbc>
 800cc12:	2300      	movs	r3, #0
 800cc14:	60a3      	str	r3, [r4, #8]
 800cc16:	6963      	ldr	r3, [r4, #20]
 800cc18:	425b      	negs	r3, r3
 800cc1a:	61a3      	str	r3, [r4, #24]
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	b943      	cbnz	r3, 800cc32 <__swsetup_r+0xc6>
 800cc20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc24:	d1ba      	bne.n	800cb9c <__swsetup_r+0x30>
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	0781      	lsls	r1, r0, #30
 800cc2a:	bf58      	it	pl
 800cc2c:	6963      	ldrpl	r3, [r4, #20]
 800cc2e:	60a3      	str	r3, [r4, #8]
 800cc30:	e7f4      	b.n	800cc1c <__swsetup_r+0xb0>
 800cc32:	2000      	movs	r0, #0
 800cc34:	e7f7      	b.n	800cc26 <__swsetup_r+0xba>
 800cc36:	bf00      	nop
 800cc38:	20000314 	.word	0x20000314
 800cc3c:	080112bc 	.word	0x080112bc
 800cc40:	080112dc 	.word	0x080112dc
 800cc44:	0801129c 	.word	0x0801129c

0800cc48 <abort>:
 800cc48:	b508      	push	{r3, lr}
 800cc4a:	2006      	movs	r0, #6
 800cc4c:	f000 fa52 	bl	800d0f4 <raise>
 800cc50:	2001      	movs	r0, #1
 800cc52:	f000 fb95 	bl	800d380 <_exit>
	...

0800cc58 <__sflush_r>:
 800cc58:	898a      	ldrh	r2, [r1, #12]
 800cc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc5e:	4605      	mov	r5, r0
 800cc60:	0710      	lsls	r0, r2, #28
 800cc62:	460c      	mov	r4, r1
 800cc64:	d458      	bmi.n	800cd18 <__sflush_r+0xc0>
 800cc66:	684b      	ldr	r3, [r1, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	dc05      	bgt.n	800cc78 <__sflush_r+0x20>
 800cc6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	dc02      	bgt.n	800cc78 <__sflush_r+0x20>
 800cc72:	2000      	movs	r0, #0
 800cc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc7a:	2e00      	cmp	r6, #0
 800cc7c:	d0f9      	beq.n	800cc72 <__sflush_r+0x1a>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc84:	682f      	ldr	r7, [r5, #0]
 800cc86:	602b      	str	r3, [r5, #0]
 800cc88:	d032      	beq.n	800ccf0 <__sflush_r+0x98>
 800cc8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc8c:	89a3      	ldrh	r3, [r4, #12]
 800cc8e:	075a      	lsls	r2, r3, #29
 800cc90:	d505      	bpl.n	800cc9e <__sflush_r+0x46>
 800cc92:	6863      	ldr	r3, [r4, #4]
 800cc94:	1ac0      	subs	r0, r0, r3
 800cc96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc98:	b10b      	cbz	r3, 800cc9e <__sflush_r+0x46>
 800cc9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc9c:	1ac0      	subs	r0, r0, r3
 800cc9e:	2300      	movs	r3, #0
 800cca0:	4602      	mov	r2, r0
 800cca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cca4:	6a21      	ldr	r1, [r4, #32]
 800cca6:	4628      	mov	r0, r5
 800cca8:	47b0      	blx	r6
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	d106      	bne.n	800ccbe <__sflush_r+0x66>
 800ccb0:	6829      	ldr	r1, [r5, #0]
 800ccb2:	291d      	cmp	r1, #29
 800ccb4:	d82c      	bhi.n	800cd10 <__sflush_r+0xb8>
 800ccb6:	4a2a      	ldr	r2, [pc, #168]	; (800cd60 <__sflush_r+0x108>)
 800ccb8:	40ca      	lsrs	r2, r1
 800ccba:	07d6      	lsls	r6, r2, #31
 800ccbc:	d528      	bpl.n	800cd10 <__sflush_r+0xb8>
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	6062      	str	r2, [r4, #4]
 800ccc2:	04d9      	lsls	r1, r3, #19
 800ccc4:	6922      	ldr	r2, [r4, #16]
 800ccc6:	6022      	str	r2, [r4, #0]
 800ccc8:	d504      	bpl.n	800ccd4 <__sflush_r+0x7c>
 800ccca:	1c42      	adds	r2, r0, #1
 800cccc:	d101      	bne.n	800ccd2 <__sflush_r+0x7a>
 800ccce:	682b      	ldr	r3, [r5, #0]
 800ccd0:	b903      	cbnz	r3, 800ccd4 <__sflush_r+0x7c>
 800ccd2:	6560      	str	r0, [r4, #84]	; 0x54
 800ccd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccd6:	602f      	str	r7, [r5, #0]
 800ccd8:	2900      	cmp	r1, #0
 800ccda:	d0ca      	beq.n	800cc72 <__sflush_r+0x1a>
 800ccdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cce0:	4299      	cmp	r1, r3
 800cce2:	d002      	beq.n	800ccea <__sflush_r+0x92>
 800cce4:	4628      	mov	r0, r5
 800cce6:	f7ff fae3 	bl	800c2b0 <_free_r>
 800ccea:	2000      	movs	r0, #0
 800ccec:	6360      	str	r0, [r4, #52]	; 0x34
 800ccee:	e7c1      	b.n	800cc74 <__sflush_r+0x1c>
 800ccf0:	6a21      	ldr	r1, [r4, #32]
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	47b0      	blx	r6
 800ccf8:	1c41      	adds	r1, r0, #1
 800ccfa:	d1c7      	bne.n	800cc8c <__sflush_r+0x34>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0c4      	beq.n	800cc8c <__sflush_r+0x34>
 800cd02:	2b1d      	cmp	r3, #29
 800cd04:	d001      	beq.n	800cd0a <__sflush_r+0xb2>
 800cd06:	2b16      	cmp	r3, #22
 800cd08:	d101      	bne.n	800cd0e <__sflush_r+0xb6>
 800cd0a:	602f      	str	r7, [r5, #0]
 800cd0c:	e7b1      	b.n	800cc72 <__sflush_r+0x1a>
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	e7ad      	b.n	800cc74 <__sflush_r+0x1c>
 800cd18:	690f      	ldr	r7, [r1, #16]
 800cd1a:	2f00      	cmp	r7, #0
 800cd1c:	d0a9      	beq.n	800cc72 <__sflush_r+0x1a>
 800cd1e:	0793      	lsls	r3, r2, #30
 800cd20:	680e      	ldr	r6, [r1, #0]
 800cd22:	bf08      	it	eq
 800cd24:	694b      	ldreq	r3, [r1, #20]
 800cd26:	600f      	str	r7, [r1, #0]
 800cd28:	bf18      	it	ne
 800cd2a:	2300      	movne	r3, #0
 800cd2c:	eba6 0807 	sub.w	r8, r6, r7
 800cd30:	608b      	str	r3, [r1, #8]
 800cd32:	f1b8 0f00 	cmp.w	r8, #0
 800cd36:	dd9c      	ble.n	800cc72 <__sflush_r+0x1a>
 800cd38:	6a21      	ldr	r1, [r4, #32]
 800cd3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd3c:	4643      	mov	r3, r8
 800cd3e:	463a      	mov	r2, r7
 800cd40:	4628      	mov	r0, r5
 800cd42:	47b0      	blx	r6
 800cd44:	2800      	cmp	r0, #0
 800cd46:	dc06      	bgt.n	800cd56 <__sflush_r+0xfe>
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd4e:	81a3      	strh	r3, [r4, #12]
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	e78e      	b.n	800cc74 <__sflush_r+0x1c>
 800cd56:	4407      	add	r7, r0
 800cd58:	eba8 0800 	sub.w	r8, r8, r0
 800cd5c:	e7e9      	b.n	800cd32 <__sflush_r+0xda>
 800cd5e:	bf00      	nop
 800cd60:	20400001 	.word	0x20400001

0800cd64 <_fflush_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	690b      	ldr	r3, [r1, #16]
 800cd68:	4605      	mov	r5, r0
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	b913      	cbnz	r3, 800cd74 <_fflush_r+0x10>
 800cd6e:	2500      	movs	r5, #0
 800cd70:	4628      	mov	r0, r5
 800cd72:	bd38      	pop	{r3, r4, r5, pc}
 800cd74:	b118      	cbz	r0, 800cd7e <_fflush_r+0x1a>
 800cd76:	6983      	ldr	r3, [r0, #24]
 800cd78:	b90b      	cbnz	r3, 800cd7e <_fflush_r+0x1a>
 800cd7a:	f000 f887 	bl	800ce8c <__sinit>
 800cd7e:	4b14      	ldr	r3, [pc, #80]	; (800cdd0 <_fflush_r+0x6c>)
 800cd80:	429c      	cmp	r4, r3
 800cd82:	d11b      	bne.n	800cdbc <_fflush_r+0x58>
 800cd84:	686c      	ldr	r4, [r5, #4]
 800cd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d0ef      	beq.n	800cd6e <_fflush_r+0xa>
 800cd8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd90:	07d0      	lsls	r0, r2, #31
 800cd92:	d404      	bmi.n	800cd9e <_fflush_r+0x3a>
 800cd94:	0599      	lsls	r1, r3, #22
 800cd96:	d402      	bmi.n	800cd9e <_fflush_r+0x3a>
 800cd98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd9a:	f000 f915 	bl	800cfc8 <__retarget_lock_acquire_recursive>
 800cd9e:	4628      	mov	r0, r5
 800cda0:	4621      	mov	r1, r4
 800cda2:	f7ff ff59 	bl	800cc58 <__sflush_r>
 800cda6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cda8:	07da      	lsls	r2, r3, #31
 800cdaa:	4605      	mov	r5, r0
 800cdac:	d4e0      	bmi.n	800cd70 <_fflush_r+0xc>
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	059b      	lsls	r3, r3, #22
 800cdb2:	d4dd      	bmi.n	800cd70 <_fflush_r+0xc>
 800cdb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdb6:	f000 f908 	bl	800cfca <__retarget_lock_release_recursive>
 800cdba:	e7d9      	b.n	800cd70 <_fflush_r+0xc>
 800cdbc:	4b05      	ldr	r3, [pc, #20]	; (800cdd4 <_fflush_r+0x70>)
 800cdbe:	429c      	cmp	r4, r3
 800cdc0:	d101      	bne.n	800cdc6 <_fflush_r+0x62>
 800cdc2:	68ac      	ldr	r4, [r5, #8]
 800cdc4:	e7df      	b.n	800cd86 <_fflush_r+0x22>
 800cdc6:	4b04      	ldr	r3, [pc, #16]	; (800cdd8 <_fflush_r+0x74>)
 800cdc8:	429c      	cmp	r4, r3
 800cdca:	bf08      	it	eq
 800cdcc:	68ec      	ldreq	r4, [r5, #12]
 800cdce:	e7da      	b.n	800cd86 <_fflush_r+0x22>
 800cdd0:	080112bc 	.word	0x080112bc
 800cdd4:	080112dc 	.word	0x080112dc
 800cdd8:	0801129c 	.word	0x0801129c

0800cddc <std>:
 800cddc:	2300      	movs	r3, #0
 800cdde:	b510      	push	{r4, lr}
 800cde0:	4604      	mov	r4, r0
 800cde2:	e9c0 3300 	strd	r3, r3, [r0]
 800cde6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdea:	6083      	str	r3, [r0, #8]
 800cdec:	8181      	strh	r1, [r0, #12]
 800cdee:	6643      	str	r3, [r0, #100]	; 0x64
 800cdf0:	81c2      	strh	r2, [r0, #14]
 800cdf2:	6183      	str	r3, [r0, #24]
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	2208      	movs	r2, #8
 800cdf8:	305c      	adds	r0, #92	; 0x5c
 800cdfa:	f7fd fb93 	bl	800a524 <memset>
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <std+0x38>)
 800ce00:	6263      	str	r3, [r4, #36]	; 0x24
 800ce02:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <std+0x3c>)
 800ce04:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce06:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <std+0x40>)
 800ce08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce0a:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <std+0x44>)
 800ce0c:	6224      	str	r4, [r4, #32]
 800ce0e:	6323      	str	r3, [r4, #48]	; 0x30
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	bf00      	nop
 800ce14:	0800d12d 	.word	0x0800d12d
 800ce18:	0800d14f 	.word	0x0800d14f
 800ce1c:	0800d187 	.word	0x0800d187
 800ce20:	0800d1ab 	.word	0x0800d1ab

0800ce24 <_cleanup_r>:
 800ce24:	4901      	ldr	r1, [pc, #4]	; (800ce2c <_cleanup_r+0x8>)
 800ce26:	f000 b8af 	b.w	800cf88 <_fwalk_reent>
 800ce2a:	bf00      	nop
 800ce2c:	0800cd65 	.word	0x0800cd65

0800ce30 <__sfmoreglue>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	1e4a      	subs	r2, r1, #1
 800ce34:	2568      	movs	r5, #104	; 0x68
 800ce36:	4355      	muls	r5, r2
 800ce38:	460e      	mov	r6, r1
 800ce3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce3e:	f7ff fa87 	bl	800c350 <_malloc_r>
 800ce42:	4604      	mov	r4, r0
 800ce44:	b140      	cbz	r0, 800ce58 <__sfmoreglue+0x28>
 800ce46:	2100      	movs	r1, #0
 800ce48:	e9c0 1600 	strd	r1, r6, [r0]
 800ce4c:	300c      	adds	r0, #12
 800ce4e:	60a0      	str	r0, [r4, #8]
 800ce50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce54:	f7fd fb66 	bl	800a524 <memset>
 800ce58:	4620      	mov	r0, r4
 800ce5a:	bd70      	pop	{r4, r5, r6, pc}

0800ce5c <__sfp_lock_acquire>:
 800ce5c:	4801      	ldr	r0, [pc, #4]	; (800ce64 <__sfp_lock_acquire+0x8>)
 800ce5e:	f000 b8b3 	b.w	800cfc8 <__retarget_lock_acquire_recursive>
 800ce62:	bf00      	nop
 800ce64:	20000ad4 	.word	0x20000ad4

0800ce68 <__sfp_lock_release>:
 800ce68:	4801      	ldr	r0, [pc, #4]	; (800ce70 <__sfp_lock_release+0x8>)
 800ce6a:	f000 b8ae 	b.w	800cfca <__retarget_lock_release_recursive>
 800ce6e:	bf00      	nop
 800ce70:	20000ad4 	.word	0x20000ad4

0800ce74 <__sinit_lock_acquire>:
 800ce74:	4801      	ldr	r0, [pc, #4]	; (800ce7c <__sinit_lock_acquire+0x8>)
 800ce76:	f000 b8a7 	b.w	800cfc8 <__retarget_lock_acquire_recursive>
 800ce7a:	bf00      	nop
 800ce7c:	20000acf 	.word	0x20000acf

0800ce80 <__sinit_lock_release>:
 800ce80:	4801      	ldr	r0, [pc, #4]	; (800ce88 <__sinit_lock_release+0x8>)
 800ce82:	f000 b8a2 	b.w	800cfca <__retarget_lock_release_recursive>
 800ce86:	bf00      	nop
 800ce88:	20000acf 	.word	0x20000acf

0800ce8c <__sinit>:
 800ce8c:	b510      	push	{r4, lr}
 800ce8e:	4604      	mov	r4, r0
 800ce90:	f7ff fff0 	bl	800ce74 <__sinit_lock_acquire>
 800ce94:	69a3      	ldr	r3, [r4, #24]
 800ce96:	b11b      	cbz	r3, 800cea0 <__sinit+0x14>
 800ce98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce9c:	f7ff bff0 	b.w	800ce80 <__sinit_lock_release>
 800cea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cea4:	6523      	str	r3, [r4, #80]	; 0x50
 800cea6:	4b13      	ldr	r3, [pc, #76]	; (800cef4 <__sinit+0x68>)
 800cea8:	4a13      	ldr	r2, [pc, #76]	; (800cef8 <__sinit+0x6c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	62a2      	str	r2, [r4, #40]	; 0x28
 800ceae:	42a3      	cmp	r3, r4
 800ceb0:	bf04      	itt	eq
 800ceb2:	2301      	moveq	r3, #1
 800ceb4:	61a3      	streq	r3, [r4, #24]
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 f820 	bl	800cefc <__sfp>
 800cebc:	6060      	str	r0, [r4, #4]
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 f81c 	bl	800cefc <__sfp>
 800cec4:	60a0      	str	r0, [r4, #8]
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 f818 	bl	800cefc <__sfp>
 800cecc:	2200      	movs	r2, #0
 800cece:	60e0      	str	r0, [r4, #12]
 800ced0:	2104      	movs	r1, #4
 800ced2:	6860      	ldr	r0, [r4, #4]
 800ced4:	f7ff ff82 	bl	800cddc <std>
 800ced8:	68a0      	ldr	r0, [r4, #8]
 800ceda:	2201      	movs	r2, #1
 800cedc:	2109      	movs	r1, #9
 800cede:	f7ff ff7d 	bl	800cddc <std>
 800cee2:	68e0      	ldr	r0, [r4, #12]
 800cee4:	2202      	movs	r2, #2
 800cee6:	2112      	movs	r1, #18
 800cee8:	f7ff ff78 	bl	800cddc <std>
 800ceec:	2301      	movs	r3, #1
 800ceee:	61a3      	str	r3, [r4, #24]
 800cef0:	e7d2      	b.n	800ce98 <__sinit+0xc>
 800cef2:	bf00      	nop
 800cef4:	08010f1c 	.word	0x08010f1c
 800cef8:	0800ce25 	.word	0x0800ce25

0800cefc <__sfp>:
 800cefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefe:	4607      	mov	r7, r0
 800cf00:	f7ff ffac 	bl	800ce5c <__sfp_lock_acquire>
 800cf04:	4b1e      	ldr	r3, [pc, #120]	; (800cf80 <__sfp+0x84>)
 800cf06:	681e      	ldr	r6, [r3, #0]
 800cf08:	69b3      	ldr	r3, [r6, #24]
 800cf0a:	b913      	cbnz	r3, 800cf12 <__sfp+0x16>
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	f7ff ffbd 	bl	800ce8c <__sinit>
 800cf12:	3648      	adds	r6, #72	; 0x48
 800cf14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	d503      	bpl.n	800cf24 <__sfp+0x28>
 800cf1c:	6833      	ldr	r3, [r6, #0]
 800cf1e:	b30b      	cbz	r3, 800cf64 <__sfp+0x68>
 800cf20:	6836      	ldr	r6, [r6, #0]
 800cf22:	e7f7      	b.n	800cf14 <__sfp+0x18>
 800cf24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf28:	b9d5      	cbnz	r5, 800cf60 <__sfp+0x64>
 800cf2a:	4b16      	ldr	r3, [pc, #88]	; (800cf84 <__sfp+0x88>)
 800cf2c:	60e3      	str	r3, [r4, #12]
 800cf2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf32:	6665      	str	r5, [r4, #100]	; 0x64
 800cf34:	f000 f847 	bl	800cfc6 <__retarget_lock_init_recursive>
 800cf38:	f7ff ff96 	bl	800ce68 <__sfp_lock_release>
 800cf3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf44:	6025      	str	r5, [r4, #0]
 800cf46:	61a5      	str	r5, [r4, #24]
 800cf48:	2208      	movs	r2, #8
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf50:	f7fd fae8 	bl	800a524 <memset>
 800cf54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf60:	3468      	adds	r4, #104	; 0x68
 800cf62:	e7d9      	b.n	800cf18 <__sfp+0x1c>
 800cf64:	2104      	movs	r1, #4
 800cf66:	4638      	mov	r0, r7
 800cf68:	f7ff ff62 	bl	800ce30 <__sfmoreglue>
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	6030      	str	r0, [r6, #0]
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d1d5      	bne.n	800cf20 <__sfp+0x24>
 800cf74:	f7ff ff78 	bl	800ce68 <__sfp_lock_release>
 800cf78:	230c      	movs	r3, #12
 800cf7a:	603b      	str	r3, [r7, #0]
 800cf7c:	e7ee      	b.n	800cf5c <__sfp+0x60>
 800cf7e:	bf00      	nop
 800cf80:	08010f1c 	.word	0x08010f1c
 800cf84:	ffff0001 	.word	0xffff0001

0800cf88 <_fwalk_reent>:
 800cf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	4688      	mov	r8, r1
 800cf90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf94:	2700      	movs	r7, #0
 800cf96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf9a:	f1b9 0901 	subs.w	r9, r9, #1
 800cf9e:	d505      	bpl.n	800cfac <_fwalk_reent+0x24>
 800cfa0:	6824      	ldr	r4, [r4, #0]
 800cfa2:	2c00      	cmp	r4, #0
 800cfa4:	d1f7      	bne.n	800cf96 <_fwalk_reent+0xe>
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfac:	89ab      	ldrh	r3, [r5, #12]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d907      	bls.n	800cfc2 <_fwalk_reent+0x3a>
 800cfb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	d003      	beq.n	800cfc2 <_fwalk_reent+0x3a>
 800cfba:	4629      	mov	r1, r5
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	47c0      	blx	r8
 800cfc0:	4307      	orrs	r7, r0
 800cfc2:	3568      	adds	r5, #104	; 0x68
 800cfc4:	e7e9      	b.n	800cf9a <_fwalk_reent+0x12>

0800cfc6 <__retarget_lock_init_recursive>:
 800cfc6:	4770      	bx	lr

0800cfc8 <__retarget_lock_acquire_recursive>:
 800cfc8:	4770      	bx	lr

0800cfca <__retarget_lock_release_recursive>:
 800cfca:	4770      	bx	lr

0800cfcc <__swhatbuf_r>:
 800cfcc:	b570      	push	{r4, r5, r6, lr}
 800cfce:	460e      	mov	r6, r1
 800cfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd4:	2900      	cmp	r1, #0
 800cfd6:	b096      	sub	sp, #88	; 0x58
 800cfd8:	4614      	mov	r4, r2
 800cfda:	461d      	mov	r5, r3
 800cfdc:	da07      	bge.n	800cfee <__swhatbuf_r+0x22>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	602b      	str	r3, [r5, #0]
 800cfe2:	89b3      	ldrh	r3, [r6, #12]
 800cfe4:	061a      	lsls	r2, r3, #24
 800cfe6:	d410      	bmi.n	800d00a <__swhatbuf_r+0x3e>
 800cfe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfec:	e00e      	b.n	800d00c <__swhatbuf_r+0x40>
 800cfee:	466a      	mov	r2, sp
 800cff0:	f000 f902 	bl	800d1f8 <_fstat_r>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	dbf2      	blt.n	800cfde <__swhatbuf_r+0x12>
 800cff8:	9a01      	ldr	r2, [sp, #4]
 800cffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d002:	425a      	negs	r2, r3
 800d004:	415a      	adcs	r2, r3
 800d006:	602a      	str	r2, [r5, #0]
 800d008:	e7ee      	b.n	800cfe8 <__swhatbuf_r+0x1c>
 800d00a:	2340      	movs	r3, #64	; 0x40
 800d00c:	2000      	movs	r0, #0
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	b016      	add	sp, #88	; 0x58
 800d012:	bd70      	pop	{r4, r5, r6, pc}

0800d014 <__smakebuf_r>:
 800d014:	898b      	ldrh	r3, [r1, #12]
 800d016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d018:	079d      	lsls	r5, r3, #30
 800d01a:	4606      	mov	r6, r0
 800d01c:	460c      	mov	r4, r1
 800d01e:	d507      	bpl.n	800d030 <__smakebuf_r+0x1c>
 800d020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	6123      	str	r3, [r4, #16]
 800d028:	2301      	movs	r3, #1
 800d02a:	6163      	str	r3, [r4, #20]
 800d02c:	b002      	add	sp, #8
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	ab01      	add	r3, sp, #4
 800d032:	466a      	mov	r2, sp
 800d034:	f7ff ffca 	bl	800cfcc <__swhatbuf_r>
 800d038:	9900      	ldr	r1, [sp, #0]
 800d03a:	4605      	mov	r5, r0
 800d03c:	4630      	mov	r0, r6
 800d03e:	f7ff f987 	bl	800c350 <_malloc_r>
 800d042:	b948      	cbnz	r0, 800d058 <__smakebuf_r+0x44>
 800d044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d048:	059a      	lsls	r2, r3, #22
 800d04a:	d4ef      	bmi.n	800d02c <__smakebuf_r+0x18>
 800d04c:	f023 0303 	bic.w	r3, r3, #3
 800d050:	f043 0302 	orr.w	r3, r3, #2
 800d054:	81a3      	strh	r3, [r4, #12]
 800d056:	e7e3      	b.n	800d020 <__smakebuf_r+0xc>
 800d058:	4b0d      	ldr	r3, [pc, #52]	; (800d090 <__smakebuf_r+0x7c>)
 800d05a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	6020      	str	r0, [r4, #0]
 800d060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d064:	81a3      	strh	r3, [r4, #12]
 800d066:	9b00      	ldr	r3, [sp, #0]
 800d068:	6163      	str	r3, [r4, #20]
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	6120      	str	r0, [r4, #16]
 800d06e:	b15b      	cbz	r3, 800d088 <__smakebuf_r+0x74>
 800d070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d074:	4630      	mov	r0, r6
 800d076:	f000 f8d1 	bl	800d21c <_isatty_r>
 800d07a:	b128      	cbz	r0, 800d088 <__smakebuf_r+0x74>
 800d07c:	89a3      	ldrh	r3, [r4, #12]
 800d07e:	f023 0303 	bic.w	r3, r3, #3
 800d082:	f043 0301 	orr.w	r3, r3, #1
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	89a0      	ldrh	r0, [r4, #12]
 800d08a:	4305      	orrs	r5, r0
 800d08c:	81a5      	strh	r5, [r4, #12]
 800d08e:	e7cd      	b.n	800d02c <__smakebuf_r+0x18>
 800d090:	0800ce25 	.word	0x0800ce25

0800d094 <_malloc_usable_size_r>:
 800d094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d098:	1f18      	subs	r0, r3, #4
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	bfbc      	itt	lt
 800d09e:	580b      	ldrlt	r3, [r1, r0]
 800d0a0:	18c0      	addlt	r0, r0, r3
 800d0a2:	4770      	bx	lr

0800d0a4 <_raise_r>:
 800d0a4:	291f      	cmp	r1, #31
 800d0a6:	b538      	push	{r3, r4, r5, lr}
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	d904      	bls.n	800d0b8 <_raise_r+0x14>
 800d0ae:	2316      	movs	r3, #22
 800d0b0:	6003      	str	r3, [r0, #0]
 800d0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0ba:	b112      	cbz	r2, 800d0c2 <_raise_r+0x1e>
 800d0bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0c0:	b94b      	cbnz	r3, 800d0d6 <_raise_r+0x32>
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f000 f830 	bl	800d128 <_getpid_r>
 800d0c8:	462a      	mov	r2, r5
 800d0ca:	4601      	mov	r1, r0
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0d2:	f000 b817 	b.w	800d104 <_kill_r>
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d00a      	beq.n	800d0f0 <_raise_r+0x4c>
 800d0da:	1c59      	adds	r1, r3, #1
 800d0dc:	d103      	bne.n	800d0e6 <_raise_r+0x42>
 800d0de:	2316      	movs	r3, #22
 800d0e0:	6003      	str	r3, [r0, #0]
 800d0e2:	2001      	movs	r0, #1
 800d0e4:	e7e7      	b.n	800d0b6 <_raise_r+0x12>
 800d0e6:	2400      	movs	r4, #0
 800d0e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	4798      	blx	r3
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	e7e0      	b.n	800d0b6 <_raise_r+0x12>

0800d0f4 <raise>:
 800d0f4:	4b02      	ldr	r3, [pc, #8]	; (800d100 <raise+0xc>)
 800d0f6:	4601      	mov	r1, r0
 800d0f8:	6818      	ldr	r0, [r3, #0]
 800d0fa:	f7ff bfd3 	b.w	800d0a4 <_raise_r>
 800d0fe:	bf00      	nop
 800d100:	20000314 	.word	0x20000314

0800d104 <_kill_r>:
 800d104:	b538      	push	{r3, r4, r5, lr}
 800d106:	4d07      	ldr	r5, [pc, #28]	; (800d124 <_kill_r+0x20>)
 800d108:	2300      	movs	r3, #0
 800d10a:	4604      	mov	r4, r0
 800d10c:	4608      	mov	r0, r1
 800d10e:	4611      	mov	r1, r2
 800d110:	602b      	str	r3, [r5, #0]
 800d112:	f000 f907 	bl	800d324 <_kill>
 800d116:	1c43      	adds	r3, r0, #1
 800d118:	d102      	bne.n	800d120 <_kill_r+0x1c>
 800d11a:	682b      	ldr	r3, [r5, #0]
 800d11c:	b103      	cbz	r3, 800d120 <_kill_r+0x1c>
 800d11e:	6023      	str	r3, [r4, #0]
 800d120:	bd38      	pop	{r3, r4, r5, pc}
 800d122:	bf00      	nop
 800d124:	20000ac8 	.word	0x20000ac8

0800d128 <_getpid_r>:
 800d128:	f000 b8ec 	b.w	800d304 <_getpid>

0800d12c <__sread>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	460c      	mov	r4, r1
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	f000 f894 	bl	800d260 <_read_r>
 800d138:	2800      	cmp	r0, #0
 800d13a:	bfab      	itete	ge
 800d13c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d13e:	89a3      	ldrhlt	r3, [r4, #12]
 800d140:	181b      	addge	r3, r3, r0
 800d142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d146:	bfac      	ite	ge
 800d148:	6563      	strge	r3, [r4, #84]	; 0x54
 800d14a:	81a3      	strhlt	r3, [r4, #12]
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <__swrite>:
 800d14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	461f      	mov	r7, r3
 800d154:	898b      	ldrh	r3, [r1, #12]
 800d156:	05db      	lsls	r3, r3, #23
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	4616      	mov	r6, r2
 800d15e:	d505      	bpl.n	800d16c <__swrite+0x1e>
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	2302      	movs	r3, #2
 800d166:	2200      	movs	r2, #0
 800d168:	f000 f868 	bl	800d23c <_lseek_r>
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d176:	81a3      	strh	r3, [r4, #12]
 800d178:	4632      	mov	r2, r6
 800d17a:	463b      	mov	r3, r7
 800d17c:	4628      	mov	r0, r5
 800d17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	f000 b817 	b.w	800d1b4 <_write_r>

0800d186 <__sseek>:
 800d186:	b510      	push	{r4, lr}
 800d188:	460c      	mov	r4, r1
 800d18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18e:	f000 f855 	bl	800d23c <_lseek_r>
 800d192:	1c43      	adds	r3, r0, #1
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	bf15      	itete	ne
 800d198:	6560      	strne	r0, [r4, #84]	; 0x54
 800d19a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d19e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1a2:	81a3      	strheq	r3, [r4, #12]
 800d1a4:	bf18      	it	ne
 800d1a6:	81a3      	strhne	r3, [r4, #12]
 800d1a8:	bd10      	pop	{r4, pc}

0800d1aa <__sclose>:
 800d1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ae:	f000 b813 	b.w	800d1d8 <_close_r>
	...

0800d1b4 <_write_r>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4d07      	ldr	r5, [pc, #28]	; (800d1d4 <_write_r+0x20>)
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	4608      	mov	r0, r1
 800d1bc:	4611      	mov	r1, r2
 800d1be:	2200      	movs	r2, #0
 800d1c0:	602a      	str	r2, [r5, #0]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	f000 f8d4 	bl	800d370 <_write>
 800d1c8:	1c43      	adds	r3, r0, #1
 800d1ca:	d102      	bne.n	800d1d2 <_write_r+0x1e>
 800d1cc:	682b      	ldr	r3, [r5, #0]
 800d1ce:	b103      	cbz	r3, 800d1d2 <_write_r+0x1e>
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	bd38      	pop	{r3, r4, r5, pc}
 800d1d4:	20000ac8 	.word	0x20000ac8

0800d1d8 <_close_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4d06      	ldr	r5, [pc, #24]	; (800d1f4 <_close_r+0x1c>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4604      	mov	r4, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	602b      	str	r3, [r5, #0]
 800d1e4:	f000 f87e 	bl	800d2e4 <_close>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_close_r+0x1a>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_close_r+0x1a>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	20000ac8 	.word	0x20000ac8

0800d1f8 <_fstat_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d07      	ldr	r5, [pc, #28]	; (800d218 <_fstat_r+0x20>)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	4608      	mov	r0, r1
 800d202:	4611      	mov	r1, r2
 800d204:	602b      	str	r3, [r5, #0]
 800d206:	f000 f875 	bl	800d2f4 <_fstat>
 800d20a:	1c43      	adds	r3, r0, #1
 800d20c:	d102      	bne.n	800d214 <_fstat_r+0x1c>
 800d20e:	682b      	ldr	r3, [r5, #0]
 800d210:	b103      	cbz	r3, 800d214 <_fstat_r+0x1c>
 800d212:	6023      	str	r3, [r4, #0]
 800d214:	bd38      	pop	{r3, r4, r5, pc}
 800d216:	bf00      	nop
 800d218:	20000ac8 	.word	0x20000ac8

0800d21c <_isatty_r>:
 800d21c:	b538      	push	{r3, r4, r5, lr}
 800d21e:	4d06      	ldr	r5, [pc, #24]	; (800d238 <_isatty_r+0x1c>)
 800d220:	2300      	movs	r3, #0
 800d222:	4604      	mov	r4, r0
 800d224:	4608      	mov	r0, r1
 800d226:	602b      	str	r3, [r5, #0]
 800d228:	f000 f874 	bl	800d314 <_isatty>
 800d22c:	1c43      	adds	r3, r0, #1
 800d22e:	d102      	bne.n	800d236 <_isatty_r+0x1a>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	b103      	cbz	r3, 800d236 <_isatty_r+0x1a>
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	bd38      	pop	{r3, r4, r5, pc}
 800d238:	20000ac8 	.word	0x20000ac8

0800d23c <_lseek_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d07      	ldr	r5, [pc, #28]	; (800d25c <_lseek_r+0x20>)
 800d240:	4604      	mov	r4, r0
 800d242:	4608      	mov	r0, r1
 800d244:	4611      	mov	r1, r2
 800d246:	2200      	movs	r2, #0
 800d248:	602a      	str	r2, [r5, #0]
 800d24a:	461a      	mov	r2, r3
 800d24c:	f000 f872 	bl	800d334 <_lseek>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	d102      	bne.n	800d25a <_lseek_r+0x1e>
 800d254:	682b      	ldr	r3, [r5, #0]
 800d256:	b103      	cbz	r3, 800d25a <_lseek_r+0x1e>
 800d258:	6023      	str	r3, [r4, #0]
 800d25a:	bd38      	pop	{r3, r4, r5, pc}
 800d25c:	20000ac8 	.word	0x20000ac8

0800d260 <_read_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4d07      	ldr	r5, [pc, #28]	; (800d280 <_read_r+0x20>)
 800d264:	4604      	mov	r4, r0
 800d266:	4608      	mov	r0, r1
 800d268:	4611      	mov	r1, r2
 800d26a:	2200      	movs	r2, #0
 800d26c:	602a      	str	r2, [r5, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	f000 f868 	bl	800d344 <_read>
 800d274:	1c43      	adds	r3, r0, #1
 800d276:	d102      	bne.n	800d27e <_read_r+0x1e>
 800d278:	682b      	ldr	r3, [r5, #0]
 800d27a:	b103      	cbz	r3, 800d27e <_read_r+0x1e>
 800d27c:	6023      	str	r3, [r4, #0]
 800d27e:	bd38      	pop	{r3, r4, r5, pc}
 800d280:	20000ac8 	.word	0x20000ac8

0800d284 <sqrtf>:
 800d284:	b508      	push	{r3, lr}
 800d286:	ed2d 8b02 	vpush	{d8}
 800d28a:	eeb0 8a40 	vmov.f32	s16, s0
 800d28e:	f000 f81f 	bl	800d2d0 <__ieee754_sqrtf>
 800d292:	4b0d      	ldr	r3, [pc, #52]	; (800d2c8 <sqrtf+0x44>)
 800d294:	f993 3000 	ldrsb.w	r3, [r3]
 800d298:	3301      	adds	r3, #1
 800d29a:	d011      	beq.n	800d2c0 <sqrtf+0x3c>
 800d29c:	eeb4 8a48 	vcmp.f32	s16, s16
 800d2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a4:	d60c      	bvs.n	800d2c0 <sqrtf+0x3c>
 800d2a6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800d2cc <sqrtf+0x48>
 800d2aa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b2:	d505      	bpl.n	800d2c0 <sqrtf+0x3c>
 800d2b4:	f000 f810 	bl	800d2d8 <__errno>
 800d2b8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d2bc:	2321      	movs	r3, #33	; 0x21
 800d2be:	6003      	str	r3, [r0, #0]
 800d2c0:	ecbd 8b02 	vpop	{d8}
 800d2c4:	bd08      	pop	{r3, pc}
 800d2c6:	bf00      	nop
 800d2c8:	200004e4 	.word	0x200004e4
 800d2cc:	00000000 	.word	0x00000000

0800d2d0 <__ieee754_sqrtf>:
 800d2d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d2d4:	4770      	bx	lr
	...

0800d2d8 <__errno>:
 800d2d8:	4b01      	ldr	r3, [pc, #4]	; (800d2e0 <__errno+0x8>)
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	20000314 	.word	0x20000314

0800d2e4 <_close>:
 800d2e4:	4b02      	ldr	r3, [pc, #8]	; (800d2f0 <_close+0xc>)
 800d2e6:	2258      	movs	r2, #88	; 0x58
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ee:	4770      	bx	lr
 800d2f0:	20000ac8 	.word	0x20000ac8

0800d2f4 <_fstat>:
 800d2f4:	4b02      	ldr	r3, [pc, #8]	; (800d300 <_fstat+0xc>)
 800d2f6:	2258      	movs	r2, #88	; 0x58
 800d2f8:	601a      	str	r2, [r3, #0]
 800d2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fe:	4770      	bx	lr
 800d300:	20000ac8 	.word	0x20000ac8

0800d304 <_getpid>:
 800d304:	4b02      	ldr	r3, [pc, #8]	; (800d310 <_getpid+0xc>)
 800d306:	2258      	movs	r2, #88	; 0x58
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	f04f 30ff 	mov.w	r0, #4294967295
 800d30e:	4770      	bx	lr
 800d310:	20000ac8 	.word	0x20000ac8

0800d314 <_isatty>:
 800d314:	4b02      	ldr	r3, [pc, #8]	; (800d320 <_isatty+0xc>)
 800d316:	2258      	movs	r2, #88	; 0x58
 800d318:	601a      	str	r2, [r3, #0]
 800d31a:	2000      	movs	r0, #0
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	20000ac8 	.word	0x20000ac8

0800d324 <_kill>:
 800d324:	4b02      	ldr	r3, [pc, #8]	; (800d330 <_kill+0xc>)
 800d326:	2258      	movs	r2, #88	; 0x58
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	f04f 30ff 	mov.w	r0, #4294967295
 800d32e:	4770      	bx	lr
 800d330:	20000ac8 	.word	0x20000ac8

0800d334 <_lseek>:
 800d334:	4b02      	ldr	r3, [pc, #8]	; (800d340 <_lseek+0xc>)
 800d336:	2258      	movs	r2, #88	; 0x58
 800d338:	601a      	str	r2, [r3, #0]
 800d33a:	f04f 30ff 	mov.w	r0, #4294967295
 800d33e:	4770      	bx	lr
 800d340:	20000ac8 	.word	0x20000ac8

0800d344 <_read>:
 800d344:	4b02      	ldr	r3, [pc, #8]	; (800d350 <_read+0xc>)
 800d346:	2258      	movs	r2, #88	; 0x58
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	f04f 30ff 	mov.w	r0, #4294967295
 800d34e:	4770      	bx	lr
 800d350:	20000ac8 	.word	0x20000ac8

0800d354 <_sbrk>:
 800d354:	4b04      	ldr	r3, [pc, #16]	; (800d368 <_sbrk+0x14>)
 800d356:	6819      	ldr	r1, [r3, #0]
 800d358:	4602      	mov	r2, r0
 800d35a:	b909      	cbnz	r1, 800d360 <_sbrk+0xc>
 800d35c:	4903      	ldr	r1, [pc, #12]	; (800d36c <_sbrk+0x18>)
 800d35e:	6019      	str	r1, [r3, #0]
 800d360:	6818      	ldr	r0, [r3, #0]
 800d362:	4402      	add	r2, r0
 800d364:	601a      	str	r2, [r3, #0]
 800d366:	4770      	bx	lr
 800d368:	20000900 	.word	0x20000900
 800d36c:	20000ad8 	.word	0x20000ad8

0800d370 <_write>:
 800d370:	4b02      	ldr	r3, [pc, #8]	; (800d37c <_write+0xc>)
 800d372:	2258      	movs	r2, #88	; 0x58
 800d374:	601a      	str	r2, [r3, #0]
 800d376:	f04f 30ff 	mov.w	r0, #4294967295
 800d37a:	4770      	bx	lr
 800d37c:	20000ac8 	.word	0x20000ac8

0800d380 <_exit>:
 800d380:	e7fe      	b.n	800d380 <_exit>
	...

0800d384 <_init>:
 800d384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d386:	bf00      	nop
 800d388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d38a:	bc08      	pop	{r3}
 800d38c:	469e      	mov	lr, r3
 800d38e:	4770      	bx	lr

0800d390 <_fini>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr
