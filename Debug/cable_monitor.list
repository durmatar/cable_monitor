
cable_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f194  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004500  0800f348  0800f348  0001f348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013848  08013848  00030484  2**0
                  CONTENTS
  4 .ARM          00000008  08013848  08013848  00023848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013850  08013850  00030484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013850  08013850  00023850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013854  08013854  00023854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  08013858  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000484  08013cdc  00030484  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  08013cdc  00030a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030484  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c0c  00000000  00000000  000304b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003849  00000000  00000000  000490c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0004c910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0004dd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027165  00000000  00000000  0004f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018977  00000000  00000000  000761ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df63c  00000000  00000000  0008eb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e1a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d28  00000000  00000000  0016e1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00174f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00174fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000484 	.word	0x20000484
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f32c 	.word	0x0800f32c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000488 	.word	0x20000488
 80001ec:	0800f32c 	.word	0x0800f32c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <CALC_Angle>:
 *****************************************************************************/

/** ***************************************************************************
 * @brief Calculate Angle with three sides input
 *****************************************************************************/
float CALC_Angle(float a, float b, float c){
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	ed2d 8b02 	vpush	{d8}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f72:	ed87 1a01 	vstr	s2, [r7, #4]
	// Calculate angle alpha from sides
	float alpha = acosf((b*b+c*c-a*a)/(2*b*c));
 8000f76:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000faa:	eeb0 0a66 	vmov.f32	s0, s13
 8000fae:	f00c f9e3 	bl	800d378 <acosf>
 8000fb2:	ed87 0a05 	vstr	s0, [r7, #20]

	// Reduce triangle
	c = c/2;
 8000fb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc2:	edc7 7a01 	vstr	s15, [r7, #4]
	a = sqrtf(b*b+c*c-2*b*c*cosf(alpha));
 8000fc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000fd6:	ee37 8a27 	vadd.f32	s16, s14, s15
 8000fda:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fde:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe6:	ee67 8a27 	vmul.f32	s17, s14, s15
 8000fea:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fee:	f00c f983 	bl	800d2f8 <cosf>
 8000ff2:	eef0 7a40 	vmov.f32	s15, s0
 8000ff6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000ffa:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8001002:	f00c fa1d 	bl	800d440 <sqrtf>
 8001006:	ed87 0a03 	vstr	s0, [r7, #12]

	// Calculate searched angle
	float x = asinf((b*sin(alpha))/(a));
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f7ff faac 	bl	8000568 <__aeabi_f2d>
 8001010:	4604      	mov	r4, r0
 8001012:	460d      	mov	r5, r1
 8001014:	6978      	ldr	r0, [r7, #20]
 8001016:	f7ff faa7 	bl	8000568 <__aeabi_f2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	ec43 2b10 	vmov	d0, r2, r3
 8001022:	f00c f915 	bl	800d250 <sin>
 8001026:	ec53 2b10 	vmov	r2, r3, d0
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff faf3 	bl	8000618 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4614      	mov	r4, r2
 8001038:	461d      	mov	r5, r3
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fa94 	bl	8000568 <__aeabi_f2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff fc10 	bl	800086c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb8 	bl	8000bc8 <__aeabi_d2f>
 8001058:	4603      	mov	r3, r0
 800105a:	ee00 3a10 	vmov	s0, r3
 800105e:	f00c f9bd 	bl	800d3dc <asinf>
 8001062:	ed87 0a04 	vstr	s0, [r7, #16]

	//translate to correct system
	x = x-90;
 8001066:	edd7 7a04 	vldr	s15, [r7, #16]
 800106a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800108c <CALC_Angle+0x12c>
 800106e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001072:	edc7 7a04 	vstr	s15, [r7, #16]

	return x;
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	ee07 3a90 	vmov	s15, r3
}
 800107c:	eeb0 0a67 	vmov.f32	s0, s15
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	ecbd 8b02 	vpop	{d8}
 8001088:	bdb0      	pop	{r4, r5, r7, pc}
 800108a:	bf00      	nop
 800108c:	42b40000 	.word	0x42b40000

08001090 <CALC_ElCurrent>:
/** ***************************************************************************
 * @brief Calculate electrical current from magnetic field
 * distance[m] amplitude[1]
 * return current[A]
 *****************************************************************************/
float CALC_ElCurrent(float amplitude, float distance){
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	ed87 0a01 	vstr	s0, [r7, #4]
 800109a:	edc7 0a00 	vstr	s1, [r7]
	float I,B;
	// Calculate electro-magnetic field strength
	B = (((amplitude*CALC_ADCVOLTRESOLUTION)/CALC_AMPOPAMP)/CALC_AMPHALLSENS);
 800109e:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80010ec <CALC_ElCurrent+0x5c>
 80010a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010aa:	eddf 6a11 	vldr	s13, [pc, #68]	; 80010f0 <CALC_ElCurrent+0x60>
 80010ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b2:	eddf 6a10 	vldr	s13, [pc, #64]	; 80010f4 <CALC_ElCurrent+0x64>
 80010b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ba:	edc7 7a03 	vstr	s15, [r7, #12]

	// Calculate current
	I = CALC_PIDANDPERM*(distance/B);
 80010be:	edd7 6a00 	vldr	s13, [r7]
 80010c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ca:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80010f8 <CALC_ElCurrent+0x68>
 80010ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d2:	edc7 7a02 	vstr	s15, [r7, #8]

	//return current
	return I;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	ee07 3a90 	vmov	s15, r3
}
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	3a533333 	.word	0x3a533333
 80010f0:	42be0000 	.word	0x42be0000
 80010f4:	42b40000 	.word	0x42b40000
 80010f8:	4a988b39 	.word	0x4a988b39

080010fc <CALC_Distance>:


/** ***************************************************************************
 * @brief Calculate distance
 *****************************************************************************/
float CALC_Distance(float* lutDistance, float* lutStrenght, float measurement){
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	ed87 0a01 	vstr	s0, [r7, #4]
	int t,d,s;
	float distance = -1;
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <CALC_Distance+0x17c>)
 800110c:	61bb      	str	r3, [r7, #24]
	t=0;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
	s=-10;
 8001112:	f06f 0309 	mvn.w	r3, #9
 8001116:	61fb      	str	r3, [r7, #28]
	d=-10;
 8001118:	f06f 0309 	mvn.w	r3, #9
 800111c:	623b      	str	r3, [r7, #32]

	// Catch to high and to low values
	if((lutStrenght[CALC_LUTSIZE-1]>measurement)|(measurement>lutStrenght[0])){
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3318      	adds	r3, #24
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ed97 7a01 	vldr	s14, [r7, #4]
 800112a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	bf4c      	ite	mi
 8001134:	2301      	movmi	r3, #1
 8001136:	2300      	movpl	r3, #0
 8001138:	b2da      	uxtb	r2, r3
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ed97 7a01 	vldr	s14, [r7, #4]
 8001144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	bfcc      	ite	gt
 800114e:	2301      	movgt	r3, #1
 8001150:	2300      	movle	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <CALC_Distance+0x64>
		return 5000;
 800115c:	4b47      	ldr	r3, [pc, #284]	; (800127c <CALC_Distance+0x180>)
 800115e:	e081      	b.n	8001264 <CALC_Distance+0x168>
	}

	for(int i=0; i < CALC_LUTSIZE ; i++ ){
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e032      	b.n	80011cc <CALC_Distance+0xd0>
		if (measurement == lutStrenght[i]){
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ed97 7a01 	vldr	s14, [r7, #4]
 8001176:	eeb4 7a67 	vcmp.f32	s14, s15
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d103      	bne.n	8001188 <CALC_Distance+0x8c>
			t = i;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
			s=t;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	61fb      	str	r3, [r7, #28]
		}
		if ( (measurement < lutStrenght[i])&& (measurement > lutStrenght[i+1])){
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	4413      	add	r3, r2
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ed97 7a01 	vldr	s14, [r7, #4]
 8001198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d511      	bpl.n	80011c6 <CALC_Distance+0xca>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	4413      	add	r3, r2
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	dd03      	ble.n	80011c6 <CALC_Distance+0xca>
			t = i;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
			d=t;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	623b      	str	r3, [r7, #32]
	for(int i=0; i < CALC_LUTSIZE ; i++ ){
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	ddc9      	ble.n	8001166 <CALC_Distance+0x6a>
		}
	}

	if(t==d){
 80011d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d139      	bne.n	800124e <CALC_Distance+0x152>
		float a = (lutDistance[t+1]-lutDistance[t])/(lutStrenght[t+1]-lutStrenght[t]);
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	3301      	adds	r3, #1
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	ed93 7a00 	vldr	s14, [r3]
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	3301      	adds	r3, #1
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	4413      	add	r3, r2
 8001202:	ed93 7a00 	vldr	s14, [r3]
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121a:	edc7 7a04 	vstr	s15, [r7, #16]
		distance = a*(measurement-lutStrenght[t]) + lutStrenght[t];
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ed97 7a01 	vldr	s14, [r7, #4]
 800122e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001232:	edd7 7a04 	vldr	s15, [r7, #16]
 8001236:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124a:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	if(t==s){
 800124e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	429a      	cmp	r2, r3
 8001254:	d105      	bne.n	8001262 <CALC_Distance+0x166>
		distance = lutDistance[t];
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
	}

	return distance;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	372c      	adds	r7, #44	; 0x2c
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	bf800000 	.word	0xbf800000
 800127c:	459c4000 	.word	0x459c4000

08001280 <CALC_DistanceMode>:


/** ***************************************************************************
 * @brief Calculate distance from measurement input and mode setting
 *****************************************************************************/
float CALC_DistanceMode(float measurement, uint16_t mode, bool right){
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
	float distance;
	float* lut;
	// Select left or right
	if (right) {
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <CALC_DistanceMode+0x26>
		lut = CALC_wpcRight[mode];
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <CALC_DistanceMode+0x50>)
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e004      	b.n	80012b0 <CALC_DistanceMode+0x30>
	} else {
		lut = CALC_wpcLeft[mode];
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <CALC_DistanceMode+0x54>)
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	60fb      	str	r3, [r7, #12]
	}
	// Calculate distance with correct mode
	distance = CALC_Distance(CALC_distanceLUT, lut, measurement);
 80012b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80012b4:	68f9      	ldr	r1, [r7, #12]
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <CALC_DistanceMode+0x58>)
 80012b8:	f7ff ff20 	bl	80010fc <CALC_Distance>
 80012bc:	ed87 0a02 	vstr	s0, [r7, #8]

	return distance;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	ee07 3a90 	vmov	s15, r3
}
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000d8 	.word	0x200000d8
 80012d4:	200000cc 	.word	0x200000cc
 80012d8:	20000008 	.word	0x20000008

080012dc <ANA_Handler>:


/** ***************************************************************************
 * @brief Analytics handler
 *****************************************************************************/
void ANA_Handler(void){
 80012dc:	b5b0      	push	{r4, r5, r7, lr}
 80012de:	b092      	sub	sp, #72	; 0x48
 80012e0:	af00      	add	r7, sp, #0
	//start measurement with button input
	if (ANA_inBtn & !ANA_measBusy) {
 80012e2:	4b81      	ldr	r3, [pc, #516]	; (80014e8 <ANA_Handler+0x20c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b80      	ldr	r3, [pc, #512]	; (80014ec <ANA_Handler+0x210>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f083 0301 	eor.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <ANA_Handler+0x28>
		ANA_measBusy = true;
 80012f8:	4b7c      	ldr	r3, [pc, #496]	; (80014ec <ANA_Handler+0x210>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
		ANA_inBtn = false;
 80012fe:	4b7a      	ldr	r3, [pc, #488]	; (80014e8 <ANA_Handler+0x20c>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
	}

	//collect data
	if (ANA_wpcBusy & ANA_inMeasReady) {
 8001304:	4b7a      	ldr	r3, [pc, #488]	; (80014f0 <ANA_Handler+0x214>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <ANA_Handler+0x218>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01a      	beq.n	800134a <ANA_Handler+0x6e>
		ANA_wpcLeft[ANA_cycle]=(float)ANA_inAmpLeft;
 8001314:	4b78      	ldr	r3, [pc, #480]	; (80014f8 <ANA_Handler+0x21c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b78      	ldr	r3, [pc, #480]	; (80014fc <ANA_Handler+0x220>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	ee07 2a90 	vmov	s15, r2
 8001320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001324:	4a76      	ldr	r2, [pc, #472]	; (8001500 <ANA_Handler+0x224>)
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	edc3 7a00 	vstr	s15, [r3]
		ANA_wpcRight[ANA_cycle]=(float)ANA_inAmpRight;
 800132e:	4b75      	ldr	r3, [pc, #468]	; (8001504 <ANA_Handler+0x228>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b72      	ldr	r3, [pc, #456]	; (80014fc <ANA_Handler+0x220>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	ee07 2a90 	vmov	s15, r2
 800133a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <ANA_Handler+0x22c>)
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	edc3 7a00 	vstr	s15, [r3]
 8001348:	e021      	b.n	800138e <ANA_Handler+0xb2>
	} else if (ANA_hallBusy & ANA_inMeasReady){
 800134a:	4b70      	ldr	r3, [pc, #448]	; (800150c <ANA_Handler+0x230>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <ANA_Handler+0x218>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d019      	beq.n	800138e <ANA_Handler+0xb2>
		ANA_hallLeft[ANA_cycle]=(float)ANA_inAmpLeft;
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <ANA_Handler+0x21c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b67      	ldr	r3, [pc, #412]	; (80014fc <ANA_Handler+0x220>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	ee07 2a90 	vmov	s15, r2
 8001366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136a:	4a69      	ldr	r2, [pc, #420]	; (8001510 <ANA_Handler+0x234>)
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	edc3 7a00 	vstr	s15, [r3]
		ANA_hallRight[ANA_cycle]=(float)ANA_inAmpRight;
 8001374:	4b63      	ldr	r3, [pc, #396]	; (8001504 <ANA_Handler+0x228>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b60      	ldr	r3, [pc, #384]	; (80014fc <ANA_Handler+0x220>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	ee07 2a90 	vmov	s15, r2
 8001380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001384:	4a63      	ldr	r2, [pc, #396]	; (8001514 <ANA_Handler+0x238>)
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	edc3 7a00 	vstr	s15, [r3]
	}

	//while meas busy, start measurements
	if (ANA_measBusy){
 800138e:	4b57      	ldr	r3, [pc, #348]	; (80014ec <ANA_Handler+0x210>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d041      	beq.n	800141a <ANA_Handler+0x13e>
		//start wpc
		if ((ANA_cycle < ANA_inOptn[3])&(!ANA_wpcBusy)&(!ANA_hallBusy)) {
 8001396:	4b60      	ldr	r3, [pc, #384]	; (8001518 <ANA_Handler+0x23c>)
 8001398:	88da      	ldrh	r2, [r3, #6]
 800139a:	4b58      	ldr	r3, [pc, #352]	; (80014fc <ANA_Handler+0x220>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	bf8c      	ite	hi
 80013a2:	2301      	movhi	r3, #1
 80013a4:	2300      	movls	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <ANA_Handler+0x214>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f083 0301 	eor.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	4a55      	ldr	r2, [pc, #340]	; (800150c <ANA_Handler+0x230>)
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	f082 0201 	eor.w	r2, r2, #1
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <ANA_Handler+0xf8>
			ANA_outStartWPC = true;
 80013c6:	4b55      	ldr	r3, [pc, #340]	; (800151c <ANA_Handler+0x240>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
			ANA_wpcBusy = true;
 80013cc:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <ANA_Handler+0x214>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	e022      	b.n	800141a <ANA_Handler+0x13e>
		//start hall
		} else if (ANA_wpcBusy & ANA_inMeasReady){
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <ANA_Handler+0x214>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <ANA_Handler+0x218>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d009      	beq.n	80013f8 <ANA_Handler+0x11c>
			ANA_outStartHALL = true;
 80013e4:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <ANA_Handler+0x244>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
			ANA_wpcBusy = false;
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <ANA_Handler+0x214>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
			ANA_hallBusy = true;
 80013f0:	4b46      	ldr	r3, [pc, #280]	; (800150c <ANA_Handler+0x230>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e010      	b.n	800141a <ANA_Handler+0x13e>
		} else if (ANA_hallBusy & ANA_inMeasReady){
 80013f8:	4b44      	ldr	r3, [pc, #272]	; (800150c <ANA_Handler+0x230>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <ANA_Handler+0x218>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <ANA_Handler+0x13e>
			ANA_hallBusy = false;
 8001408:	4b40      	ldr	r3, [pc, #256]	; (800150c <ANA_Handler+0x230>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			ANA_cycle ++;
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <ANA_Handler+0x220>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <ANA_Handler+0x220>)
 8001418:	801a      	strh	r2, [r3, #0]
		}
	}

	//When cycles finished or in continuous mode and single cycle is completed
	if ((ANA_cycle == ANA_inOptn[3])&(!ANA_wpcBusy)&(!ANA_hallBusy)) {
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <ANA_Handler+0x23c>)
 800141c:	88da      	ldrh	r2, [r3, #6]
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <ANA_Handler+0x220>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <ANA_Handler+0x214>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4013      	ands	r3, r2
 800143a:	4a34      	ldr	r2, [pc, #208]	; (800150c <ANA_Handler+0x230>)
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	f082 0201 	eor.w	r2, r2, #1
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 81f3 	beq.w	8001832 <ANA_Handler+0x556>
		//Analyse data
		float mean,stdDeviation,angle,current;
		mean = 0;
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
		stdDeviation = 0;
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
		angle = 0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
		current = 0;
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ANA_inOptn[1]==0) {
 8001464:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <ANA_Handler+0x23c>)
 8001466:	885b      	ldrh	r3, [r3, #2]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 81cf 	bne.w	800180c <ANA_Handler+0x530>
			int accuracy = ANA_inOptn[3];
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <ANA_Handler+0x23c>)
 8001470:	88db      	ldrh	r3, [r3, #6]
 8001472:	613b      	str	r3, [r7, #16]
			// Calculate distance
			for (int i = 0; i < accuracy; ++i) {
 8001474:	2300      	movs	r3, #0
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001478:	e02e      	b.n	80014d8 <ANA_Handler+0x1fc>
				ANA_wpcLeft[i]=CALC_DistanceMode(ANA_wpcLeft[i], ANA_inOptn[0], false);
 800147a:	4a21      	ldr	r2, [pc, #132]	; (8001500 <ANA_Handler+0x224>)
 800147c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <ANA_Handler+0x23c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	f7ff fef5 	bl	8001280 <CALC_DistanceMode>
 8001496:	eef0 7a40 	vmov.f32	s15, s0
 800149a:	4a19      	ldr	r2, [pc, #100]	; (8001500 <ANA_Handler+0x224>)
 800149c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	edc3 7a00 	vstr	s15, [r3]
				ANA_wpcRight[i]=CALC_DistanceMode(ANA_wpcRight[i], ANA_inOptn[0], true);
 80014a6:	4a18      	ldr	r2, [pc, #96]	; (8001508 <ANA_Handler+0x22c>)
 80014a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <ANA_Handler+0x23c>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	2101      	movs	r1, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	f7ff fedf 	bl	8001280 <CALC_DistanceMode>
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <ANA_Handler+0x22c>)
 80014c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < accuracy; ++i) {
 80014d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014d4:	3301      	adds	r3, #1
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbcc      	blt.n	800147a <ANA_Handler+0x19e>
			}
			// Sum
			float sumLeft,sumRight;
			for (int i = 0; i < accuracy; ++i) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
 80014e4:	e039      	b.n	800155a <ANA_Handler+0x27e>
 80014e6:	bf00      	nop
 80014e8:	200004a0 	.word	0x200004a0
 80014ec:	200004af 	.word	0x200004af
 80014f0:	200004b0 	.word	0x200004b0
 80014f4:	200004a1 	.word	0x200004a1
 80014f8:	200004a4 	.word	0x200004a4
 80014fc:	200004b2 	.word	0x200004b2
 8001500:	200008bc 	.word	0x200008bc
 8001504:	200004a8 	.word	0x200004a8
 8001508:	2000090c 	.word	0x2000090c
 800150c:	200004b1 	.word	0x200004b1
 8001510:	200008e4 	.word	0x200008e4
 8001514:	20000894 	.word	0x20000894
 8001518:	20000000 	.word	0x20000000
 800151c:	200004ad 	.word	0x200004ad
 8001520:	200004ac 	.word	0x200004ac
				sumLeft = sumLeft+ANA_wpcLeft[i];
 8001524:	4ab1      	ldr	r2, [pc, #708]	; (80017ec <ANA_Handler+0x510>)
 8001526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				sumRight = sumRight+ANA_wpcRight[i];
 800153c:	4aac      	ldr	r2, [pc, #688]	; (80017f0 <ANA_Handler+0x514>)
 800153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			for (int i = 0; i < accuracy; ++i) {
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	3301      	adds	r3, #1
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
 800155a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbe0      	blt.n	8001524 <ANA_Handler+0x248>
			}
			// Mean
			float meanLeft,meanRight;
			meanLeft = sumLeft/accuracy;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001574:	edc7 7a03 	vstr	s15, [r7, #12]
			meanRight = sumRight/accuracy;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001582:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158a:	edc7 7a02 	vstr	s15, [r7, #8]
			mean = (sumLeft+sumRight)/(2*accuracy);
 800158e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001592:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001596:	ee77 6a27 	vadd.f32	s13, s14, s15
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015aa:	edc7 7a06 	vstr	s15, [r7, #24]

			// Standard Deviation
			if (accuracy>1){
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f340 80aa 	ble.w	800170a <ANA_Handler+0x42e>
 80015b6:	466b      	mov	r3, sp
 80015b8:	461d      	mov	r5, r3
				// Deviations
				float deviation[2*accuracy];
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	005c      	lsls	r4, r3, #1
 80015be:	1e63      	subs	r3, r4, #1
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4623      	mov	r3, r4
 80015c4:	4618      	mov	r0, r3
 80015c6:	f04f 0100 	mov.w	r1, #0
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	014b      	lsls	r3, r1, #5
 80015d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015d8:	0142      	lsls	r2, r0, #5
 80015da:	4623      	mov	r3, r4
 80015dc:	4618      	mov	r0, r3
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	014b      	lsls	r3, r1, #5
 80015ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015f0:	0142      	lsls	r2, r0, #5
 80015f2:	4623      	mov	r3, r4
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	3307      	adds	r3, #7
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001600:	466b      	mov	r3, sp
 8001602:	3303      	adds	r3, #3
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	603b      	str	r3, [r7, #0]
				for (int i = 0; i < accuracy; ++i) {
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800160e:	e04e      	b.n	80016ae <ANA_Handler+0x3d2>
					// Left
					deviation[i]=ANA_wpcLeft[i]-mean;
 8001610:	4a76      	ldr	r2, [pc, #472]	; (80017ec <ANA_Handler+0x510>)
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	edc3 7a00 	vstr	s15, [r3]
					deviation[i]=deviation[i]*deviation[i];
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	edc3 7a00 	vstr	s15, [r3]
					// Right
					deviation[i*2]=ANA_wpcRight[i]-mean;
 8001658:	4a65      	ldr	r2, [pc, #404]	; (80017f0 <ANA_Handler+0x514>)
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	edd7 7a06 	vldr	s15, [r7, #24]
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	edc3 7a00 	vstr	s15, [r3]
					deviation[i*2]=deviation[i*2]*deviation[i*2];
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < accuracy; ++i) {
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	3301      	adds	r3, #1
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dbac      	blt.n	8001610 <ANA_Handler+0x334>
				}
				// Variation
				float var = 0;
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
				for (int i = 0; i < 2*accuracy; ++i) {
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
 80016c0:	e00b      	b.n	80016da <ANA_Handler+0x3fe>
					var = var + deviation[1];
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				for (int i = 0; i < 2*accuracy; ++i) {
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	3301      	adds	r3, #1
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbee      	blt.n	80016c2 <ANA_Handler+0x3e6>
				}
				var = var/(accuracy*2);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				// Standard Deviation
				stdDeviation = sqrtf(var);
 80016fc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001700:	f00b fe9e 	bl	800d440 <sqrtf>
 8001704:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
 8001708:	46ad      	mov	sp, r5
			}

			// Angle
			angle = CALC_Angle(meanRight, meanLeft, CALC_SENSORDISTANCE);
 800170a:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 80017f4 <ANA_Handler+0x518>
 800170e:	edd7 0a03 	vldr	s1, [r7, #12]
 8001712:	ed97 0a02 	vldr	s0, [r7, #8]
 8001716:	f7ff fc23 	bl	8000f60 <CALC_Angle>
 800171a:	ed87 0a05 	vstr	s0, [r7, #20]

			// Current
			if ((mean<10)&(mean>0)) {
 800171e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001722:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	bf4c      	ite	mi
 8001730:	2301      	movmi	r3, #1
 8001732:	2300      	movpl	r3, #0
 8001734:	b2da      	uxtb	r2, r3
 8001736:	edd7 7a06 	vldr	s15, [r7, #24]
 800173a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	bfcc      	ite	gt
 8001744:	2301      	movgt	r3, #1
 8001746:	2300      	movle	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4013      	ands	r3, r2
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d03b      	beq.n	80017ca <ANA_Handler+0x4ee>
				// Mean of hall sensor
				float sumHall;
				for (int i = 0; i < accuracy; ++i) {
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e01a      	b.n	800178e <ANA_Handler+0x4b2>
					sumHall = ANA_hallLeft[i]+sumHall;
 8001758:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <ANA_Handler+0x51c>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ed97 7a08 	vldr	s14, [r7, #32]
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	edc7 7a08 	vstr	s15, [r7, #32]
					sumHall = ANA_hallRight[i]+sumHall;
 8001770:	4a22      	ldr	r2, [pc, #136]	; (80017fc <ANA_Handler+0x520>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001784:	edc7 7a08 	vstr	s15, [r7, #32]
				for (int i = 0; i < accuracy; ++i) {
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	3301      	adds	r3, #1
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	429a      	cmp	r2, r3
 8001794:	dbe0      	blt.n	8001758 <ANA_Handler+0x47c>
				}
				sumHall = sumHall/(2*accuracy);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a2:	edd7 6a08 	vldr	s13, [r7, #32]
 80017a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017aa:	edc7 7a08 	vstr	s15, [r7, #32]

				current = CALC_ElCurrent(sumHall, (mean/1000));
 80017ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80017b2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001800 <ANA_Handler+0x524>
 80017b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017ba:	eef0 0a47 	vmov.f32	s1, s14
 80017be:	ed97 0a08 	vldr	s0, [r7, #32]
 80017c2:	f7ff fc65 	bl	8001090 <CALC_ElCurrent>
 80017c6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
			}

			// Transfer results
			ANA_outResults[0]=angle; // Angle
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <ANA_Handler+0x528>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	6013      	str	r3, [r2, #0]
			ANA_outResults[1]=mean; // Distance
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <ANA_Handler+0x528>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	6053      	str	r3, [r2, #4]
			ANA_outResults[2]=stdDeviation; //Standard deviation
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <ANA_Handler+0x528>)
 80017d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017da:	6093      	str	r3, [r2, #8]
			ANA_outResults[3]=current; //Current
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <ANA_Handler+0x528>)
 80017de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e0:	60d3      	str	r3, [r2, #12]
			ANA_outDataReady = true;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <ANA_Handler+0x52c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	e023      	b.n	8001832 <ANA_Handler+0x556>
 80017ea:	bf00      	nop
 80017ec:	200008bc 	.word	0x200008bc
 80017f0:	2000090c 	.word	0x2000090c
 80017f4:	42200000 	.word	0x42200000
 80017f8:	200008e4 	.word	0x200008e4
 80017fc:	20000894 	.word	0x20000894
 8001800:	447a0000 	.word	0x447a0000
 8001804:	20000934 	.word	0x20000934
 8001808:	200004ae 	.word	0x200004ae

		} else { //transfer raw data
			// Transfer results
			ANA_outResults[0]=ANA_hallRight[0]; // HallRight
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <ANA_Handler+0x5b4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a20      	ldr	r2, [pc, #128]	; (8001894 <ANA_Handler+0x5b8>)
 8001812:	6013      	str	r3, [r2, #0]
			ANA_outResults[1]=ANA_hallLeft[0]; // HallLeft
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <ANA_Handler+0x5bc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <ANA_Handler+0x5b8>)
 800181a:	6053      	str	r3, [r2, #4]
			ANA_outResults[2]=ANA_wpcRight[0]; //WPCRight
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <ANA_Handler+0x5c0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <ANA_Handler+0x5b8>)
 8001822:	6093      	str	r3, [r2, #8]
			ANA_outResults[3]=ANA_wpcLeft[0]; //WPCLeft
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <ANA_Handler+0x5c4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <ANA_Handler+0x5b8>)
 800182a:	60d3      	str	r3, [r2, #12]
			ANA_outDataReady = true;
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <ANA_Handler+0x5c8>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
		}

	}

	if (ANA_inOptn[2]==1) {
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <ANA_Handler+0x5cc>)
 8001834:	889b      	ldrh	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d102      	bne.n	8001840 <ANA_Handler+0x564>
		ANA_cycle = 0;
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <ANA_Handler+0x5d0>)
 800183c:	2200      	movs	r2, #0
 800183e:	801a      	strh	r2, [r3, #0]
	}

	//end measurement when cycles are finished
	//or button is pressed when in streaming mode
	if ((ANA_cycle == ANA_inOptn[3])|(ANA_inBtn & (ANA_inOptn[2]==1))){
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <ANA_Handler+0x5cc>)
 8001842:	88da      	ldrh	r2, [r3, #6]
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <ANA_Handler+0x5d0>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <ANA_Handler+0x5d4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <ANA_Handler+0x5cc>)
 800185c:	889b      	ldrh	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	400b      	ands	r3, r1
 800186a:	4313      	orrs	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <ANA_Handler+0x5a0>
		ANA_measBusy = false;
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <ANA_Handler+0x5d8>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
		ANA_cycle = 0;
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <ANA_Handler+0x5d0>)
 8001878:	2200      	movs	r2, #0
 800187a:	801a      	strh	r2, [r3, #0]
	}

	ANA_inBtn = false;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <ANA_Handler+0x5d4>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
	ANA_inMeasReady = false;
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <ANA_Handler+0x5dc>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	3748      	adds	r7, #72	; 0x48
 800188c:	46bd      	mov	sp, r7
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	20000894 	.word	0x20000894
 8001894:	20000934 	.word	0x20000934
 8001898:	200008e4 	.word	0x200008e4
 800189c:	2000090c 	.word	0x2000090c
 80018a0:	200008bc 	.word	0x200008bc
 80018a4:	200004ae 	.word	0x200004ae
 80018a8:	20000000 	.word	0x20000000
 80018ac:	200004b2 	.word	0x200004b2
 80018b0:	200004a0 	.word	0x200004a0
 80018b4:	200004af 	.word	0x200004af
 80018b8:	200004a1 	.word	0x200004a1

080018bc <GUI_TS_GetState>:
/** ***************************************************************************
 * @brief Wrapper for touch screen sate
 *
 * Enable use of BSP_TS_GetState() function with 180° rotated display
 *****************************************************************************/
void GUI_TS_GetState(TS_StateTypeDef* TS_State){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	//readout TS state
	BSP_TS_GetState(TS_State);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f004 fbd7 	bl	8006078 <BSP_TS_GetState>
	//translate to correct coordinate system
	TS_State->X = BSP_LCD_GetXSize()-TS_State->X;
 80018ca:	f003 fb03 	bl	8004ed4 <BSP_LCD_GetXSize>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	885b      	ldrh	r3, [r3, #2]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	805a      	strh	r2, [r3, #2]
	//TS_State->Y = BSP_LCD_GetYSize()-TS_State->Y;
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <GUI_LCD_FillRect>:
/** ***************************************************************************
 * @brief Wrapper to draw filled rectangle
 *
 * Enable use of BSP_LCD_FillRect() function with 180° rotated display
 *****************************************************************************/
void GUI_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height){
 80018e6:	b590      	push	{r4, r7, lr}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4604      	mov	r4, r0
 80018ee:	4608      	mov	r0, r1
 80018f0:	4611      	mov	r1, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	4623      	mov	r3, r4
 80018f6:	80fb      	strh	r3, [r7, #6]
 80018f8:	4603      	mov	r3, r0
 80018fa:	80bb      	strh	r3, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	803b      	strh	r3, [r7, #0]
	//calculate diagonal corner coordinates and translate to other system
	Xpos = BSP_LCD_GetXSize()-(Xpos+Width);
 8001904:	f003 fae6 	bl	8004ed4 <BSP_LCD_GetXSize>
 8001908:	4603      	mov	r3, r0
 800190a:	b29a      	uxth	r2, r3
 800190c:	88f9      	ldrh	r1, [r7, #6]
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	440b      	add	r3, r1
 8001912:	b29b      	uxth	r3, r3
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	80fb      	strh	r3, [r7, #6]
	Ypos = BSP_LCD_GetYSize()-(Ypos+Height);
 8001918:	f003 fae8 	bl	8004eec <BSP_LCD_GetYSize>
 800191c:	4603      	mov	r3, r0
 800191e:	b29a      	uxth	r2, r3
 8001920:	88b9      	ldrh	r1, [r7, #4]
 8001922:	883b      	ldrh	r3, [r7, #0]
 8001924:	440b      	add	r3, r1
 8001926:	b29b      	uxth	r3, r3
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	80bb      	strh	r3, [r7, #4]
	//draw rectangular shape
	BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
 800192c:	883b      	ldrh	r3, [r7, #0]
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	88b9      	ldrh	r1, [r7, #4]
 8001932:	88f8      	ldrh	r0, [r7, #6]
 8001934:	f003 ff36 	bl	80057a4 <BSP_LCD_FillRect>
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}

08001940 <GUI_LCD_DrawRect>:
/** ***************************************************************************
 * @brief Wrapper to draw rectangle
 *
 * Enable use of BSP_LCD_DrawRect() function with 180° rotated display
 *****************************************************************************/
void GUI_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height){
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4604      	mov	r4, r0
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4623      	mov	r3, r4
 8001950:	80fb      	strh	r3, [r7, #6]
 8001952:	4603      	mov	r3, r0
 8001954:	80bb      	strh	r3, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	807b      	strh	r3, [r7, #2]
 800195a:	4613      	mov	r3, r2
 800195c:	803b      	strh	r3, [r7, #0]
	//calculate diagonal corner coordinates and translate to other system
	Xpos = BSP_LCD_GetXSize()-(Xpos+Width);
 800195e:	f003 fab9 	bl	8004ed4 <BSP_LCD_GetXSize>
 8001962:	4603      	mov	r3, r0
 8001964:	b29a      	uxth	r2, r3
 8001966:	88f9      	ldrh	r1, [r7, #6]
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	440b      	add	r3, r1
 800196c:	b29b      	uxth	r3, r3
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	80fb      	strh	r3, [r7, #6]
	Ypos = BSP_LCD_GetYSize()-(Ypos+Height);
 8001972:	f003 fabb 	bl	8004eec <BSP_LCD_GetYSize>
 8001976:	4603      	mov	r3, r0
 8001978:	b29a      	uxth	r2, r3
 800197a:	88b9      	ldrh	r1, [r7, #4]
 800197c:	883b      	ldrh	r3, [r7, #0]
 800197e:	440b      	add	r3, r1
 8001980:	b29b      	uxth	r3, r3
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	80bb      	strh	r3, [r7, #4]
	//draw rectangular shape
	BSP_LCD_DrawRect(Xpos, Ypos, Width, Height);
 8001986:	883b      	ldrh	r3, [r7, #0]
 8001988:	887a      	ldrh	r2, [r7, #2]
 800198a:	88b9      	ldrh	r1, [r7, #4]
 800198c:	88f8      	ldrh	r0, [r7, #6]
 800198e:	f003 fded 	bl	800556c <BSP_LCD_DrawRect>
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
	...

0800199c <GUI_DrawHint>:

/** ***************************************************************************
 * @brief Draw hint
 *
 *****************************************************************************/
void GUI_DrawHint(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f003 fb3a 	bl	800501c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80019ac:	f003 fb1e 	bl	8004fec <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80019b0:	481b      	ldr	r0, [pc, #108]	; (8001a20 <GUI_DrawHint+0x84>)
 80019b2:	f003 fb4d 	bl	8005050 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Cable-Monitor", LEFT_MODE);
 80019b6:	2303      	movs	r3, #3
 80019b8:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <GUI_DrawHint+0x88>)
 80019ba:	210a      	movs	r1, #10
 80019bc:	2005      	movs	r0, #5
 80019be:	f003 fbcd 	bl	800515c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80019c2:	4819      	ldr	r0, [pc, #100]	; (8001a28 <GUI_DrawHint+0x8c>)
 80019c4:	f003 fb44 	bl	8005050 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch on screen or", LEFT_MODE);
 80019c8:	2303      	movs	r3, #3
 80019ca:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <GUI_DrawHint+0x90>)
 80019cc:	213c      	movs	r1, #60	; 0x3c
 80019ce:	2005      	movs	r0, #5
 80019d0:	f003 fbc4 	bl	800515c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"press blue button",LEFT_MODE);
 80019d4:	2303      	movs	r3, #3
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <GUI_DrawHint+0x94>)
 80019d8:	2150      	movs	r1, #80	; 0x50
 80019da:	2005      	movs	r0, #5
 80019dc:	f003 fbbe 	bl	800515c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 100, (uint8_t *)"to proceed to", LEFT_MODE);
 80019e0:	2303      	movs	r3, #3
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <GUI_DrawHint+0x98>)
 80019e4:	2164      	movs	r1, #100	; 0x64
 80019e6:	2005      	movs	r0, #5
 80019e8:	f003 fbb8 	bl	800515c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 120, (uint8_t *)"the main sceen", LEFT_MODE);
 80019ec:	2303      	movs	r3, #3
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <GUI_DrawHint+0x9c>)
 80019f0:	2178      	movs	r1, #120	; 0x78
 80019f2:	2005      	movs	r0, #5
 80019f4:	f003 fbb2 	bl	800515c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 80019f8:	4810      	ldr	r0, [pc, #64]	; (8001a3c <GUI_DrawHint+0xa0>)
 80019fa:	f003 fb29 	bl	8005050 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 290, (uint8_t *)"(c)bollhjon & durmatar", LEFT_MODE);
 80019fe:	2303      	movs	r3, #3
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <GUI_DrawHint+0xa4>)
 8001a02:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001a06:	2005      	movs	r0, #5
 8001a08:	f003 fba8 	bl	800515c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 305, (uint8_t *)"Version 20.12.2021", LEFT_MODE);
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <GUI_DrawHint+0xa8>)
 8001a10:	f240 1131 	movw	r1, #305	; 0x131
 8001a14:	2005      	movs	r0, #5
 8001a16:	f003 fba1 	bl	800515c <BSP_LCD_DisplayStringAt>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000284 	.word	0x20000284
 8001a24:	0800f348 	.word	0x0800f348
 8001a28:	20000294 	.word	0x20000294
 8001a2c:	0800f358 	.word	0x0800f358
 8001a30:	0800f36c 	.word	0x0800f36c
 8001a34:	0800f380 	.word	0x0800f380
 8001a38:	0800f390 	.word	0x0800f390
 8001a3c:	2000029c 	.word	0x2000029c
 8001a40:	0800f3a0 	.word	0x0800f3a0
 8001a44:	0800f3b8 	.word	0x0800f3b8

08001a48 <GUI_DrawModeSel>:

/** ***************************************************************************
 * @brief Draw Mode Selection
 *
 *****************************************************************************/
void GUI_DrawModeSel(void){
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MODE_FONT);
 8001a4e:	4856      	ldr	r0, [pc, #344]	; (8001ba8 <GUI_DrawModeSel+0x160>)
 8001a50:	f003 fafe 	bl	8005050 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MODE_Y;
 8001a54:	f003 fa4a 	bl	8004eec <BSP_LCD_GetYSize>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	3b28      	subs	r3, #40	; 0x28
 8001a5c:	613b      	str	r3, [r7, #16]
	m = MODE_MARGIN;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MODE_ENTRY_COUNT;
 8001a62:	f003 fa37 	bl	8004ed4 <BSP_LCD_GetXSize>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a50      	ldr	r2, [pc, #320]	; (8001bac <GUI_DrawModeSel+0x164>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
	h = MODE_HEIGHT;
 8001a72:	2328      	movs	r3, #40	; 0x28
 8001a74:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < MODE_ENTRY_COUNT; ++i) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e08c      	b.n	8001b96 <GUI_DrawModeSel+0x14e>
		x = i*w;
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MODE_entry[i].back_color);
 8001a86:	494a      	ldr	r1, [pc, #296]	; (8001bb0 <GUI_DrawModeSel+0x168>)
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	3310      	adds	r3, #16
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 faa7 	bl	8004fec <BSP_LCD_SetTextColor>
		GUI_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b298      	uxth	r0, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b299      	uxth	r1, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	b29c      	uxth	r4, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	f7ff ff05 	bl	80018e6 <GUI_LCD_FillRect>
		BSP_LCD_SetTextColor(MODE_entry[i].frame_color);
 8001adc:	4934      	ldr	r1, [pc, #208]	; (8001bb0 <GUI_DrawModeSel+0x168>)
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3314      	adds	r3, #20
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fa7c 	bl	8004fec <BSP_LCD_SetTextColor>
		GUI_LCD_DrawRect(x+m, y+m, w-2*m, h-2*m);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	b298      	uxth	r0, r3
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	b299      	uxth	r1, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b29c      	uxth	r4, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	f7ff ff07 	bl	8001940 <GUI_LCD_DrawRect>
		BSP_LCD_SetBackColor(MODE_entry[i].back_color);
 8001b32:	491f      	ldr	r1, [pc, #124]	; (8001bb0 <GUI_DrawModeSel+0x168>)
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3310      	adds	r3, #16
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fa69 	bl	800501c <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b4a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b4e:	f003 fa4d 	bl	8004fec <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m, y+6*m, (uint8_t*)MODE_entry[i].line, LEFT_MODE);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	00d2      	lsls	r2, r2, #3
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b298      	uxth	r0, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	0052      	lsls	r2, r2, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	b299      	uxth	r1, r3
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <GUI_DrawModeSel+0x168>)
 8001b88:	441a      	add	r2, r3
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f003 fae6 	bl	800515c <BSP_LCD_DisplayStringAt>
	for (int i = 0; i < MODE_ENTRY_COUNT; ++i) {
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	f77f af6f 	ble.w	8001a7c <GUI_DrawModeSel+0x34>
	}
}
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}
 8001ba8:	2000028c 	.word	0x2000028c
 8001bac:	aaaaaaab 	.word	0xaaaaaaab
 8001bb0:	200000e4 	.word	0x200000e4

08001bb4 <GUI_DrawTopMode>:
/** ***************************************************************************
 * @brief Draw Mode field to Top Bar
 *
 * Display selected Mode and green background if cable was detected
 *****************************************************************************/
void GUI_DrawTopMode(void){
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(TOP_FONT);
 8001bba:	487d      	ldr	r0, [pc, #500]	; (8001db0 <GUI_DrawTopMode+0x1fc>)
 8001bbc:	f003 fa48 	bl	8005050 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	x = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
	y = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
	m = TOP_MARGIN;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	60fb      	str	r3, [r7, #12]
	w = (BSP_LCD_GetXSize()/3);
 8001bcc:	f003 f982 	bl	8004ed4 <BSP_LCD_GetXSize>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a78      	ldr	r2, [pc, #480]	; (8001db4 <GUI_DrawTopMode+0x200>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
	h = TOP_HEIGHT;
 8001bdc:	2328      	movs	r3, #40	; 0x28
 8001bde:	607b      	str	r3, [r7, #4]

	//Display framed mode and background green if cable detected
	if (GUI_cable_detected){
 8001be0:	4b75      	ldr	r3, [pc, #468]	; (8001db8 <GUI_DrawTopMode+0x204>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00b      	beq.n	8001c00 <GUI_DrawTopMode+0x4c>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
 8001be8:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8001bec:	f003 f9fe 	bl	8004fec <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGREEN);
 8001bf0:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8001bf4:	f003 fa12 	bl	800501c <BSP_LCD_SetBackColor>
		GUI_cable_detected = false;
 8001bf8:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <GUI_DrawTopMode+0x204>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e015      	b.n	8001c2c <GUI_DrawTopMode+0x78>
	} else if (GUI_cable_not_detected){
 8001c00:	4b6e      	ldr	r3, [pc, #440]	; (8001dbc <GUI_DrawTopMode+0x208>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d009      	beq.n	8001c1c <GUI_DrawTopMode+0x68>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 8001c08:	486d      	ldr	r0, [pc, #436]	; (8001dc0 <GUI_DrawTopMode+0x20c>)
 8001c0a:	f003 f9ef 	bl	8004fec <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTRED);
 8001c0e:	486c      	ldr	r0, [pc, #432]	; (8001dc0 <GUI_DrawTopMode+0x20c>)
 8001c10:	f003 fa04 	bl	800501c <BSP_LCD_SetBackColor>
		GUI_cable_not_detected = false;
 8001c14:	4b69      	ldr	r3, [pc, #420]	; (8001dbc <GUI_DrawTopMode+0x208>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	e007      	b.n	8001c2c <GUI_DrawTopMode+0x78>
	} else {
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f003 f9e4 	bl	8004fec <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f003 f9f8 	bl	800501c <BSP_LCD_SetBackColor>
	}
	GUI_LCD_FillRect(x+m, y+m, (w*2)-2*m, h-2*m);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	b298      	uxth	r0, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	b299      	uxth	r1, r3
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	b29c      	uxth	r4, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4622      	mov	r2, r4
 8001c62:	f7ff fe40 	bl	80018e6 <GUI_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c66:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c6a:	f003 f9bf 	bl	8004fec <BSP_LCD_SetTextColor>
	GUI_LCD_DrawRect(x+m, y+m, (w*2)-2*m, h-2*m);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	b298      	uxth	r0, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	b299      	uxth	r1, r3
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	b29c      	uxth	r4, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	f7ff fe4c 	bl	8001940 <GUI_LCD_DrawRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ca8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cac:	f003 f99e 	bl	8004fec <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(x+3*m, y+6*m, (uint8_t*)"Mode:", LEFT_MODE);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	0052      	lsls	r2, r2, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b298      	uxth	r0, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	0052      	lsls	r2, r2, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	2303      	movs	r3, #3
 8001cdc:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <GUI_DrawTopMode+0x210>)
 8001cde:	f003 fa3d 	bl	800515c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8001ce2:	4839      	ldr	r0, [pc, #228]	; (8001dc8 <GUI_DrawTopMode+0x214>)
 8001ce4:	f003 f982 	bl	8004fec <BSP_LCD_SetTextColor>
	//display current mode
	switch (GUI_mode) {
 8001ce8:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <GUI_DrawTopMode+0x218>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d03e      	beq.n	8001d6e <GUI_DrawTopMode+0x1ba>
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	dc58      	bgt.n	8001da6 <GUI_DrawTopMode+0x1f2>
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <GUI_DrawTopMode+0x14a>
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d01c      	beq.n	8001d36 <GUI_DrawTopMode+0x182>
			break;
		case MODE_LNPE:
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LNPE", LEFT_MODE);
			break;
		default:
			break;
 8001cfc:	e053      	b.n	8001da6 <GUI_DrawTopMode+0x1f2>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"L", LEFT_MODE);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	0052      	lsls	r2, r2, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3354      	adds	r3, #84	; 0x54
 8001d14:	b298      	uxth	r0, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	0052      	lsls	r2, r2, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <GUI_DrawTopMode+0x21c>)
 8001d30:	f003 fa14 	bl	800515c <BSP_LCD_DisplayStringAt>
			break;
 8001d34:	e038      	b.n	8001da8 <GUI_DrawTopMode+0x1f4>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LN", LEFT_MODE);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	0052      	lsls	r2, r2, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3354      	adds	r3, #84	; 0x54
 8001d4c:	b298      	uxth	r0, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	0052      	lsls	r2, r2, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	b299      	uxth	r1, r3
 8001d64:	2303      	movs	r3, #3
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <GUI_DrawTopMode+0x220>)
 8001d68:	f003 f9f8 	bl	800515c <BSP_LCD_DisplayStringAt>
			break;
 8001d6c:	e01c      	b.n	8001da8 <GUI_DrawTopMode+0x1f4>
			BSP_LCD_DisplayStringAt(x+3*m+12*7, y+6*m, (uint8_t*)"LNPE", LEFT_MODE);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	0052      	lsls	r2, r2, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3354      	adds	r3, #84	; 0x54
 8001d84:	b298      	uxth	r0, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	0052      	lsls	r2, r2, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	b299      	uxth	r1, r3
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <GUI_DrawTopMode+0x224>)
 8001da0:	f003 f9dc 	bl	800515c <BSP_LCD_DisplayStringAt>
			break;
 8001da4:	e000      	b.n	8001da8 <GUI_DrawTopMode+0x1f4>
			break;
 8001da6:	bf00      	nop
	}
}
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd90      	pop	{r4, r7, pc}
 8001db0:	2000028c 	.word	0x2000028c
 8001db4:	aaaaaaab 	.word	0xaaaaaaab
 8001db8:	200004b4 	.word	0x200004b4
 8001dbc:	200004b5 	.word	0x200004b5
 8001dc0:	ffff8080 	.word	0xffff8080
 8001dc4:	0800f3cc 	.word	0x0800f3cc
 8001dc8:	ff404040 	.word	0xff404040
 8001dcc:	200004b6 	.word	0x200004b6
 8001dd0:	0800f3d4 	.word	0x0800f3d4
 8001dd4:	0800f3d8 	.word	0x0800f3d8
 8001dd8:	0800f3dc 	.word	0x0800f3dc

08001ddc <GUI_DrawTopOptions>:
/** ***************************************************************************
 * @brief Draw options field to top bar
 *
 * Draw options field in top bar
 *****************************************************************************/
void GUI_DrawTopOptions(void){
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(TOP_FONT);
 8001de2:	486a      	ldr	r0, [pc, #424]	; (8001f8c <GUI_DrawTopOptions+0x1b0>)
 8001de4:	f003 f934 	bl	8005050 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	x = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
	y = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
	m = TOP_MARGIN;
 8001df0:	2302      	movs	r3, #2
 8001df2:	60fb      	str	r3, [r7, #12]
	w = (BSP_LCD_GetXSize()/3);
 8001df4:	f003 f86e 	bl	8004ed4 <BSP_LCD_GetXSize>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a65      	ldr	r2, [pc, #404]	; (8001f90 <GUI_DrawTopOptions+0x1b4>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
	h = TOP_HEIGHT;
 8001e04:	2328      	movs	r3, #40	; 0x28
 8001e06:	607b      	str	r3, [r7, #4]

	//display Options area
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8001e08:	4862      	ldr	r0, [pc, #392]	; (8001f94 <GUI_DrawTopOptions+0x1b8>)
 8001e0a:	f003 f8ef 	bl	8004fec <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	b298      	uxth	r0, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b299      	uxth	r1, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b29c      	uxth	r4, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4622      	mov	r2, r4
 8001e54:	f7ff fd47 	bl	80018e6 <GUI_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 8001e58:	484e      	ldr	r0, [pc, #312]	; (8001f94 <GUI_DrawTopOptions+0x1b8>)
 8001e5a:	f003 f8df 	bl	800501c <BSP_LCD_SetBackColor>
	//display according to site state
	if (GUI_currentSite != SITE_OPTN) {
 8001e5e:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <GUI_DrawTopOptions+0x1bc>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d047      	beq.n	8001ef6 <GUI_DrawTopOptions+0x11a>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8001e66:	484d      	ldr	r0, [pc, #308]	; (8001f9c <GUI_DrawTopOptions+0x1c0>)
 8001e68:	f003 f8c0 	bl	8004fec <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"OPTN", LEFT_MODE);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	00d2      	lsls	r2, r2, #3
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	b298      	uxth	r0, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	0052      	lsls	r2, r2, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b299      	uxth	r1, r3
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	4a3e      	ldr	r2, [pc, #248]	; (8001fa0 <GUI_DrawTopOptions+0x1c4>)
 8001ea6:	f003 f959 	bl	800515c <BSP_LCD_DisplayStringAt>
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b298      	uxth	r0, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	b29c      	uxth	r4, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4622      	mov	r2, r4
 8001ef0:	f7ff fd26 	bl	8001940 <GUI_LCD_DrawRect>
	} else {
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"BACK", LEFT_MODE);
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
	}
}
 8001ef4:	e046      	b.n	8001f84 <GUI_DrawTopOptions+0x1a8>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001ef6:	482b      	ldr	r0, [pc, #172]	; (8001fa4 <GUI_DrawTopOptions+0x1c8>)
 8001ef8:	f003 f878 	bl	8004fec <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+7*m+2*w, y+6*m, (uint8_t*)"BACK", LEFT_MODE);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	00d2      	lsls	r2, r2, #3
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	0052      	lsls	r2, r2, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	b299      	uxth	r1, r3
 8001f32:	2303      	movs	r3, #3
 8001f34:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <GUI_DrawTopOptions+0x1cc>)
 8001f36:	f003 f911 	bl	800515c <BSP_LCD_DisplayStringAt>
		GUI_LCD_DrawRect(x+m+2*w, y+m, w-2*m, h-2*m);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	b298      	uxth	r0, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b299      	uxth	r1, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	b29c      	uxth	r4, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4622      	mov	r2, r4
 8001f80:	f7ff fcde 	bl	8001940 <GUI_LCD_DrawRect>
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	2000028c 	.word	0x2000028c
 8001f90:	aaaaaaab 	.word	0xaaaaaaab
 8001f94:	ffd3d3d3 	.word	0xffd3d3d3
 8001f98:	200004cc 	.word	0x200004cc
 8001f9c:	ff404040 	.word	0xff404040
 8001fa0:	0800f3e4 	.word	0x0800f3e4
 8001fa4:	ffff0000 	.word	0xffff0000
 8001fa8:	0800f3ec 	.word	0x0800f3ec

08001fac <GUI_ClearSite>:
/** ***************************************************************************
 * @brief Draw options field to top bar
 *
 * Draw options field in top bar
 *****************************************************************************/
void GUI_ClearSite(void){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f003 f81a 	bl	8004fec <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 40, 240, 240);
 8001fb8:	23f0      	movs	r3, #240	; 0xf0
 8001fba:	22f0      	movs	r2, #240	; 0xf0
 8001fbc:	2128      	movs	r1, #40	; 0x28
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7ff fc91 	bl	80018e6 <GUI_LCD_FillRect>
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <GUI_DrawMeasurement>:
 *
 * Always angle and distance, if measuring accuracy factor is greater than 1
 * also display standard deviation and accuracy factor, if distance is smaller
 * than 10mm display current
 *****************************************************************************/
void GUI_DrawMeasurement(void){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b090      	sub	sp, #64	; 0x40
 8001fcc:	af02      	add	r7, sp, #8
	GUI_ClearSite();
 8001fce:	f7ff ffed 	bl	8001fac <GUI_ClearSite>
	//display angle
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd6:	f003 f809 	bl	8004fec <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 45, 240, 70);
 8001fda:	2346      	movs	r3, #70	; 0x46
 8001fdc:	22f0      	movs	r2, #240	; 0xf0
 8001fde:	212d      	movs	r1, #45	; 0x2d
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fc80 	bl	80018e6 <GUI_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fea:	f003 f817 	bl	800501c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001fee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ff2:	f002 fffb 	bl	8004fec <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(120, 110, 50);
 8001ff6:	2232      	movs	r2, #50	; 0x32
 8001ff8:	216e      	movs	r1, #110	; 0x6e
 8001ffa:	2078      	movs	r0, #120	; 0x78
 8001ffc:	f003 fae8 	bl	80055d0 <BSP_LCD_DrawCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f002 fff2 	bl	8004fec <BSP_LCD_SetTextColor>
	GUI_LCD_FillRect(0, 110, 240, 60);
 8002008:	233c      	movs	r3, #60	; 0x3c
 800200a:	22f0      	movs	r2, #240	; 0xf0
 800200c:	216e      	movs	r1, #110	; 0x6e
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fc69 	bl	80018e6 <GUI_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002014:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002018:	f002 ffe8 	bl	8004fec <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(60, 110, 180, 110);
 800201c:	236e      	movs	r3, #110	; 0x6e
 800201e:	22b4      	movs	r2, #180	; 0xb4
 8002020:	216e      	movs	r1, #110	; 0x6e
 8002022:	203c      	movs	r0, #60	; 0x3c
 8002024:	f003 f9d8 	bl	80053d8 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(120, 50, 120, 110);
 8002028:	236e      	movs	r3, #110	; 0x6e
 800202a:	2278      	movs	r2, #120	; 0x78
 800202c:	2132      	movs	r1, #50	; 0x32
 800202e:	2078      	movs	r0, #120	; 0x78
 8002030:	f003 f9d2 	bl	80053d8 <BSP_LCD_DrawLine>
	//display angle direction
	if ((-46>GUI_angle)&(GUI_angle<46)) {
 8002034:	4b92      	ldr	r3, [pc, #584]	; (8002280 <GUI_DrawMeasurement+0x2b8>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8002284 <GUI_DrawMeasurement+0x2bc>
 800203e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	bf4c      	ite	mi
 8002048:	2301      	movmi	r3, #1
 800204a:	2300      	movpl	r3, #0
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b8c      	ldr	r3, [pc, #560]	; (8002280 <GUI_DrawMeasurement+0x2b8>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002288 <GUI_DrawMeasurement+0x2c0>
 8002058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	bf4c      	ite	mi
 8002062:	2301      	movmi	r3, #1
 8002064:	2300      	movpl	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	4013      	ands	r3, r2
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d04e      	beq.n	800210e <GUI_DrawMeasurement+0x146>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002070:	4886      	ldr	r0, [pc, #536]	; (800228c <GUI_DrawMeasurement+0x2c4>)
 8002072:	f002 ffbb 	bl	8004fec <BSP_LCD_SetTextColor>
		uint16_t x,y;
		float dx,dy;
		dx = 0.888;
 8002076:	4b86      	ldr	r3, [pc, #536]	; (8002290 <GUI_DrawMeasurement+0x2c8>)
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
		dy = 0.333;
 800207a:	4b86      	ldr	r3, [pc, #536]	; (8002294 <GUI_DrawMeasurement+0x2cc>)
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
		if (GUI_angle>0) {
 800207e:	4b80      	ldr	r3, [pc, #512]	; (8002280 <GUI_DrawMeasurement+0x2b8>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	dd1c      	ble.n	80020c8 <GUI_DrawMeasurement+0x100>
			x=(uint16_t)(120+(int)(dx*GUI_angle));
 800208e:	4b7c      	ldr	r3, [pc, #496]	; (8002280 <GUI_DrawMeasurement+0x2b8>)
 8002090:	ed93 7a00 	vldr	s14, [r3]
 8002094:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3378      	adds	r3, #120	; 0x78
 80020a8:	86fb      	strh	r3, [r7, #54]	; 0x36
			y=(uint16_t)(55+(int)(dy*GUI_angle));
 80020aa:	4b75      	ldr	r3, [pc, #468]	; (8002280 <GUI_DrawMeasurement+0x2b8>)
 80020ac:	ed93 7a00 	vldr	s14, [r3]
 80020b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020bc:	ee17 3a90 	vmov	r3, s15
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3337      	adds	r3, #55	; 0x37
 80020c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80020c6:	e01c      	b.n	8002102 <GUI_DrawMeasurement+0x13a>
		} else {
			x=(uint16_t)(120+(int)(dx*GUI_angle));
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <GUI_DrawMeasurement+0x2b8>)
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80020d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020da:	ee17 3a90 	vmov	r3, s15
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3378      	adds	r3, #120	; 0x78
 80020e2:	86fb      	strh	r3, [r7, #54]	; 0x36
			y=(uint16_t)(55-(int)(dy*GUI_angle));
 80020e4:	4b66      	ldr	r3, [pc, #408]	; (8002280 <GUI_DrawMeasurement+0x2b8>)
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f6:	ee17 3a90 	vmov	r3, s15
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 8002100:	86bb      	strh	r3, [r7, #52]	; 0x34
		}
		BSP_LCD_DrawLine(120, 110, x, y);
 8002102:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002104:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002106:	216e      	movs	r1, #110	; 0x6e
 8002108:	2078      	movs	r0, #120	; 0x78
 800210a:	f003 f965 	bl	80053d8 <BSP_LCD_DrawLine>
	}

	//Display Text
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800210e:	f04f 30ff 	mov.w	r0, #4294967295
 8002112:	f002 ff83 	bl	800501c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002116:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800211a:	f002 ff67 	bl	8004fec <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 800211e:	485e      	ldr	r0, [pc, #376]	; (8002298 <GUI_DrawMeasurement+0x2d0>)
 8002120:	f002 ff96 	bl	8005050 <BSP_LCD_SetFont>
	char text[25];
	uint32_t x = 30;
 8002124:	231e      	movs	r3, #30
 8002126:	623b      	str	r3, [r7, #32]
	uint32_t y = 125;
 8002128:	237d      	movs	r3, #125	; 0x7d
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
	//Angle
	snprintf(text,24,"Angle:    %4ddeg", (int)(GUI_angle));
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <GUI_DrawMeasurement+0x2b8>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002136:	1d38      	adds	r0, r7, #4
 8002138:	ee17 3a90 	vmov	r3, s15
 800213c:	4a57      	ldr	r2, [pc, #348]	; (800229c <GUI_DrawMeasurement+0x2d4>)
 800213e:	2118      	movs	r1, #24
 8002140:	f008 fe44 	bl	800adcc <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	b298      	uxth	r0, r3
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	b299      	uxth	r1, r3
 800214c:	1d3a      	adds	r2, r7, #4
 800214e:	2303      	movs	r3, #3
 8002150:	f003 f804 	bl	800515c <BSP_LCD_DisplayStringAt>
	y = y+30;
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	331e      	adds	r3, #30
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
	//Distance
	snprintf(text,24,"Distance: %4.1fmm", (float)(GUI_distance));
 800215a:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <GUI_DrawMeasurement+0x2d8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fa02 	bl	8000568 <__aeabi_f2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	1d38      	adds	r0, r7, #4
 800216a:	e9cd 2300 	strd	r2, r3, [sp]
 800216e:	4a4d      	ldr	r2, [pc, #308]	; (80022a4 <GUI_DrawMeasurement+0x2dc>)
 8002170:	2118      	movs	r1, #24
 8002172:	f008 fe2b 	bl	800adcc <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	b298      	uxth	r0, r3
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	b299      	uxth	r1, r3
 800217e:	1d3a      	adds	r2, r7, #4
 8002180:	2303      	movs	r3, #3
 8002182:	f002 ffeb 	bl	800515c <BSP_LCD_DisplayStringAt>
	if (GUI_options[2].active > 0) {
 8002186:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <GUI_DrawMeasurement+0x2e0>)
 8002188:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800218c:	2b00      	cmp	r3, #0
 800218e:	d036      	beq.n	80021fe <GUI_DrawMeasurement+0x236>
		//Standard deviation
		y = y+20;
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	3314      	adds	r3, #20
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
		snprintf(text,24,"Std.Dev.: %4dmm", (int)(GUI_distanceDeviation));
 8002196:	4b45      	ldr	r3, [pc, #276]	; (80022ac <GUI_DrawMeasurement+0x2e4>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a0:	1d38      	adds	r0, r7, #4
 80021a2:	ee17 3a90 	vmov	r3, s15
 80021a6:	4a42      	ldr	r2, [pc, #264]	; (80022b0 <GUI_DrawMeasurement+0x2e8>)
 80021a8:	2118      	movs	r1, #24
 80021aa:	f008 fe0f 	bl	800adcc <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	b298      	uxth	r0, r3
 80021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b4:	b299      	uxth	r1, r3
 80021b6:	1d3a      	adds	r2, r7, #4
 80021b8:	2303      	movs	r3, #3
 80021ba:	f002 ffcf 	bl	800515c <BSP_LCD_DisplayStringAt>
		//Measurement count
		y = y+20;
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	3314      	adds	r3, #20
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
		BSP_LCD_SetFont(&Font16);
 80021c4:	4834      	ldr	r0, [pc, #208]	; (8002298 <GUI_DrawMeasurement+0x2d0>)
 80021c6:	f002 ff43 	bl	8005050 <BSP_LCD_SetFont>
		int t = 1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(GUI_options[2].active==1){
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <GUI_DrawMeasurement+0x2e0>)
 80021d0:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d102      	bne.n	80021de <GUI_DrawMeasurement+0x216>
			t = 5;
 80021d8:	2305      	movs	r3, #5
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021dc:	e001      	b.n	80021e2 <GUI_DrawMeasurement+0x21a>
		} else {
			t = 10;
 80021de:	230a      	movs	r3, #10
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		snprintf(text,24,"Accuracy: %4dx", t);
 80021e2:	1d38      	adds	r0, r7, #4
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <GUI_DrawMeasurement+0x2ec>)
 80021e8:	2118      	movs	r1, #24
 80021ea:	f008 fdef 	bl	800adcc <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	b298      	uxth	r0, r3
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	b299      	uxth	r1, r3
 80021f6:	1d3a      	adds	r2, r7, #4
 80021f8:	2303      	movs	r3, #3
 80021fa:	f002 ffaf 	bl	800515c <BSP_LCD_DisplayStringAt>
	}
	//Current
	if (GUI_distance <= 10) {
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <GUI_DrawMeasurement+0x2d8>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002210:	d819      	bhi.n	8002246 <GUI_DrawMeasurement+0x27e>
		y = y+30;
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	331e      	adds	r3, #30
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
		BSP_LCD_SetFont(&Font16);
 8002218:	481f      	ldr	r0, [pc, #124]	; (8002298 <GUI_DrawMeasurement+0x2d0>)
 800221a:	f002 ff19 	bl	8005050 <BSP_LCD_SetFont>
		snprintf(text,24,"Current:  %4dA", (int)(GUI_current));
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <GUI_DrawMeasurement+0x2f0>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002228:	1d38      	adds	r0, r7, #4
 800222a:	ee17 3a90 	vmov	r3, s15
 800222e:	4a23      	ldr	r2, [pc, #140]	; (80022bc <GUI_DrawMeasurement+0x2f4>)
 8002230:	2118      	movs	r1, #24
 8002232:	f008 fdcb 	bl	800adcc <sniprintf>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	b298      	uxth	r0, r3
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	b299      	uxth	r1, r3
 800223e:	1d3a      	adds	r2, r7, #4
 8002240:	2303      	movs	r3, #3
 8002242:	f002 ff8b 	bl	800515c <BSP_LCD_DisplayStringAt>
	}
	//Display measuring type
	y = y+30;
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	331e      	adds	r3, #30
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
	if (GUI_options[1].active==0) {
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <GUI_DrawMeasurement+0x2e0>)
 800224e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <GUI_DrawMeasurement+0x2a0>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:   sng", LEFT_MODE);
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	b298      	uxth	r0, r3
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	b299      	uxth	r1, r3
 800225e:	2303      	movs	r3, #3
 8002260:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <GUI_DrawMeasurement+0x2f8>)
 8002262:	f002 ff7b 	bl	800515c <BSP_LCD_DisplayStringAt>
	} else {
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:  cont", LEFT_MODE);
	}
}
 8002266:	e007      	b.n	8002278 <GUI_DrawMeasurement+0x2b0>
		BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Meas.Type:  cont", LEFT_MODE);
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	b298      	uxth	r0, r3
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	b299      	uxth	r1, r3
 8002270:	2303      	movs	r3, #3
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <GUI_DrawMeasurement+0x2fc>)
 8002274:	f002 ff72 	bl	800515c <BSP_LCD_DisplayStringAt>
}
 8002278:	bf00      	nop
 800227a:	3738      	adds	r7, #56	; 0x38
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200004b8 	.word	0x200004b8
 8002284:	c2380000 	.word	0xc2380000
 8002288:	42380000 	.word	0x42380000
 800228c:	ffff0000 	.word	0xffff0000
 8002290:	3f6353f8 	.word	0x3f6353f8
 8002294:	3eaa7efa 	.word	0x3eaa7efa
 8002298:	20000294 	.word	0x20000294
 800229c:	0800f3f4 	.word	0x0800f3f4
 80022a0:	2000012c 	.word	0x2000012c
 80022a4:	0800f408 	.word	0x0800f408
 80022a8:	20000138 	.word	0x20000138
 80022ac:	20000130 	.word	0x20000130
 80022b0:	0800f41c 	.word	0x0800f41c
 80022b4:	0800f42c 	.word	0x0800f42c
 80022b8:	20000134 	.word	0x20000134
 80022bc:	0800f43c 	.word	0x0800f43c
 80022c0:	0800f44c 	.word	0x0800f44c
 80022c4:	0800f460 	.word	0x0800f460

080022c8 <GUI_DrawOptions>:
 * Available settings:
 *  - Meassuring Accuracy (1x, 5x, 10x)
 *  - Continous Meassuring (single, continous)
 *  - Display values (analysed, raw)
 *****************************************************************************/
void GUI_DrawOptions(void){
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
	uint32_t x, y, m, w, h;
	x = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
	m = 4;
 80022d2:	2304      	movs	r3, #4
 80022d4:	60fb      	str	r3, [r7, #12]
	h = 40;
 80022d6:	2328      	movs	r3, #40	; 0x28
 80022d8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; ++i) {
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e15c      	b.n	800259a <GUI_DrawOptions+0x2d2>
		y=38+i*80;
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	3326      	adds	r3, #38	; 0x26
 80022ec:	607b      	str	r3, [r7, #4]
		w=240;
 80022ee:	23f0      	movs	r3, #240	; 0xf0
 80022f0:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 80022f2:	4889      	ldr	r0, [pc, #548]	; (8002518 <GUI_DrawOptions+0x250>)
 80022f4:	f002 fe7a 	bl	8004fec <BSP_LCD_SetTextColor>
		GUI_LCD_FillRect(x+m, y+m, w-2*m, 2*h-m);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4413      	add	r3, r2
 8002302:	b298      	uxth	r0, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4413      	add	r3, r2
 800230e:	b299      	uxth	r1, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	b29b      	uxth	r3, r3
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	b29b      	uxth	r3, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b29c      	uxth	r4, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	b29b      	uxth	r3, r3
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	b29b      	uxth	r3, r3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	b29b      	uxth	r3, r3
 8002330:	4622      	mov	r2, r4
 8002332:	f7ff fad8 	bl	80018e6 <GUI_LCD_FillRect>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002336:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800233a:	f002 fe57 	bl	8004fec <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 800233e:	4876      	ldr	r0, [pc, #472]	; (8002518 <GUI_DrawOptions+0x250>)
 8002340:	f002 fe6c 	bl	800501c <BSP_LCD_SetBackColor>
		GUI_LCD_DrawRect(x+m, y+m, w-2*m, h);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4413      	add	r3, r2
 800234e:	b298      	uxth	r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4413      	add	r3, r2
 800235a:	b299      	uxth	r1, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	b29b      	uxth	r3, r3
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	b29b      	uxth	r3, r3
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	b29a      	uxth	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	b29b      	uxth	r3, r3
 8002370:	f7ff fae6 	bl	8001940 <GUI_LCD_DrawRect>
		BSP_LCD_SetFont(&Font20);
 8002374:	4869      	ldr	r0, [pc, #420]	; (800251c <GUI_DrawOptions+0x254>)
 8002376:	f002 fe6b 	bl	8005050 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m, (uint8_t *)GUI_options[i].title, LEFT_MODE);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	0052      	lsls	r2, r2, #1
 8002382:	4413      	add	r3, r2
 8002384:	b29a      	uxth	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	b29b      	uxth	r3, r3
 800238a:	4413      	add	r3, r2
 800238c:	b298      	uxth	r0, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	b29b      	uxth	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	0052      	lsls	r2, r2, #1
 8002396:	4413      	add	r3, r2
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4413      	add	r3, r2
 80023a0:	b299      	uxth	r1, r3
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2246      	movs	r2, #70	; 0x46
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <GUI_DrawOptions+0x258>)
 80023ac:	441a      	add	r2, r3
 80023ae:	2303      	movs	r3, #3
 80023b0:	f002 fed4 	bl	800515c <BSP_LCD_DisplayStringAt>

		for (int j = 0; j < GUI_options[i].optnCount; ++j) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e0df      	b.n	800257a <GUI_DrawOptions+0x2b2>
			w = (240-2*m)/GUI_options[i].optnCount;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4957      	ldr	r1, [pc, #348]	; (8002520 <GUI_DrawOptions+0x258>)
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	2046      	movs	r0, #70	; 0x46
 80023c8:	fb00 f202 	mul.w	r2, r0, r2
 80023cc:	440a      	add	r2, r1
 80023ce:	3242      	adds	r2, #66	; 0x42
 80023d0:	8812      	ldrh	r2, [r2, #0]
 80023d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d6:	603b      	str	r3, [r7, #0]
			if (GUI_options[i].active == j) {
 80023d8:	4a51      	ldr	r2, [pc, #324]	; (8002520 <GUI_DrawOptions+0x258>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2146      	movs	r1, #70	; 0x46
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3340      	adds	r3, #64	; 0x40
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d12c      	bne.n	800244a <GUI_DrawOptions+0x182>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
 80023f0:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80023f4:	f002 fdfa 	bl	8004fec <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 80023f8:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80023fc:	f002 fe0e 	bl	800501c <BSP_LCD_SetBackColor>
				GUI_LCD_FillRect(x+m+j*w, y+m+h, w, h-m);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	b29b      	uxth	r3, r3
 8002408:	4413      	add	r3, r2
 800240a:	b29a      	uxth	r2, r3
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	b299      	uxth	r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	fb11 f303 	smulbb	r3, r1, r3
 8002418:	b29b      	uxth	r3, r3
 800241a:	4413      	add	r3, r2
 800241c:	b298      	uxth	r0, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	b29b      	uxth	r3, r3
 8002426:	4413      	add	r3, r2
 8002428:	b29a      	uxth	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4413      	add	r3, r2
 8002430:	b299      	uxth	r1, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b29c      	uxth	r4, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	b29b      	uxth	r3, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b29b      	uxth	r3, r3
 8002442:	4622      	mov	r2, r4
 8002444:	f7ff fa4f 	bl	80018e6 <GUI_LCD_FillRect>
 8002448:	e002      	b.n	8002450 <GUI_DrawOptions+0x188>
			} else {
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 800244a:	4833      	ldr	r0, [pc, #204]	; (8002518 <GUI_DrawOptions+0x250>)
 800244c:	f002 fde6 	bl	800501c <BSP_LCD_SetBackColor>
			}
			BSP_LCD_SetFont(&Font16);
 8002450:	4834      	ldr	r0, [pc, #208]	; (8002524 <GUI_DrawOptions+0x25c>)
 8002452:	f002 fdfd 	bl	8005050 <BSP_LCD_SetFont>
			if ((j>0)&&(GUI_options[i].disabled)) {
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	dd0d      	ble.n	8002478 <GUI_DrawOptions+0x1b0>
 800245c:	4a30      	ldr	r2, [pc, #192]	; (8002520 <GUI_DrawOptions+0x258>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2146      	movs	r1, #70	; 0x46
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3344      	adds	r3, #68	; 0x44
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <GUI_DrawOptions+0x1b0>
				BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8002470:	482d      	ldr	r0, [pc, #180]	; (8002528 <GUI_DrawOptions+0x260>)
 8002472:	f002 fdbb 	bl	8004fec <BSP_LCD_SetTextColor>
 8002476:	e003      	b.n	8002480 <GUI_DrawOptions+0x1b8>
			} else {
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002478:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800247c:	f002 fdb6 	bl	8004fec <BSP_LCD_SetTextColor>
			}
			GUI_LCD_DrawRect(x+m+j*w, y+m+h, w, h-m);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4413      	add	r3, r2
 800248a:	b29a      	uxth	r2, r3
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	b299      	uxth	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	fb11 f303 	smulbb	r3, r1, r3
 8002498:	b29b      	uxth	r3, r3
 800249a:	4413      	add	r3, r2
 800249c:	b298      	uxth	r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	b299      	uxth	r1, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b29c      	uxth	r4, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	4622      	mov	r2, r4
 80024c4:	f7ff fa3c 	bl	8001940 <GUI_LCD_DrawRect>
			uint8_t * text;
			switch (j) {
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d01b      	beq.n	8002506 <GUI_DrawOptions+0x23e>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	dc2b      	bgt.n	800252c <GUI_DrawOptions+0x264>
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <GUI_DrawOptions+0x21a>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d009      	beq.n	80024f4 <GUI_DrawOptions+0x22c>
					break;
				case 2:
					text = (uint8_t *)GUI_options[i].optn2;
					break;
				default:
					break;
 80024e0:	e024      	b.n	800252c <GUI_DrawOptions+0x264>
					text = (uint8_t *)GUI_options[i].optn0;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	2246      	movs	r2, #70	; 0x46
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	3310      	adds	r3, #16
 80024ec:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <GUI_DrawOptions+0x258>)
 80024ee:	4413      	add	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
					break;
 80024f2:	e01c      	b.n	800252e <GUI_DrawOptions+0x266>
					text = (uint8_t *)GUI_options[i].optn1;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2246      	movs	r2, #70	; 0x46
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	3320      	adds	r3, #32
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <GUI_DrawOptions+0x258>)
 8002500:	4413      	add	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
					break;
 8002504:	e013      	b.n	800252e <GUI_DrawOptions+0x266>
					text = (uint8_t *)GUI_options[i].optn2;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2246      	movs	r2, #70	; 0x46
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	3330      	adds	r3, #48	; 0x30
 8002510:	4a03      	ldr	r2, [pc, #12]	; (8002520 <GUI_DrawOptions+0x258>)
 8002512:	4413      	add	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
					break;
 8002516:	e00a      	b.n	800252e <GUI_DrawOptions+0x266>
 8002518:	ffd3d3d3 	.word	0xffd3d3d3
 800251c:	2000028c 	.word	0x2000028c
 8002520:	20000138 	.word	0x20000138
 8002524:	20000294 	.word	0x20000294
 8002528:	ff404040 	.word	0xff404040
					break;
 800252c:	bf00      	nop
			}
			BSP_LCD_DisplayStringAt(x+3*m+j*w, y+4*m+h, text, LEFT_MODE);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	b29b      	uxth	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	0052      	lsls	r2, r2, #1
 8002536:	4413      	add	r3, r2
 8002538:	b29a      	uxth	r2, r3
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	b299      	uxth	r1, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	fb11 f303 	smulbb	r3, r1, r3
 8002546:	b29b      	uxth	r3, r3
 8002548:	4413      	add	r3, r2
 800254a:	b29a      	uxth	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4413      	add	r3, r2
 8002552:	b298      	uxth	r0, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	b29b      	uxth	r3, r3
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	b29b      	uxth	r3, r3
 8002560:	4413      	add	r3, r2
 8002562:	b29a      	uxth	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4413      	add	r3, r2
 800256a:	b299      	uxth	r1, r3
 800256c:	2303      	movs	r3, #3
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	f002 fdf4 	bl	800515c <BSP_LCD_DisplayStringAt>
		for (int j = 0; j < GUI_options[i].optnCount; ++j) {
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	3301      	adds	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <GUI_DrawOptions+0x2e4>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2146      	movs	r1, #70	; 0x46
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	3342      	adds	r3, #66	; 0x42
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4293      	cmp	r3, r2
 8002590:	f6ff af13 	blt.w	80023ba <GUI_DrawOptions+0xf2>
	for (int i = 0; i < 3; ++i) {
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	3301      	adds	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2b02      	cmp	r3, #2
 800259e:	f77f ae9f 	ble.w	80022e0 <GUI_DrawOptions+0x18>
		}
	}
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	3724      	adds	r7, #36	; 0x24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd90      	pop	{r4, r7, pc}
 80025ac:	20000138 	.word	0x20000138

080025b0 <GUI_DrawRaw>:
/** ***************************************************************************
 * @brief Display raw measurements
 *
 * Display raw amplitude values of all sensors
 *****************************************************************************/
void GUI_DrawRaw(void){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
	GUI_ClearSite();
 80025b6:	f7ff fcf9 	bl	8001fac <GUI_ClearSite>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80025ba:	f04f 30ff 	mov.w	r0, #4294967295
 80025be:	f002 fd2d 	bl	800501c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80025c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80025c6:	f002 fd11 	bl	8004fec <BSP_LCD_SetTextColor>

	char text[25];
	uint32_t x = 30;
 80025ca:	231e      	movs	r3, #30
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t y = 60;
 80025ce:	233c      	movs	r3, #60	; 0x3c
 80025d0:	623b      	str	r3, [r7, #32]
	//Hall Sensors
	BSP_LCD_SetFont(&Font20);
 80025d2:	4835      	ldr	r0, [pc, #212]	; (80026a8 <GUI_DrawRaw+0xf8>)
 80025d4:	f002 fd3c 	bl	8005050 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"Hall Sensors:", LEFT_MODE);
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	b298      	uxth	r0, r3
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	b299      	uxth	r1, r3
 80025e0:	2303      	movs	r3, #3
 80025e2:	4a32      	ldr	r2, [pc, #200]	; (80026ac <GUI_DrawRaw+0xfc>)
 80025e4:	f002 fdba 	bl	800515c <BSP_LCD_DisplayStringAt>
	y = y+20;
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	3314      	adds	r3, #20
 80025ec:	623b      	str	r3, [r7, #32]
	BSP_LCD_SetFont(&Font16);
 80025ee:	4830      	ldr	r0, [pc, #192]	; (80026b0 <GUI_DrawRaw+0x100>)
 80025f0:	f002 fd2e 	bl	8005050 <BSP_LCD_SetFont>
	snprintf(text,24,"Right:    %5d", (int)(GUI_rawHallRight));
 80025f4:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <GUI_DrawRaw+0x104>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	1d38      	adds	r0, r7, #4
 80025fa:	4a2f      	ldr	r2, [pc, #188]	; (80026b8 <GUI_DrawRaw+0x108>)
 80025fc:	2118      	movs	r1, #24
 80025fe:	f008 fbe5 	bl	800adcc <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	b298      	uxth	r0, r3
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	b299      	uxth	r1, r3
 800260a:	1d3a      	adds	r2, r7, #4
 800260c:	2303      	movs	r3, #3
 800260e:	f002 fda5 	bl	800515c <BSP_LCD_DisplayStringAt>
	y = y+20;
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	3314      	adds	r3, #20
 8002616:	623b      	str	r3, [r7, #32]
	snprintf(text,24,"Left:     %5d", (int)(GUI_rawHallLeft));
 8002618:	4b28      	ldr	r3, [pc, #160]	; (80026bc <GUI_DrawRaw+0x10c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1d38      	adds	r0, r7, #4
 800261e:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <GUI_DrawRaw+0x110>)
 8002620:	2118      	movs	r1, #24
 8002622:	f008 fbd3 	bl	800adcc <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	b298      	uxth	r0, r3
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	b299      	uxth	r1, r3
 800262e:	1d3a      	adds	r2, r7, #4
 8002630:	2303      	movs	r3, #3
 8002632:	f002 fd93 	bl	800515c <BSP_LCD_DisplayStringAt>
	y = y+35;
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	3323      	adds	r3, #35	; 0x23
 800263a:	623b      	str	r3, [r7, #32]
	//WPC Sensors
	BSP_LCD_SetFont(&Font20);
 800263c:	481a      	ldr	r0, [pc, #104]	; (80026a8 <GUI_DrawRaw+0xf8>)
 800263e:	f002 fd07 	bl	8005050 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)"WPC Sensors:", LEFT_MODE);
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	b298      	uxth	r0, r3
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	b299      	uxth	r1, r3
 800264a:	2303      	movs	r3, #3
 800264c:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <GUI_DrawRaw+0x114>)
 800264e:	f002 fd85 	bl	800515c <BSP_LCD_DisplayStringAt>
	y = y+20;
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	3314      	adds	r3, #20
 8002656:	623b      	str	r3, [r7, #32]
	BSP_LCD_SetFont(&Font16);
 8002658:	4815      	ldr	r0, [pc, #84]	; (80026b0 <GUI_DrawRaw+0x100>)
 800265a:	f002 fcf9 	bl	8005050 <BSP_LCD_SetFont>
	snprintf(text,24,"Right:    %5d", (int)(GUI_rawWpcRight));
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <GUI_DrawRaw+0x118>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	1d38      	adds	r0, r7, #4
 8002664:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <GUI_DrawRaw+0x108>)
 8002666:	2118      	movs	r1, #24
 8002668:	f008 fbb0 	bl	800adcc <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	b298      	uxth	r0, r3
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	b299      	uxth	r1, r3
 8002674:	1d3a      	adds	r2, r7, #4
 8002676:	2303      	movs	r3, #3
 8002678:	f002 fd70 	bl	800515c <BSP_LCD_DisplayStringAt>
	y = y+20;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	3314      	adds	r3, #20
 8002680:	623b      	str	r3, [r7, #32]
	snprintf(text,24,"Left:     %5d", (int)(GUI_rawWpcLeft));
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <GUI_DrawRaw+0x11c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1d38      	adds	r0, r7, #4
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <GUI_DrawRaw+0x110>)
 800268a:	2118      	movs	r1, #24
 800268c:	f008 fb9e 	bl	800adcc <sniprintf>
	BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, LEFT_MODE);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	b298      	uxth	r0, r3
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	b299      	uxth	r1, r3
 8002698:	1d3a      	adds	r2, r7, #4
 800269a:	2303      	movs	r3, #3
 800269c:	f002 fd5e 	bl	800515c <BSP_LCD_DisplayStringAt>
}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	2000028c 	.word	0x2000028c
 80026ac:	0800f474 	.word	0x0800f474
 80026b0:	20000294 	.word	0x20000294
 80026b4:	200004c0 	.word	0x200004c0
 80026b8:	0800f484 	.word	0x0800f484
 80026bc:	200004bc 	.word	0x200004bc
 80026c0:	0800f494 	.word	0x0800f494
 80026c4:	0800f4a4 	.word	0x0800f4a4
 80026c8:	200004c8 	.word	0x200004c8
 80026cc:	200004c4 	.word	0x200004c4

080026d0 <GUI_SiteHandler>:
 * @brief Manage LCD
 *
 * Read out GUI_inputs and display sites accordingly
 * This Function needs to be called every cycle
 *****************************************************************************/
void GUI_SiteHandler(void){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	GUI_TSHandler();
 80026d4:	f000 f8d8 	bl	8002888 <GUI_TSHandler>
	//Init LCD with hint when no site is selected
	switch (GUI_currentSite) {
 80026d8:	4b65      	ldr	r3, [pc, #404]	; (8002870 <GUI_SiteHandler+0x1a0>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	f200 80b2 	bhi.w	8002846 <GUI_SiteHandler+0x176>
 80026e2:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <GUI_SiteHandler+0x18>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	08002701 	.word	0x08002701
 80026ec:	08002799 	.word	0x08002799
 80026f0:	080027f1 	.word	0x080027f1
 80026f4:	08002847 	.word	0x08002847
 80026f8:	0800270d 	.word	0x0800270d
 80026fc:	0800273b 	.word	0x0800273b
		case SITE_NONE:
			GUI_DrawHint();
 8002700:	f7ff f94c 	bl	800199c <GUI_DrawHint>
			GUI_currentSite = SITE_HINT;
 8002704:	4b5a      	ldr	r3, [pc, #360]	; (8002870 <GUI_SiteHandler+0x1a0>)
 8002706:	2204      	movs	r2, #4
 8002708:	701a      	strb	r2, [r3, #0]
			break;
 800270a:	e0a3      	b.n	8002854 <GUI_SiteHandler+0x184>
		case SITE_HINT:
			if(GUI_inputBtn | GUI_inputTS){
 800270c:	4b59      	ldr	r3, [pc, #356]	; (8002874 <GUI_SiteHandler+0x1a4>)
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <GUI_SiteHandler+0x1a8>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4313      	orrs	r3, r2
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8096 	beq.w	800284a <GUI_SiteHandler+0x17a>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 800271e:	f04f 30ff 	mov.w	r0, #4294967295
 8002722:	f002 fcaf 	bl	8005084 <BSP_LCD_Clear>
				GUI_DrawTopMode();
 8002726:	f7ff fa45 	bl	8001bb4 <GUI_DrawTopMode>
				GUI_DrawTopOptions();
 800272a:	f7ff fb57 	bl	8001ddc <GUI_DrawTopOptions>
				GUI_DrawModeSel();
 800272e:	f7ff f98b 	bl	8001a48 <GUI_DrawModeSel>
				GUI_currentSite = SITE_MAIN;
 8002732:	4b4f      	ldr	r3, [pc, #316]	; (8002870 <GUI_SiteHandler+0x1a0>)
 8002734:	2205      	movs	r2, #5
 8002736:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002738:	e087      	b.n	800284a <GUI_SiteHandler+0x17a>
		case SITE_MAIN:
			if(GUI_inputTS){
 800273a:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <GUI_SiteHandler+0x1a8>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d014      	beq.n	800276c <GUI_SiteHandler+0x9c>
				//Display updated mode or go to options
				if (GUI_TSinputType == TOUCH_MODE) {
 8002742:	4b4e      	ldr	r3, [pc, #312]	; (800287c <GUI_SiteHandler+0x1ac>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d102      	bne.n	8002750 <GUI_SiteHandler+0x80>
					GUI_DrawTopMode();
 800274a:	f7ff fa33 	bl	8001bb4 <GUI_DrawTopMode>
					GUI_DrawRaw();
					GUI_DrawTopMode();
				}
				GUI_currentSite = SITE_MEAS;
			}
			break;
 800274e:	e07e      	b.n	800284e <GUI_SiteHandler+0x17e>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 8002750:	4b4a      	ldr	r3, [pc, #296]	; (800287c <GUI_SiteHandler+0x1ac>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d17a      	bne.n	800284e <GUI_SiteHandler+0x17e>
					GUI_currentSite = SITE_OPTN;
 8002758:	4b45      	ldr	r3, [pc, #276]	; (8002870 <GUI_SiteHandler+0x1a0>)
 800275a:	2202      	movs	r2, #2
 800275c:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 800275e:	f7ff fc25 	bl	8001fac <GUI_ClearSite>
					GUI_DrawOptions();
 8002762:	f7ff fdb1 	bl	80022c8 <GUI_DrawOptions>
					GUI_DrawTopOptions();
 8002766:	f7ff fb39 	bl	8001ddc <GUI_DrawTopOptions>
			break;
 800276a:	e070      	b.n	800284e <GUI_SiteHandler+0x17e>
			} else if (GUI_inputMeasReady) {
 800276c:	4b44      	ldr	r3, [pc, #272]	; (8002880 <GUI_SiteHandler+0x1b0>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d06c      	beq.n	800284e <GUI_SiteHandler+0x17e>
				if(GUI_options[0].active==0){
 8002774:	4b43      	ldr	r3, [pc, #268]	; (8002884 <GUI_SiteHandler+0x1b4>)
 8002776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <GUI_SiteHandler+0xb8>
					GUI_DrawMeasurement();
 800277e:	f7ff fc23 	bl	8001fc8 <GUI_DrawMeasurement>
					GUI_DrawTopMode();
 8002782:	f7ff fa17 	bl	8001bb4 <GUI_DrawTopMode>
 8002786:	e003      	b.n	8002790 <GUI_SiteHandler+0xc0>
					GUI_DrawRaw();
 8002788:	f7ff ff12 	bl	80025b0 <GUI_DrawRaw>
					GUI_DrawTopMode();
 800278c:	f7ff fa12 	bl	8001bb4 <GUI_DrawTopMode>
				GUI_currentSite = SITE_MEAS;
 8002790:	4b37      	ldr	r3, [pc, #220]	; (8002870 <GUI_SiteHandler+0x1a0>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
			break;
 8002796:	e05a      	b.n	800284e <GUI_SiteHandler+0x17e>
		case SITE_MEAS:
			if(GUI_inputTS){
 8002798:	4b37      	ldr	r3, [pc, #220]	; (8002878 <GUI_SiteHandler+0x1a8>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d014      	beq.n	80027ca <GUI_SiteHandler+0xfa>
				//Display updated mode or go to options
				if (GUI_TSinputType == TOUCH_MODE) {
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <GUI_SiteHandler+0x1ac>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d102      	bne.n	80027ae <GUI_SiteHandler+0xde>
					GUI_DrawTopMode();
 80027a8:	f7ff fa04 	bl	8001bb4 <GUI_DrawTopMode>
					//Raw
					GUI_DrawRaw();
					GUI_DrawTopMode();
				}
			}
			break;
 80027ac:	e051      	b.n	8002852 <GUI_SiteHandler+0x182>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 80027ae:	4b33      	ldr	r3, [pc, #204]	; (800287c <GUI_SiteHandler+0x1ac>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d14d      	bne.n	8002852 <GUI_SiteHandler+0x182>
					GUI_currentSite = SITE_OPTN;
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <GUI_SiteHandler+0x1a0>)
 80027b8:	2202      	movs	r2, #2
 80027ba:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 80027bc:	f7ff fbf6 	bl	8001fac <GUI_ClearSite>
					GUI_DrawOptions();
 80027c0:	f7ff fd82 	bl	80022c8 <GUI_DrawOptions>
					GUI_DrawTopOptions();
 80027c4:	f7ff fb0a 	bl	8001ddc <GUI_DrawTopOptions>
			break;
 80027c8:	e043      	b.n	8002852 <GUI_SiteHandler+0x182>
			} else if (GUI_inputMeasReady) {
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <GUI_SiteHandler+0x1b0>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d03f      	beq.n	8002852 <GUI_SiteHandler+0x182>
				if(GUI_options[0].active==0){
 80027d2:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <GUI_SiteHandler+0x1b4>)
 80027d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d104      	bne.n	80027e6 <GUI_SiteHandler+0x116>
					GUI_DrawMeasurement();
 80027dc:	f7ff fbf4 	bl	8001fc8 <GUI_DrawMeasurement>
					GUI_DrawTopMode();
 80027e0:	f7ff f9e8 	bl	8001bb4 <GUI_DrawTopMode>
			break;
 80027e4:	e035      	b.n	8002852 <GUI_SiteHandler+0x182>
					GUI_DrawRaw();
 80027e6:	f7ff fee3 	bl	80025b0 <GUI_DrawRaw>
					GUI_DrawTopMode();
 80027ea:	f7ff f9e3 	bl	8001bb4 <GUI_DrawTopMode>
			break;
 80027ee:	e030      	b.n	8002852 <GUI_SiteHandler+0x182>
		case SITE_OPTN:
			if(GUI_inputTS){
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <GUI_SiteHandler+0x1a8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d026      	beq.n	8002846 <GUI_SiteHandler+0x176>
			//Display updated mode, updated settings or go to main screen
				if (GUI_TSinputType == TOUCH_MODE) {
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <GUI_SiteHandler+0x1ac>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d102      	bne.n	8002806 <GUI_SiteHandler+0x136>
					GUI_DrawTopMode();
 8002800:	f7ff f9d8 	bl	8001bb4 <GUI_DrawTopMode>
				} else if (GUI_TSinputType == TOUCH_OPTN_CHANGE){
					GUI_DrawOptions();
				}
			}
		default:
			break;
 8002804:	e01f      	b.n	8002846 <GUI_SiteHandler+0x176>
				} else if (GUI_TSinputType == TOUCH_OPTN) {
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <GUI_SiteHandler+0x1ac>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d115      	bne.n	800283a <GUI_SiteHandler+0x16a>
					GUI_currentSite = SITE_MEAS;
 800280e:	4b18      	ldr	r3, [pc, #96]	; (8002870 <GUI_SiteHandler+0x1a0>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
					GUI_ClearSite();
 8002814:	f7ff fbca 	bl	8001fac <GUI_ClearSite>
					if(GUI_options[0].active==0){
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <GUI_SiteHandler+0x1b4>)
 800281a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <GUI_SiteHandler+0x15c>
						GUI_DrawMeasurement();
 8002822:	f7ff fbd1 	bl	8001fc8 <GUI_DrawMeasurement>
						GUI_DrawTopMode();
 8002826:	f7ff f9c5 	bl	8001bb4 <GUI_DrawTopMode>
 800282a:	e003      	b.n	8002834 <GUI_SiteHandler+0x164>
						GUI_DrawRaw();
 800282c:	f7ff fec0 	bl	80025b0 <GUI_DrawRaw>
						GUI_DrawTopMode();
 8002830:	f7ff f9c0 	bl	8001bb4 <GUI_DrawTopMode>
					GUI_DrawTopOptions();
 8002834:	f7ff fad2 	bl	8001ddc <GUI_DrawTopOptions>
			break;
 8002838:	e005      	b.n	8002846 <GUI_SiteHandler+0x176>
				} else if (GUI_TSinputType == TOUCH_OPTN_CHANGE){
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <GUI_SiteHandler+0x1ac>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d101      	bne.n	8002846 <GUI_SiteHandler+0x176>
					GUI_DrawOptions();
 8002842:	f7ff fd41 	bl	80022c8 <GUI_DrawOptions>
			break;
 8002846:	bf00      	nop
 8002848:	e004      	b.n	8002854 <GUI_SiteHandler+0x184>
			break;
 800284a:	bf00      	nop
 800284c:	e002      	b.n	8002854 <GUI_SiteHandler+0x184>
			break;
 800284e:	bf00      	nop
 8002850:	e000      	b.n	8002854 <GUI_SiteHandler+0x184>
			break;
 8002852:	bf00      	nop
	}

	//Reset Inputs
	GUI_inputBtn = false;
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <GUI_SiteHandler+0x1a4>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
	GUI_inputTS = false;
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <GUI_SiteHandler+0x1a8>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
	GUI_inputMeasReady = false;
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <GUI_SiteHandler+0x1b0>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
	GUI_TSinputType = TOUCH_NONE;
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <GUI_SiteHandler+0x1ac>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200004cc 	.word	0x200004cc
 8002874:	200004cd 	.word	0x200004cd
 8002878:	200004ce 	.word	0x200004ce
 800287c:	200004d0 	.word	0x200004d0
 8002880:	200004cf 	.word	0x200004cf
 8002884:	20000138 	.word	0x20000138

08002888 <GUI_TSHandler>:
/** ***************************************************************************
 * @brief Handle touch screen inputs
 *
 * Determine touch input from Touch position and current site
 *****************************************************************************/
void GUI_TSHandler(void){
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
	GUI_TS_GetState(&GUI_currentTSstate);
 800288e:	4891      	ldr	r0, [pc, #580]	; (8002ad4 <GUI_TSHandler+0x24c>)
 8002890:	f7ff f814 	bl	80018bc <GUI_TS_GetState>
	//detect rising edge of touch input
	if ((GUI_currentTSstate.TouchDetected==1) & (GUI_previousTSstate.TouchDetected==0)) {
 8002894:	4b8f      	ldr	r3, [pc, #572]	; (8002ad4 <GUI_TSHandler+0x24c>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b8d      	ldr	r3, [pc, #564]	; (8002ad8 <GUI_TSHandler+0x250>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4013      	ands	r3, r2
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 81e2 	beq.w	8002c7e <GUI_TSHandler+0x3f6>
		//set touch input to true
		GUI_inputTS = true;
 80028ba:	4b88      	ldr	r3, [pc, #544]	; (8002adc <GUI_TSHandler+0x254>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
		uint16_t X,Y;
		X = GUI_currentTSstate.X;
 80028c0:	4b84      	ldr	r3, [pc, #528]	; (8002ad4 <GUI_TSHandler+0x24c>)
 80028c2:	885b      	ldrh	r3, [r3, #2]
 80028c4:	80fb      	strh	r3, [r7, #6]
		Y = GUI_currentTSstate.Y;
 80028c6:	4b83      	ldr	r3, [pc, #524]	; (8002ad4 <GUI_TSHandler+0x24c>)
 80028c8:	889b      	ldrh	r3, [r3, #4]
 80028ca:	80bb      	strh	r3, [r7, #4]
		if (GUI_currentSite == SITE_HINT) {
 80028cc:	4b84      	ldr	r3, [pc, #528]	; (8002ae0 <GUI_TSHandler+0x258>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d102      	bne.n	80028da <GUI_TSHandler+0x52>
			GUI_TSinputType = TOUCH_GENERAL;
 80028d4:	4b83      	ldr	r3, [pc, #524]	; (8002ae4 <GUI_TSHandler+0x25c>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
		}
		//detect mode change
		if ((GUI_currentSite == SITE_MAIN)|
 80028da:	4b81      	ldr	r3, [pc, #516]	; (8002ae0 <GUI_TSHandler+0x258>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b7d      	ldr	r3, [pc, #500]	; (8002ae0 <GUI_TSHandler+0x258>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
			(GUI_currentSite == SITE_MEAS)|
			(GUI_currentSite == SITE_OPTN)) {
 80028fc:	4b78      	ldr	r3, [pc, #480]	; (8002ae0 <GUI_TSHandler+0x258>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b02      	cmp	r3, #2
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
			(GUI_currentSite == SITE_MEAS)|
 800290a:	4313      	orrs	r3, r2
		if ((GUI_currentSite == SITE_MAIN)|
 800290c:	2b00      	cmp	r3, #0
 800290e:	d07e      	beq.n	8002a0e <GUI_TSHandler+0x186>
			if ((Y>280) & (X<80) & (GUI_mode != MODE_L)) {
 8002910:	88bb      	ldrh	r3, [r7, #4]
 8002912:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002916:	bf8c      	ite	hi
 8002918:	2301      	movhi	r3, #1
 800291a:	2300      	movls	r3, #0
 800291c:	b2da      	uxtb	r2, r3
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b4f      	cmp	r3, #79	; 0x4f
 8002922:	bf94      	ite	ls
 8002924:	2301      	movls	r3, #1
 8002926:	2300      	movhi	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4013      	ands	r3, r2
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	4b6d      	ldr	r3, [pc, #436]	; (8002ae8 <GUI_TSHandler+0x260>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <GUI_TSHandler+0xca>
				GUI_TSinputType = TOUCH_MODE;
 8002944:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <GUI_TSHandler+0x25c>)
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_L;
 800294a:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <GUI_TSHandler+0x260>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e047      	b.n	80029e2 <GUI_TSHandler+0x15a>
			} else if ((Y>280) & (80<X) & (X<160) & (GUI_mode != MODE_LN)) {
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002958:	bf8c      	ite	hi
 800295a:	2301      	movhi	r3, #1
 800295c:	2300      	movls	r3, #0
 800295e:	b2da      	uxtb	r2, r3
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	2b50      	cmp	r3, #80	; 0x50
 8002964:	bf8c      	ite	hi
 8002966:	2301      	movhi	r3, #1
 8002968:	2300      	movls	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4013      	ands	r3, r2
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	2b9f      	cmp	r3, #159	; 0x9f
 8002976:	bf94      	ite	ls
 8002978:	2301      	movls	r3, #1
 800297a:	2300      	movhi	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4013      	ands	r3, r2
 8002980:	4a59      	ldr	r2, [pc, #356]	; (8002ae8 <GUI_TSHandler+0x260>)
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	2a01      	cmp	r2, #1
 8002986:	bf14      	ite	ne
 8002988:	2201      	movne	r2, #1
 800298a:	2200      	moveq	r2, #0
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <GUI_TSHandler+0x11a>
				GUI_TSinputType = TOUCH_MODE;
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <GUI_TSHandler+0x25c>)
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_LN;
 800299a:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <GUI_TSHandler+0x260>)
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e01f      	b.n	80029e2 <GUI_TSHandler+0x15a>
			} else if ((Y>280) & (160<X) & (GUI_mode != MODE_LNPE)) {
 80029a2:	88bb      	ldrh	r3, [r7, #4]
 80029a4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80029a8:	bf8c      	ite	hi
 80029aa:	2301      	movhi	r3, #1
 80029ac:	2300      	movls	r3, #0
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	2ba0      	cmp	r3, #160	; 0xa0
 80029b4:	bf8c      	ite	hi
 80029b6:	2301      	movhi	r3, #1
 80029b8:	2300      	movls	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4013      	ands	r3, r2
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <GUI_TSHandler+0x260>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <GUI_TSHandler+0x15a>
				GUI_TSinputType = TOUCH_MODE;
 80029d6:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <GUI_TSHandler+0x25c>)
 80029d8:	2202      	movs	r2, #2
 80029da:	701a      	strb	r2, [r3, #0]
				GUI_mode = MODE_LNPE;
 80029dc:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <GUI_TSHandler+0x260>)
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]
			}
			//detect option area
			if ((Y<40) & (X>160)) {
 80029e2:	88bb      	ldrh	r3, [r7, #4]
 80029e4:	2b27      	cmp	r3, #39	; 0x27
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	2ba0      	cmp	r3, #160	; 0xa0
 80029f2:	bf8c      	ite	hi
 80029f4:	2301      	movhi	r3, #1
 80029f6:	2300      	movls	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	4013      	ands	r3, r2
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <GUI_TSHandler+0x186>
				GUI_TSinputType = TOUCH_OPTN;
 8002a02:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <GUI_TSHandler+0x25c>)
 8002a04:	2203      	movs	r2, #3
 8002a06:	701a      	strb	r2, [r3, #0]
				HAL_Delay(200);
 8002a08:	20c8      	movs	r0, #200	; 0xc8
 8002a0a:	f003 fc6d 	bl	80062e8 <HAL_Delay>
			}
		}
		//detect option changes
		if (GUI_currentSite == SITE_OPTN) {
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <GUI_TSHandler+0x258>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	f040 8133 	bne.w	8002c7e <GUI_TSHandler+0x3f6>
			if ((80<Y)&(Y<120)){
 8002a18:	88bb      	ldrh	r3, [r7, #4]
 8002a1a:	2b50      	cmp	r3, #80	; 0x50
 8002a1c:	bf8c      	ite	hi
 8002a1e:	2301      	movhi	r3, #1
 8002a20:	2300      	movls	r3, #0
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	88bb      	ldrh	r3, [r7, #4]
 8002a26:	2b77      	cmp	r3, #119	; 0x77
 8002a28:	bf94      	ite	ls
 8002a2a:	2301      	movls	r3, #1
 8002a2c:	2300      	movhi	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05b      	beq.n	8002af0 <GUI_TSHandler+0x268>
				if ((X<120)&(GUI_options[0].active!=0)) {
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	2b77      	cmp	r3, #119	; 0x77
 8002a3c:	bf94      	ite	ls
 8002a3e:	2301      	movls	r3, #1
 8002a40:	2300      	movhi	r3, #0
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <GUI_TSHandler+0x264>)
 8002a46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4013      	ands	r3, r2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00f      	beq.n	8002a7c <GUI_TSHandler+0x1f4>
					GUI_options[0].active=0;
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <GUI_TSHandler+0x264>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
					GUI_options[1].disabled = false;
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <GUI_TSHandler+0x264>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					GUI_options[2].disabled = false;
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <GUI_TSHandler+0x264>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <GUI_TSHandler+0x25c>)
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e100      	b.n	8002c7e <GUI_TSHandler+0x3f6>
				} else if ((X>120)&(GUI_options[0].active!=1)) {
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	2b78      	cmp	r3, #120	; 0x78
 8002a80:	bf8c      	ite	hi
 8002a82:	2301      	movhi	r3, #1
 8002a84:	2300      	movls	r3, #0
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <GUI_TSHandler+0x264>)
 8002a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80ee 	beq.w	8002c7e <GUI_TSHandler+0x3f6>
					GUI_options[0].active=1;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <GUI_TSHandler+0x264>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
					GUI_options[1].disabled = true;
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <GUI_TSHandler+0x264>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					GUI_options[1].active = 0;
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <GUI_TSHandler+0x264>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					GUI_options[2].disabled = true;
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <GUI_TSHandler+0x264>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_options[2].active = 0;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <GUI_TSHandler+0x264>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <GUI_TSHandler+0x25c>)
 8002acc:	2204      	movs	r2, #4
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e0d5      	b.n	8002c7e <GUI_TSHandler+0x3f6>
 8002ad2:	bf00      	nop
 8002ad4:	20000944 	.word	0x20000944
 8002ad8:	2000094c 	.word	0x2000094c
 8002adc:	200004ce 	.word	0x200004ce
 8002ae0:	200004cc 	.word	0x200004cc
 8002ae4:	200004d0 	.word	0x200004d0
 8002ae8:	200004b6 	.word	0x200004b6
 8002aec:	20000138 	.word	0x20000138
				}
			} else if ((160<Y)&(Y<200)&!(GUI_options[1].disabled)){
 8002af0:	88bb      	ldrh	r3, [r7, #4]
 8002af2:	2ba0      	cmp	r3, #160	; 0xa0
 8002af4:	bf8c      	ite	hi
 8002af6:	2301      	movhi	r3, #1
 8002af8:	2300      	movls	r3, #0
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	88bb      	ldrh	r3, [r7, #4]
 8002afe:	2bc7      	cmp	r3, #199	; 0xc7
 8002b00:	bf94      	ite	ls
 8002b02:	2301      	movls	r3, #1
 8002b04:	2300      	movhi	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002b10:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8002b14:	f083 0301 	eor.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d03f      	beq.n	8002ba0 <GUI_TSHandler+0x318>
				if ((X<120)&(GUI_options[1].active!=0)) {
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b77      	cmp	r3, #119	; 0x77
 8002b24:	bf94      	ite	ls
 8002b26:	2301      	movls	r3, #1
 8002b28:	2300      	movhi	r3, #0
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002b2e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf14      	ite	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	2300      	moveq	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <GUI_TSHandler+0x2d4>
					GUI_options[1].active = 0;
 8002b44:	4b62      	ldr	r3, [pc, #392]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					GUI_options[2].disabled = false;
 8002b4c:	4b60      	ldr	r3, [pc, #384]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002b54:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <GUI_TSHandler+0x44c>)
 8002b56:	2204      	movs	r2, #4
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e090      	b.n	8002c7e <GUI_TSHandler+0x3f6>
				} else if ((X>120)&(GUI_options[1].active!=1)) {
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	2b78      	cmp	r3, #120	; 0x78
 8002b60:	bf8c      	ite	hi
 8002b62:	2301      	movhi	r3, #1
 8002b64:	2300      	movls	r3, #0
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002b6a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d07e      	beq.n	8002c7e <GUI_TSHandler+0x3f6>
					GUI_options[1].active = 1;
 8002b80:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
					GUI_options[2].disabled = true;
 8002b88:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
					GUI_options[2].active = 0;
 8002b90:	4b4f      	ldr	r3, [pc, #316]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002b98:	4b4e      	ldr	r3, [pc, #312]	; (8002cd4 <GUI_TSHandler+0x44c>)
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e06e      	b.n	8002c7e <GUI_TSHandler+0x3f6>
				}
			} else if ((240<Y)&(Y<280)&!(GUI_options[2].disabled)){
 8002ba0:	88bb      	ldrh	r3, [r7, #4]
 8002ba2:	2bf0      	cmp	r3, #240	; 0xf0
 8002ba4:	bf8c      	ite	hi
 8002ba6:	2301      	movhi	r3, #1
 8002ba8:	2300      	movls	r3, #0
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	88bb      	ldrh	r3, [r7, #4]
 8002bae:	f240 1117 	movw	r1, #279	; 0x117
 8002bb2:	428b      	cmp	r3, r1
 8002bb4:	bf94      	ite	ls
 8002bb6:	2301      	movls	r3, #1
 8002bb8:	2300      	movhi	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002bc4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d054      	beq.n	8002c7e <GUI_TSHandler+0x3f6>
				if ((X<80)&(GUI_options[2].active!=0)) {
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	2b4f      	cmp	r3, #79	; 0x4f
 8002bd8:	bf94      	ite	ls
 8002bda:	2301      	movls	r3, #1
 8002bdc:	2300      	movhi	r3, #0
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002be2:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <GUI_TSHandler+0x380>
					GUI_options[2].active = 0;
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002c00:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <GUI_TSHandler+0x44c>)
 8002c02:	2204      	movs	r2, #4
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e03a      	b.n	8002c7e <GUI_TSHandler+0x3f6>
				} else if ((X>80)&(X<160)&(GUI_options[2].active!=1)) {
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	2b50      	cmp	r3, #80	; 0x50
 8002c0c:	bf8c      	ite	hi
 8002c0e:	2301      	movhi	r3, #1
 8002c10:	2300      	movls	r3, #0
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	2b9f      	cmp	r3, #159	; 0x9f
 8002c18:	bf94      	ite	ls
 8002c1a:	2301      	movls	r3, #1
 8002c1c:	2300      	movhi	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4013      	ands	r3, r2
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002c28:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <GUI_TSHandler+0x3c4>
					GUI_options[2].active = 1;
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002c44:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <GUI_TSHandler+0x44c>)
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e018      	b.n	8002c7e <GUI_TSHandler+0x3f6>
				} else if ((X>160)&(GUI_options[2].active!=2)) {
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c50:	bf8c      	ite	hi
 8002c52:	2301      	movhi	r3, #1
 8002c54:	2300      	movls	r3, #0
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002c5a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	bf14      	ite	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	2300      	moveq	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <GUI_TSHandler+0x3f6>
					GUI_options[2].active = 2;
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <GUI_TSHandler+0x448>)
 8002c72:	2202      	movs	r2, #2
 8002c74:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					GUI_TSinputType = TOUCH_OPTN_CHANGE;
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <GUI_TSHandler+0x44c>)
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	//notify analytics
	if ((GUI_TSinputType == TOUCH_OPTN_CHANGE)|(GUI_TSinputType == TOUCH_MODE)) {
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <GUI_TSHandler+0x44c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <GUI_TSHandler+0x44c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <GUI_TSHandler+0x420>
		GUI_outOptn = true;
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <GUI_TSHandler+0x450>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
	}
	//save current TS state as previous state
	GUI_previousTSstate.TouchDetected = GUI_currentTSstate.TouchDetected;
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <GUI_TSHandler+0x454>)
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <GUI_TSHandler+0x458>)
 8002cae:	801a      	strh	r2, [r3, #0]
	GUI_previousTSstate.X = GUI_currentTSstate.X;
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <GUI_TSHandler+0x454>)
 8002cb2:	885a      	ldrh	r2, [r3, #2]
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <GUI_TSHandler+0x458>)
 8002cb6:	805a      	strh	r2, [r3, #2]
	GUI_previousTSstate.Y = GUI_currentTSstate.Y;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <GUI_TSHandler+0x454>)
 8002cba:	889a      	ldrh	r2, [r3, #4]
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <GUI_TSHandler+0x458>)
 8002cbe:	809a      	strh	r2, [r3, #4]
	GUI_previousTSstate.Z = GUI_currentTSstate.Z;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <GUI_TSHandler+0x454>)
 8002cc2:	88da      	ldrh	r2, [r3, #6]
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <GUI_TSHandler+0x458>)
 8002cc6:	80da      	strh	r2, [r3, #6]
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000138 	.word	0x20000138
 8002cd4:	200004d0 	.word	0x200004d0
 8002cd8:	200004d1 	.word	0x200004d1
 8002cdc:	20000944 	.word	0x20000944
 8002ce0:	2000094c 	.word	0x2000094c

08002ce4 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8002ce4:	b598      	push	{r3, r4, r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8002ce8:	f003 fa84 	bl	80061f4 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 8002cec:	f000 f940 	bl	8002f70 <SystemClock_Config>

	BSP_LCD_Init();						// Initialize the LCD display
 8002cf0:	f002 f886 	bl	8004e00 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8002cf4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f002 f903 	bl	8004f04 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f002 f964 	bl	8004fcc <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8002d04:	f002 fda8 	bl	8005858 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f002 f9ba 	bl	8005084 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8002d10:	f002 f8e0 	bl	8004ed4 <BSP_LCD_GetXSize>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b29c      	uxth	r4, r3
 8002d18:	f002 f8e8 	bl	8004eec <BSP_LCD_GetYSize>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	4620      	mov	r0, r4
 8002d24:	f003 f962 	bl	8005fec <BSP_TS_Init>

	PB_init();							// Initialize the user pushbutton
 8002d28:	f000 ff20 	bl	8003b6c <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8002d2c:	f000 ff3e 	bl	8003bac <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8002d30:	2000      	movs	r0, #0
 8002d32:	f001 fc4d 	bl	80045d0 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8002d36:	2001      	movs	r0, #1
 8002d38:	f001 fc4a 	bl	80045d0 <BSP_LED_Init>

	gyro_disable();						// Disable gyro, use those analog inputs
 8002d3c:	f000 f996 	bl	800306c <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8002d40:	f000 fa54 	bl	80031ec <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8002d44:	f000 fab4 	bl	80032b0 <MEAS_timer_init>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f001 fcc9 	bl	80046e0 <BSP_LED_Toggle>

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 8002d4e:	f000 ff5f 	bl	8003c10 <PB_pressed>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <main+0x80>
			ANA_inBtn = true;			// Send to analytics handler
 8002d58:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <main+0x210>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
			GUI_inputBtn = true;		// Send to site handler
 8002d5e:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <main+0x214>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
		}

		if (MEAS_data_ready) {			// Show data if new data available
 8002d64:	4b65      	ldr	r3, [pc, #404]	; (8002efc <main+0x218>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <main+0xa4>
			ANA_inAmpLeft = MEAS_amplitude_left;
 8002d6c:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <main+0x21c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a64      	ldr	r2, [pc, #400]	; (8002f04 <main+0x220>)
 8002d72:	6013      	str	r3, [r2, #0]
			ANA_inAmpRight = MEAS_amplitude_right;
 8002d74:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <main+0x224>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a64      	ldr	r2, [pc, #400]	; (8002f0c <main+0x228>)
 8002d7a:	6013      	str	r3, [r2, #0]
			ANA_inMeasReady = true;		// Send to analytics handler
 8002d7c:	4b64      	ldr	r3, [pc, #400]	; (8002f10 <main+0x22c>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
			MEAS_data_ready = false;	// Reset meas data ready bit
 8002d82:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <main+0x218>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
		}

		if (ANA_outStartHALL) {
 8002d88:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <main+0x230>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <main+0xba>
			ADC3_IN11_IN6_scan_init();
 8002d90:	f000 fb60 	bl	8003454 <ADC3_IN11_IN6_scan_init>
			ADC3_dual_scan_start();
 8002d94:	f000 fbfa 	bl	800358c <ADC3_dual_scan_start>
			ANA_outStartHALL = false;
 8002d98:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <main+0x230>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
		}

		if (ANA_outStartWPC) {
 8002d9e:	4b5e      	ldr	r3, [pc, #376]	; (8002f18 <main+0x234>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <main+0xd0>
			ADC3_IN13_IN4_scan_init();
 8002da6:	f000 fab9 	bl	800331c <ADC3_IN13_IN4_scan_init>
			ADC3_dual_scan_start();
 8002daa:	f000 fbef 	bl	800358c <ADC3_dual_scan_start>
			ANA_outStartWPC = false;
 8002dae:	4b5a      	ldr	r3, [pc, #360]	; (8002f18 <main+0x234>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
		}

		if (ANA_outDataReady) {
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <main+0x238>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05b      	beq.n	8002e74 <main+0x190>
			//Transfer Data
			if (ANA_inOptn[1]==0) {
 8002dbc:	4b58      	ldr	r3, [pc, #352]	; (8002f20 <main+0x23c>)
 8002dbe:	885b      	ldrh	r3, [r3, #2]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d12d      	bne.n	8002e20 <main+0x13c>
				//Analysed
				if (ANA_outResults[1]<5000) {
 8002dc4:	4b57      	ldr	r3, [pc, #348]	; (8002f24 <main+0x240>)
 8002dc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dca:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002f28 <main+0x244>
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d513      	bpl.n	8002e00 <main+0x11c>
					GUI_angle = ANA_outResults[0];
 8002dd8:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <main+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a53      	ldr	r2, [pc, #332]	; (8002f2c <main+0x248>)
 8002dde:	6013      	str	r3, [r2, #0]
					GUI_distance = ANA_outResults[1];
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <main+0x240>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <main+0x24c>)
 8002de6:	6013      	str	r3, [r2, #0]
					GUI_distanceDeviation = ANA_outResults[2];
 8002de8:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <main+0x240>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a51      	ldr	r2, [pc, #324]	; (8002f34 <main+0x250>)
 8002dee:	6013      	str	r3, [r2, #0]
					GUI_current = ANA_outResults[3];
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <main+0x240>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a50      	ldr	r2, [pc, #320]	; (8002f38 <main+0x254>)
 8002df6:	6013      	str	r3, [r2, #0]
					GUI_cable_detected = true;
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <main+0x258>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e033      	b.n	8002e68 <main+0x184>
				} else {
					GUI_angle = 90;
 8002e00:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <main+0x248>)
 8002e02:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <main+0x25c>)
 8002e04:	601a      	str	r2, [r3, #0]
					GUI_distance = -1;
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <main+0x24c>)
 8002e08:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <main+0x260>)
 8002e0a:	601a      	str	r2, [r3, #0]
					GUI_distanceDeviation = -1;
 8002e0c:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <main+0x250>)
 8002e0e:	4a4d      	ldr	r2, [pc, #308]	; (8002f44 <main+0x260>)
 8002e10:	601a      	str	r2, [r3, #0]
					GUI_current = -1;
 8002e12:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <main+0x254>)
 8002e14:	4a4b      	ldr	r2, [pc, #300]	; (8002f44 <main+0x260>)
 8002e16:	601a      	str	r2, [r3, #0]
					GUI_cable_not_detected = true;
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <main+0x264>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e023      	b.n	8002e68 <main+0x184>
				}


			} else {
				//Raw
				GUI_rawHallRight = ANA_outResults[0];
 8002e20:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <main+0x240>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e2a:	ee17 2a90 	vmov	r2, s15
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <main+0x268>)
 8002e30:	601a      	str	r2, [r3, #0]
				GUI_rawHallLeft = ANA_outResults[1];
 8002e32:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <main+0x240>)
 8002e34:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3c:	ee17 2a90 	vmov	r2, s15
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <main+0x26c>)
 8002e42:	601a      	str	r2, [r3, #0]
				GUI_rawWpcRight = ANA_outResults[2];
 8002e44:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <main+0x240>)
 8002e46:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4e:	ee17 2a90 	vmov	r2, s15
 8002e52:	4b40      	ldr	r3, [pc, #256]	; (8002f54 <main+0x270>)
 8002e54:	601a      	str	r2, [r3, #0]
				GUI_rawWpcLeft = ANA_outResults[3];
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <main+0x240>)
 8002e58:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e60:	ee17 2a90 	vmov	r2, s15
 8002e64:	4b3c      	ldr	r3, [pc, #240]	; (8002f58 <main+0x274>)
 8002e66:	601a      	str	r2, [r3, #0]
			}
			GUI_inputMeasReady = true;
 8002e68:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <main+0x278>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
			ANA_outDataReady = false;
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <main+0x238>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
		}

		if (ANA_measBusy) {
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <main+0x27c>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <main+0x1a0>
			BSP_LED_On(LED4);
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f001 fbfb 	bl	8004678 <BSP_LED_On>
 8002e82:	e002      	b.n	8002e8a <main+0x1a6>
		} else {
			BSP_LED_Off(LED4);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f001 fc11 	bl	80046ac <BSP_LED_Off>
		}

		if (GUI_outOptn) {						// Check if Options were changed
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <main+0x280>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d02a      	beq.n	8002ee8 <main+0x204>
			ANA_inOptn[0]=GUI_mode;				// Transfer mode
 8002e92:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <main+0x284>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <main+0x23c>)
 8002e9a:	801a      	strh	r2, [r3, #0]
			ANA_inOptn[1]=GUI_options[0].active;// Transfer data type
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <main+0x288>)
 8002e9e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <main+0x23c>)
 8002ea4:	805a      	strh	r2, [r3, #2]
			ANA_inOptn[2]=GUI_options[1].active;// Transfer measuring type
 8002ea6:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <main+0x288>)
 8002ea8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8002eac:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <main+0x23c>)
 8002eae:	809a      	strh	r2, [r3, #4]
			switch (GUI_options[2].active) {	// Transfer accuracy
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <main+0x288>)
 8002eb2:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d00e      	beq.n	8002ed8 <main+0x1f4>
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	dc10      	bgt.n	8002ee0 <main+0x1fc>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <main+0x1e4>
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d004      	beq.n	8002ed0 <main+0x1ec>
					break;
				case 2:
					ANA_inOptn[3]=10;
					break;
				default:
					break;
 8002ec6:	e00b      	b.n	8002ee0 <main+0x1fc>
					ANA_inOptn[3]=1;
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <main+0x23c>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	80da      	strh	r2, [r3, #6]
					break;
 8002ece:	e008      	b.n	8002ee2 <main+0x1fe>
					ANA_inOptn[3]=5;
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <main+0x23c>)
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	80da      	strh	r2, [r3, #6]
					break;
 8002ed6:	e004      	b.n	8002ee2 <main+0x1fe>
					ANA_inOptn[3]=10;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <main+0x23c>)
 8002eda:	220a      	movs	r2, #10
 8002edc:	80da      	strh	r2, [r3, #6]
					break;
 8002ede:	e000      	b.n	8002ee2 <main+0x1fe>
					break;
 8002ee0:	bf00      	nop
			}
			GUI_outOptn = false;				// Reset option bit
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <main+0x280>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
		}

		//Analytics handler
		ANA_Handler();
 8002ee8:	f7fe f9f8 	bl	80012dc <ANA_Handler>

		//Site handler
		GUI_SiteHandler();
 8002eec:	f7ff fbf0 	bl	80026d0 <GUI_SiteHandler>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8002ef0:	e72a      	b.n	8002d48 <main+0x64>
 8002ef2:	bf00      	nop
 8002ef4:	200004a0 	.word	0x200004a0
 8002ef8:	200004cd 	.word	0x200004cd
 8002efc:	200004d2 	.word	0x200004d2
 8002f00:	200004d4 	.word	0x200004d4
 8002f04:	200004a4 	.word	0x200004a4
 8002f08:	200004d8 	.word	0x200004d8
 8002f0c:	200004a8 	.word	0x200004a8
 8002f10:	200004a1 	.word	0x200004a1
 8002f14:	200004ac 	.word	0x200004ac
 8002f18:	200004ad 	.word	0x200004ad
 8002f1c:	200004ae 	.word	0x200004ae
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000934 	.word	0x20000934
 8002f28:	459c4000 	.word	0x459c4000
 8002f2c:	200004b8 	.word	0x200004b8
 8002f30:	2000012c 	.word	0x2000012c
 8002f34:	20000130 	.word	0x20000130
 8002f38:	20000134 	.word	0x20000134
 8002f3c:	200004b4 	.word	0x200004b4
 8002f40:	42b40000 	.word	0x42b40000
 8002f44:	bf800000 	.word	0xbf800000
 8002f48:	200004b5 	.word	0x200004b5
 8002f4c:	200004c0 	.word	0x200004c0
 8002f50:	200004bc 	.word	0x200004bc
 8002f54:	200004c8 	.word	0x200004c8
 8002f58:	200004c4 	.word	0x200004c4
 8002f5c:	200004cf 	.word	0x200004cf
 8002f60:	200004af 	.word	0x200004af
 8002f64:	200004d1 	.word	0x200004d1
 8002f68:	200004b6 	.word	0x200004b6
 8002f6c:	20000138 	.word	0x20000138

08002f70 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0a0      	sub	sp, #128	; 0x80
 8002f74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f7a:	2230      	movs	r2, #48	; 0x30
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f007 fab2 	bl	800a4e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	2230      	movs	r2, #48	; 0x30
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f007 faa3 	bl	800a4e8 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <SystemClock_Config+0xf0>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a2d      	ldr	r2, [pc, #180]	; (8003060 <SystemClock_Config+0xf0>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <SystemClock_Config+0xf0>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <SystemClock_Config+0xf4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <SystemClock_Config+0xf4>)
 8002fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b25      	ldr	r3, [pc, #148]	; (8003064 <SystemClock_Config+0xf4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fe8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fec:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002fee:	2308      	movs	r3, #8
 8002ff0:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002ff2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ff6:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003000:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003004:	4618      	mov	r0, r3
 8003006:	f005 fbc1 	bl	800878c <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800300a:	230f      	movs	r3, #15
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300e:	2302      	movs	r3, #2
 8003010:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003012:	2300      	movs	r3, #0
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003016:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800301c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003020:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003022:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003026:	2105      	movs	r1, #5
 8003028:	4618      	mov	r0, r3
 800302a:	f005 fe1f 	bl	8008c6c <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800302e:	2308      	movs	r3, #8
 8003030:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003032:	23c0      	movs	r3, #192	; 0xc0
 8003034:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003036:	2304      	movs	r3, #4
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800303a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800303e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003040:	f107 030c 	add.w	r3, r7, #12
 8003044:	4618      	mov	r0, r3
 8003046:	f005 fff9 	bl	800903c <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <SystemClock_Config+0xf8>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a06      	ldr	r2, [pc, #24]	; (8003068 <SystemClock_Config+0xf8>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6053      	str	r3, [r2, #4]
}
 8003056:	bf00      	nop
 8003058:	3780      	adds	r7, #128	; 0x80
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000
 8003068:	40012300 	.word	0x40012300

0800306c <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <gyro_disable+0xb4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <gyro_disable+0xb4>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <gyro_disable+0xb4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1; // Reset mode for PC1
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <gyro_disable+0xb8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <gyro_disable+0xb8>)
 8003094:	f023 030c 	bic.w	r3, r3, #12
 8003098:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0;	// Set PC1 as output
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <gyro_disable+0xb8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <gyro_disable+0xb8>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <gyro_disable+0xb8>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <gyro_disable+0xb8>)
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80030b2:	200a      	movs	r0, #10
 80030b4:	f003 f918 	bl	80062e8 <HAL_Delay>
	GPIOC->MODER |= GPIO_MODER_MODER1_Msk; // Analog mode PC1 = ADC123_IN11
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <gyro_disable+0xb8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	; (8003124 <gyro_disable+0xb8>)
 80030be:	f043 030c 	orr.w	r3, r3, #12
 80030c2:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80030c4:	2300      	movs	r3, #0
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <gyro_disable+0xb4>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <gyro_disable+0xb4>)
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	6313      	str	r3, [r2, #48]	; 0x30
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <gyro_disable+0xb4>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8;	// Reset speed of PF8
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <gyro_disable+0xbc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a10      	ldr	r2, [pc, #64]	; (8003128 <gyro_disable+0xbc>)
 80030e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80030ea:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8;			// Reset alternate func. of PF8
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <gyro_disable+0xbc>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <gyro_disable+0xbc>)
 80030f2:	f023 030f 	bic.w	r3, r3, #15
 80030f6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8;			// Reset pulup/down of PF8
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <gyro_disable+0xbc>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <gyro_disable+0xbc>)
 80030fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003102:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8003104:	200a      	movs	r0, #10
 8003106:	f003 f8ef 	bl	80062e8 <HAL_Delay>
	GPIOF->MODER |= GPIO_MODER_MODER8_Msk; // Analog mode for PF6 = ADC3_IN4
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <gyro_disable+0xbc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a06      	ldr	r2, [pc, #24]	; (8003128 <gyro_disable+0xbc>)
 8003110:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003114:	6013      	str	r3, [r2, #0]
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	40020800 	.word	0x40020800
 8003128:	40021400 	.word	0x40021400

0800312c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	2b00      	cmp	r3, #0
 800313c:	db0b      	blt.n	8003156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	f003 021f 	and.w	r2, r3, #31
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <__NVIC_EnableIRQ+0x38>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2001      	movs	r0, #1
 800314e:	fa00 f202 	lsl.w	r2, r0, r2
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000e100 	.word	0xe000e100

08003168 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	db12      	blt.n	80031a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	490a      	ldr	r1, [pc, #40]	; (80031ac <__NVIC_DisableIRQ+0x44>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2001      	movs	r0, #1
 800318a:	fa00 f202 	lsl.w	r2, r0, r2
 800318e:	3320      	adds	r3, #32
 8003190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003194:	f3bf 8f4f 	dsb	sy
}
 8003198:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800319a:	f3bf 8f6f 	isb	sy
}
 800319e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000e100 	.word	0xe000e100

080031b0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db0c      	blt.n	80031dc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	4907      	ldr	r1, [pc, #28]	; (80031e8 <__NVIC_ClearPendingIRQ+0x38>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2001      	movs	r0, #1
 80031d2:	fa00 f202 	lsl.w	r2, r0, r2
 80031d6:	3360      	adds	r3, #96	; 0x60
 80031d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100

080031ec <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <MEAS_GPIO_analog_init+0x7c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <MEAS_GPIO_analog_init+0x7c>)
 80031fc:	f043 0320 	orr.w	r3, r3, #32
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b19      	ldr	r3, [pc, #100]	; (8003268 <MEAS_GPIO_analog_init+0x7c>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
	GPIOF->MODER |= (GPIO_MODER_MODER6_Msk);// Analog mode for PF6 = ADC3_IN4
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <MEAS_GPIO_analog_init+0x80>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <MEAS_GPIO_analog_init+0x80>)
 8003214:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003218:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (GPIO_MODER_MODER8_Msk);// Analog mode for PF8 = ADC3_IN6
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <MEAS_GPIO_analog_init+0x80>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a13      	ldr	r2, [pc, #76]	; (800326c <MEAS_GPIO_analog_init+0x80>)
 8003220:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003224:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8003226:	2300      	movs	r3, #0
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <MEAS_GPIO_analog_init+0x7c>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <MEAS_GPIO_analog_init+0x7c>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <MEAS_GPIO_analog_init+0x7c>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
	GPIOC->MODER |= (GPIO_MODER_MODER1_Msk);// Analog mode for PC1 = ADC123_IN11
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <MEAS_GPIO_analog_init+0x84>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <MEAS_GPIO_analog_init+0x84>)
 8003248:	f043 030c 	orr.w	r3, r3, #12
 800324c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODER3_Msk);// Analog mode for PC3 = ADC123_IN13
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <MEAS_GPIO_analog_init+0x84>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a07      	ldr	r2, [pc, #28]	; (8003270 <MEAS_GPIO_analog_init+0x84>)
 8003254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003258:	6013      	str	r3, [r2, #0]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	40021400 	.word	0x40021400
 8003270:	40020800 	.word	0x40020800

08003274 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <ADC_reset+0x38>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <ADC_reset+0x38>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003282:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <ADC_reset+0x38>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	4a08      	ldr	r2, [pc, #32]	; (80032ac <ADC_reset+0x38>)
 800328a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800328e:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8003290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <MEAS_timer_init+0x68>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <MEAS_timer_init+0x68>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <MEAS_timer_init+0x68>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80032d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032d6:	f243 62af 	movw	r2, #13999	; 0x36af
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80032dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032e0:	2209      	movs	r2, #9
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80032e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032ee:	f043 0320 	orr.w	r3, r3, #32
 80032f2:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 80032f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8003304:	201c      	movs	r0, #28
 8003306:	f7ff ff53 	bl	80031b0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 800330a:	201c      	movs	r0, #28
 800330c:	f7ff ff0e 	bl	800312c <__NVIC_EnableIRQ>
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800

0800331c <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	4b45      	ldr	r3, [pc, #276]	; (800343c <ADC3_IN13_IN4_scan_init+0x120>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a44      	ldr	r2, [pc, #272]	; (800343c <ADC3_IN13_IN4_scan_init+0x120>)
 800332c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b42      	ldr	r3, [pc, #264]	; (800343c <ADC3_IN13_IN4_scan_init+0x120>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= ADC_SQR1_L_0;			// Convert 2 inputs
 800333e:	4b40      	ldr	r3, [pc, #256]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	4a3f      	ldr	r2, [pc, #252]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003348:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	4a3c      	ldr	r2, [pc, #240]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003350:	f043 030d 	orr.w	r3, r3, #13
 8003354:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8003356:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	4a39      	ldr	r2, [pc, #228]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 800335c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003360:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a36      	ldr	r2, [pc, #216]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 800336e:	4b34      	ldr	r3, [pc, #208]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	4a33      	ldr	r2, [pc, #204]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	4a30      	ldr	r2, [pc, #192]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003380:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8003384:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8003386:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4a2d      	ldr	r2, [pc, #180]	; (8003440 <ADC3_IN13_IN4_scan_init+0x124>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003390:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8003392:	2300      	movs	r3, #0
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4b29      	ldr	r3, [pc, #164]	; (800343c <ADC3_IN13_IN4_scan_init+0x120>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a28      	ldr	r2, [pc, #160]	; (800343c <ADC3_IN13_IN4_scan_init+0x120>)
 800339c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <ADC3_IN13_IN4_scan_init+0x120>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 80033ae:	4b25      	ldr	r3, [pc, #148]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a24      	ldr	r2, [pc, #144]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80033ba:	bf00      	nop
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f9      	bne.n	80033bc <ADC3_IN13_IN4_scan_init+0xa0>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <ADC3_IN13_IN4_scan_init+0x12c>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <ADC3_IN13_IN4_scan_init+0x12c>)
 80033ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033d2:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033de:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 80033e0:	4b18      	ldr	r3, [pc, #96]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a17      	ldr	r2, [pc, #92]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ea:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a14      	ldr	r2, [pc, #80]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f6:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 80033fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003402:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0e      	ldr	r2, [pc, #56]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 800340a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800340e:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 8003416:	f043 0310 	orr.w	r3, r3, #16
 800341a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 800341e:	2278      	movs	r2, #120	; 0x78
 8003420:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <ADC3_IN13_IN4_scan_init+0x130>)
 8003426:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <ADC3_IN13_IN4_scan_init+0x128>)
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <ADC3_IN13_IN4_scan_init+0x134>)
 800342c:	60da      	str	r2, [r3, #12]

}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	40012200 	.word	0x40012200
 8003444:	40026428 	.word	0x40026428
 8003448:	40026400 	.word	0x40026400
 800344c:	4001224c 	.word	0x4001224c
 8003450:	200004e0 	.word	0x200004e0

08003454 <ADC3_IN11_IN6_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN11_IN6_scan_init(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	4b45      	ldr	r3, [pc, #276]	; (8003574 <ADC3_IN11_IN6_scan_init+0x120>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4a44      	ldr	r2, [pc, #272]	; (8003574 <ADC3_IN11_IN6_scan_init+0x120>)
 8003464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003468:	6453      	str	r3, [r2, #68]	; 0x44
 800346a:	4b42      	ldr	r3, [pc, #264]	; (8003574 <ADC3_IN11_IN6_scan_init+0x120>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= ADC_SQR1_L_0;			// Convert 2 inputs
 8003476:	4b40      	ldr	r3, [pc, #256]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 800347c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003480:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC3->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	4a3c      	ldr	r2, [pc, #240]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 8003488:	f043 030b 	orr.w	r3, r3, #11
 800348c:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (6UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 800348e:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	4a39      	ldr	r2, [pc, #228]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 8003494:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003498:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 800349a:	4b37      	ldr	r3, [pc, #220]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a36      	ldr	r2, [pc, #216]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80034a6:	4b34      	ldr	r3, [pc, #208]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	4a33      	ldr	r2, [pc, #204]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4a30      	ldr	r2, [pc, #192]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 80034b8:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80034bc:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <ADC3_IN11_IN6_scan_init+0x124>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80034ca:	2300      	movs	r3, #0
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4b29      	ldr	r3, [pc, #164]	; (8003574 <ADC3_IN11_IN6_scan_init+0x120>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a28      	ldr	r2, [pc, #160]	; (8003574 <ADC3_IN11_IN6_scan_init+0x120>)
 80034d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <ADC3_IN11_IN6_scan_init+0x120>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a24      	ldr	r2, [pc, #144]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80034f2:	bf00      	nop
 80034f4:	4b21      	ldr	r3, [pc, #132]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f9      	bne.n	80034f4 <ADC3_IN11_IN6_scan_init+0xa0>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8003500:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <ADC3_IN11_IN6_scan_init+0x12c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <ADC3_IN11_IN6_scan_init+0x12c>)
 8003506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800350a:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1a      	ldr	r2, [pc, #104]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 8003512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003516:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a17      	ldr	r2, [pc, #92]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 800351e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003522:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8003524:	4b15      	ldr	r3, [pc, #84]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a14      	ldr	r2, [pc, #80]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 800352a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352e:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8003530:	4b12      	ldr	r3, [pc, #72]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a11      	ldr	r2, [pc, #68]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 8003536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800353a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 8003542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003546:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0b      	ldr	r2, [pc, #44]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 800354e:	f043 0310 	orr.w	r3, r3, #16
 8003552:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 8003556:	2278      	movs	r2, #120	; 0x78
 8003558:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <ADC3_IN11_IN6_scan_init+0x130>)
 800355e:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <ADC3_IN11_IN6_scan_init+0x128>)
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <ADC3_IN11_IN6_scan_init+0x134>)
 8003564:	60da      	str	r2, [r3, #12]

}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	40012200 	.word	0x40012200
 800357c:	40026428 	.word	0x40026428
 8003580:	40026400 	.word	0x40026400
 8003584:	4001224c 	.word	0x4001224c
 8003588:	200004e0 	.word	0x200004e0

0800358c <ADC3_dual_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_dual_scan_start(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8003590:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <ADC3_dual_scan_start+0x3c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <ADC3_dual_scan_start+0x3c>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 800359c:	2039      	movs	r0, #57	; 0x39
 800359e:	f7ff fe07 	bl	80031b0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 80035a2:	2039      	movs	r0, #57	; 0x39
 80035a4:	f7ff fdc2 	bl	800312c <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 80035a8:	4b08      	ldr	r3, [pc, #32]	; (80035cc <ADC3_dual_scan_start+0x40>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a07      	ldr	r2, [pc, #28]	; (80035cc <ADC3_dual_scan_start+0x40>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 80035b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6013      	str	r3, [r2, #0]
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40026428 	.word	0x40026428
 80035cc:	40012200 	.word	0x40012200

080035d0 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 80035d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6113      	str	r3, [r2, #16]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <ADC_IRQHandler+0x58>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8003600:	4911      	ldr	r1, [pc, #68]	; (8003648 <ADC_IRQHandler+0x58>)
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <ADC_IRQHandler+0x5c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	4810      	ldr	r0, [pc, #64]	; (800364c <ADC_IRQHandler+0x5c>)
 800360a:	6002      	str	r2, [r0, #0]
 800360c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800360e:	4910      	ldr	r1, [pc, #64]	; (8003650 <ADC_IRQHandler+0x60>)
 8003610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <ADC_IRQHandler+0x5c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b3b      	cmp	r3, #59	; 0x3b
 800361a:	d912      	bls.n	8003642 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 800361c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <ADC_IRQHandler+0x58>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a05      	ldr	r2, [pc, #20]	; (8003648 <ADC_IRQHandler+0x58>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8003638:	f7ff fe1c 	bl	8003274 <ADC_reset>
			MEAS_data_ready = true;
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <ADC_IRQHandler+0x64>)
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40012200 	.word	0x40012200
 800364c:	200004dc 	.word	0x200004dc
 8003650:	200004e0 	.word	0x200004e0
 8003654:	200004d2 	.word	0x200004d2

08003658 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <DMA2_Stream1_IRQHandler+0x7c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003664:	2b00      	cmp	r3, #0
 8003666:	d033      	beq.n	80036d0 <DMA2_Stream1_IRQHandler+0x78>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8003668:	2039      	movs	r0, #57	; 0x39
 800366a:	f7ff fd7d 	bl	8003168 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 800366e:	2039      	movs	r0, #57	; 0x39
 8003670:	f7ff fd9e 	bl	80031b0 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8003674:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <DMA2_Stream1_IRQHandler+0x80>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <DMA2_Stream1_IRQHandler+0x80>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8003680:	bf00      	nop
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <DMA2_Stream1_IRQHandler+0x80>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f9      	bne.n	8003682 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <DMA2_Stream1_IRQHandler+0x7c>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <DMA2_Stream1_IRQHandler+0x7c>)
 8003694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003698:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800369a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <DMA2_Stream1_IRQHandler+0x84>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <DMA2_Stream1_IRQHandler+0x84>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <DMA2_Stream1_IRQHandler+0x84>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <DMA2_Stream1_IRQHandler+0x84>)
 80036bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c0:	6093      	str	r3, [r2, #8]
		ADC_reset();
 80036c2:	f7ff fdd7 	bl	8003274 <ADC_reset>
		MEAS_analyse_data();
 80036c6:	f000 f80d 	bl	80036e4 <MEAS_analyse_data>
		MEAS_data_ready = true;
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <DMA2_Stream1_IRQHandler+0x88>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
	}
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40026400 	.word	0x40026400
 80036d8:	40026428 	.word	0x40026428
 80036dc:	40012200 	.word	0x40012200
 80036e0:	200004d2 	.word	0x200004d2

080036e4 <MEAS_analyse_data>:

/** ***************************************************************************
 * @brief Analyse data to detect sine amplitude
 *****************************************************************************/
void MEAS_analyse_data(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80036ea:	af00      	add	r7, sp, #0
	uint32_t buffer_left_channel[ADC_NUMS];
	uint32_t buffer_right_channel[ADC_NUMS];
	for (int i = 0; i < ADC_NUMS; ++i) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80036f2:	e01d      	b.n	8003730 <MEAS_analyse_data+0x4c>
		buffer_left_channel[i] = ADC_samples[2*i];
 80036f4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4ac4      	ldr	r2, [pc, #784]	; (8003a0c <MEAS_analyse_data+0x328>)
 80036fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003700:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003704:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		buffer_right_channel[i] = ADC_samples[((2*i)+1)];
 800370c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	3301      	adds	r3, #1
 8003714:	4abd      	ldr	r2, [pc, #756]	; (8003a0c <MEAS_analyse_data+0x328>)
 8003716:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800371a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800371e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < ADC_NUMS; ++i) {
 8003726:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800372a:	3301      	adds	r3, #1
 800372c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8003730:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003734:	2b3b      	cmp	r3, #59	; 0x3b
 8003736:	dddd      	ble.n	80036f4 <MEAS_analyse_data+0x10>
	}

	//sort arrays from low to high
	uint32_t temp_left;
	uint32_t temp_right;
	for (int i = 0; i < ADC_NUMS; ++i) {
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800373e:	e067      	b.n	8003810 <MEAS_analyse_data+0x12c>
		for (int j = i+1; j < ADC_NUMS; ++j) {
 8003740:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003744:	3301      	adds	r3, #1
 8003746:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800374a:	e058      	b.n	80037fe <MEAS_analyse_data+0x11a>
			if (buffer_left_channel[i]>buffer_left_channel[j]) {
 800374c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003750:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003754:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003758:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800375c:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003760:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003764:	429a      	cmp	r2, r3
 8003766:	d91b      	bls.n	80037a0 <MEAS_analyse_data+0xbc>
				temp_left = buffer_left_channel[i];
 8003768:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800376c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003774:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
				buffer_left_channel[i]=buffer_left_channel[j];
 8003778:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800377c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003784:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003788:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800378c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				buffer_left_channel[j]=temp_left;
 8003790:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003794:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003798:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800379c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			if (buffer_right_channel[i]>buffer_right_channel[j]) {
 80037a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037a4:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80037a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037b0:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80037b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d91b      	bls.n	80037f4 <MEAS_analyse_data+0x110>
				temp_right = buffer_right_channel[i];
 80037bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037c0:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80037c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
				buffer_right_channel[i]=buffer_right_channel[j];
 80037cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037d0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80037d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037dc:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80037e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				buffer_right_channel[j]=temp_right;
 80037e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037e8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80037ec:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = i+1; j < ADC_NUMS; ++j) {
 80037f4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80037fe:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003802:	2b3b      	cmp	r3, #59	; 0x3b
 8003804:	dda2      	ble.n	800374c <MEAS_analyse_data+0x68>
	for (int i = 0; i < ADC_NUMS; ++i) {
 8003806:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800380a:	3301      	adds	r3, #1
 800380c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003810:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003814:	2b3b      	cmp	r3, #59	; 0x3b
 8003816:	dd93      	ble.n	8003740 <MEAS_analyse_data+0x5c>


	uint32_t values_left[10];
	uint32_t values_right[10];
	//select 5 lowest values
	for (int i = 0; i < 5; ++i) {
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800381e:	e01b      	b.n	8003858 <MEAS_analyse_data+0x174>
		values_left[i]=buffer_left_channel[i];
 8003820:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003824:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8003828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800382c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003830:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8003834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		values_right[i]=buffer_right_channel[i];
 8003838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800383c:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8003840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003844:	463b      	mov	r3, r7
 8003846:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800384a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 5; ++i) {
 800384e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8003852:	3301      	adds	r3, #1
 8003854:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8003858:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800385c:	2b04      	cmp	r3, #4
 800385e:	dddf      	ble.n	8003820 <MEAS_analyse_data+0x13c>
	}

	//select 5 highest values
	for (int i = 0; i < 5; ++i) {
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8003866:	e021      	b.n	80038ac <MEAS_analyse_data+0x1c8>
		values_left[i+5]=buffer_left_channel[i+55];
 8003868:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800386c:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8003870:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003874:	1d5a      	adds	r2, r3, #5
 8003876:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800387a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800387e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		values_right[i+5]=buffer_right_channel[i+55];
 8003886:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800388a:	f103 0137 	add.w	r1, r3, #55	; 0x37
 800388e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003892:	1d5a      	adds	r2, r3, #5
 8003894:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003898:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800389c:	463b      	mov	r3, r7
 800389e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 5; ++i) {
 80038a2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038a6:	3301      	adds	r3, #1
 80038a8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80038ac:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	ddd9      	ble.n	8003868 <MEAS_analyse_data+0x184>
	}

	//check if values mean around middle of ADC range
	uint32_t check_sum_left = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	uint32_t check_sum_right = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	for (int i = 0; i < 10; ++i) {
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80038c6:	e019      	b.n	80038fc <MEAS_analyse_data+0x218>
		check_sum_left += values_left[i];
 80038c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038cc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80038d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d4:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80038d8:	4413      	add	r3, r2
 80038da:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
		check_sum_right += values_right[i];
 80038de:	463b      	mov	r3, r7
 80038e0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80038e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80038ec:	4413      	add	r3, r2
 80038ee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	for (int i = 0; i < 10; ++i) {
 80038f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80038f6:	3301      	adds	r3, #1
 80038f8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80038fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003900:	2b09      	cmp	r3, #9
 8003902:	dde1      	ble.n	80038c8 <MEAS_analyse_data+0x1e4>
	}
	check_sum_left = check_sum_left / 10;
 8003904:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8003908:	4a41      	ldr	r2, [pc, #260]	; (8003a10 <MEAS_analyse_data+0x32c>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	08db      	lsrs	r3, r3, #3
 8003910:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	check_sum_right = check_sum_right / 10;
 8003914:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003918:	4a3d      	ldr	r2, [pc, #244]	; (8003a10 <MEAS_analyse_data+0x32c>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

	//convert low values to high values
	for (int i = 0; i < 5; ++i) {
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800392a:	e020      	b.n	800396e <MEAS_analyse_data+0x28a>
		values_left[i] = ADC_MAX_VALUE - values_left[i];
 800392c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003930:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800393c:	330f      	adds	r3, #15
 800393e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003942:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003946:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		values_right[i] = ADC_MAX_VALUE - values_right[i];
 800394a:	463b      	mov	r3, r7
 800394c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8003958:	330f      	adds	r3, #15
 800395a:	463a      	mov	r2, r7
 800395c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003960:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (int i = 0; i < 5; ++i) {
 8003964:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003968:	3301      	adds	r3, #1
 800396a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800396e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003972:	2b04      	cmp	r3, #4
 8003974:	ddda      	ble.n	800392c <MEAS_analyse_data+0x248>
	}

	//calculate mean of all 10 values
	uint32_t sum_left = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	uint32_t sum_right = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (int i = 0; i < 10; ++i) {
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8003988:	e019      	b.n	80039be <MEAS_analyse_data+0x2da>
		sum_left += values_left[i];
 800398a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800398e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8003992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003996:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800399a:	4413      	add	r3, r2
 800399c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		sum_right += values_right[i];
 80039a0:	463b      	mov	r3, r7
 80039a2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80039a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039aa:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80039ae:	4413      	add	r3, r2
 80039b0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (int i = 0; i < 10; ++i) {
 80039b4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80039b8:	3301      	adds	r3, #1
 80039ba:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80039be:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80039c2:	2b09      	cmp	r3, #9
 80039c4:	dde1      	ble.n	800398a <MEAS_analyse_data+0x2a6>
	}
	sum_left = sum_left / 10;
 80039c6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80039ca:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <MEAS_analyse_data+0x32c>)
 80039cc:	fba2 2303 	umull	r2, r3, r2, r3
 80039d0:	08db      	lsrs	r3, r3, #3
 80039d2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	sum_right = sum_right / 10;
 80039d6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039da:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <MEAS_analyse_data+0x32c>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	08db      	lsrs	r3, r3, #3
 80039e2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

	MEAS_amplitude_left = sum_left-(ADC_MAX_VALUE/2);
 80039e6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80039ea:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <MEAS_analyse_data+0x330>)
 80039f0:	6013      	str	r3, [r2, #0]
	MEAS_amplitude_right = sum_right-(ADC_MAX_VALUE/2);
 80039f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039f6:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <MEAS_analyse_data+0x334>)
 80039fc:	6013      	str	r3, [r2, #0]
}
 80039fe:	bf00      	nop
 8003a00:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	200004e0 	.word	0x200004e0
 8003a10:	cccccccd 	.word	0xcccccccd
 8003a14:	200004d4 	.word	0x200004d4
 8003a18:	200004d8 	.word	0x200004d8

08003a1c <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8003a1c:	b598      	push	{r3, r4, r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8003a20:	481f      	ldr	r0, [pc, #124]	; (8003aa0 <MENU_check_transition+0x84>)
 8003a22:	f002 fb29 	bl	8006078 <BSP_TS_GetState>
#ifdef EVAL_REV_E
// Evalboard revision E (blue) has an inverted y-axis in the touch controller
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
	if (TS_State.TouchDetected) {		// If a touch was detected
 8003a26:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <MENU_check_transition+0x84>)
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d036      	beq.n	8003a9c <MENU_check_transition+0x80>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <MENU_check_transition+0x88>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d132      	bne.n	8003a9c <MENU_check_transition+0x80>
			item_old = item_new;		// Store old item
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <MENU_check_transition+0x8c>)
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <MENU_check_transition+0x90>)
 8003a3c:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8003a3e:	f001 fa55 	bl	8004eec <BSP_LCD_GetYSize>
 8003a42:	4603      	mov	r3, r0
 8003a44:	3b28      	subs	r3, #40	; 0x28
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <MENU_check_transition+0x84>)
 8003a48:	8892      	ldrh	r2, [r2, #4]
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d226      	bcs.n	8003a9c <MENU_check_transition+0x80>
 8003a4e:	f001 fa4d 	bl	8004eec <BSP_LCD_GetYSize>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <MENU_check_transition+0x84>)
 8003a56:	8892      	ldrh	r2, [r2, #4]
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d91f      	bls.n	8003a9c <MENU_check_transition+0x80>
				item_new = TS_State.X	// Calculate new item
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <MENU_check_transition+0x84>)
 8003a5e:	885b      	ldrh	r3, [r3, #2]
 8003a60:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8003a62:	f001 fa37 	bl	8004ed4 <BSP_LCD_GetXSize>
 8003a66:	4603      	mov	r3, r0
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a6e:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <MENU_check_transition+0x8c>)
 8003a72:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <MENU_check_transition+0x8c>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d902      	bls.n	8003a82 <MENU_check_transition+0x66>
					item_new = MENU_NONE;	// Out of bounds
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <MENU_check_transition+0x8c>)
 8003a7e:	2206      	movs	r2, #6
 8003a80:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <MENU_check_transition+0x8c>)
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <MENU_check_transition+0x90>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d106      	bne.n	8003a9c <MENU_check_transition+0x80>
					item_new = MENU_NONE;
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <MENU_check_transition+0x8c>)
 8003a90:	2206      	movs	r2, #6
 8003a92:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <MENU_check_transition+0x90>)
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	4b02      	ldr	r3, [pc, #8]	; (8003aa4 <MENU_check_transition+0x88>)
 8003a9a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8003a9c:	bf00      	nop
 8003a9e:	bd98      	pop	{r3, r4, r7, pc}
 8003aa0:	200006c0 	.word	0x200006c0
 8003aa4:	2000020a 	.word	0x2000020a
 8003aa8:	2000020b 	.word	0x2000020b
 8003aac:	2000020c 	.word	0x2000020c

08003ab0 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <EXTI15_10_IRQHandler+0x40>)
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d014      	beq.n	8003aea <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <EXTI15_10_IRQHandler+0x40>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <EXTI15_10_IRQHandler+0x40>)
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aca:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8003acc:	f002 fac8 	bl	8006060 <BSP_TS_ITGetStatus>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8003ad6:	f002 fb81 	bl	80061dc <BSP_TS_ITClear>
			MENU_check_transition();
 8003ada:	f7ff ff9f 	bl	8003a1c <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <EXTI15_10_IRQHandler+0x40>)
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	4a03      	ldr	r2, [pc, #12]	; (8003af0 <EXTI15_10_IRQHandler+0x40>)
 8003ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae8:	6153      	str	r3, [r2, #20]
	}
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40013c00 	.word	0x40013c00

08003af4 <__NVIC_EnableIRQ>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	db0b      	blt.n	8003b1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	f003 021f 	and.w	r2, r3, #31
 8003b0c:	4907      	ldr	r1, [pc, #28]	; (8003b2c <__NVIC_EnableIRQ+0x38>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2001      	movs	r0, #1
 8003b16:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000e100 	.word	0xe000e100

08003b30 <__NVIC_ClearPendingIRQ>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	db0c      	blt.n	8003b5c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	f003 021f 	and.w	r2, r3, #31
 8003b48:	4907      	ldr	r1, [pc, #28]	; (8003b68 <__NVIC_ClearPendingIRQ+0x38>)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2001      	movs	r0, #1
 8003b52:	fa00 f202 	lsl.w	r2, r0, r2
 8003b56:	3360      	adds	r3, #96	; 0x60
 8003b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100

08003b6c <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <PB_init+0x38>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <PB_init+0x38>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6313      	str	r3, [r2, #48]	; 0x30
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <PB_init+0x38>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <PB_init+0x3c>)
 8003b90:	4a05      	ldr	r2, [pc, #20]	; (8003ba8 <PB_init+0x3c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6013      	str	r3, [r2, #0]
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40020000 	.word	0x40020000

08003bac <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <PB_enableIRQ+0x58>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <PB_enableIRQ+0x58>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <PB_enableIRQ+0x58>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <PB_enableIRQ+0x5c>)
 8003bd0:	4a0d      	ldr	r2, [pc, #52]	; (8003c08 <PB_enableIRQ+0x5c>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <PB_enableIRQ+0x60>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <PB_enableIRQ+0x60>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <PB_enableIRQ+0x60>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <PB_enableIRQ+0x60>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8003bee:	2006      	movs	r0, #6
 8003bf0:	f7ff ff9e 	bl	8003b30 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8003bf4:	2006      	movs	r0, #6
 8003bf6:	f7ff ff7d 	bl	8003af4 <__NVIC_EnableIRQ>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40013800 	.word	0x40013800
 8003c0c:	40013c00 	.word	0x40013c00

08003c10 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <PB_pressed+0x20>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <PB_pressed+0x20>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
	return pressed;
 8003c22:	79fb      	ldrb	r3, [r7, #7]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	200006c8 	.word	0x200006c8

08003c34 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <EXTI0_IRQHandler+0x2c>)
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <EXTI0_IRQHandler+0x2c>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <EXTI0_IRQHandler+0x2c>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <EXTI0_IRQHandler+0x30>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
	}
}
 8003c56:	bf00      	nop
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40013c00 	.word	0x40013c00
 8003c64:	200006c8 	.word	0x200006c8

08003c68 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8003c7a:	e7fe      	b.n	8003c7a <HardFault_Handler+0x4>

08003c7c <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8003c80:	e7fe      	b.n	8003c80 <MemManage_Handler+0x4>

08003c82 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8003c86:	e7fe      	b.n	8003c86 <BusFault_Handler+0x4>

08003c88 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8003c8c:	e7fe      	b.n	8003c8c <UsageFault_Handler+0x4>

08003c8e <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8003caa:	b480      	push	{r7}
 8003cac:	af00      	add	r7, sp, #0
}
 8003cae:	bf00      	nop
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003cbc:	f002 faf4 	bl	80062a8 <HAL_IncTick>
}
 8003cc0:	bf00      	nop
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <SystemInit+0x60>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <SystemInit+0x60>)
 8003cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <SystemInit+0x64>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <SystemInit+0x64>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <SystemInit+0x64>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <SystemInit+0x64>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <SystemInit+0x64>)
 8003cf0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <SystemInit+0x64>)
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <SystemInit+0x68>)
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <SystemInit+0x64>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <SystemInit+0x64>)
 8003d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <SystemInit+0x64>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <SystemInit+0x60>)
 8003d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d18:	609a      	str	r2, [r3, #8]
#endif
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000ed00 	.word	0xe000ed00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	24003010 	.word	0x24003010

08003d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d68 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d36:	e003      	b.n	8003d40 <LoopCopyDataInit>

08003d38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d3e:	3104      	adds	r1, #4

08003d40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d40:	480b      	ldr	r0, [pc, #44]	; (8003d70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d48:	d3f6      	bcc.n	8003d38 <CopyDataInit>
  ldr  r2, =_sbss
 8003d4a:	4a0b      	ldr	r2, [pc, #44]	; (8003d78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d4c:	e002      	b.n	8003d54 <LoopFillZerobss>

08003d4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d50:	f842 3b04 	str.w	r3, [r2], #4

08003d54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d58:	d3f9      	bcc.n	8003d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d5a:	f7ff ffb3 	bl	8003cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d5e:	f006 fb9f 	bl	800a4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d62:	f7fe ffbf 	bl	8002ce4 <main>
  bx  lr    
 8003d66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003d68:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003d6c:	08013858 	.word	0x08013858
  ldr  r0, =_sdata
 8003d70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d74:	20000484 	.word	0x20000484
  ldr  r2, =_sbss
 8003d78:	20000484 	.word	0x20000484
  ldr  r3, = _ebss
 8003d7c:	20000a68 	.word	0x20000a68

08003d80 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d80:	e7fe      	b.n	8003d80 <CAN1_RX0_IRQHandler>

08003d82 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003d86:	f000 feed 	bl	8004b64 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8003d8a:	20ca      	movs	r0, #202	; 0xca
 8003d8c:	f000 f95d 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003d90:	20c3      	movs	r0, #195	; 0xc3
 8003d92:	f000 f967 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8003d96:	2008      	movs	r0, #8
 8003d98:	f000 f964 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003d9c:	2050      	movs	r0, #80	; 0x50
 8003d9e:	f000 f961 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8003da2:	20cf      	movs	r0, #207	; 0xcf
 8003da4:	f000 f951 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f000 f95b 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8003dae:	20c1      	movs	r0, #193	; 0xc1
 8003db0:	f000 f958 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8003db4:	2030      	movs	r0, #48	; 0x30
 8003db6:	f000 f955 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8003dba:	20ed      	movs	r0, #237	; 0xed
 8003dbc:	f000 f945 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003dc0:	2064      	movs	r0, #100	; 0x64
 8003dc2:	f000 f94f 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8003dc6:	2003      	movs	r0, #3
 8003dc8:	f000 f94c 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003dcc:	2012      	movs	r0, #18
 8003dce:	f000 f949 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8003dd2:	2081      	movs	r0, #129	; 0x81
 8003dd4:	f000 f946 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003dd8:	20e8      	movs	r0, #232	; 0xe8
 8003dda:	f000 f936 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003dde:	2085      	movs	r0, #133	; 0x85
 8003de0:	f000 f940 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f000 f93d 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003dea:	2078      	movs	r0, #120	; 0x78
 8003dec:	f000 f93a 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003df0:	20cb      	movs	r0, #203	; 0xcb
 8003df2:	f000 f92a 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8003df6:	2039      	movs	r0, #57	; 0x39
 8003df8:	f000 f934 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8003dfc:	202c      	movs	r0, #44	; 0x2c
 8003dfe:	f000 f931 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e02:	2000      	movs	r0, #0
 8003e04:	f000 f92e 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003e08:	2034      	movs	r0, #52	; 0x34
 8003e0a:	f000 f92b 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8003e0e:	2002      	movs	r0, #2
 8003e10:	f000 f928 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8003e14:	20f7      	movs	r0, #247	; 0xf7
 8003e16:	f000 f918 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8003e1a:	2020      	movs	r0, #32
 8003e1c:	f000 f922 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8003e20:	20ea      	movs	r0, #234	; 0xea
 8003e22:	f000 f912 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f000 f91c 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f000 f919 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8003e32:	20b1      	movs	r0, #177	; 0xb1
 8003e34:	f000 f909 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f000 f913 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003e3e:	201b      	movs	r0, #27
 8003e40:	f000 f910 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003e44:	20b6      	movs	r0, #182	; 0xb6
 8003e46:	f000 f900 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003e4a:	200a      	movs	r0, #10
 8003e4c:	f000 f90a 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003e50:	20a2      	movs	r0, #162	; 0xa2
 8003e52:	f000 f907 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8003e56:	20c0      	movs	r0, #192	; 0xc0
 8003e58:	f000 f8f7 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003e5c:	2010      	movs	r0, #16
 8003e5e:	f000 f901 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003e62:	20c1      	movs	r0, #193	; 0xc1
 8003e64:	f000 f8f1 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003e68:	2010      	movs	r0, #16
 8003e6a:	f000 f8fb 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003e6e:	20c5      	movs	r0, #197	; 0xc5
 8003e70:	f000 f8eb 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8003e74:	2045      	movs	r0, #69	; 0x45
 8003e76:	f000 f8f5 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003e7a:	2015      	movs	r0, #21
 8003e7c:	f000 f8f2 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003e80:	20c7      	movs	r0, #199	; 0xc7
 8003e82:	f000 f8e2 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8003e86:	2090      	movs	r0, #144	; 0x90
 8003e88:	f000 f8ec 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003e8c:	2036      	movs	r0, #54	; 0x36
 8003e8e:	f000 f8dc 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003e92:	20c8      	movs	r0, #200	; 0xc8
 8003e94:	f000 f8e6 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003e98:	20f2      	movs	r0, #242	; 0xf2
 8003e9a:	f000 f8d6 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f000 f8e0 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8003ea4:	20b0      	movs	r0, #176	; 0xb0
 8003ea6:	f000 f8d0 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003eaa:	20c2      	movs	r0, #194	; 0xc2
 8003eac:	f000 f8da 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003eb0:	20b6      	movs	r0, #182	; 0xb6
 8003eb2:	f000 f8ca 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003eb6:	200a      	movs	r0, #10
 8003eb8:	f000 f8d4 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003ebc:	20a7      	movs	r0, #167	; 0xa7
 8003ebe:	f000 f8d1 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8003ec2:	2027      	movs	r0, #39	; 0x27
 8003ec4:	f000 f8ce 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003ec8:	2004      	movs	r0, #4
 8003eca:	f000 f8cb 	bl	8004064 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003ece:	202a      	movs	r0, #42	; 0x2a
 8003ed0:	f000 f8bb 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f000 f8c5 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003eda:	2000      	movs	r0, #0
 8003edc:	f000 f8c2 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f000 f8bf 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8003ee6:	20ef      	movs	r0, #239	; 0xef
 8003ee8:	f000 f8bc 	bl	8004064 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003eec:	202b      	movs	r0, #43	; 0x2b
 8003eee:	f000 f8ac 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f000 f8b6 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f000 f8b3 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003efe:	2001      	movs	r0, #1
 8003f00:	f000 f8b0 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003f04:	203f      	movs	r0, #63	; 0x3f
 8003f06:	f000 f8ad 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003f0a:	20f6      	movs	r0, #246	; 0xf6
 8003f0c:	f000 f89d 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003f10:	2001      	movs	r0, #1
 8003f12:	f000 f8a7 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f000 f8a4 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003f1c:	2006      	movs	r0, #6
 8003f1e:	f000 f8a1 	bl	8004064 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8003f22:	202c      	movs	r0, #44	; 0x2c
 8003f24:	f000 f891 	bl	800404a <ili9341_WriteReg>
  LCD_Delay(200);
 8003f28:	20c8      	movs	r0, #200	; 0xc8
 8003f2a:	f000 ff09 	bl	8004d40 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8003f2e:	2026      	movs	r0, #38	; 0x26
 8003f30:	f000 f88b 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003f34:	2001      	movs	r0, #1
 8003f36:	f000 f895 	bl	8004064 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8003f3a:	20e0      	movs	r0, #224	; 0xe0
 8003f3c:	f000 f885 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003f40:	200f      	movs	r0, #15
 8003f42:	f000 f88f 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8003f46:	2029      	movs	r0, #41	; 0x29
 8003f48:	f000 f88c 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003f4c:	2024      	movs	r0, #36	; 0x24
 8003f4e:	f000 f889 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003f52:	200c      	movs	r0, #12
 8003f54:	f000 f886 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003f58:	200e      	movs	r0, #14
 8003f5a:	f000 f883 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003f5e:	2009      	movs	r0, #9
 8003f60:	f000 f880 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003f64:	204e      	movs	r0, #78	; 0x4e
 8003f66:	f000 f87d 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003f6a:	2078      	movs	r0, #120	; 0x78
 8003f6c:	f000 f87a 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003f70:	203c      	movs	r0, #60	; 0x3c
 8003f72:	f000 f877 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003f76:	2009      	movs	r0, #9
 8003f78:	f000 f874 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003f7c:	2013      	movs	r0, #19
 8003f7e:	f000 f871 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003f82:	2005      	movs	r0, #5
 8003f84:	f000 f86e 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003f88:	2017      	movs	r0, #23
 8003f8a:	f000 f86b 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003f8e:	2011      	movs	r0, #17
 8003f90:	f000 f868 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003f94:	2000      	movs	r0, #0
 8003f96:	f000 f865 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003f9a:	20e1      	movs	r0, #225	; 0xe1
 8003f9c:	f000 f855 	bl	800404a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f000 f85f 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8003fa6:	2016      	movs	r0, #22
 8003fa8:	f000 f85c 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003fac:	201b      	movs	r0, #27
 8003fae:	f000 f859 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003fb2:	2004      	movs	r0, #4
 8003fb4:	f000 f856 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003fb8:	2011      	movs	r0, #17
 8003fba:	f000 f853 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003fbe:	2007      	movs	r0, #7
 8003fc0:	f000 f850 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8003fc4:	2031      	movs	r0, #49	; 0x31
 8003fc6:	f000 f84d 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003fca:	2033      	movs	r0, #51	; 0x33
 8003fcc:	f000 f84a 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003fd0:	2042      	movs	r0, #66	; 0x42
 8003fd2:	f000 f847 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003fd6:	2005      	movs	r0, #5
 8003fd8:	f000 f844 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003fdc:	200c      	movs	r0, #12
 8003fde:	f000 f841 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8003fe2:	200a      	movs	r0, #10
 8003fe4:	f000 f83e 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003fe8:	2028      	movs	r0, #40	; 0x28
 8003fea:	f000 f83b 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003fee:	202f      	movs	r0, #47	; 0x2f
 8003ff0:	f000 f838 	bl	8004064 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003ff4:	200f      	movs	r0, #15
 8003ff6:	f000 f835 	bl	8004064 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003ffa:	2011      	movs	r0, #17
 8003ffc:	f000 f825 	bl	800404a <ili9341_WriteReg>
  LCD_Delay(200);
 8004000:	20c8      	movs	r0, #200	; 0xc8
 8004002:	f000 fe9d 	bl	8004d40 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8004006:	2029      	movs	r0, #41	; 0x29
 8004008:	f000 f81f 	bl	800404a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800400c:	202c      	movs	r0, #44	; 0x2c
 800400e:	f000 f81c 	bl	800404a <ili9341_WriteReg>
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}

08004016 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800401a:	f000 fda3 	bl	8004b64 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800401e:	2103      	movs	r1, #3
 8004020:	20d3      	movs	r0, #211	; 0xd3
 8004022:	f000 f82c 	bl	800407e <ili9341_ReadData>
 8004026:	4603      	mov	r3, r0
 8004028:	b29b      	uxth	r3, r3
}
 800402a:	4618      	mov	r0, r3
 800402c:	bd80      	pop	{r7, pc}

0800402e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8004032:	2029      	movs	r0, #41	; 0x29
 8004034:	f000 f809 	bl	800404a <ili9341_WriteReg>
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}

0800403c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8004040:	2028      	movs	r0, #40	; 0x28
 8004042:	f000 f802 	bl	800404a <ili9341_WriteReg>
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}

0800404a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	4603      	mov	r3, r0
 8004052:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fe1e 	bl	8004c98 <LCD_IO_WriteReg>
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fdef 	bl	8004c54 <LCD_IO_WriteData>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	460a      	mov	r2, r1
 8004088:	80fb      	strh	r3, [r7, #6]
 800408a:	4613      	mov	r3, r2
 800408c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800408e:	797a      	ldrb	r2, [r7, #5]
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fe21 	bl	8004cdc <LCD_IO_ReadData>
 800409a:	4603      	mov	r3, r0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80040a8:	23f0      	movs	r3, #240	; 0xf0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80040b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fa59 	bl	800458c <stmpe811_GetInstance>
 80040da:	4603      	mov	r3, r0
 80040dc:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2bff      	cmp	r3, #255	; 0xff
 80040e2:	d112      	bne.n	800410a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80040e4:	2000      	movs	r0, #0
 80040e6:	f000 fa51 	bl	800458c <stmpe811_GetInstance>
 80040ea:	4603      	mov	r3, r0
 80040ec:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80040ee:	7bbb      	ldrb	r3, [r7, #14]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d80a      	bhi.n	800410a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	b2d1      	uxtb	r1, r2
 80040fa:	4a06      	ldr	r2, [pc, #24]	; (8004114 <stmpe811_Init+0x4c>)
 80040fc:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80040fe:	f000 fe2a 	bl	8004d56 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f807 	bl	8004118 <stmpe811_Reset>
    }
  }
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200006cc 	.word	0x200006cc

08004118 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2202      	movs	r2, #2
 8004128:	2103      	movs	r1, #3
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fe1f 	bl	8004d6e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8004130:	200a      	movs	r0, #10
 8004132:	f000 fe59 	bl	8004de8 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2200      	movs	r2, #0
 800413c:	2103      	movs	r1, #3
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fe15 	bl	8004d6e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8004144:	2002      	movs	r0, #2
 8004146:	f000 fe4f 	bl	8004de8 <IOE_Delay>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8004152:	b590      	push	{r4, r7, lr}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800415c:	f000 fdfb 	bl	8004d56 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fe14 	bl	8004d94 <IOE_Read>
 800416c:	4603      	mov	r3, r0
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fe0b 	bl	8004d94 <IOE_Read>
 800417e:	4603      	mov	r3, r0
 8004180:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004182:	4323      	orrs	r3, r4
 8004184:	b21b      	sxth	r3, r3
 8004186:	b29b      	uxth	r3, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}

08004190 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2109      	movs	r1, #9
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fdf5 	bl	8004d94 <IOE_Read>
 80041aa:	4603      	mov	r3, r0
 80041ac:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	2109      	movs	r1, #9
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fdd5 	bl	8004d6e <IOE_Write>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2109      	movs	r1, #9
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fdd7 	bl	8004d94 <IOE_Read>
 80041e6:	4603      	mov	r3, r0
 80041e8:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	2109      	movs	r1, #9
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fdb7 	bl	8004d6e <IOE_Write>
    
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	460a      	mov	r2, r1
 8004212:	80fb      	strh	r3, [r7, #6]
 8004214:	4613      	mov	r3, r2
 8004216:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	210a      	movs	r1, #10
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fdb6 	bl	8004d94 <IOE_Read>
 8004228:	4603      	mov	r3, r0
 800422a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	797b      	ldrb	r3, [r7, #5]
 8004230:	4313      	orrs	r3, r2
 8004232:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	210a      	movs	r1, #10
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd96 	bl	8004d6e <IOE_Write>
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	460a      	mov	r2, r1
 8004254:	80fb      	strh	r3, [r7, #6]
 8004256:	4613      	mov	r3, r2
 8004258:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	210a      	movs	r1, #10
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fd95 	bl	8004d94 <IOE_Read>
 800426a:	4603      	mov	r3, r0
 800426c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800426e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004272:	43db      	mvns	r3, r3
 8004274:	b25a      	sxtb	r2, r3
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	4013      	ands	r3, r2
 800427c:	b25b      	sxtb	r3, r3
 800427e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	210a      	movs	r1, #10
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fd70 	bl	8004d6e <IOE_Write>
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	4603      	mov	r3, r0
 800429e:	460a      	mov	r2, r1
 80042a0:	80fb      	strh	r3, [r7, #6]
 80042a2:	4613      	mov	r3, r2
 80042a4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	210b      	movs	r1, #11
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fd71 	bl	8004d94 <IOE_Read>
 80042b2:	4603      	mov	r3, r0
 80042b4:	461a      	mov	r2, r3
 80042b6:	797b      	ldrb	r3, [r7, #5]
 80042b8:	4013      	ands	r3, r2
 80042ba:	b2db      	uxtb	r3, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	460a      	mov	r2, r1
 80042ce:	80fb      	strh	r3, [r7, #6]
 80042d0:	4613      	mov	r3, r2
 80042d2:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	797a      	ldrb	r2, [r7, #5]
 80042da:	210b      	movs	r1, #11
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fd46 	bl	8004d6e <IOE_Write>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	6039      	str	r1, [r7, #0]
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2117      	movs	r1, #23
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fd47 	bl	8004d94 <IOE_Read>
 8004306:	4603      	mov	r3, r0
 8004308:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	b25b      	sxtb	r3, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	b25a      	sxtb	r2, r3
 8004312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004316:	4013      	ands	r3, r2
 8004318:	b25b      	sxtb	r3, r3
 800431a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	7bfa      	ldrb	r2, [r7, #15]
 8004322:	2117      	movs	r1, #23
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fd22 	bl	8004d6e <IOE_Write>
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2104      	movs	r1, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fd26 	bl	8004d94 <IOE_Read>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	f023 0304 	bic.w	r3, r3, #4
 8004352:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	7bfa      	ldrb	r2, [r7, #15]
 800435a:	2104      	movs	r1, #4
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fd06 	bl	8004d6e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	21f0      	movs	r1, #240	; 0xf0
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ffbf 	bl	80042ea <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	2104      	movs	r1, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fcf6 	bl	8004d6e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2249      	movs	r2, #73	; 0x49
 8004388:	2120      	movs	r1, #32
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fcef 	bl	8004d6e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8004390:	2002      	movs	r0, #2
 8004392:	f000 fd29 	bl	8004de8 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2201      	movs	r2, #1
 800439c:	2121      	movs	r1, #33	; 0x21
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fce5 	bl	8004d6e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	229a      	movs	r2, #154	; 0x9a
 80043aa:	2141      	movs	r1, #65	; 0x41
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fcde 	bl	8004d6e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2201      	movs	r2, #1
 80043b8:	214a      	movs	r1, #74	; 0x4a
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fcd7 	bl	8004d6e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2201      	movs	r2, #1
 80043c6:	214b      	movs	r1, #75	; 0x4b
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fcd0 	bl	8004d6e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2200      	movs	r2, #0
 80043d4:	214b      	movs	r1, #75	; 0x4b
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fcc9 	bl	8004d6e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2201      	movs	r2, #1
 80043e2:	2156      	movs	r1, #86	; 0x56
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fcc2 	bl	8004d6e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2201      	movs	r2, #1
 80043f0:	2158      	movs	r1, #88	; 0x58
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fcbb 	bl	8004d6e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2201      	movs	r2, #1
 80043fe:	2140      	movs	r1, #64	; 0x40
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fcb4 	bl	8004d6e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	22ff      	movs	r2, #255	; 0xff
 800440c:	210b      	movs	r1, #11
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fcad 	bl	8004d6e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8004414:	2002      	movs	r0, #2
 8004416:	f000 fce7 	bl	8004de8 <IOE_Delay>
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	4603      	mov	r3, r0
 800442a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2140      	movs	r1, #64	; 0x40
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fcac 	bl	8004d94 <IOE_Read>
 800443c:	4603      	mov	r3, r0
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800444e:	7bbb      	ldrb	r3, [r7, #14]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00b      	beq.n	800446c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	214c      	movs	r1, #76	; 0x4c
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fc9a 	bl	8004d94 <IOE_Read>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	e00d      	b.n	8004488 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2201      	movs	r2, #1
 8004472:	214b      	movs	r1, #75	; 0x4b
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fc7a 	bl	8004d6e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2200      	movs	r2, #0
 8004480:	214b      	movs	r1, #75	; 0x4b
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fc73 	bl	8004d6e <IOE_Write>
  }
  
  return ret;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80044a0:	89fb      	ldrh	r3, [r7, #14]
 80044a2:	b2d8      	uxtb	r0, r3
 80044a4:	f107 0210 	add.w	r2, r7, #16
 80044a8:	2304      	movs	r3, #4
 80044aa:	21d7      	movs	r1, #215	; 0xd7
 80044ac:	f000 fc85 	bl	8004dba <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80044b0:	7c3b      	ldrb	r3, [r7, #16]
 80044b2:	061a      	lsls	r2, r3, #24
 80044b4:	7c7b      	ldrb	r3, [r7, #17]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	431a      	orrs	r2, r3
 80044ba:	7cbb      	ldrb	r3, [r7, #18]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	4313      	orrs	r3, r2
 80044c0:	7cfa      	ldrb	r2, [r7, #19]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	0d1b      	lsrs	r3, r3, #20
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80044e0:	89fb      	ldrh	r3, [r7, #14]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2201      	movs	r2, #1
 80044e6:	214b      	movs	r1, #75	; 0x4b
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fc40 	bl	8004d6e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80044ee:	89fb      	ldrh	r3, [r7, #14]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2200      	movs	r2, #0
 80044f4:	214b      	movs	r1, #75	; 0x4b
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fc39 	bl	8004d6e <IOE_Write>
}
 80044fc:	bf00      	nop
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800450e:	f000 fc28 	bl	8004d62 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	211f      	movs	r1, #31
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fe76 	bl	8004208 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fe36 	bl	8004190 <stmpe811_EnableGlobalIT>
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fe47 	bl	80041cc <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	211f      	movs	r1, #31
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fe81 	bl	800424a <stmpe811_DisableITSource>
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	211f      	movs	r1, #31
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fe99 	bl	8004296 <stmpe811_ReadGITStatus>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	4603      	mov	r3, r0
 8004576:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	211f      	movs	r1, #31
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fea1 	bl	80042c4 <stmpe811_ClearGlobalIT>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e00b      	b.n	80045b8 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <stmpe811_GetInstance+0x40>)
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d101      	bne.n	80045b2 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	e006      	b.n	80045c0 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	3301      	adds	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d9f0      	bls.n	80045a0 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80045be:	23ff      	movs	r3, #255	; 0xff
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	200006cc 	.word	0x200006cc

080045d0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10e      	bne.n	80045fe <BSP_LED_Init+0x2e>
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <BSP_LED_Init+0x9c>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	4a20      	ldr	r2, [pc, #128]	; (800466c <BSP_LED_Init+0x9c>)
 80045ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ee:	6313      	str	r3, [r2, #48]	; 0x30
 80045f0:	4b1e      	ldr	r3, [pc, #120]	; (800466c <BSP_LED_Init+0x9c>)
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	e010      	b.n	8004620 <BSP_LED_Init+0x50>
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d10d      	bne.n	8004620 <BSP_LED_Init+0x50>
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	4b18      	ldr	r3, [pc, #96]	; (800466c <BSP_LED_Init+0x9c>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	4a17      	ldr	r2, [pc, #92]	; (800466c <BSP_LED_Init+0x9c>)
 800460e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004612:	6313      	str	r3, [r2, #48]	; 0x30
 8004614:	4b15      	ldr	r3, [pc, #84]	; (800466c <BSP_LED_Init+0x9c>)
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	4a13      	ldr	r2, [pc, #76]	; (8004670 <BSP_LED_Init+0xa0>)
 8004624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800462a:	2301      	movs	r3, #1
 800462c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800462e:	2301      	movs	r3, #1
 8004630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004632:	2302      	movs	r3, #2
 8004634:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <BSP_LED_Init+0xa4>)
 800463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463e:	f107 0214 	add.w	r2, r7, #20
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f002 fbd9 	bl	8006dfc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	4a09      	ldr	r2, [pc, #36]	; (8004674 <BSP_LED_Init+0xa4>)
 800464e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	4a06      	ldr	r2, [pc, #24]	; (8004670 <BSP_LED_Init+0xa0>)
 8004656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800465a:	2200      	movs	r2, #0
 800465c:	4619      	mov	r1, r3
 800465e:	f002 fd79 	bl	8007154 <HAL_GPIO_WritePin>
}
 8004662:	bf00      	nop
 8004664:	3728      	adds	r7, #40	; 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	0800f4cc 	.word	0x0800f4cc
 8004674:	20000274 	.word	0x20000274

08004678 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	4a07      	ldr	r2, [pc, #28]	; (80046a4 <BSP_LED_On+0x2c>)
 8004686:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	4a06      	ldr	r2, [pc, #24]	; (80046a8 <BSP_LED_On+0x30>)
 800468e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004692:	2201      	movs	r2, #1
 8004694:	4619      	mov	r1, r3
 8004696:	f002 fd5d 	bl	8007154 <HAL_GPIO_WritePin>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000274 	.word	0x20000274
 80046a8:	0800f4cc 	.word	0x0800f4cc

080046ac <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <BSP_LED_Off+0x2c>)
 80046ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	4a06      	ldr	r2, [pc, #24]	; (80046dc <BSP_LED_Off+0x30>)
 80046c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046c6:	2200      	movs	r2, #0
 80046c8:	4619      	mov	r1, r3
 80046ca:	f002 fd43 	bl	8007154 <HAL_GPIO_WritePin>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000274 	.word	0x20000274
 80046dc:	0800f4cc 	.word	0x0800f4cc

080046e0 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	4a07      	ldr	r2, [pc, #28]	; (800470c <BSP_LED_Toggle+0x2c>)
 80046ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	4906      	ldr	r1, [pc, #24]	; (8004710 <BSP_LED_Toggle+0x30>)
 80046f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f002 fd42 	bl	8007186 <HAL_GPIO_TogglePin>
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000274 	.word	0x20000274
 8004710:	0800f4cc 	.word	0x0800f4cc

08004714 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a33      	ldr	r2, [pc, #204]	; (80047f0 <I2Cx_MspInit+0xdc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d15f      	bne.n	80047e6 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <I2Cx_MspInit+0xe0>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <I2Cx_MspInit+0xe0>)
 8004730:	f043 0304 	orr.w	r3, r3, #4
 8004734:	6313      	str	r3, [r2, #48]	; 0x30
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <I2Cx_MspInit+0xe0>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <I2Cx_MspInit+0xe0>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	4a2a      	ldr	r2, [pc, #168]	; (80047f4 <I2Cx_MspInit+0xe0>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	6313      	str	r3, [r2, #48]	; 0x30
 8004752:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <I2Cx_MspInit+0xe0>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800475e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8004764:	2312      	movs	r3, #18
 8004766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800476c:	2302      	movs	r3, #2
 800476e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8004770:	2304      	movs	r3, #4
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	4619      	mov	r1, r3
 800477a:	481f      	ldr	r0, [pc, #124]	; (80047f8 <I2Cx_MspInit+0xe4>)
 800477c:	f002 fb3e 	bl	8006dfc <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8004780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004784:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004786:	f107 0314 	add.w	r3, r7, #20
 800478a:	4619      	mov	r1, r3
 800478c:	481b      	ldr	r0, [pc, #108]	; (80047fc <I2Cx_MspInit+0xe8>)
 800478e:	f002 fb35 	bl	8006dfc <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <I2Cx_MspInit+0xe0>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <I2Cx_MspInit+0xe0>)
 800479c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047a0:	6413      	str	r3, [r2, #64]	; 0x40
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <I2Cx_MspInit+0xe0>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80047ae:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <I2Cx_MspInit+0xe0>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a10      	ldr	r2, [pc, #64]	; (80047f4 <I2Cx_MspInit+0xe0>)
 80047b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047b8:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <I2Cx_MspInit+0xe0>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4a0d      	ldr	r2, [pc, #52]	; (80047f4 <I2Cx_MspInit+0xe0>)
 80047c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047c4:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80047c6:	2200      	movs	r2, #0
 80047c8:	210f      	movs	r1, #15
 80047ca:	2048      	movs	r0, #72	; 0x48
 80047cc:	f001 fe8b 	bl	80064e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80047d0:	2048      	movs	r0, #72	; 0x48
 80047d2:	f001 fea4 	bl	800651e <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80047d6:	2200      	movs	r2, #0
 80047d8:	210f      	movs	r1, #15
 80047da:	2049      	movs	r0, #73	; 0x49
 80047dc:	f001 fe83 	bl	80064e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80047e0:	2049      	movs	r0, #73	; 0x49
 80047e2:	f001 fe9c 	bl	800651e <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80047e6:	bf00      	nop
 80047e8:	3728      	adds	r7, #40	; 0x28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40005c00 	.word	0x40005c00
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40020000 	.word	0x40020000
 80047fc:	40020800 	.word	0x40020800

08004800 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8004804:	4814      	ldr	r0, [pc, #80]	; (8004858 <I2Cx_Init+0x58>)
 8004806:	f003 f981 	bl	8007b0c <HAL_I2C_GetState>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d121      	bne.n	8004854 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <I2Cx_Init+0x58>)
 8004812:	4a12      	ldr	r2, [pc, #72]	; (800485c <I2Cx_Init+0x5c>)
 8004814:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <I2Cx_Init+0x58>)
 8004818:	4a11      	ldr	r2, [pc, #68]	; (8004860 <I2Cx_Init+0x60>)
 800481a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <I2Cx_Init+0x58>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <I2Cx_Init+0x58>)
 8004824:	2200      	movs	r2, #0
 8004826:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <I2Cx_Init+0x58>)
 800482a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800482e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <I2Cx_Init+0x58>)
 8004832:	2200      	movs	r2, #0
 8004834:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <I2Cx_Init+0x58>)
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <I2Cx_Init+0x58>)
 800483e:	2200      	movs	r2, #0
 8004840:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <I2Cx_Init+0x58>)
 8004844:	2200      	movs	r2, #0
 8004846:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8004848:	4803      	ldr	r0, [pc, #12]	; (8004858 <I2Cx_Init+0x58>)
 800484a:	f7ff ff63 	bl	8004714 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800484e:	4802      	ldr	r0, [pc, #8]	; (8004858 <I2Cx_Init+0x58>)
 8004850:	f002 fcb4 	bl	80071bc <HAL_I2C_Init>
  }
}
 8004854:	bf00      	nop
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000954 	.word	0x20000954
 800485c:	40005c00 	.word	0x40005c00
 8004860:	000186a0 	.word	0x000186a0

08004864 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <I2Cx_ITConfig+0x58>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <I2Cx_ITConfig+0x58>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6313      	str	r3, [r2, #48]	; 0x30
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <I2Cx_ITConfig+0x58>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8004886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800488c:	2301      	movs	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <I2Cx_ITConfig+0x5c>)
 8004896:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	4619      	mov	r1, r3
 800489c:	4809      	ldr	r0, [pc, #36]	; (80048c4 <I2Cx_ITConfig+0x60>)
 800489e:	f002 faad 	bl	8006dfc <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80048a2:	2200      	movs	r2, #0
 80048a4:	210f      	movs	r1, #15
 80048a6:	2028      	movs	r0, #40	; 0x28
 80048a8:	f001 fe1d 	bl	80064e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80048ac:	2028      	movs	r0, #40	; 0x28
 80048ae:	f001 fe36 	bl	800651e <HAL_NVIC_EnableIRQ>
}
 80048b2:	bf00      	nop
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800
 80048c0:	10210000 	.word	0x10210000
 80048c4:	40020000 	.word	0x40020000

080048c8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af04      	add	r7, sp, #16
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
 80048d2:	460b      	mov	r3, r1
 80048d4:	71bb      	strb	r3, [r7, #6]
 80048d6:	4613      	mov	r3, r2
 80048d8:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	b299      	uxth	r1, r3
 80048e2:	79bb      	ldrb	r3, [r7, #6]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <I2Cx_WriteData+0x4c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	2301      	movs	r3, #1
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	1d7b      	adds	r3, r7, #5
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2301      	movs	r3, #1
 80048f6:	4808      	ldr	r0, [pc, #32]	; (8004918 <I2Cx_WriteData+0x50>)
 80048f8:	f002 fde8 	bl	80074cc <HAL_I2C_Mem_Write>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8004906:	f000 f863 	bl	80049d0 <I2Cx_Error>
  }        
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2000027c 	.word	0x2000027c
 8004918:	20000954 	.word	0x20000954

0800491c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af04      	add	r7, sp, #16
 8004922:	4603      	mov	r3, r0
 8004924:	460a      	mov	r2, r1
 8004926:	71fb      	strb	r3, [r7, #7]
 8004928:	4613      	mov	r3, r2
 800492a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	b299      	uxth	r1, r3
 8004938:	79bb      	ldrb	r3, [r7, #6]
 800493a:	b29a      	uxth	r2, r3
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <I2Cx_ReadData+0x50>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	2301      	movs	r3, #1
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	f107 030e 	add.w	r3, r7, #14
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2301      	movs	r3, #1
 800494e:	4808      	ldr	r0, [pc, #32]	; (8004970 <I2Cx_ReadData+0x54>)
 8004950:	f002 feb6 	bl	80076c0 <HAL_I2C_Mem_Read>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800495e:	f000 f837 	bl	80049d0 <I2Cx_Error>
  
  }
  return value;
 8004962:	7bbb      	ldrb	r3, [r7, #14]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	2000027c 	.word	0x2000027c
 8004970:	20000954 	.word	0x20000954

08004974 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af04      	add	r7, sp, #16
 800497a:	603a      	str	r2, [r7, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
 8004982:	460b      	mov	r3, r1
 8004984:	71bb      	strb	r3, [r7, #6]
 8004986:	4613      	mov	r3, r2
 8004988:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	b299      	uxth	r1, r3
 8004992:	79bb      	ldrb	r3, [r7, #6]
 8004994:	b29a      	uxth	r2, r3
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <I2Cx_ReadBuffer+0x54>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	9302      	str	r3, [sp, #8]
 800499c:	88bb      	ldrh	r3, [r7, #4]
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2301      	movs	r3, #1
 80049a6:	4809      	ldr	r0, [pc, #36]	; (80049cc <I2Cx_ReadBuffer+0x58>)
 80049a8:	f002 fe8a 	bl	80076c0 <HAL_I2C_Mem_Read>
 80049ac:	4603      	mov	r3, r0
 80049ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e002      	b.n	80049c0 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80049ba:	f000 f809 	bl	80049d0 <I2Cx_Error>

    return 1;
 80049be:	2301      	movs	r3, #1
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	2000027c 	.word	0x2000027c
 80049cc:	20000954 	.word	0x20000954

080049d0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80049d4:	4803      	ldr	r0, [pc, #12]	; (80049e4 <I2Cx_Error+0x14>)
 80049d6:	f002 fd35 	bl	8007444 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80049da:	f7ff ff11 	bl	8004800 <I2Cx_Init>
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000954 	.word	0x20000954

080049e8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80049ec:	4819      	ldr	r0, [pc, #100]	; (8004a54 <SPIx_Init+0x6c>)
 80049ee:	f005 faf6 	bl	8009fde <HAL_SPI_GetState>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d12b      	bne.n	8004a50 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80049f8:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <SPIx_Init+0x6c>)
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <SPIx_Init+0x70>)
 80049fc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <SPIx_Init+0x6c>)
 8004a00:	2218      	movs	r2, #24
 8004a02:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <SPIx_Init+0x6c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <SPIx_Init+0x6c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <SPIx_Init+0x6c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <SPIx_Init+0x6c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <SPIx_Init+0x6c>)
 8004a1e:	2207      	movs	r2, #7
 8004a20:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <SPIx_Init+0x6c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <SPIx_Init+0x6c>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <SPIx_Init+0x6c>)
 8004a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a34:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <SPIx_Init+0x6c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <SPIx_Init+0x6c>)
 8004a3e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a42:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8004a44:	4803      	ldr	r0, [pc, #12]	; (8004a54 <SPIx_Init+0x6c>)
 8004a46:	f000 f853 	bl	8004af0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004a4a:	4802      	ldr	r0, [pc, #8]	; (8004a54 <SPIx_Init+0x6c>)
 8004a4c:	f004 fd3d 	bl	80094ca <HAL_SPI_Init>
  } 
}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200006d0 	.word	0x200006d0
 8004a58:	40015000 	.word	0x40015000

08004a5c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <SPIx_Read+0x38>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f107 0108 	add.w	r1, r7, #8
 8004a76:	4808      	ldr	r0, [pc, #32]	; (8004a98 <SPIx_Read+0x3c>)
 8004a78:	f004 ff24 	bl	80098c4 <HAL_SPI_Receive>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8004a86:	f000 f827 	bl	8004ad8 <SPIx_Error>
  }
  
  return readvalue;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000280 	.word	0x20000280
 8004a98:	200006d0 	.word	0x200006d0

08004a9c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <SPIx_Write+0x34>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	1db9      	adds	r1, r7, #6
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	4808      	ldr	r0, [pc, #32]	; (8004ad4 <SPIx_Write+0x38>)
 8004ab4:	f004 fdb0 	bl	8009618 <HAL_SPI_Transmit>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8004ac2:	f000 f809 	bl	8004ad8 <SPIx_Error>
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000280 	.word	0x20000280
 8004ad4:	200006d0 	.word	0x200006d0

08004ad8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004adc:	4803      	ldr	r0, [pc, #12]	; (8004aec <SPIx_Error+0x14>)
 8004ade:	f004 fd5f 	bl	80095a0 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8004ae2:	f7ff ff81 	bl	80049e8 <SPIx_Init>
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	200006d0 	.word	0x200006d0

08004af0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <SPIx_MspInit+0x6c>)
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <SPIx_MspInit+0x6c>)
 8004b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b06:	6453      	str	r3, [r2, #68]	; 0x44
 8004b08:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <SPIx_MspInit+0x6c>)
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <SPIx_MspInit+0x6c>)
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1c:	4a0f      	ldr	r2, [pc, #60]	; (8004b5c <SPIx_MspInit+0x6c>)
 8004b1e:	f043 0320 	orr.w	r3, r3, #32
 8004b22:	6313      	str	r3, [r2, #48]	; 0x30
 8004b24:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <SPIx_MspInit+0x6c>)
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004b30:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8004b36:	2302      	movs	r3, #2
 8004b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004b42:	2305      	movs	r3, #5
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4804      	ldr	r0, [pc, #16]	; (8004b60 <SPIx_MspInit+0x70>)
 8004b4e:	f002 f955 	bl	8006dfc <HAL_GPIO_Init>
}
 8004b52:	bf00      	nop
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40021400 	.word	0x40021400

08004b64 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8004b6a:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <LCD_IO_Init+0xe0>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d164      	bne.n	8004c3c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8004b72:	4b34      	ldr	r3, [pc, #208]	; (8004c44 <LCD_IO_Init+0xe0>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	4a31      	ldr	r2, [pc, #196]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004b82:	f043 0308 	orr.w	r3, r3, #8
 8004b86:	6313      	str	r3, [r2, #48]	; 0x30
 8004b88:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8004b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	4619      	mov	r1, r3
 8004bac:	4827      	ldr	r0, [pc, #156]	; (8004c4c <LCD_IO_Init+0xe8>)
 8004bae:	f002 f925 	bl	8006dfc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	4a23      	ldr	r2, [pc, #140]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004bbc:	f043 0308 	orr.w	r3, r3, #8
 8004bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc2:	4b21      	ldr	r3, [pc, #132]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8004bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	4619      	mov	r1, r3
 8004be6:	4819      	ldr	r0, [pc, #100]	; (8004c4c <LCD_IO_Init+0xe8>)
 8004be8:	f002 f908 	bl	8006dfc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8004bec:	2300      	movs	r3, #0
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfc:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <LCD_IO_Init+0xe4>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8004c08:	2304      	movs	r3, #4
 8004c0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004c14:	2302      	movs	r3, #2
 8004c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	480c      	ldr	r0, [pc, #48]	; (8004c50 <LCD_IO_Init+0xec>)
 8004c20:	f002 f8ec 	bl	8006dfc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8004c24:	2200      	movs	r2, #0
 8004c26:	2104      	movs	r1, #4
 8004c28:	4809      	ldr	r0, [pc, #36]	; (8004c50 <LCD_IO_Init+0xec>)
 8004c2a:	f002 fa93 	bl	8007154 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8004c2e:	2201      	movs	r2, #1
 8004c30:	2104      	movs	r1, #4
 8004c32:	4807      	ldr	r0, [pc, #28]	; (8004c50 <LCD_IO_Init+0xec>)
 8004c34:	f002 fa8e 	bl	8007154 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8004c38:	f7ff fed6 	bl	80049e8 <SPIx_Init>
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000728 	.word	0x20000728
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40020c00 	.word	0x40020c00
 8004c50:	40020800 	.word	0x40020800

08004c54 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c64:	480a      	ldr	r0, [pc, #40]	; (8004c90 <LCD_IO_WriteData+0x3c>)
 8004c66:	f002 fa75 	bl	8007154 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2104      	movs	r1, #4
 8004c6e:	4809      	ldr	r0, [pc, #36]	; (8004c94 <LCD_IO_WriteData+0x40>)
 8004c70:	f002 fa70 	bl	8007154 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ff10 	bl	8004a9c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	2104      	movs	r1, #4
 8004c80:	4804      	ldr	r0, [pc, #16]	; (8004c94 <LCD_IO_WriteData+0x40>)
 8004c82:	f002 fa67 	bl	8007154 <HAL_GPIO_WritePin>
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40020c00 	.word	0x40020c00
 8004c94:	40020800 	.word	0x40020800

08004c98 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ca8:	480a      	ldr	r0, [pc, #40]	; (8004cd4 <LCD_IO_WriteReg+0x3c>)
 8004caa:	f002 fa53 	bl	8007154 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2104      	movs	r1, #4
 8004cb2:	4809      	ldr	r0, [pc, #36]	; (8004cd8 <LCD_IO_WriteReg+0x40>)
 8004cb4:	f002 fa4e 	bl	8007154 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff feed 	bl	8004a9c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	2104      	movs	r1, #4
 8004cc6:	4804      	ldr	r0, [pc, #16]	; (8004cd8 <LCD_IO_WriteReg+0x40>)
 8004cc8:	f002 fa44 	bl	8007154 <HAL_GPIO_WritePin>
}
 8004ccc:	bf00      	nop
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40020c00 	.word	0x40020c00
 8004cd8:	40020800 	.word	0x40020800

08004cdc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	460a      	mov	r2, r1
 8004ce6:	80fb      	strh	r3, [r7, #6]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	4810      	ldr	r0, [pc, #64]	; (8004d38 <LCD_IO_ReadData+0x5c>)
 8004cf6:	f002 fa2d 	bl	8007154 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d00:	480e      	ldr	r0, [pc, #56]	; (8004d3c <LCD_IO_ReadData+0x60>)
 8004d02:	f002 fa27 	bl	8007154 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fec7 	bl	8004a9c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8004d0e:	797b      	ldrb	r3, [r7, #5]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff fea3 	bl	8004a5c <SPIx_Read>
 8004d16:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d1e:	4807      	ldr	r0, [pc, #28]	; (8004d3c <LCD_IO_ReadData+0x60>)
 8004d20:	f002 fa18 	bl	8007154 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004d24:	2201      	movs	r2, #1
 8004d26:	2104      	movs	r1, #4
 8004d28:	4803      	ldr	r0, [pc, #12]	; (8004d38 <LCD_IO_ReadData+0x5c>)
 8004d2a:	f002 fa13 	bl	8007154 <HAL_GPIO_WritePin>
  
  return readvalue;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40020800 	.word	0x40020800
 8004d3c:	40020c00 	.word	0x40020c00

08004d40 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 facd 	bl	80062e8 <HAL_Delay>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8004d5a:	f7ff fd51 	bl	8004800 <I2Cx_Init>
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8004d66:	f7ff fd7d 	bl	8004864 <I2Cx_ITConfig>
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	4603      	mov	r3, r0
 8004d76:	71fb      	strb	r3, [r7, #7]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	71bb      	strb	r3, [r7, #6]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8004d80:	797a      	ldrb	r2, [r7, #5]
 8004d82:	79b9      	ldrb	r1, [r7, #6]
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fd9e 	bl	80048c8 <I2Cx_WriteData>
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	460a      	mov	r2, r1
 8004d9e:	71fb      	strb	r3, [r7, #7]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8004da4:	79ba      	ldrb	r2, [r7, #6]
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fdb6 	bl	800491c <I2Cx_ReadData>
 8004db0:	4603      	mov	r3, r0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	603a      	str	r2, [r7, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	71fb      	strb	r3, [r7, #7]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	71bb      	strb	r3, [r7, #6]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8004dd0:	88bb      	ldrh	r3, [r7, #4]
 8004dd2:	79b9      	ldrb	r1, [r7, #6]
 8004dd4:	79f8      	ldrb	r0, [r7, #7]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	f7ff fdcc 	bl	8004974 <I2Cx_ReadBuffer>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	b29b      	uxth	r3, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f001 fa79 	bl	80062e8 <HAL_Delay>
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8004e04:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e06:	4a2e      	ldr	r2, [pc, #184]	; (8004ec0 <BSP_LCD_Init+0xc0>)
 8004e08:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8004e0a:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e0c:	2209      	movs	r2, #9
 8004e0e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8004e16:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e18:	221d      	movs	r2, #29
 8004e1a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8004e1c:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e1e:	2203      	movs	r2, #3
 8004e20:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8004e22:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e24:	f240 120d 	movw	r2, #269	; 0x10d
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e2c:	f240 1243 	movw	r2, #323	; 0x143
 8004e30:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8004e32:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e34:	f240 1217 	movw	r2, #279	; 0x117
 8004e38:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e3c:	f240 1247 	movw	r2, #327	; 0x147
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8004e42:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <BSP_LCD_Init+0xc4>)
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004e60:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <BSP_LCD_Init+0xc4>)
 8004e62:	22c0      	movs	r2, #192	; 0xc0
 8004e64:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8004e66:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <BSP_LCD_Init+0xc4>)
 8004e68:	2204      	movs	r2, #4
 8004e6a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004e6c:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <BSP_LCD_Init+0xc4>)
 8004e6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8004e74:	4813      	ldr	r0, [pc, #76]	; (8004ec4 <BSP_LCD_Init+0xc4>)
 8004e76:	f004 f8e1 	bl	800903c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004e80:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004e86:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8004e92:	f000 fcf1 	bl	8005878 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8004e96:	4809      	ldr	r0, [pc, #36]	; (8004ebc <BSP_LCD_Init+0xbc>)
 8004e98:	f003 f99e 	bl	80081d8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <BSP_LCD_Init+0xc8>)
 8004e9e:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <BSP_LCD_Init+0xcc>)
 8004ea0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <BSP_LCD_Init+0xc8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8004eaa:	f000 fed5 	bl	8005c58 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004eae:	4808      	ldr	r0, [pc, #32]	; (8004ed0 <BSP_LCD_Init+0xd0>)
 8004eb0:	f000 f8ce 	bl	8005050 <BSP_LCD_SetFont>

  return LCD_OK;
 8004eb4:	2300      	movs	r3, #0
}  
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	200009a8 	.word	0x200009a8
 8004ec0:	40016800 	.word	0x40016800
 8004ec4:	2000076c 	.word	0x2000076c
 8004ec8:	20000a50 	.word	0x20000a50
 8004ecc:	20000214 	.word	0x20000214
 8004ed0:	20000284 	.word	0x20000284

08004ed4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <BSP_LCD_GetXSize+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	4798      	blx	r3
 8004ee0:	4603      	mov	r3, r0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000a50 	.word	0x20000a50

08004eec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <BSP_LCD_GetYSize+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	4798      	blx	r3
 8004ef8:	4603      	mov	r3, r0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000a50 	.word	0x20000a50

08004f04 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b090      	sub	sp, #64	; 0x40
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004f14:	f7ff ffde 	bl	8004ed4 <BSP_LCD_GetXSize>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004f20:	f7ff ffe4 	bl	8004eec <BSP_LCD_GetYSize>
 8004f24:	4603      	mov	r3, r0
 8004f26:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8004f30:	23ff      	movs	r3, #255	; 0xff
 8004f32:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004f4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004f50:	2307      	movs	r3, #7
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004f54:	f7ff ffbe 	bl	8004ed4 <BSP_LCD_GetXSize>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004f5c:	f7ff ffc6 	bl	8004eec <BSP_LCD_GetYSize>
 8004f60:	4603      	mov	r3, r0
 8004f62:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4814      	ldr	r0, [pc, #80]	; (8004fc0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004f6e:	f003 fa0d 	bl	800838c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004f72:	88fa      	ldrh	r2, [r7, #6]
 8004f74:	4913      	ldr	r1, [pc, #76]	; (8004fc4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3304      	adds	r3, #4
 8004f82:	f04f 32ff 	mov.w	r2, #4294967295
 8004f86:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	490e      	ldr	r1, [pc, #56]	; (8004fc4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	3308      	adds	r3, #8
 8004f98:	4a0b      	ldr	r2, [pc, #44]	; (8004fc8 <BSP_LCD_LayerDefaultInit+0xc4>)
 8004f9a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004f9c:	88fa      	ldrh	r2, [r7, #6]
 8004f9e:	4909      	ldr	r1, [pc, #36]	; (8004fc4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004fae:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8004fb0:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004fb2:	f003 fa29 	bl	8008408 <HAL_LTDC_EnableDither>
}
 8004fb6:	bf00      	nop
 8004fb8:	3740      	adds	r7, #64	; 0x40
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	200009a8 	.word	0x200009a8
 8004fc4:	200007a0 	.word	0x200007a0
 8004fc8:	20000284 	.word	0x20000284

08004fcc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004fd4:	4a04      	ldr	r2, [pc, #16]	; (8004fe8 <BSP_LCD_SelectLayer+0x1c>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	2000079c 	.word	0x2000079c

08004fec <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <BSP_LCD_SetTextColor+0x28>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4907      	ldr	r1, [pc, #28]	; (8005018 <BSP_LCD_SetTextColor+0x2c>)
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	601a      	str	r2, [r3, #0]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	2000079c 	.word	0x2000079c
 8005018:	200007a0 	.word	0x200007a0

0800501c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <BSP_LCD_SetBackColor+0x2c>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4908      	ldr	r1, [pc, #32]	; (800504c <BSP_LCD_SetBackColor+0x30>)
 800502a:	4613      	mov	r3, r2
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	3304      	adds	r3, #4
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	2000079c 	.word	0x2000079c
 800504c:	200007a0 	.word	0x200007a0

08005050 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8005058:	4b08      	ldr	r3, [pc, #32]	; (800507c <BSP_LCD_SetFont+0x2c>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4908      	ldr	r1, [pc, #32]	; (8005080 <BSP_LCD_SetFont+0x30>)
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	3308      	adds	r3, #8
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	2000079c 	.word	0x2000079c
 8005080:	200007a0 	.word	0x200007a0

08005084 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8005084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005086:	b085      	sub	sp, #20
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <BSP_LCD_Clear+0x48>)
 800508e:	681c      	ldr	r4, [r3, #0]
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <BSP_LCD_Clear+0x48>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <BSP_LCD_Clear+0x4c>)
 8005096:	2134      	movs	r1, #52	; 0x34
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	4413      	add	r3, r2
 800509e:	335c      	adds	r3, #92	; 0x5c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461e      	mov	r6, r3
 80050a4:	f7ff ff16 	bl	8004ed4 <BSP_LCD_GetXSize>
 80050a8:	4605      	mov	r5, r0
 80050aa:	f7ff ff1f 	bl	8004eec <BSP_LCD_GetYSize>
 80050ae:	4602      	mov	r2, r0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	2300      	movs	r3, #0
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	462a      	mov	r2, r5
 80050bc:	4631      	mov	r1, r6
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 fd92 	bl	8005be8 <FillBuffer>
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050cc:	2000079c 	.word	0x2000079c
 80050d0:	200009a8 	.word	0x200009a8

080050d4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	80fb      	strh	r3, [r7, #6]
 80050de:	460b      	mov	r3, r1
 80050e0:	80bb      	strh	r3, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <BSP_LCD_DisplayChar+0x80>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	491b      	ldr	r1, [pc, #108]	; (8005158 <BSP_LCD_DisplayChar+0x84>)
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	3308      	adds	r3, #8
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <BSP_LCD_DisplayChar+0x80>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4c14      	ldr	r4, [pc, #80]	; (8005158 <BSP_LCD_DisplayChar+0x84>)
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4423      	add	r3, r4
 8005112:	3308      	adds	r3, #8
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005118:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <BSP_LCD_DisplayChar+0x80>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4c0d      	ldr	r4, [pc, #52]	; (8005158 <BSP_LCD_DisplayChar+0x84>)
 8005122:	4613      	mov	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4423      	add	r3, r4
 800512c:	3308      	adds	r3, #8
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	889b      	ldrh	r3, [r3, #4]
 8005132:	3307      	adds	r3, #7
 8005134:	2b00      	cmp	r3, #0
 8005136:	da00      	bge.n	800513a <BSP_LCD_DisplayChar+0x66>
 8005138:	3307      	adds	r3, #7
 800513a:	10db      	asrs	r3, r3, #3
 800513c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005140:	18ca      	adds	r2, r1, r3
 8005142:	88b9      	ldrh	r1, [r7, #4]
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fc94 	bl	8005a74 <DrawChar>
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bd90      	pop	{r4, r7, pc}
 8005154:	2000079c 	.word	0x2000079c
 8005158:	200007a0 	.word	0x200007a0

0800515c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800515c:	b5b0      	push	{r4, r5, r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	60ba      	str	r2, [r7, #8]
 8005164:	461a      	mov	r2, r3
 8005166:	4603      	mov	r3, r0
 8005168:	81fb      	strh	r3, [r7, #14]
 800516a:	460b      	mov	r3, r1
 800516c:	81bb      	strh	r3, [r7, #12]
 800516e:	4613      	mov	r3, r2
 8005170:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8005172:	2301      	movs	r3, #1
 8005174:	83fb      	strh	r3, [r7, #30]
 8005176:	2300      	movs	r3, #0
 8005178:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	2300      	movs	r3, #0
 8005180:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8005186:	e002      	b.n	800518e <BSP_LCD_DisplayStringAt+0x32>
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	3301      	adds	r3, #1
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	617a      	str	r2, [r7, #20]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f6      	bne.n	8005188 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800519a:	f7ff fe9b 	bl	8004ed4 <BSP_LCD_GetXSize>
 800519e:	4601      	mov	r1, r0
 80051a0:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <BSP_LCD_DisplayStringAt+0x174>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	484b      	ldr	r0, [pc, #300]	; (80052d4 <BSP_LCD_DisplayStringAt+0x178>)
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4403      	add	r3, r0
 80051b0:	3308      	adds	r3, #8
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	889b      	ldrh	r3, [r3, #4]
 80051b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ba:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d01c      	beq.n	80051fc <BSP_LCD_DisplayStringAt+0xa0>
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	dc33      	bgt.n	800522e <BSP_LCD_DisplayStringAt+0xd2>
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d002      	beq.n	80051d0 <BSP_LCD_DisplayStringAt+0x74>
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d019      	beq.n	8005202 <BSP_LCD_DisplayStringAt+0xa6>
 80051ce:	e02e      	b.n	800522e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	1ad1      	subs	r1, r2, r3
 80051d6:	4b3e      	ldr	r3, [pc, #248]	; (80052d0 <BSP_LCD_DisplayStringAt+0x174>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	483e      	ldr	r0, [pc, #248]	; (80052d4 <BSP_LCD_DisplayStringAt+0x178>)
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4403      	add	r3, r0
 80051e6:	3308      	adds	r3, #8
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	889b      	ldrh	r3, [r3, #4]
 80051ec:	fb03 f301 	mul.w	r3, r3, r1
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	89fb      	ldrh	r3, [r7, #14]
 80051f6:	4413      	add	r3, r2
 80051f8:	83fb      	strh	r3, [r7, #30]
      break;
 80051fa:	e01b      	b.n	8005234 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80051fc:	89fb      	ldrh	r3, [r7, #14]
 80051fe:	83fb      	strh	r3, [r7, #30]
      break;
 8005200:	e018      	b.n	8005234 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	b299      	uxth	r1, r3
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <BSP_LCD_DisplayStringAt+0x174>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4831      	ldr	r0, [pc, #196]	; (80052d4 <BSP_LCD_DisplayStringAt+0x178>)
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4403      	add	r3, r0
 800521a:	3308      	adds	r3, #8
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	889b      	ldrh	r3, [r3, #4]
 8005220:	fb11 f303 	smulbb	r3, r1, r3
 8005224:	b29a      	uxth	r2, r3
 8005226:	89fb      	ldrh	r3, [r7, #14]
 8005228:	4413      	add	r3, r2
 800522a:	83fb      	strh	r3, [r7, #30]
      break;
 800522c:	e002      	b.n	8005234 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800522e:	89fb      	ldrh	r3, [r7, #14]
 8005230:	83fb      	strh	r3, [r7, #30]
      break;
 8005232:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005234:	e01a      	b.n	800526c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	89b9      	ldrh	r1, [r7, #12]
 800523c:	8bfb      	ldrh	r3, [r7, #30]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff ff48 	bl	80050d4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8005244:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <BSP_LCD_DisplayStringAt+0x174>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4922      	ldr	r1, [pc, #136]	; (80052d4 <BSP_LCD_DisplayStringAt+0x178>)
 800524a:	4613      	mov	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	3308      	adds	r3, #8
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	889a      	ldrh	r2, [r3, #4]
 800525a:	8bfb      	ldrh	r3, [r7, #30]
 800525c:	4413      	add	r3, r2
 800525e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	3301      	adds	r3, #1
 8005264:	60bb      	str	r3, [r7, #8]
    i++;
 8005266:	8bbb      	ldrh	r3, [r7, #28]
 8005268:	3301      	adds	r3, #1
 800526a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2dc      	uxtb	r4, r3
 800527a:	f7ff fe2b 	bl	8004ed4 <BSP_LCD_GetXSize>
 800527e:	8bb9      	ldrh	r1, [r7, #28]
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <BSP_LCD_DisplayStringAt+0x174>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4d13      	ldr	r5, [pc, #76]	; (80052d4 <BSP_LCD_DisplayStringAt+0x178>)
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	442b      	add	r3, r5
 8005290:	3308      	adds	r3, #8
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	889b      	ldrh	r3, [r3, #4]
 8005296:	fb03 f301 	mul.w	r3, r3, r1
 800529a:	1ac3      	subs	r3, r0, r3
 800529c:	b299      	uxth	r1, r3
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <BSP_LCD_DisplayStringAt+0x174>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	480c      	ldr	r0, [pc, #48]	; (80052d4 <BSP_LCD_DisplayStringAt+0x178>)
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4403      	add	r3, r0
 80052ae:	3308      	adds	r3, #8
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	889b      	ldrh	r3, [r3, #4]
 80052b4:	4299      	cmp	r1, r3
 80052b6:	bf2c      	ite	cs
 80052b8:	2301      	movcs	r3, #1
 80052ba:	2300      	movcc	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	4023      	ands	r3, r4
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1b7      	bne.n	8005236 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bdb0      	pop	{r4, r5, r7, pc}
 80052d0:	2000079c 	.word	0x2000079c
 80052d4:	200007a0 	.word	0x200007a0

080052d8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80052d8:	b5b0      	push	{r4, r5, r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af02      	add	r7, sp, #8
 80052de:	4603      	mov	r3, r0
 80052e0:	80fb      	strh	r3, [r7, #6]
 80052e2:	460b      	mov	r3, r1
 80052e4:	80bb      	strh	r3, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80052ee:	4b16      	ldr	r3, [pc, #88]	; (8005348 <BSP_LCD_DrawHLine+0x70>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a16      	ldr	r2, [pc, #88]	; (800534c <BSP_LCD_DrawHLine+0x74>)
 80052f4:	2134      	movs	r1, #52	; 0x34
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	4413      	add	r3, r2
 80052fc:	335c      	adds	r3, #92	; 0x5c
 80052fe:	681c      	ldr	r4, [r3, #0]
 8005300:	f7ff fde8 	bl	8004ed4 <BSP_LCD_GetXSize>
 8005304:	4602      	mov	r2, r0
 8005306:	88bb      	ldrh	r3, [r7, #4]
 8005308:	fb03 f202 	mul.w	r2, r3, r2
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4423      	add	r3, r4
 8005314:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <BSP_LCD_DrawHLine+0x70>)
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	887c      	ldrh	r4, [r7, #2]
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <BSP_LCD_DrawHLine+0x70>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4d0b      	ldr	r5, [pc, #44]	; (8005350 <BSP_LCD_DrawHLine+0x78>)
 8005324:	4613      	mov	r3, r2
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	442b      	add	r3, r5
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	2300      	movs	r3, #0
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2301      	movs	r3, #1
 8005338:	4622      	mov	r2, r4
 800533a:	f000 fc55 	bl	8005be8 <FillBuffer>
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bdb0      	pop	{r4, r5, r7, pc}
 8005346:	bf00      	nop
 8005348:	2000079c 	.word	0x2000079c
 800534c:	200009a8 	.word	0x200009a8
 8005350:	200007a0 	.word	0x200007a0

08005354 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005356:	b087      	sub	sp, #28
 8005358:	af02      	add	r7, sp, #8
 800535a:	4603      	mov	r3, r0
 800535c:	80fb      	strh	r3, [r7, #6]
 800535e:	460b      	mov	r3, r1
 8005360:	80bb      	strh	r3, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800536a:	4b18      	ldr	r3, [pc, #96]	; (80053cc <BSP_LCD_DrawVLine+0x78>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a18      	ldr	r2, [pc, #96]	; (80053d0 <BSP_LCD_DrawVLine+0x7c>)
 8005370:	2134      	movs	r1, #52	; 0x34
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	335c      	adds	r3, #92	; 0x5c
 800537a:	681c      	ldr	r4, [r3, #0]
 800537c:	f7ff fdaa 	bl	8004ed4 <BSP_LCD_GetXSize>
 8005380:	4602      	mov	r2, r0
 8005382:	88bb      	ldrh	r3, [r7, #4]
 8005384:	fb03 f202 	mul.w	r2, r3, r2
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4423      	add	r3, r4
 8005390:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8005392:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <BSP_LCD_DrawVLine+0x78>)
 8005394:	681c      	ldr	r4, [r3, #0]
 8005396:	68fd      	ldr	r5, [r7, #12]
 8005398:	887e      	ldrh	r6, [r7, #2]
 800539a:	f7ff fd9b 	bl	8004ed4 <BSP_LCD_GetXSize>
 800539e:	4603      	mov	r3, r0
 80053a0:	1e59      	subs	r1, r3, #1
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <BSP_LCD_DrawVLine+0x78>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	480b      	ldr	r0, [pc, #44]	; (80053d4 <BSP_LCD_DrawVLine+0x80>)
 80053a8:	4613      	mov	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4403      	add	r3, r0
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	9100      	str	r1, [sp, #0]
 80053b8:	4633      	mov	r3, r6
 80053ba:	2201      	movs	r2, #1
 80053bc:	4629      	mov	r1, r5
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 fc12 	bl	8005be8 <FillBuffer>
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053cc:	2000079c 	.word	0x2000079c
 80053d0:	200009a8 	.word	0x200009a8
 80053d4:	200007a0 	.word	0x200007a0

080053d8 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b08b      	sub	sp, #44	; 0x2c
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4604      	mov	r4, r0
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4623      	mov	r3, r4
 80053e8:	80fb      	strh	r3, [r7, #6]
 80053ea:	4603      	mov	r3, r0
 80053ec:	80bb      	strh	r3, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	807b      	strh	r3, [r7, #2]
 80053f2:	4613      	mov	r3, r2
 80053f4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80053f6:	2300      	movs	r3, #0
 80053f8:	823b      	strh	r3, [r7, #16]
 80053fa:	2300      	movs	r3, #0
 80053fc:	81fb      	strh	r3, [r7, #14]
 80053fe:	2300      	movs	r3, #0
 8005400:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005402:	2300      	movs	r3, #0
 8005404:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005406:	2300      	movs	r3, #0
 8005408:	847b      	strh	r3, [r7, #34]	; 0x22
 800540a:	2300      	movs	r3, #0
 800540c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800540e:	2300      	movs	r3, #0
 8005410:	83fb      	strh	r3, [r7, #30]
 8005412:	2300      	movs	r3, #0
 8005414:	83bb      	strh	r3, [r7, #28]
 8005416:	2300      	movs	r3, #0
 8005418:	837b      	strh	r3, [r7, #26]
 800541a:	2300      	movs	r3, #0
 800541c:	833b      	strh	r3, [r7, #24]
 800541e:	2300      	movs	r3, #0
 8005420:	82fb      	strh	r3, [r7, #22]
 8005422:	2300      	movs	r3, #0
 8005424:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800542a:	887a      	ldrh	r2, [r7, #2]
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	bfb8      	it	lt
 8005434:	425b      	neglt	r3, r3
 8005436:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8005438:	883a      	ldrh	r2, [r7, #0]
 800543a:	88bb      	ldrh	r3, [r7, #4]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfb8      	it	lt
 8005442:	425b      	neglt	r3, r3
 8005444:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800544a:	88bb      	ldrh	r3, [r7, #4]
 800544c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800544e:	887a      	ldrh	r2, [r7, #2]
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	429a      	cmp	r2, r3
 8005454:	d304      	bcc.n	8005460 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8005456:	2301      	movs	r3, #1
 8005458:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800545a:	2301      	movs	r3, #1
 800545c:	843b      	strh	r3, [r7, #32]
 800545e:	e005      	b.n	800546c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8005460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005464:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8005466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800546a:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 800546c:	883a      	ldrh	r2, [r7, #0]
 800546e:	88bb      	ldrh	r3, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d304      	bcc.n	800547e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8005474:	2301      	movs	r3, #1
 8005476:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8005478:	2301      	movs	r3, #1
 800547a:	83bb      	strh	r3, [r7, #28]
 800547c:	e005      	b.n	800548a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800547e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005482:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8005484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005488:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800548a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800548e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005492:	429a      	cmp	r2, r3
 8005494:	db10      	blt.n	80054b8 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8005496:	2300      	movs	r3, #0
 8005498:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800549a:	2300      	movs	r3, #0
 800549c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800549e:	8a3b      	ldrh	r3, [r7, #16]
 80054a0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80054a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80054a6:	0fda      	lsrs	r2, r3, #31
 80054a8:	4413      	add	r3, r2
 80054aa:	105b      	asrs	r3, r3, #1
 80054ac:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80054ae:	89fb      	ldrh	r3, [r7, #14]
 80054b0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80054b2:	8a3b      	ldrh	r3, [r7, #16]
 80054b4:	82bb      	strh	r3, [r7, #20]
 80054b6:	e00f      	b.n	80054d8 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80054b8:	2300      	movs	r3, #0
 80054ba:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80054bc:	2300      	movs	r3, #0
 80054be:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80054c0:	89fb      	ldrh	r3, [r7, #14]
 80054c2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80054c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054c8:	0fda      	lsrs	r2, r3, #31
 80054ca:	4413      	add	r3, r2
 80054cc:	105b      	asrs	r3, r3, #1
 80054ce:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80054d0:	8a3b      	ldrh	r3, [r7, #16]
 80054d2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80054d4:	89fb      	ldrh	r3, [r7, #14]
 80054d6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80054d8:	2300      	movs	r3, #0
 80054da:	827b      	strh	r3, [r7, #18]
 80054dc:	e037      	b.n	800554e <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80054de:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80054e0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80054e2:	4b20      	ldr	r3, [pc, #128]	; (8005564 <BSP_LCD_DrawLine+0x18c>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4c20      	ldr	r4, [pc, #128]	; (8005568 <BSP_LCD_DrawLine+0x190>)
 80054e8:	4613      	mov	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4423      	add	r3, r4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	f000 fa95 	bl	8005a24 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80054fa:	8b3a      	ldrh	r2, [r7, #24]
 80054fc:	8afb      	ldrh	r3, [r7, #22]
 80054fe:	4413      	add	r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8005504:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005508:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800550c:	429a      	cmp	r2, r3
 800550e:	db0e      	blt.n	800552e <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8005510:	8b3a      	ldrh	r2, [r7, #24]
 8005512:	8b7b      	ldrh	r3, [r7, #26]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	b29b      	uxth	r3, r3
 8005518:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800551a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800551c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800551e:	4413      	add	r3, r2
 8005520:	b29b      	uxth	r3, r3
 8005522:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8005524:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005526:	8bfb      	ldrh	r3, [r7, #30]
 8005528:	4413      	add	r3, r2
 800552a:	b29b      	uxth	r3, r3
 800552c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800552e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005530:	8c3b      	ldrh	r3, [r7, #32]
 8005532:	4413      	add	r3, r2
 8005534:	b29b      	uxth	r3, r3
 8005536:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8005538:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800553a:	8bbb      	ldrh	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	b29b      	uxth	r3, r3
 8005540:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8005542:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005546:	b29b      	uxth	r3, r3
 8005548:	3301      	adds	r3, #1
 800554a:	b29b      	uxth	r3, r3
 800554c:	827b      	strh	r3, [r7, #18]
 800554e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005552:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005556:	429a      	cmp	r2, r3
 8005558:	ddc1      	ble.n	80054de <BSP_LCD_DrawLine+0x106>
  }
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	372c      	adds	r7, #44	; 0x2c
 8005560:	46bd      	mov	sp, r7
 8005562:	bd90      	pop	{r4, r7, pc}
 8005564:	2000079c 	.word	0x2000079c
 8005568:	200007a0 	.word	0x200007a0

0800556c <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	461a      	mov	r2, r3
 800557a:	4623      	mov	r3, r4
 800557c:	80fb      	strh	r3, [r7, #6]
 800557e:	4603      	mov	r3, r0
 8005580:	80bb      	strh	r3, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	807b      	strh	r3, [r7, #2]
 8005586:	4613      	mov	r3, r2
 8005588:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	88b9      	ldrh	r1, [r7, #4]
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff fea1 	bl	80052d8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8005596:	88ba      	ldrh	r2, [r7, #4]
 8005598:	883b      	ldrh	r3, [r7, #0]
 800559a:	4413      	add	r3, r2
 800559c:	b299      	uxth	r1, r3
 800559e:	887a      	ldrh	r2, [r7, #2]
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fe98 	bl	80052d8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80055a8:	883a      	ldrh	r2, [r7, #0]
 80055aa:	88b9      	ldrh	r1, [r7, #4]
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fed0 	bl	8005354 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80055b4:	88fa      	ldrh	r2, [r7, #6]
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	4413      	add	r3, r2
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	883a      	ldrh	r2, [r7, #0]
 80055be:	88b9      	ldrh	r1, [r7, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fec7 	bl	8005354 <BSP_LCD_DrawVLine>
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd90      	pop	{r4, r7, pc}
	...

080055d0 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	80fb      	strh	r3, [r7, #6]
 80055da:	460b      	mov	r3, r1
 80055dc:	80bb      	strh	r3, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80055e2:	887b      	ldrh	r3, [r7, #2]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	f1c3 0303 	rsb	r3, r3, #3
 80055ea:	617b      	str	r3, [r7, #20]
  curx = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80055f0:	887b      	ldrh	r3, [r7, #2]
 80055f2:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80055f4:	e0c7      	b.n	8005786 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	4413      	add	r3, r2
 80055fe:	b298      	uxth	r0, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	b29b      	uxth	r3, r3
 8005604:	88ba      	ldrh	r2, [r7, #4]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	b299      	uxth	r1, r3
 800560a:	4b64      	ldr	r3, [pc, #400]	; (800579c <BSP_LCD_DrawCircle+0x1cc>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4c64      	ldr	r4, [pc, #400]	; (80057a0 <BSP_LCD_DrawCircle+0x1d0>)
 8005610:	4613      	mov	r3, r2
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4423      	add	r3, r4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	f000 fa01 	bl	8005a24 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	b29b      	uxth	r3, r3
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	b298      	uxth	r0, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	b29b      	uxth	r3, r3
 8005630:	88ba      	ldrh	r2, [r7, #4]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	b299      	uxth	r1, r3
 8005636:	4b59      	ldr	r3, [pc, #356]	; (800579c <BSP_LCD_DrawCircle+0x1cc>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4c59      	ldr	r4, [pc, #356]	; (80057a0 <BSP_LCD_DrawCircle+0x1d0>)
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4423      	add	r3, r4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	f000 f9eb 	bl	8005a24 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	b29a      	uxth	r2, r3
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	4413      	add	r3, r2
 8005656:	b298      	uxth	r0, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	b29b      	uxth	r3, r3
 800565c:	88ba      	ldrh	r2, [r7, #4]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	b299      	uxth	r1, r3
 8005662:	4b4e      	ldr	r3, [pc, #312]	; (800579c <BSP_LCD_DrawCircle+0x1cc>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4c4e      	ldr	r4, [pc, #312]	; (80057a0 <BSP_LCD_DrawCircle+0x1d0>)
 8005668:	4613      	mov	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4423      	add	r3, r4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	f000 f9d5 	bl	8005a24 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	b29b      	uxth	r3, r3
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b298      	uxth	r0, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	b29b      	uxth	r3, r3
 8005688:	88ba      	ldrh	r2, [r7, #4]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	b299      	uxth	r1, r3
 800568e:	4b43      	ldr	r3, [pc, #268]	; (800579c <BSP_LCD_DrawCircle+0x1cc>)
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4c43      	ldr	r4, [pc, #268]	; (80057a0 <BSP_LCD_DrawCircle+0x1d0>)
 8005694:	4613      	mov	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4423      	add	r3, r4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	f000 f9bf 	bl	8005a24 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	4413      	add	r3, r2
 80056ae:	b298      	uxth	r0, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	88bb      	ldrh	r3, [r7, #4]
 80056b6:	4413      	add	r3, r2
 80056b8:	b299      	uxth	r1, r3
 80056ba:	4b38      	ldr	r3, [pc, #224]	; (800579c <BSP_LCD_DrawCircle+0x1cc>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4c38      	ldr	r4, [pc, #224]	; (80057a0 <BSP_LCD_DrawCircle+0x1d0>)
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4423      	add	r3, r4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	f000 f9a9 	bl	8005a24 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	b298      	uxth	r0, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	b29a      	uxth	r2, r3
 80056e0:	88bb      	ldrh	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	b299      	uxth	r1, r3
 80056e6:	4b2d      	ldr	r3, [pc, #180]	; (800579c <BSP_LCD_DrawCircle+0x1cc>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4c2d      	ldr	r4, [pc, #180]	; (80057a0 <BSP_LCD_DrawCircle+0x1d0>)
 80056ec:	4613      	mov	r3, r2
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4423      	add	r3, r4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f000 f993 	bl	8005a24 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	b29a      	uxth	r2, r3
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	4413      	add	r3, r2
 8005706:	b298      	uxth	r0, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	b29a      	uxth	r2, r3
 800570c:	88bb      	ldrh	r3, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	b299      	uxth	r1, r3
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <BSP_LCD_DrawCircle+0x1cc>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4c22      	ldr	r4, [pc, #136]	; (80057a0 <BSP_LCD_DrawCircle+0x1d0>)
 8005718:	4613      	mov	r3, r2
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4423      	add	r3, r4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	f000 f97d 	bl	8005a24 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	b29b      	uxth	r3, r3
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	b298      	uxth	r0, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	b29a      	uxth	r2, r3
 8005738:	88bb      	ldrh	r3, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	b299      	uxth	r1, r3
 800573e:	4b17      	ldr	r3, [pc, #92]	; (800579c <BSP_LCD_DrawCircle+0x1cc>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4c17      	ldr	r4, [pc, #92]	; (80057a0 <BSP_LCD_DrawCircle+0x1d0>)
 8005744:	4613      	mov	r3, r2
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4423      	add	r3, r4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	f000 f967 	bl	8005a24 <BSP_LCD_DrawPixel>

    if (d < 0)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da06      	bge.n	800576a <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	009a      	lsls	r2, r3, #2
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4413      	add	r3, r2
 8005764:	3306      	adds	r3, #6
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e00a      	b.n	8005780 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	009a      	lsls	r2, r3, #2
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	330a      	adds	r3, #10
 8005778:	617b      	str	r3, [r7, #20]
      cury--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3b01      	subs	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	3301      	adds	r3, #1
 8005784:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	429a      	cmp	r2, r3
 800578c:	f67f af33 	bls.w	80055f6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	bd90      	pop	{r4, r7, pc}
 800579a:	bf00      	nop
 800579c:	2000079c 	.word	0x2000079c
 80057a0:	200007a0 	.word	0x200007a0

080057a4 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80057a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af02      	add	r7, sp, #8
 80057ac:	4604      	mov	r4, r0
 80057ae:	4608      	mov	r0, r1
 80057b0:	4611      	mov	r1, r2
 80057b2:	461a      	mov	r2, r3
 80057b4:	4623      	mov	r3, r4
 80057b6:	80fb      	strh	r3, [r7, #6]
 80057b8:	4603      	mov	r3, r0
 80057ba:	80bb      	strh	r3, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
 80057c0:	4613      	mov	r3, r2
 80057c2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80057c8:	4b20      	ldr	r3, [pc, #128]	; (800584c <BSP_LCD_FillRect+0xa8>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4920      	ldr	r1, [pc, #128]	; (8005850 <BSP_LCD_FillRect+0xac>)
 80057ce:	4613      	mov	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fc06 	bl	8004fec <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80057e0:	4b1a      	ldr	r3, [pc, #104]	; (800584c <BSP_LCD_FillRect+0xa8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <BSP_LCD_FillRect+0xb0>)
 80057e6:	2134      	movs	r1, #52	; 0x34
 80057e8:	fb01 f303 	mul.w	r3, r1, r3
 80057ec:	4413      	add	r3, r2
 80057ee:	335c      	adds	r3, #92	; 0x5c
 80057f0:	681c      	ldr	r4, [r3, #0]
 80057f2:	f7ff fb6f 	bl	8004ed4 <BSP_LCD_GetXSize>
 80057f6:	4602      	mov	r2, r0
 80057f8:	88bb      	ldrh	r3, [r7, #4]
 80057fa:	fb03 f202 	mul.w	r2, r3, r2
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4423      	add	r3, r4
 8005806:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8005808:	4b10      	ldr	r3, [pc, #64]	; (800584c <BSP_LCD_FillRect+0xa8>)
 800580a:	681c      	ldr	r4, [r3, #0]
 800580c:	68fd      	ldr	r5, [r7, #12]
 800580e:	887e      	ldrh	r6, [r7, #2]
 8005810:	f8b7 8000 	ldrh.w	r8, [r7]
 8005814:	f7ff fb5e 	bl	8004ed4 <BSP_LCD_GetXSize>
 8005818:	4602      	mov	r2, r0
 800581a:	887b      	ldrh	r3, [r7, #2]
 800581c:	1ad1      	subs	r1, r2, r3
 800581e:	4b0b      	ldr	r3, [pc, #44]	; (800584c <BSP_LCD_FillRect+0xa8>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	480b      	ldr	r0, [pc, #44]	; (8005850 <BSP_LCD_FillRect+0xac>)
 8005824:	4613      	mov	r3, r2
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4403      	add	r3, r0
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	9100      	str	r1, [sp, #0]
 8005834:	4643      	mov	r3, r8
 8005836:	4632      	mov	r2, r6
 8005838:	4629      	mov	r1, r5
 800583a:	4620      	mov	r0, r4
 800583c:	f000 f9d4 	bl	8005be8 <FillBuffer>
}
 8005840:	bf00      	nop
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584a:	bf00      	nop
 800584c:	2000079c 	.word	0x2000079c
 8005850:	200007a0 	.word	0x200007a0
 8005854:	200009a8 	.word	0x200009a8

08005858 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <BSP_LCD_DisplayOn+0x1c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8005866:	4b03      	ldr	r3, [pc, #12]	; (8005874 <BSP_LCD_DisplayOn+0x1c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4798      	blx	r3
  }
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000a50 	.word	0x20000a50

08005878 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08e      	sub	sp, #56	; 0x38
 800587c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	4a60      	ldr	r2, [pc, #384]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005888:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800588c:	6453      	str	r3, [r2, #68]	; 0x44
 800588e:	4b5e      	ldr	r3, [pc, #376]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005896:	623b      	str	r3, [r7, #32]
 8005898:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800589a:	2300      	movs	r3, #0
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	4b5a      	ldr	r3, [pc, #360]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	4a59      	ldr	r2, [pc, #356]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058a8:	6313      	str	r3, [r2, #48]	; 0x30
 80058aa:	4b57      	ldr	r3, [pc, #348]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	4b53      	ldr	r3, [pc, #332]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	4a52      	ldr	r2, [pc, #328]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	6313      	str	r3, [r2, #48]	; 0x30
 80058c6:	4b50      	ldr	r3, [pc, #320]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	4a4b      	ldr	r2, [pc, #300]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058dc:	f043 0302 	orr.w	r3, r3, #2
 80058e0:	6313      	str	r3, [r2, #48]	; 0x30
 80058e2:	4b49      	ldr	r3, [pc, #292]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	4b45      	ldr	r3, [pc, #276]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	4a44      	ldr	r2, [pc, #272]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 80058f8:	f043 0304 	orr.w	r3, r3, #4
 80058fc:	6313      	str	r3, [r2, #48]	; 0x30
 80058fe:	4b42      	ldr	r3, [pc, #264]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	4b3e      	ldr	r3, [pc, #248]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	4a3d      	ldr	r2, [pc, #244]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005914:	f043 0308 	orr.w	r3, r3, #8
 8005918:	6313      	str	r3, [r2, #48]	; 0x30
 800591a:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005926:	2300      	movs	r3, #0
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	4b37      	ldr	r3, [pc, #220]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	4a36      	ldr	r2, [pc, #216]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005930:	f043 0320 	orr.w	r3, r3, #32
 8005934:	6313      	str	r3, [r2, #48]	; 0x30
 8005936:	4b34      	ldr	r3, [pc, #208]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	4b30      	ldr	r3, [pc, #192]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 800594c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005950:	6313      	str	r3, [r2, #48]	; 0x30
 8005952:	4b2d      	ldr	r3, [pc, #180]	; (8005a08 <BSP_LCD_MspInit+0x190>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800595e:	f641 0358 	movw	r3, #6232	; 0x1858
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005964:	2302      	movs	r3, #2
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005968:	2300      	movs	r3, #0
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800596c:	2302      	movs	r3, #2
 800596e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8005970:	230e      	movs	r3, #14
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005978:	4619      	mov	r1, r3
 800597a:	4824      	ldr	r0, [pc, #144]	; (8005a0c <BSP_LCD_MspInit+0x194>)
 800597c:	f001 fa3e 	bl	8006dfc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8005980:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800598a:	4619      	mov	r1, r3
 800598c:	4820      	ldr	r0, [pc, #128]	; (8005a10 <BSP_LCD_MspInit+0x198>)
 800598e:	f001 fa35 	bl	8006dfc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8005992:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8005998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800599c:	4619      	mov	r1, r3
 800599e:	481d      	ldr	r0, [pc, #116]	; (8005a14 <BSP_LCD_MspInit+0x19c>)
 80059a0:	f001 fa2c 	bl	8006dfc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80059a4:	2348      	movs	r3, #72	; 0x48
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80059a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ac:	4619      	mov	r1, r3
 80059ae:	481a      	ldr	r0, [pc, #104]	; (8005a18 <BSP_LCD_MspInit+0x1a0>)
 80059b0:	f001 fa24 	bl	8006dfc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80059b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80059ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059be:	4619      	mov	r1, r3
 80059c0:	4816      	ldr	r0, [pc, #88]	; (8005a1c <BSP_LCD_MspInit+0x1a4>)
 80059c2:	f001 fa1b 	bl	8006dfc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80059c6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80059cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d0:	4619      	mov	r1, r3
 80059d2:	4813      	ldr	r0, [pc, #76]	; (8005a20 <BSP_LCD_MspInit+0x1a8>)
 80059d4:	f001 fa12 	bl	8006dfc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80059d8:	2303      	movs	r3, #3
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80059dc:	2309      	movs	r3, #9
 80059de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80059e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e4:	4619      	mov	r1, r3
 80059e6:	480a      	ldr	r0, [pc, #40]	; (8005a10 <BSP_LCD_MspInit+0x198>)
 80059e8:	f001 fa08 	bl	8006dfc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80059ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80059f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f6:	4619      	mov	r1, r3
 80059f8:	4809      	ldr	r0, [pc, #36]	; (8005a20 <BSP_LCD_MspInit+0x1a8>)
 80059fa:	f001 f9ff 	bl	8006dfc <HAL_GPIO_Init>
}
 80059fe:	bf00      	nop
 8005a00:	3738      	adds	r7, #56	; 0x38
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40020000 	.word	0x40020000
 8005a10:	40020400 	.word	0x40020400
 8005a14:	40020800 	.word	0x40020800
 8005a18:	40020c00 	.word	0x40020c00
 8005a1c:	40021400 	.word	0x40021400
 8005a20:	40021800 	.word	0x40021800

08005a24 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	603a      	str	r2, [r7, #0]
 8005a2e:	80fb      	strh	r3, [r7, #6]
 8005a30:	460b      	mov	r3, r1
 8005a32:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  //*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  //rotate 180°
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code;
 8005a34:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <BSP_LCD_DrawPixel+0x48>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <BSP_LCD_DrawPixel+0x4c>)
 8005a3a:	2134      	movs	r1, #52	; 0x34
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	335c      	adds	r3, #92	; 0x5c
 8005a44:	681c      	ldr	r4, [r3, #0]
 8005a46:	88fd      	ldrh	r5, [r7, #6]
 8005a48:	f7ff fa44 	bl	8004ed4 <BSP_LCD_GetXSize>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	88bb      	ldrh	r3, [r7, #4]
 8005a50:	fb03 f302 	mul.w	r3, r3, r2
 8005a54:	442b      	add	r3, r5
 8005a56:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4423      	add	r3, r4
 8005a5e:	461a      	mov	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	6013      	str	r3, [r2, #0]
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a6c:	2000079c 	.word	0x2000079c
 8005a70:	200009a8 	.word	0x200009a8

08005a74 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	603a      	str	r2, [r7, #0]
 8005a7e:	80fb      	strh	r3, [r7, #6]
 8005a80:	460b      	mov	r3, r1
 8005a82:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8005a90:	4b53      	ldr	r3, [pc, #332]	; (8005be0 <DrawChar+0x16c>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	4953      	ldr	r1, [pc, #332]	; (8005be4 <DrawChar+0x170>)
 8005a96:	4613      	mov	r3, r2
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	88db      	ldrh	r3, [r3, #6]
 8005aa6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005aa8:	4b4d      	ldr	r3, [pc, #308]	; (8005be0 <DrawChar+0x16c>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	494d      	ldr	r1, [pc, #308]	; (8005be4 <DrawChar+0x170>)
 8005aae:	4613      	mov	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3308      	adds	r3, #8
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	889b      	ldrh	r3, [r3, #4]
 8005abe:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8005ac0:	8a3b      	ldrh	r3, [r7, #16]
 8005ac2:	3307      	adds	r3, #7
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	da00      	bge.n	8005aca <DrawChar+0x56>
 8005ac8:	3307      	adds	r3, #7
 8005aca:	10db      	asrs	r3, r3, #3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	8a3b      	ldrh	r3, [r7, #16]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	e076      	b.n	8005bce <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005ae0:	8a3b      	ldrh	r3, [r7, #16]
 8005ae2:	3307      	adds	r3, #7
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da00      	bge.n	8005aea <DrawChar+0x76>
 8005ae8:	3307      	adds	r3, #7
 8005aea:	10db      	asrs	r3, r3, #3
 8005aec:	461a      	mov	r2, r3
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	fb03 f302 	mul.w	r3, r3, r2
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	4413      	add	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8005afa:	8a3b      	ldrh	r3, [r7, #16]
 8005afc:	3307      	adds	r3, #7
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	da00      	bge.n	8005b04 <DrawChar+0x90>
 8005b02:	3307      	adds	r3, #7
 8005b04:	10db      	asrs	r3, r3, #3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d002      	beq.n	8005b10 <DrawChar+0x9c>
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d004      	beq.n	8005b18 <DrawChar+0xa4>
 8005b0e:	e00c      	b.n	8005b2a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	617b      	str	r3, [r7, #20]
      break;
 8005b16:	e016      	b.n	8005b46 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	3201      	adds	r2, #1
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
      break;
 8005b28:	e00d      	b.n	8005b46 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	041a      	lsls	r2, r3, #16
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	3301      	adds	r3, #1
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	3202      	adds	r2, #2
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
      break;
 8005b44:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e036      	b.n	8005bba <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005b4c:	8a3a      	ldrh	r2, [r7, #16]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	1ad2      	subs	r2, r2, r3
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	4413      	add	r3, r2
 8005b56:	3b01      	subs	r3, #1
 8005b58:	2201      	movs	r2, #1
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d012      	beq.n	8005b8e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	4413      	add	r3, r2
 8005b70:	b298      	uxth	r0, r3
 8005b72:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <DrawChar+0x16c>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	491b      	ldr	r1, [pc, #108]	; (8005be4 <DrawChar+0x170>)
 8005b78:	4613      	mov	r3, r2
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	88bb      	ldrh	r3, [r7, #4]
 8005b86:	4619      	mov	r1, r3
 8005b88:	f7ff ff4c 	bl	8005a24 <BSP_LCD_DrawPixel>
 8005b8c:	e012      	b.n	8005bb4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	4413      	add	r3, r2
 8005b96:	b298      	uxth	r0, r3
 8005b98:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <DrawChar+0x16c>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4911      	ldr	r1, [pc, #68]	; (8005be4 <DrawChar+0x170>)
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3304      	adds	r3, #4
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	88bb      	ldrh	r3, [r7, #4]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	f7ff ff38 	bl	8005a24 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	8a3b      	ldrh	r3, [r7, #16]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d3c4      	bcc.n	8005b4c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8005bc2:	88bb      	ldrh	r3, [r7, #4]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	8a7b      	ldrh	r3, [r7, #18]
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d384      	bcc.n	8005ae0 <DrawChar+0x6c>
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	2000079c 	.word	0x2000079c
 8005be4:	200007a0 	.word	0x200007a0

08005be8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8005bf6:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <FillBuffer+0x68>)
 8005bf8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005bfc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005bfe:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <FillBuffer+0x68>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8005c04:	4a12      	ldr	r2, [pc, #72]	; (8005c50 <FillBuffer+0x68>)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8005c0a:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <FillBuffer+0x68>)
 8005c0c:	4a11      	ldr	r2, [pc, #68]	; (8005c54 <FillBuffer+0x6c>)
 8005c0e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8005c10:	480f      	ldr	r0, [pc, #60]	; (8005c50 <FillBuffer+0x68>)
 8005c12:	f000 fe5d 	bl	80068d0 <HAL_DMA2D_Init>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d115      	bne.n	8005c48 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	480c      	ldr	r0, [pc, #48]	; (8005c50 <FillBuffer+0x68>)
 8005c20:	f000 ffbe 	bl	8006ba0 <HAL_DMA2D_ConfigLayer>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10e      	bne.n	8005c48 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69f9      	ldr	r1, [r7, #28]
 8005c34:	4806      	ldr	r0, [pc, #24]	; (8005c50 <FillBuffer+0x68>)
 8005c36:	f000 fe9e 	bl	8006976 <HAL_DMA2D_Start>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8005c40:	210a      	movs	r1, #10
 8005c42:	4803      	ldr	r0, [pc, #12]	; (8005c50 <FillBuffer+0x68>)
 8005c44:	f000 fec2 	bl	80069cc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	2000072c 	.word	0x2000072c
 8005c54:	4002b000 	.word	0x4002b000

08005c58 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005c5c:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005c5e:	4a2a      	ldr	r2, [pc, #168]	; (8005d08 <BSP_SDRAM_Init+0xb0>)
 8005c60:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8005c62:	4b2a      	ldr	r3, [pc, #168]	; (8005d0c <BSP_SDRAM_Init+0xb4>)
 8005c64:	2202      	movs	r2, #2
 8005c66:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8005c68:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <BSP_SDRAM_Init+0xb4>)
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8005c6e:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <BSP_SDRAM_Init+0xb4>)
 8005c70:	2204      	movs	r2, #4
 8005c72:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8005c74:	4b25      	ldr	r3, [pc, #148]	; (8005d0c <BSP_SDRAM_Init+0xb4>)
 8005c76:	2207      	movs	r2, #7
 8005c78:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8005c7a:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <BSP_SDRAM_Init+0xb4>)
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8005c80:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <BSP_SDRAM_Init+0xb4>)
 8005c82:	2202      	movs	r2, #2
 8005c84:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <BSP_SDRAM_Init+0xb4>)
 8005c88:	2202      	movs	r2, #2
 8005c8a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005c9e:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005ca4:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005ca6:	2240      	movs	r2, #64	; 0x40
 8005ca8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005cac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005cb0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005cb8:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cbe:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8005cc0:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ccc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8005cce:	2100      	movs	r1, #0
 8005cd0:	480c      	ldr	r0, [pc, #48]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005cd2:	f000 f87f 	bl	8005dd4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8005cd6:	490d      	ldr	r1, [pc, #52]	; (8005d0c <BSP_SDRAM_Init+0xb4>)
 8005cd8:	480a      	ldr	r0, [pc, #40]	; (8005d04 <BSP_SDRAM_Init+0xac>)
 8005cda:	f003 fb6d 	bl	80093b8 <HAL_SDRAM_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <BSP_SDRAM_Init+0xb8>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <BSP_SDRAM_Init+0xb8>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005cf2:	f240 506a 	movw	r0, #1386	; 0x56a
 8005cf6:	f000 f80d 	bl	8005d14 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <BSP_SDRAM_Init+0xb8>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200007b8 	.word	0x200007b8
 8005d08:	a0000140 	.word	0xa0000140
 8005d0c:	200007ec 	.word	0x200007ec
 8005d10:	200002a4 	.word	0x200002a4

08005d14 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8005d20:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d26:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d28:	2208      	movs	r2, #8
 8005d2a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005d2c:	4b27      	ldr	r3, [pc, #156]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005d32:	4b26      	ldr	r3, [pc, #152]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d3c:	4923      	ldr	r1, [pc, #140]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d3e:	4824      	ldr	r0, [pc, #144]	; (8005dd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d40:	f003 fb78 	bl	8009434 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005d44:	2001      	movs	r0, #1
 8005d46:	f000 facf 	bl	80062e8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8005d4a:	4b20      	ldr	r3, [pc, #128]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d50:	4b1e      	ldr	r3, [pc, #120]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d52:	2208      	movs	r2, #8
 8005d54:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005d56:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8005d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d66:	4919      	ldr	r1, [pc, #100]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d68:	4819      	ldr	r0, [pc, #100]	; (8005dd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d6a:	f003 fb63 	bl	8009434 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005d6e:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d70:	2203      	movs	r2, #3
 8005d72:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d74:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d76:	2208      	movs	r2, #8
 8005d78:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8005d7a:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005d80:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d8a:	4910      	ldr	r1, [pc, #64]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d8c:	4810      	ldr	r0, [pc, #64]	; (8005dd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d8e:	f003 fb51 	bl	8009434 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8005d92:	f44f 730c 	mov.w	r3, #560	; 0x230
 8005d96:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005da0:	2208      	movs	r2, #8
 8005da2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a07      	ldr	r2, [pc, #28]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005dae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005db4:	4905      	ldr	r1, [pc, #20]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005db6:	4806      	ldr	r0, [pc, #24]	; (8005dd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005db8:	f003 fb3c 	bl	8009434 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4804      	ldr	r0, [pc, #16]	; (8005dd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005dc0:	f003 fb63 	bl	800948a <HAL_SDRAM_ProgramRefreshRate>
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000808 	.word	0x20000808
 8005dd0:	200007b8 	.word	0x200007b8

08005dd4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b090      	sub	sp, #64	; 0x40
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80ec 	beq.w	8005fbe <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005de6:	2300      	movs	r3, #0
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dea:	4b77      	ldr	r3, [pc, #476]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	4a76      	ldr	r2, [pc, #472]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	6393      	str	r3, [r2, #56]	; 0x38
 8005df6:	4b74      	ldr	r3, [pc, #464]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
 8005e06:	4b70      	ldr	r3, [pc, #448]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	4a6f      	ldr	r2, [pc, #444]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e10:	6313      	str	r3, [r2, #48]	; 0x30
 8005e12:	4b6d      	ldr	r3, [pc, #436]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	4b69      	ldr	r3, [pc, #420]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	4a68      	ldr	r2, [pc, #416]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e28:	f043 0302 	orr.w	r3, r3, #2
 8005e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2e:	4b66      	ldr	r3, [pc, #408]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	623b      	str	r3, [r7, #32]
 8005e38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	4b62      	ldr	r3, [pc, #392]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	4a61      	ldr	r2, [pc, #388]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e44:	f043 0304 	orr.w	r3, r3, #4
 8005e48:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4a:	4b5f      	ldr	r3, [pc, #380]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e56:	2300      	movs	r3, #0
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	4b5b      	ldr	r3, [pc, #364]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	4a5a      	ldr	r2, [pc, #360]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e60:	f043 0308 	orr.w	r3, r3, #8
 8005e64:	6313      	str	r3, [r2, #48]	; 0x30
 8005e66:	4b58      	ldr	r3, [pc, #352]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	4b54      	ldr	r3, [pc, #336]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	4a53      	ldr	r2, [pc, #332]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e7c:	f043 0310 	orr.w	r3, r3, #16
 8005e80:	6313      	str	r3, [r2, #48]	; 0x30
 8005e82:	4b51      	ldr	r3, [pc, #324]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	4b4d      	ldr	r3, [pc, #308]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	4a4c      	ldr	r2, [pc, #304]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005e98:	f043 0320 	orr.w	r3, r3, #32
 8005e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9e:	4b4a      	ldr	r3, [pc, #296]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	4b46      	ldr	r3, [pc, #280]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	4a45      	ldr	r2, [pc, #276]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eba:	4b43      	ldr	r3, [pc, #268]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f4>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8005ed6:	2360      	movs	r3, #96	; 0x60
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8005eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ede:	4619      	mov	r1, r3
 8005ee0:	483a      	ldr	r0, [pc, #232]	; (8005fcc <BSP_SDRAM_MspInit+0x1f8>)
 8005ee2:	f000 ff8b 	bl	8006dfc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8005eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4837      	ldr	r0, [pc, #220]	; (8005fd0 <BSP_SDRAM_MspInit+0x1fc>)
 8005ef2:	f000 ff83 	bl	8006dfc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8005ef6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f00:	4619      	mov	r1, r3
 8005f02:	4834      	ldr	r0, [pc, #208]	; (8005fd4 <BSP_SDRAM_MspInit+0x200>)
 8005f04:	f000 ff7a 	bl	8006dfc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8005f08:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8005f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f12:	4619      	mov	r1, r3
 8005f14:	4830      	ldr	r0, [pc, #192]	; (8005fd8 <BSP_SDRAM_MspInit+0x204>)
 8005f16:	f000 ff71 	bl	8006dfc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8005f1a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8005f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f24:	4619      	mov	r1, r3
 8005f26:	482d      	ldr	r0, [pc, #180]	; (8005fdc <BSP_SDRAM_MspInit+0x208>)
 8005f28:	f000 ff68 	bl	8006dfc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8005f2c:	f248 1333 	movw	r3, #33075	; 0x8133
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f36:	4619      	mov	r1, r3
 8005f38:	4829      	ldr	r0, [pc, #164]	; (8005fe0 <BSP_SDRAM_MspInit+0x20c>)
 8005f3a:	f000 ff5f 	bl	8006dfc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005f3e:	4b29      	ldr	r3, [pc, #164]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005f44:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f46:	2280      	movs	r2, #128	; 0x80
 8005f48:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005f4a:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f50:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f58:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f5a:	4b22      	ldr	r3, [pc, #136]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f60:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f68:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005f70:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f76:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005f78:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005f7e:	4b19      	ldr	r3, [pc, #100]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f80:	2203      	movs	r2, #3
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8005f90:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f92:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <BSP_SDRAM_MspInit+0x214>)
 8005f94:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f9c:	4a11      	ldr	r2, [pc, #68]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8005fa2:	4810      	ldr	r0, [pc, #64]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005fa4:	f000 fb84 	bl	80066b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8005fa8:	480e      	ldr	r0, [pc, #56]	; (8005fe4 <BSP_SDRAM_MspInit+0x210>)
 8005faa:	f000 fad3 	bl	8006554 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005fae:	2200      	movs	r2, #0
 8005fb0:	210f      	movs	r1, #15
 8005fb2:	2038      	movs	r0, #56	; 0x38
 8005fb4:	f000 fa97 	bl	80064e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005fb8:	2038      	movs	r0, #56	; 0x38
 8005fba:	f000 fab0 	bl	800651e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8005fbe:	bf00      	nop
 8005fc0:	3740      	adds	r7, #64	; 0x40
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40020400 	.word	0x40020400
 8005fd0:	40020800 	.word	0x40020800
 8005fd4:	40020c00 	.word	0x40020c00
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40021400 	.word	0x40021400
 8005fe0:	40021800 	.word	0x40021800
 8005fe4:	20000818 	.word	0x20000818
 8005fe8:	40026410 	.word	0x40026410

08005fec <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	80fb      	strh	r3, [r7, #6]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <BSP_TS_Init+0x64>)
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8006006:	4a13      	ldr	r2, [pc, #76]	; (8006054 <BSP_TS_Init+0x68>)
 8006008:	88bb      	ldrh	r3, [r7, #4]
 800600a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800600c:	4b12      	ldr	r3, [pc, #72]	; (8006058 <BSP_TS_Init+0x6c>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2082      	movs	r0, #130	; 0x82
 8006012:	4798      	blx	r3
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	f640 0311 	movw	r3, #2065	; 0x811
 800601c:	429a      	cmp	r2, r3
 800601e:	d104      	bne.n	800602a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <BSP_TS_Init+0x70>)
 8006022:	4a0d      	ldr	r2, [pc, #52]	; (8006058 <BSP_TS_Init+0x6c>)
 8006024:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <BSP_TS_Init+0x70>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2082      	movs	r0, #130	; 0x82
 8006038:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <BSP_TS_Init+0x70>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2082      	movs	r0, #130	; 0x82
 8006042:	4798      	blx	r3
  }

  return ret;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	2000087c 	.word	0x2000087c
 8006054:	2000087e 	.word	0x2000087e
 8006058:	2000024c 	.word	0x2000024c
 800605c:	20000878 	.word	0x20000878

08006060 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8006064:	4b03      	ldr	r3, [pc, #12]	; (8006074 <BSP_TS_ITGetStatus+0x14>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	2082      	movs	r0, #130	; 0x82
 800606c:	4798      	blx	r3
 800606e:	4603      	mov	r3, r0
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000878 	.word	0x20000878

08006078 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8006080:	4b4f      	ldr	r3, [pc, #316]	; (80061c0 <BSP_TS_GetState+0x148>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2082      	movs	r0, #130	; 0x82
 8006088:	4798      	blx	r3
 800608a:	4603      	mov	r3, r0
 800608c:	b29a      	uxth	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 808d 	beq.w	80061b6 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800609c:	4b48      	ldr	r3, [pc, #288]	; (80061c0 <BSP_TS_GetState+0x148>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f107 020c 	add.w	r2, r7, #12
 80060a6:	f107 010e 	add.w	r1, r7, #14
 80060aa:	2082      	movs	r0, #130	; 0x82
 80060ac:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80060ae:	89bb      	ldrh	r3, [r7, #12]
 80060b0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80060b8:	89bb      	ldrh	r3, [r7, #12]
 80060ba:	4a42      	ldr	r2, [pc, #264]	; (80061c4 <BSP_TS_GetState+0x14c>)
 80060bc:	fba2 2303 	umull	r2, r3, r2, r3
 80060c0:	08db      	lsrs	r3, r3, #3
 80060c2:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80060c4:	8abb      	ldrh	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	82bb      	strh	r3, [r7, #20]
 80060ce:	e008      	b.n	80060e2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80060d0:	4b3d      	ldr	r3, [pc, #244]	; (80061c8 <BSP_TS_GetState+0x150>)
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	8aba      	ldrh	r2, [r7, #20]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80060da:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <BSP_TS_GetState+0x150>)
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	3b01      	subs	r3, #1
 80060e0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80060e2:	8abb      	ldrh	r3, [r7, #20]
 80060e4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80060e6:	89fb      	ldrh	r3, [r7, #14]
 80060e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d806      	bhi.n	80060fe <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80060f0:	89fb      	ldrh	r3, [r7, #14]
 80060f2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80060f6:	330e      	adds	r3, #14
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	81fb      	strh	r3, [r7, #14]
 80060fc:	e005      	b.n	800610a <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80060fe:	89fb      	ldrh	r3, [r7, #14]
 8006100:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8006104:	3308      	adds	r3, #8
 8006106:	b29b      	uxth	r3, r3
 8006108:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800610a:	89fb      	ldrh	r3, [r7, #14]
 800610c:	4a2f      	ldr	r2, [pc, #188]	; (80061cc <BSP_TS_GetState+0x154>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	08db      	lsrs	r3, r3, #3
 8006114:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8006116:	8afb      	ldrh	r3, [r7, #22]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	82fb      	strh	r3, [r7, #22]
 8006120:	e008      	b.n	8006134 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8006122:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <BSP_TS_GetState+0x158>)
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	8afa      	ldrh	r2, [r7, #22]
 8006128:	429a      	cmp	r2, r3
 800612a:	d903      	bls.n	8006134 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <BSP_TS_GetState+0x158>)
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	3b01      	subs	r3, #1
 8006132:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8006134:	8afb      	ldrh	r3, [r7, #22]
 8006136:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8006138:	89fb      	ldrh	r3, [r7, #14]
 800613a:	461a      	mov	r2, r3
 800613c:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <BSP_TS_GetState+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d906      	bls.n	8006152 <BSP_TS_GetState+0xda>
 8006144:	89fa      	ldrh	r2, [r7, #14]
 8006146:	4b23      	ldr	r3, [pc, #140]	; (80061d4 <BSP_TS_GetState+0x15c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	b29b      	uxth	r3, r3
 8006150:	e005      	b.n	800615e <BSP_TS_GetState+0xe6>
 8006152:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <BSP_TS_GetState+0x15c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	b29a      	uxth	r2, r3
 8006158:	89fb      	ldrh	r3, [r7, #14]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	b29b      	uxth	r3, r3
 800615e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8006160:	89bb      	ldrh	r3, [r7, #12]
 8006162:	461a      	mov	r2, r3
 8006164:	4b1c      	ldr	r3, [pc, #112]	; (80061d8 <BSP_TS_GetState+0x160>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d906      	bls.n	800617a <BSP_TS_GetState+0x102>
 800616c:	89ba      	ldrh	r2, [r7, #12]
 800616e:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <BSP_TS_GetState+0x160>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	b29b      	uxth	r3, r3
 8006178:	e005      	b.n	8006186 <BSP_TS_GetState+0x10e>
 800617a:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <BSP_TS_GetState+0x160>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	b29a      	uxth	r2, r3
 8006180:	89bb      	ldrh	r3, [r7, #12]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	b29b      	uxth	r3, r3
 8006186:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8006188:	8a7a      	ldrh	r2, [r7, #18]
 800618a:	8a3b      	ldrh	r3, [r7, #16]
 800618c:	4413      	add	r3, r2
 800618e:	2b05      	cmp	r3, #5
 8006190:	dd07      	ble.n	80061a2 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8006192:	89fb      	ldrh	r3, [r7, #14]
 8006194:	461a      	mov	r2, r3
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <BSP_TS_GetState+0x15c>)
 8006198:	601a      	str	r2, [r3, #0]
      _y = y; 
 800619a:	89bb      	ldrh	r3, [r7, #12]
 800619c:	461a      	mov	r2, r3
 800619e:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <BSP_TS_GetState+0x160>)
 80061a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <BSP_TS_GetState+0x15c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <BSP_TS_GetState+0x160>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	809a      	strh	r2, [r3, #4]
  }
}
 80061b6:	bf00      	nop
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000878 	.word	0x20000878
 80061c4:	ba2e8ba3 	.word	0xba2e8ba3
 80061c8:	2000087e 	.word	0x2000087e
 80061cc:	88888889 	.word	0x88888889
 80061d0:	2000087c 	.word	0x2000087c
 80061d4:	20000880 	.word	0x20000880
 80061d8:	20000884 	.word	0x20000884

080061dc <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80061e0:	4b03      	ldr	r3, [pc, #12]	; (80061f0 <BSP_TS_ITClear+0x14>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	2082      	movs	r0, #130	; 0x82
 80061e8:	4798      	blx	r3
}
 80061ea:	bf00      	nop
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000878 	.word	0x20000878

080061f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061f8:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <HAL_Init+0x40>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0d      	ldr	r2, [pc, #52]	; (8006234 <HAL_Init+0x40>)
 80061fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006204:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_Init+0x40>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <HAL_Init+0x40>)
 800620a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800620e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <HAL_Init+0x40>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a07      	ldr	r2, [pc, #28]	; (8006234 <HAL_Init+0x40>)
 8006216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800621c:	2003      	movs	r0, #3
 800621e:	f000 f957 	bl	80064d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006222:	200f      	movs	r0, #15
 8006224:	f000 f810 	bl	8006248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006228:	f000 f806 	bl	8006238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40023c00 	.word	0x40023c00

08006238 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
	...

08006248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006250:	4b12      	ldr	r3, [pc, #72]	; (800629c <HAL_InitTick+0x54>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <HAL_InitTick+0x58>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	4619      	mov	r1, r3
 800625a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800625e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f967 	bl	800653a <HAL_SYSTICK_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e00e      	b.n	8006294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b0f      	cmp	r3, #15
 800627a:	d80a      	bhi.n	8006292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800627c:	2200      	movs	r2, #0
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	f000 f92f 	bl	80064e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006288:	4a06      	ldr	r2, [pc, #24]	; (80062a4 <HAL_InitTick+0x5c>)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20000210 	.word	0x20000210
 80062a0:	200002ac 	.word	0x200002ac
 80062a4:	200002a8 	.word	0x200002a8

080062a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <HAL_IncTick+0x20>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_IncTick+0x24>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4413      	add	r3, r2
 80062b8:	4a04      	ldr	r2, [pc, #16]	; (80062cc <HAL_IncTick+0x24>)
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	200002ac 	.word	0x200002ac
 80062cc:	20000a54 	.word	0x20000a54

080062d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return uwTick;
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <HAL_GetTick+0x14>)
 80062d6:	681b      	ldr	r3, [r3, #0]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000a54 	.word	0x20000a54

080062e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062f0:	f7ff ffee 	bl	80062d0 <HAL_GetTick>
 80062f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d005      	beq.n	800630e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <HAL_Delay+0x44>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800630e:	bf00      	nop
 8006310:	f7ff ffde 	bl	80062d0 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	429a      	cmp	r2, r3
 800631e:	d8f7      	bhi.n	8006310 <HAL_Delay+0x28>
  {
  }
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200002ac 	.word	0x200002ac

08006330 <__NVIC_SetPriorityGrouping>:
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <__NVIC_SetPriorityGrouping+0x44>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800634c:	4013      	ands	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800635c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006362:	4a04      	ldr	r2, [pc, #16]	; (8006374 <__NVIC_SetPriorityGrouping+0x44>)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	60d3      	str	r3, [r2, #12]
}
 8006368:	bf00      	nop
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	e000ed00 	.word	0xe000ed00

08006378 <__NVIC_GetPriorityGrouping>:
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800637c:	4b04      	ldr	r3, [pc, #16]	; (8006390 <__NVIC_GetPriorityGrouping+0x18>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	f003 0307 	and.w	r3, r3, #7
}
 8006386:	4618      	mov	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	e000ed00 	.word	0xe000ed00

08006394 <__NVIC_EnableIRQ>:
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	db0b      	blt.n	80063be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	f003 021f 	and.w	r2, r3, #31
 80063ac:	4907      	ldr	r1, [pc, #28]	; (80063cc <__NVIC_EnableIRQ+0x38>)
 80063ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	2001      	movs	r0, #1
 80063b6:	fa00 f202 	lsl.w	r2, r0, r2
 80063ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	e000e100 	.word	0xe000e100

080063d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	6039      	str	r1, [r7, #0]
 80063da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	db0a      	blt.n	80063fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	490c      	ldr	r1, [pc, #48]	; (800641c <__NVIC_SetPriority+0x4c>)
 80063ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ee:	0112      	lsls	r2, r2, #4
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	440b      	add	r3, r1
 80063f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063f8:	e00a      	b.n	8006410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	4908      	ldr	r1, [pc, #32]	; (8006420 <__NVIC_SetPriority+0x50>)
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	3b04      	subs	r3, #4
 8006408:	0112      	lsls	r2, r2, #4
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	440b      	add	r3, r1
 800640e:	761a      	strb	r2, [r3, #24]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	e000e100 	.word	0xe000e100
 8006420:	e000ed00 	.word	0xe000ed00

08006424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f1c3 0307 	rsb	r3, r3, #7
 800643e:	2b04      	cmp	r3, #4
 8006440:	bf28      	it	cs
 8006442:	2304      	movcs	r3, #4
 8006444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3304      	adds	r3, #4
 800644a:	2b06      	cmp	r3, #6
 800644c:	d902      	bls.n	8006454 <NVIC_EncodePriority+0x30>
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3b03      	subs	r3, #3
 8006452:	e000      	b.n	8006456 <NVIC_EncodePriority+0x32>
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006458:	f04f 32ff 	mov.w	r2, #4294967295
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43da      	mvns	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	401a      	ands	r2, r3
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800646c:	f04f 31ff 	mov.w	r1, #4294967295
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	fa01 f303 	lsl.w	r3, r1, r3
 8006476:	43d9      	mvns	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800647c:	4313      	orrs	r3, r2
         );
}
 800647e:	4618      	mov	r0, r3
 8006480:	3724      	adds	r7, #36	; 0x24
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3b01      	subs	r3, #1
 8006498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800649c:	d301      	bcc.n	80064a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800649e:	2301      	movs	r3, #1
 80064a0:	e00f      	b.n	80064c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064a2:	4a0a      	ldr	r2, [pc, #40]	; (80064cc <SysTick_Config+0x40>)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064aa:	210f      	movs	r1, #15
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	f7ff ff8e 	bl	80063d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <SysTick_Config+0x40>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064ba:	4b04      	ldr	r3, [pc, #16]	; (80064cc <SysTick_Config+0x40>)
 80064bc:	2207      	movs	r2, #7
 80064be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	e000e010 	.word	0xe000e010

080064d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff29 	bl	8006330 <__NVIC_SetPriorityGrouping>
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	4603      	mov	r3, r0
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064f8:	f7ff ff3e 	bl	8006378 <__NVIC_GetPriorityGrouping>
 80064fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	6978      	ldr	r0, [r7, #20]
 8006504:	f7ff ff8e 	bl	8006424 <NVIC_EncodePriority>
 8006508:	4602      	mov	r2, r0
 800650a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800650e:	4611      	mov	r1, r2
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ff5d 	bl	80063d0 <__NVIC_SetPriority>
}
 8006516:	bf00      	nop
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	4603      	mov	r3, r0
 8006526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff ff31 	bl	8006394 <__NVIC_EnableIRQ>
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff ffa2 	bl	800648c <SysTick_Config>
 8006548:	4603      	mov	r3, r0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006560:	f7ff feb6 	bl	80062d0 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e099      	b.n	80066a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006590:	e00f      	b.n	80065b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006592:	f7ff fe9d 	bl	80062d0 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b05      	cmp	r3, #5
 800659e:	d908      	bls.n	80065b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2203      	movs	r2, #3
 80065aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e078      	b.n	80066a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e8      	bne.n	8006592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4b38      	ldr	r3, [pc, #224]	; (80066ac <HAL_DMA_Init+0x158>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b04      	cmp	r3, #4
 800660a:	d107      	bne.n	800661c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	4313      	orrs	r3, r2
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0307 	bic.w	r3, r3, #7
 8006632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	2b04      	cmp	r3, #4
 8006644:	d117      	bne.n	8006676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00e      	beq.n	8006676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8bd 	bl	80067d8 <DMA_CheckFifoParam>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2240      	movs	r2, #64	; 0x40
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006672:	2301      	movs	r3, #1
 8006674:	e016      	b.n	80066a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f874 	bl	800676c <DMA_CalcBaseAndBitshift>
 8006684:	4603      	mov	r3, r0
 8006686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668c:	223f      	movs	r2, #63	; 0x3f
 800668e:	409a      	lsls	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	f010803f 	.word	0xf010803f

080066b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e050      	b.n	8006764 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d101      	bne.n	80066d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80066ce:	2302      	movs	r3, #2
 80066d0:	e048      	b.n	8006764 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2200      	movs	r2, #0
 80066f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2221      	movs	r2, #33	; 0x21
 8006710:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f82a 	bl	800676c <DMA_CalcBaseAndBitshift>
 8006718:	4603      	mov	r3, r0
 800671a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006744:	223f      	movs	r2, #63	; 0x3f
 8006746:	409a      	lsls	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	3b10      	subs	r3, #16
 800677c:	4a14      	ldr	r2, [pc, #80]	; (80067d0 <DMA_CalcBaseAndBitshift+0x64>)
 800677e:	fba2 2303 	umull	r2, r3, r2, r3
 8006782:	091b      	lsrs	r3, r3, #4
 8006784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006786:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b03      	cmp	r3, #3
 8006798:	d909      	bls.n	80067ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	1d1a      	adds	r2, r3, #4
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	659a      	str	r2, [r3, #88]	; 0x58
 80067ac:	e007      	b.n	80067be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80067b6:	f023 0303 	bic.w	r3, r3, #3
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	aaaaaaab 	.word	0xaaaaaaab
 80067d4:	08012eb4 	.word	0x08012eb4

080067d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11f      	bne.n	8006832 <DMA_CheckFifoParam+0x5a>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d856      	bhi.n	80068a6 <DMA_CheckFifoParam+0xce>
 80067f8:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <DMA_CheckFifoParam+0x28>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	08006811 	.word	0x08006811
 8006804:	08006823 	.word	0x08006823
 8006808:	08006811 	.word	0x08006811
 800680c:	080068a7 	.word	0x080068a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d046      	beq.n	80068aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006820:	e043      	b.n	80068aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800682a:	d140      	bne.n	80068ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006830:	e03d      	b.n	80068ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683a:	d121      	bne.n	8006880 <DMA_CheckFifoParam+0xa8>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b03      	cmp	r3, #3
 8006840:	d837      	bhi.n	80068b2 <DMA_CheckFifoParam+0xda>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <DMA_CheckFifoParam+0x70>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006859 	.word	0x08006859
 800684c:	0800685f 	.word	0x0800685f
 8006850:	08006859 	.word	0x08006859
 8006854:	08006871 	.word	0x08006871
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
      break;
 800685c:	e030      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d025      	beq.n	80068b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800686e:	e022      	b.n	80068b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006878:	d11f      	bne.n	80068ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800687e:	e01c      	b.n	80068ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d903      	bls.n	800688e <DMA_CheckFifoParam+0xb6>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b03      	cmp	r3, #3
 800688a:	d003      	beq.n	8006894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800688c:	e018      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
      break;
 8006892:	e015      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00e      	beq.n	80068be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
      break;
 80068a4:	e00b      	b.n	80068be <DMA_CheckFifoParam+0xe6>
      break;
 80068a6:	bf00      	nop
 80068a8:	e00a      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
      break;
 80068aa:	bf00      	nop
 80068ac:	e008      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
      break;
 80068ae:	bf00      	nop
 80068b0:	e006      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
      break;
 80068b2:	bf00      	nop
 80068b4:	e004      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
      break;
 80068b6:	bf00      	nop
 80068b8:	e002      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <DMA_CheckFifoParam+0xe8>
      break;
 80068be:	bf00      	nop
    }
  } 
  
  return status; 
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop

080068d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e03b      	b.n	800695a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f833 	bl	8006962 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006920:	f023 0107 	bic.w	r1, r3, #7
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800693a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68d1      	ldr	r1, [r2, #12]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	430b      	orrs	r3, r1
 8006948:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af02      	add	r7, sp, #8
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_DMA2D_Start+0x1c>
 800698e:	2302      	movs	r3, #2
 8006990:	e018      	b.n	80069c4 <HAL_DMA2D_Start+0x4e>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f989 	bl	8006cc4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d056      	beq.n	8006a96 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80069e8:	f7ff fc72 	bl	80062d0 <HAL_GetTick>
 80069ec:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80069ee:	e04b      	b.n	8006a88 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d023      	beq.n	8006a4a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	f043 0202 	orr.w	r2, r3, #2
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	f043 0201 	orr.w	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2221      	movs	r2, #33	; 0x21
 8006a34:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e0a5      	b.n	8006b96 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d01a      	beq.n	8006a88 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006a52:	f7ff fc3d 	bl	80062d0 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d302      	bcc.n	8006a68 <HAL_DMA2D_PollForTransfer+0x9c>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10f      	bne.n	8006a88 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	f043 0220 	orr.w	r2, r3, #32
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2203      	movs	r2, #3
 8006a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e086      	b.n	8006b96 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0ac      	beq.n	80069f0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d061      	beq.n	8006b7c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab8:	f7ff fc0a 	bl	80062d0 <HAL_GetTick>
 8006abc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006abe:	e056      	b.n	8006b6e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d02e      	beq.n	8006b30 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	f043 0204 	orr.w	r2, r3, #4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	f043 0202 	orr.w	r2, r3, #2
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0c:	f043 0201 	orr.w	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2229      	movs	r2, #41	; 0x29
 8006b1a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2204      	movs	r2, #4
 8006b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e032      	b.n	8006b96 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d01a      	beq.n	8006b6e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006b38:	f7ff fbca 	bl	80062d0 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d302      	bcc.n	8006b4e <HAL_DMA2D_PollForTransfer+0x182>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10f      	bne.n	8006b6e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	f043 0220 	orr.w	r2, r3, #32
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e013      	b.n	8006b96 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0a1      	beq.n	8006ac0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2212      	movs	r2, #18
 8006b82:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_DMA2D_ConfigLayer+0x20>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e079      	b.n	8006cb4 <HAL_DMA2D_ConfigLayer+0x114>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006bea:	4b35      	ldr	r3, [pc, #212]	; (8006cc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8006bec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b0a      	cmp	r3, #10
 8006bf4:	d003      	beq.n	8006bfe <HAL_DMA2D_ConfigLayer+0x5e>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b09      	cmp	r3, #9
 8006bfc:	d107      	bne.n	8006c0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e005      	b.n	8006c1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	061b      	lsls	r3, r3, #24
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d120      	bne.n	8006c62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	ea02 0103 	and.w	r1, r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	6812      	ldr	r2, [r2, #0]
 8006c40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b0a      	cmp	r3, #10
 8006c48:	d003      	beq.n	8006c52 <HAL_DMA2D_ConfigLayer+0xb2>
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b09      	cmp	r3, #9
 8006c50:	d127      	bne.n	8006ca2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c60:	e01f      	b.n	8006ca2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	ea02 0103 	and.w	r1, r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b0a      	cmp	r3, #10
 8006c8a:	d003      	beq.n	8006c94 <HAL_DMA2D_ConfigLayer+0xf4>
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b09      	cmp	r3, #9
 8006c92:	d106      	bne.n	8006ca2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006ca0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	ff03000f 	.word	0xff03000f

08006cc4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b08b      	sub	sp, #44	; 0x2c
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	041a      	lsls	r2, r3, #16
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cfc:	d174      	bne.n	8006de8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d04:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d0c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d14:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d108      	bne.n	8006d36 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
 8006d34:	e053      	b.n	8006dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d106      	bne.n	8006d4c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4a:	e048      	b.n	8006dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d111      	bne.n	8006d78 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	0cdb      	lsrs	r3, r3, #19
 8006d58:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	0a9b      	lsrs	r3, r3, #10
 8006d5e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	02db      	lsls	r3, r3, #11
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
 8006d76:	e032      	b.n	8006dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d117      	bne.n	8006db0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	0fdb      	lsrs	r3, r3, #31
 8006d84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	0cdb      	lsrs	r3, r3, #19
 8006d8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	0adb      	lsrs	r3, r3, #11
 8006d90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	029b      	lsls	r3, r3, #10
 8006da0:	431a      	orrs	r2, r3
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	03db      	lsls	r3, r3, #15
 8006da6:	4313      	orrs	r3, r2
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
 8006dae:	e016      	b.n	8006dde <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	0f1b      	lsrs	r3, r3, #28
 8006db4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	0d1b      	lsrs	r3, r3, #20
 8006dba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	0b1b      	lsrs	r3, r3, #12
 8006dc0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	091b      	lsrs	r3, r3, #4
 8006dc6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	011a      	lsls	r2, r3, #4
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006de6:	e003      	b.n	8006df0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	60da      	str	r2, [r3, #12]
}
 8006df0:	bf00      	nop
 8006df2:	372c      	adds	r7, #44	; 0x2c
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b089      	sub	sp, #36	; 0x24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e12:	2300      	movs	r3, #0
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	e177      	b.n	8007108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e18:	2201      	movs	r2, #1
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	f040 8166 	bne.w	8007102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d00b      	beq.n	8006e56 <HAL_GPIO_Init+0x5a>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d007      	beq.n	8006e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e4a:	2b11      	cmp	r3, #17
 8006e4c:	d003      	beq.n	8006e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b12      	cmp	r3, #18
 8006e54:	d130      	bne.n	8006eb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	2203      	movs	r2, #3
 8006e62:	fa02 f303 	lsl.w	r3, r2, r3
 8006e66:	43db      	mvns	r3, r3
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	43db      	mvns	r3, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	091b      	lsrs	r3, r3, #4
 8006ea2:	f003 0201 	and.w	r2, r3, #1
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d003      	beq.n	8006ef8 <HAL_GPIO_Init+0xfc>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b12      	cmp	r3, #18
 8006ef6:	d123      	bne.n	8006f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	08da      	lsrs	r2, r3, #3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3208      	adds	r2, #8
 8006f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	220f      	movs	r2, #15
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	43db      	mvns	r3, r3
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	08da      	lsrs	r2, r3, #3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3208      	adds	r2, #8
 8006f3a:	69b9      	ldr	r1, [r7, #24]
 8006f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	43db      	mvns	r3, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f003 0203 	and.w	r2, r3, #3
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 80c0 	beq.w	8007102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	4b66      	ldr	r3, [pc, #408]	; (8007120 <HAL_GPIO_Init+0x324>)
 8006f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8a:	4a65      	ldr	r2, [pc, #404]	; (8007120 <HAL_GPIO_Init+0x324>)
 8006f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f90:	6453      	str	r3, [r2, #68]	; 0x44
 8006f92:	4b63      	ldr	r3, [pc, #396]	; (8007120 <HAL_GPIO_Init+0x324>)
 8006f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f9e:	4a61      	ldr	r2, [pc, #388]	; (8007124 <HAL_GPIO_Init+0x328>)
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	089b      	lsrs	r3, r3, #2
 8006fa4:	3302      	adds	r3, #2
 8006fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	220f      	movs	r2, #15
 8006fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fba:	43db      	mvns	r3, r3
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a58      	ldr	r2, [pc, #352]	; (8007128 <HAL_GPIO_Init+0x32c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d037      	beq.n	800703a <HAL_GPIO_Init+0x23e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a57      	ldr	r2, [pc, #348]	; (800712c <HAL_GPIO_Init+0x330>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d031      	beq.n	8007036 <HAL_GPIO_Init+0x23a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a56      	ldr	r2, [pc, #344]	; (8007130 <HAL_GPIO_Init+0x334>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d02b      	beq.n	8007032 <HAL_GPIO_Init+0x236>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a55      	ldr	r2, [pc, #340]	; (8007134 <HAL_GPIO_Init+0x338>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d025      	beq.n	800702e <HAL_GPIO_Init+0x232>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a54      	ldr	r2, [pc, #336]	; (8007138 <HAL_GPIO_Init+0x33c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01f      	beq.n	800702a <HAL_GPIO_Init+0x22e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a53      	ldr	r2, [pc, #332]	; (800713c <HAL_GPIO_Init+0x340>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d019      	beq.n	8007026 <HAL_GPIO_Init+0x22a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a52      	ldr	r2, [pc, #328]	; (8007140 <HAL_GPIO_Init+0x344>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_GPIO_Init+0x226>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a51      	ldr	r2, [pc, #324]	; (8007144 <HAL_GPIO_Init+0x348>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00d      	beq.n	800701e <HAL_GPIO_Init+0x222>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a50      	ldr	r2, [pc, #320]	; (8007148 <HAL_GPIO_Init+0x34c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <HAL_GPIO_Init+0x21e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a4f      	ldr	r2, [pc, #316]	; (800714c <HAL_GPIO_Init+0x350>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d101      	bne.n	8007016 <HAL_GPIO_Init+0x21a>
 8007012:	2309      	movs	r3, #9
 8007014:	e012      	b.n	800703c <HAL_GPIO_Init+0x240>
 8007016:	230a      	movs	r3, #10
 8007018:	e010      	b.n	800703c <HAL_GPIO_Init+0x240>
 800701a:	2308      	movs	r3, #8
 800701c:	e00e      	b.n	800703c <HAL_GPIO_Init+0x240>
 800701e:	2307      	movs	r3, #7
 8007020:	e00c      	b.n	800703c <HAL_GPIO_Init+0x240>
 8007022:	2306      	movs	r3, #6
 8007024:	e00a      	b.n	800703c <HAL_GPIO_Init+0x240>
 8007026:	2305      	movs	r3, #5
 8007028:	e008      	b.n	800703c <HAL_GPIO_Init+0x240>
 800702a:	2304      	movs	r3, #4
 800702c:	e006      	b.n	800703c <HAL_GPIO_Init+0x240>
 800702e:	2303      	movs	r3, #3
 8007030:	e004      	b.n	800703c <HAL_GPIO_Init+0x240>
 8007032:	2302      	movs	r3, #2
 8007034:	e002      	b.n	800703c <HAL_GPIO_Init+0x240>
 8007036:	2301      	movs	r3, #1
 8007038:	e000      	b.n	800703c <HAL_GPIO_Init+0x240>
 800703a:	2300      	movs	r3, #0
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	f002 0203 	and.w	r2, r2, #3
 8007042:	0092      	lsls	r2, r2, #2
 8007044:	4093      	lsls	r3, r2
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	4313      	orrs	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800704c:	4935      	ldr	r1, [pc, #212]	; (8007124 <HAL_GPIO_Init+0x328>)
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	089b      	lsrs	r3, r3, #2
 8007052:	3302      	adds	r3, #2
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800705a:	4b3d      	ldr	r3, [pc, #244]	; (8007150 <HAL_GPIO_Init+0x354>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	43db      	mvns	r3, r3
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	4013      	ands	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800707e:	4a34      	ldr	r2, [pc, #208]	; (8007150 <HAL_GPIO_Init+0x354>)
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007084:	4b32      	ldr	r3, [pc, #200]	; (8007150 <HAL_GPIO_Init+0x354>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	43db      	mvns	r3, r3
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4013      	ands	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070a8:	4a29      	ldr	r2, [pc, #164]	; (8007150 <HAL_GPIO_Init+0x354>)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <HAL_GPIO_Init+0x354>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	43db      	mvns	r3, r3
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	4013      	ands	r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070d2:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <HAL_GPIO_Init+0x354>)
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <HAL_GPIO_Init+0x354>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	4013      	ands	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070fc:	4a14      	ldr	r2, [pc, #80]	; (8007150 <HAL_GPIO_Init+0x354>)
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	3301      	adds	r3, #1
 8007106:	61fb      	str	r3, [r7, #28]
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b0f      	cmp	r3, #15
 800710c:	f67f ae84 	bls.w	8006e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	3724      	adds	r7, #36	; 0x24
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40023800 	.word	0x40023800
 8007124:	40013800 	.word	0x40013800
 8007128:	40020000 	.word	0x40020000
 800712c:	40020400 	.word	0x40020400
 8007130:	40020800 	.word	0x40020800
 8007134:	40020c00 	.word	0x40020c00
 8007138:	40021000 	.word	0x40021000
 800713c:	40021400 	.word	0x40021400
 8007140:	40021800 	.word	0x40021800
 8007144:	40021c00 	.word	0x40021c00
 8007148:	40022000 	.word	0x40022000
 800714c:	40022400 	.word	0x40022400
 8007150:	40013c00 	.word	0x40013c00

08007154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	807b      	strh	r3, [r7, #2]
 8007160:	4613      	mov	r3, r2
 8007162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007164:	787b      	ldrb	r3, [r7, #1]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800716a:	887a      	ldrh	r2, [r7, #2]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007170:	e003      	b.n	800717a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007172:	887b      	ldrh	r3, [r7, #2]
 8007174:	041a      	lsls	r2, r3, #16
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	619a      	str	r2, [r3, #24]
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	401a      	ands	r2, r3
 800719a:	887b      	ldrh	r3, [r7, #2]
 800719c:	429a      	cmp	r2, r3
 800719e:	d104      	bne.n	80071aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071a0:	887b      	ldrh	r3, [r7, #2]
 80071a2:	041a      	lsls	r2, r3, #16
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80071a8:	e002      	b.n	80071b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80071aa:	887a      	ldrh	r2, [r7, #2]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	619a      	str	r2, [r3, #24]
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e12b      	b.n	8007426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f95d 	bl	80074a2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800721e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007220:	f001 fef8 	bl	8009014 <HAL_RCC_GetPCLK1Freq>
 8007224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	4a81      	ldr	r2, [pc, #516]	; (8007430 <HAL_I2C_Init+0x274>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d807      	bhi.n	8007240 <HAL_I2C_Init+0x84>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4a80      	ldr	r2, [pc, #512]	; (8007434 <HAL_I2C_Init+0x278>)
 8007234:	4293      	cmp	r3, r2
 8007236:	bf94      	ite	ls
 8007238:	2301      	movls	r3, #1
 800723a:	2300      	movhi	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	e006      	b.n	800724e <HAL_I2C_Init+0x92>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4a7d      	ldr	r2, [pc, #500]	; (8007438 <HAL_I2C_Init+0x27c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	bf94      	ite	ls
 8007248:	2301      	movls	r3, #1
 800724a:	2300      	movhi	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e0e7      	b.n	8007426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4a78      	ldr	r2, [pc, #480]	; (800743c <HAL_I2C_Init+0x280>)
 800725a:	fba2 2303 	umull	r2, r3, r2, r3
 800725e:	0c9b      	lsrs	r3, r3, #18
 8007260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	4a6a      	ldr	r2, [pc, #424]	; (8007430 <HAL_I2C_Init+0x274>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d802      	bhi.n	8007290 <HAL_I2C_Init+0xd4>
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	3301      	adds	r3, #1
 800728e:	e009      	b.n	80072a4 <HAL_I2C_Init+0xe8>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	4a69      	ldr	r2, [pc, #420]	; (8007440 <HAL_I2C_Init+0x284>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	099b      	lsrs	r3, r3, #6
 80072a2:	3301      	adds	r3, #1
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	495c      	ldr	r1, [pc, #368]	; (8007430 <HAL_I2C_Init+0x274>)
 80072c0:	428b      	cmp	r3, r1
 80072c2:	d819      	bhi.n	80072f8 <HAL_I2C_Init+0x13c>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1e59      	subs	r1, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80072d2:	1c59      	adds	r1, r3, #1
 80072d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80072d8:	400b      	ands	r3, r1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_I2C_Init+0x138>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	1e59      	subs	r1, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80072ec:	3301      	adds	r3, #1
 80072ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f2:	e051      	b.n	8007398 <HAL_I2C_Init+0x1dc>
 80072f4:	2304      	movs	r3, #4
 80072f6:	e04f      	b.n	8007398 <HAL_I2C_Init+0x1dc>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d111      	bne.n	8007324 <HAL_I2C_Init+0x168>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	1e58      	subs	r0, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6859      	ldr	r1, [r3, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	440b      	add	r3, r1
 800730e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007312:	3301      	adds	r3, #1
 8007314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007318:	2b00      	cmp	r3, #0
 800731a:	bf0c      	ite	eq
 800731c:	2301      	moveq	r3, #1
 800731e:	2300      	movne	r3, #0
 8007320:	b2db      	uxtb	r3, r3
 8007322:	e012      	b.n	800734a <HAL_I2C_Init+0x18e>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	1e58      	subs	r0, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6859      	ldr	r1, [r3, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	0099      	lsls	r1, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	fbb0 f3f3 	udiv	r3, r0, r3
 800733a:	3301      	adds	r3, #1
 800733c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007340:	2b00      	cmp	r3, #0
 8007342:	bf0c      	ite	eq
 8007344:	2301      	moveq	r3, #1
 8007346:	2300      	movne	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_I2C_Init+0x196>
 800734e:	2301      	movs	r3, #1
 8007350:	e022      	b.n	8007398 <HAL_I2C_Init+0x1dc>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10e      	bne.n	8007378 <HAL_I2C_Init+0x1bc>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1e58      	subs	r0, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6859      	ldr	r1, [r3, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	440b      	add	r3, r1
 8007368:	fbb0 f3f3 	udiv	r3, r0, r3
 800736c:	3301      	adds	r3, #1
 800736e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007376:	e00f      	b.n	8007398 <HAL_I2C_Init+0x1dc>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1e58      	subs	r0, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6859      	ldr	r1, [r3, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	0099      	lsls	r1, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	fbb0 f3f3 	udiv	r3, r0, r3
 800738e:	3301      	adds	r3, #1
 8007390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	6809      	ldr	r1, [r1, #0]
 800739c:	4313      	orrs	r3, r2
 800739e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80073c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6911      	ldr	r1, [r2, #16]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	68d2      	ldr	r2, [r2, #12]
 80073d2:	4311      	orrs	r1, r2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	430b      	orrs	r3, r1
 80073da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	000186a0 	.word	0x000186a0
 8007434:	001e847f 	.word	0x001e847f
 8007438:	003d08ff 	.word	0x003d08ff
 800743c:	431bde83 	.word	0x431bde83
 8007440:	10624dd3 	.word	0x10624dd3

08007444 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e021      	b.n	800749a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2224      	movs	r2, #36	; 0x24
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0201 	bic.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f821 	bl	80074b6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	4608      	mov	r0, r1
 80074d6:	4611      	mov	r1, r2
 80074d8:	461a      	mov	r2, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	817b      	strh	r3, [r7, #10]
 80074de:	460b      	mov	r3, r1
 80074e0:	813b      	strh	r3, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074e6:	f7fe fef3 	bl	80062d0 <HAL_GetTick>
 80074ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	f040 80d9 	bne.w	80076ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	2319      	movs	r3, #25
 8007500:	2201      	movs	r2, #1
 8007502:	496d      	ldr	r1, [pc, #436]	; (80076b8 <HAL_I2C_Mem_Write+0x1ec>)
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fc89 	bl	8007e1c <I2C_WaitOnFlagUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007510:	2302      	movs	r3, #2
 8007512:	e0cc      	b.n	80076ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_I2C_Mem_Write+0x56>
 800751e:	2302      	movs	r3, #2
 8007520:	e0c5      	b.n	80076ae <HAL_I2C_Mem_Write+0x1e2>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b01      	cmp	r3, #1
 8007536:	d007      	beq.n	8007548 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2221      	movs	r2, #33	; 0x21
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2240      	movs	r2, #64	; 0x40
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a3a      	ldr	r2, [r7, #32]
 8007572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4a4d      	ldr	r2, [pc, #308]	; (80076bc <HAL_I2C_Mem_Write+0x1f0>)
 8007588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800758a:	88f8      	ldrh	r0, [r7, #6]
 800758c:	893a      	ldrh	r2, [r7, #8]
 800758e:	8979      	ldrh	r1, [r7, #10]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	4603      	mov	r3, r0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fac4 	bl	8007b28 <I2C_RequestMemoryWrite>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d052      	beq.n	800764c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e081      	b.n	80076ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fd0a 	bl	8007fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d107      	bne.n	80075d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e06b      	b.n	80076ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	781a      	ldrb	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b04      	cmp	r3, #4
 8007612:	d11b      	bne.n	800764c <HAL_I2C_Mem_Write+0x180>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007618:	2b00      	cmp	r3, #0
 800761a:	d017      	beq.n	800764c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1aa      	bne.n	80075aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fcf6 	bl	800804a <I2C_WaitOnBTFFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00d      	beq.n	8007680 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007668:	2b04      	cmp	r3, #4
 800766a:	d107      	bne.n	800767c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800767a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e016      	b.n	80076ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800768e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	00100002 	.word	0x00100002
 80076bc:	ffff0000 	.word	0xffff0000

080076c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08c      	sub	sp, #48	; 0x30
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	817b      	strh	r3, [r7, #10]
 80076d2:	460b      	mov	r3, r1
 80076d4:	813b      	strh	r3, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076da:	f7fe fdf9 	bl	80062d0 <HAL_GetTick>
 80076de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	f040 8208 	bne.w	8007afe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	2319      	movs	r3, #25
 80076f4:	2201      	movs	r2, #1
 80076f6:	497b      	ldr	r1, [pc, #492]	; (80078e4 <HAL_I2C_Mem_Read+0x224>)
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fb8f 	bl	8007e1c <I2C_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007704:	2302      	movs	r3, #2
 8007706:	e1fb      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <HAL_I2C_Mem_Read+0x56>
 8007712:	2302      	movs	r3, #2
 8007714:	e1f4      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b01      	cmp	r3, #1
 800772a:	d007      	beq.n	800773c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800774a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2222      	movs	r2, #34	; 0x22
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2240      	movs	r2, #64	; 0x40
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800776c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a5b      	ldr	r2, [pc, #364]	; (80078e8 <HAL_I2C_Mem_Read+0x228>)
 800777c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800777e:	88f8      	ldrh	r0, [r7, #6]
 8007780:	893a      	ldrh	r2, [r7, #8]
 8007782:	8979      	ldrh	r1, [r7, #10]
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	4603      	mov	r3, r0
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 fa5e 	bl	8007c50 <I2C_RequestMemoryRead>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e1b0      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d113      	bne.n	80077ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a6:	2300      	movs	r3, #0
 80077a8:	623b      	str	r3, [r7, #32]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	623b      	str	r3, [r7, #32]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	623b      	str	r3, [r7, #32]
 80077ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e184      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d11b      	bne.n	800780e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	61fb      	str	r3, [r7, #28]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	61fb      	str	r3, [r7, #28]
 80077fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	e164      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007812:	2b02      	cmp	r3, #2
 8007814:	d11b      	bne.n	800784e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007824:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007836:	2300      	movs	r3, #0
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	e144      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007864:	e138      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800786a:	2b03      	cmp	r3, #3
 800786c:	f200 80f1 	bhi.w	8007a52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007874:	2b01      	cmp	r3, #1
 8007876:	d123      	bne.n	80078c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fc25 	bl	80080cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e139      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a8:	3b01      	subs	r3, #1
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078be:	e10b      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d14e      	bne.n	8007966 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	2200      	movs	r2, #0
 80078d0:	4906      	ldr	r1, [pc, #24]	; (80078ec <HAL_I2C_Mem_Read+0x22c>)
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 faa2 	bl	8007e1c <I2C_WaitOnFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e10e      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
 80078e2:	bf00      	nop
 80078e4:	00100002 	.word	0x00100002
 80078e8:	ffff0000 	.word	0xffff0000
 80078ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007964:	e0b8      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	2200      	movs	r2, #0
 800796e:	4966      	ldr	r1, [pc, #408]	; (8007b08 <HAL_I2C_Mem_Read+0x448>)
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fa53 	bl	8007e1c <I2C_WaitOnFlagUntilTimeout>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e0bf      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800798e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	2200      	movs	r2, #0
 80079ca:	494f      	ldr	r1, [pc, #316]	; (8007b08 <HAL_I2C_Mem_Read+0x448>)
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fa25 	bl	8007e1c <I2C_WaitOnFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e091      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691a      	ldr	r2, [r3, #16]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a50:	e042      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fb38 	bl	80080cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e04c      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d118      	bne.n	8007ad8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f47f aec2 	bne.w	8007866 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	e000      	b.n	8007b00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007afe:	2302      	movs	r3, #2
  }
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3728      	adds	r7, #40	; 0x28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	00010004 	.word	0x00010004

08007b0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1a:	b2db      	uxtb	r3, r3
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	4608      	mov	r0, r1
 8007b32:	4611      	mov	r1, r2
 8007b34:	461a      	mov	r2, r3
 8007b36:	4603      	mov	r3, r0
 8007b38:	817b      	strh	r3, [r7, #10]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	813b      	strh	r3, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f95c 	bl	8007e1c <I2C_WaitOnFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00c      	beq.n	8007b84 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e05f      	b.n	8007c44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b84:	897b      	ldrh	r3, [r7, #10]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	6a3a      	ldr	r2, [r7, #32]
 8007b98:	492c      	ldr	r1, [pc, #176]	; (8007c4c <I2C_RequestMemoryWrite+0x124>)
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f995 	bl	8007eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e04c      	b.n	8007c44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007baa:	2300      	movs	r3, #0
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	617b      	str	r3, [r7, #20]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc2:	6a39      	ldr	r1, [r7, #32]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 f9ff 	bl	8007fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00d      	beq.n	8007bec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d107      	bne.n	8007be8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e02b      	b.n	8007c44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d105      	bne.n	8007bfe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf2:	893b      	ldrh	r3, [r7, #8]
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	611a      	str	r2, [r3, #16]
 8007bfc:	e021      	b.n	8007c42 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007bfe:	893b      	ldrh	r3, [r7, #8]
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0e:	6a39      	ldr	r1, [r7, #32]
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f9d9 	bl	8007fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00d      	beq.n	8007c38 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d107      	bne.n	8007c34 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e005      	b.n	8007c44 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c38:	893b      	ldrh	r3, [r7, #8]
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	00010002 	.word	0x00010002

08007c50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	4608      	mov	r0, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	817b      	strh	r3, [r7, #10]
 8007c62:	460b      	mov	r3, r1
 8007c64:	813b      	strh	r3, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f8c0 	bl	8007e1c <I2C_WaitOnFlagUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00c      	beq.n	8007cbc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e0a9      	b.n	8007e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cbc:	897b      	ldrh	r3, [r7, #10]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	6a3a      	ldr	r2, [r7, #32]
 8007cd0:	4951      	ldr	r1, [pc, #324]	; (8007e18 <I2C_RequestMemoryRead+0x1c8>)
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f8f9 	bl	8007eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e096      	b.n	8007e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfa:	6a39      	ldr	r1, [r7, #32]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f963 	bl	8007fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00d      	beq.n	8007d24 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d107      	bne.n	8007d20 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e075      	b.n	8007e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d24:	88fb      	ldrh	r3, [r7, #6]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d105      	bne.n	8007d36 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d2a:	893b      	ldrh	r3, [r7, #8]
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	611a      	str	r2, [r3, #16]
 8007d34:	e021      	b.n	8007d7a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d36:	893b      	ldrh	r3, [r7, #8]
 8007d38:	0a1b      	lsrs	r3, r3, #8
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d46:	6a39      	ldr	r1, [r7, #32]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f93d 	bl	8007fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00d      	beq.n	8007d70 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d107      	bne.n	8007d6c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e04f      	b.n	8007e10 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d70:	893b      	ldrh	r3, [r7, #8]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7c:	6a39      	ldr	r1, [r7, #32]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f922 	bl	8007fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00d      	beq.n	8007da6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d107      	bne.n	8007da2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e034      	b.n	8007e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f82a 	bl	8007e1c <I2C_WaitOnFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00c      	beq.n	8007de8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e013      	b.n	8007e10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007de8:	897b      	ldrh	r3, [r7, #10]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f043 0301 	orr.w	r3, r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	6a3a      	ldr	r2, [r7, #32]
 8007dfc:	4906      	ldr	r1, [pc, #24]	; (8007e18 <I2C_RequestMemoryRead+0x1c8>)
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 f863 	bl	8007eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	00010002 	.word	0x00010002

08007e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e2c:	e025      	b.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e34:	d021      	beq.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e36:	f7fe fa4b 	bl	80062d0 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d302      	bcc.n	8007e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d116      	bne.n	8007e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	f043 0220 	orr.w	r2, r3, #32
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e023      	b.n	8007ec2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	0c1b      	lsrs	r3, r3, #16
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d10d      	bne.n	8007ea0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	43da      	mvns	r2, r3
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf0c      	ite	eq
 8007e96:	2301      	moveq	r3, #1
 8007e98:	2300      	movne	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	e00c      	b.n	8007eba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	43da      	mvns	r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bf0c      	ite	eq
 8007eb2:	2301      	moveq	r3, #1
 8007eb4:	2300      	movne	r3, #0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d0b6      	beq.n	8007e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ed8:	e051      	b.n	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee8:	d123      	bne.n	8007f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f043 0204 	orr.w	r2, r3, #4
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e046      	b.n	8007fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d021      	beq.n	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3a:	f7fe f9c9 	bl	80062d0 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d302      	bcc.n	8007f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d116      	bne.n	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	f043 0220 	orr.w	r2, r3, #32
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e020      	b.n	8007fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	0c1b      	lsrs	r3, r3, #16
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d10c      	bne.n	8007fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	43da      	mvns	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4013      	ands	r3, r2
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bf14      	ite	ne
 8007f9a:	2301      	movne	r3, #1
 8007f9c:	2300      	moveq	r3, #0
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	e00b      	b.n	8007fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	43da      	mvns	r2, r3
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	4013      	ands	r3, r2
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d18d      	bne.n	8007eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fd4:	e02d      	b.n	8008032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 f8ce 	bl	8008178 <I2C_IsAcknowledgeFailed>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e02d      	b.n	8008042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fec:	d021      	beq.n	8008032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fee:	f7fe f96f 	bl	80062d0 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d302      	bcc.n	8008004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d116      	bne.n	8008032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2220      	movs	r2, #32
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	f043 0220 	orr.w	r2, r3, #32
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e007      	b.n	8008042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803c:	2b80      	cmp	r3, #128	; 0x80
 800803e:	d1ca      	bne.n	8007fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008056:	e02d      	b.n	80080b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f88d 	bl	8008178 <I2C_IsAcknowledgeFailed>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e02d      	b.n	80080c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	d021      	beq.n	80080b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008070:	f7fe f92e 	bl	80062d0 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	429a      	cmp	r2, r3
 800807e:	d302      	bcc.n	8008086 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d116      	bne.n	80080b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2220      	movs	r2, #32
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	f043 0220 	orr.w	r2, r3, #32
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e007      	b.n	80080c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d1ca      	bne.n	8008058 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080d8:	e042      	b.n	8008160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d119      	bne.n	800811c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0210 	mvn.w	r2, #16
 80080f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e029      	b.n	8008170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800811c:	f7fe f8d8 	bl	80062d0 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	429a      	cmp	r2, r3
 800812a:	d302      	bcc.n	8008132 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d116      	bne.n	8008160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	f043 0220 	orr.w	r2, r3, #32
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e007      	b.n	8008170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b40      	cmp	r3, #64	; 0x40
 800816c:	d1b5      	bne.n	80080da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800818a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800818e:	d11b      	bne.n	80081c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	f043 0204 	orr.w	r2, r3, #4
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
	...

080081d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e0bf      	b.n	800836a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d106      	bne.n	8008204 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f8ba 	bl	8008378 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800821a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6999      	ldr	r1, [r3, #24]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008230:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6899      	ldr	r1, [r3, #8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b4a      	ldr	r3, [pc, #296]	; (8008374 <HAL_LTDC_Init+0x19c>)
 800824c:	400b      	ands	r3, r1
 800824e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6899      	ldr	r1, [r3, #8]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699a      	ldr	r2, [r3, #24]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68d9      	ldr	r1, [r3, #12]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b3e      	ldr	r3, [pc, #248]	; (8008374 <HAL_LTDC_Init+0x19c>)
 800827a:	400b      	ands	r3, r1
 800827c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	041b      	lsls	r3, r3, #16
 8008284:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68d9      	ldr	r1, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1a      	ldr	r2, [r3, #32]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6919      	ldr	r1, [r3, #16]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b33      	ldr	r3, [pc, #204]	; (8008374 <HAL_LTDC_Init+0x19c>)
 80082a8:	400b      	ands	r3, r1
 80082aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	041b      	lsls	r3, r3, #16
 80082b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6919      	ldr	r1, [r3, #16]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6959      	ldr	r1, [r3, #20]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b27      	ldr	r3, [pc, #156]	; (8008374 <HAL_LTDC_Init+0x19c>)
 80082d6:	400b      	ands	r3, r1
 80082d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	041b      	lsls	r3, r3, #16
 80082e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6959      	ldr	r1, [r3, #20]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	431a      	orrs	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082fe:	021b      	lsls	r3, r3, #8
 8008300:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800831a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4313      	orrs	r3, r2
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0206 	orr.w	r2, r2, #6
 8008346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	f000f800 	.word	0xf000f800

08008378 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800838c:	b5b0      	push	{r4, r5, r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d101      	bne.n	80083a6 <HAL_LTDC_ConfigLayer+0x1a>
 80083a2:	2302      	movs	r3, #2
 80083a4:	e02c      	b.n	8008400 <HAL_LTDC_ConfigLayer+0x74>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2202      	movs	r2, #2
 80083b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2134      	movs	r1, #52	; 0x34
 80083bc:	fb01 f303 	mul.w	r3, r1, r3
 80083c0:	4413      	add	r3, r2
 80083c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4614      	mov	r4, r2
 80083ca:	461d      	mov	r5, r3
 80083cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 f83b 	bl	800845c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2201      	movs	r2, #1
 80083ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bdb0      	pop	{r4, r5, r7, pc}

08008408 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008416:	2b01      	cmp	r3, #1
 8008418:	d101      	bne.n	800841e <HAL_LTDC_EnableDither+0x16>
 800841a:	2302      	movs	r3, #2
 800841c:	e016      	b.n	800844c <HAL_LTDC_EnableDither+0x44>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2202      	movs	r2, #2
 800842a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <HAL_LTDC_EnableDither+0x50>)
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	4a09      	ldr	r2, [pc, #36]	; (8008458 <HAL_LTDC_EnableDither+0x50>)
 8008434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008438:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	40016800 	.word	0x40016800

0800845c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800845c:	b480      	push	{r7}
 800845e:	b089      	sub	sp, #36	; 0x24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	0c1b      	lsrs	r3, r3, #16
 8008474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008478:	4413      	add	r3, r2
 800847a:	041b      	lsls	r3, r3, #16
 800847c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	01db      	lsls	r3, r3, #7
 8008488:	4413      	add	r3, r2
 800848a:	3384      	adds	r3, #132	; 0x84
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	4611      	mov	r1, r2
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	01d2      	lsls	r2, r2, #7
 8008498:	440a      	add	r2, r1
 800849a:	3284      	adds	r2, #132	; 0x84
 800849c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80084a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	0c1b      	lsrs	r3, r3, #16
 80084ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b2:	4413      	add	r3, r2
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	01db      	lsls	r3, r3, #7
 80084c0:	440b      	add	r3, r1
 80084c2:	3384      	adds	r3, #132	; 0x84
 80084c4:	4619      	mov	r1, r3
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	68da      	ldr	r2, [r3, #12]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084da:	4413      	add	r3, r2
 80084dc:	041b      	lsls	r3, r3, #16
 80084de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	01db      	lsls	r3, r3, #7
 80084ea:	4413      	add	r3, r2
 80084ec:	3384      	adds	r3, #132	; 0x84
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	4611      	mov	r1, r2
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	01d2      	lsls	r2, r2, #7
 80084fa:	440a      	add	r2, r1
 80084fc:	3284      	adds	r2, #132	; 0x84
 80084fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008502:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008512:	4413      	add	r3, r2
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4619      	mov	r1, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	01db      	lsls	r3, r3, #7
 8008520:	440b      	add	r3, r1
 8008522:	3384      	adds	r3, #132	; 0x84
 8008524:	4619      	mov	r1, r3
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	4313      	orrs	r3, r2
 800852a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	01db      	lsls	r3, r3, #7
 8008536:	4413      	add	r3, r2
 8008538:	3384      	adds	r3, #132	; 0x84
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	4611      	mov	r1, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	01d2      	lsls	r2, r2, #7
 8008546:	440a      	add	r2, r1
 8008548:	3284      	adds	r2, #132	; 0x84
 800854a:	f023 0307 	bic.w	r3, r3, #7
 800854e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	461a      	mov	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	01db      	lsls	r3, r3, #7
 800855a:	4413      	add	r3, r2
 800855c:	3384      	adds	r3, #132	; 0x84
 800855e:	461a      	mov	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800856c:	021b      	lsls	r3, r3, #8
 800856e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008576:	041b      	lsls	r3, r3, #16
 8008578:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	061b      	lsls	r3, r3, #24
 8008580:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	01db      	lsls	r3, r3, #7
 800858c:	4413      	add	r3, r2
 800858e:	3384      	adds	r3, #132	; 0x84
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	01db      	lsls	r3, r3, #7
 800859c:	4413      	add	r3, r2
 800859e:	3384      	adds	r3, #132	; 0x84
 80085a0:	461a      	mov	r2, r3
 80085a2:	2300      	movs	r3, #0
 80085a4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085ac:	461a      	mov	r2, r3
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	431a      	orrs	r2, r3
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	431a      	orrs	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4619      	mov	r1, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	01db      	lsls	r3, r3, #7
 80085c0:	440b      	add	r3, r1
 80085c2:	3384      	adds	r3, #132	; 0x84
 80085c4:	4619      	mov	r1, r3
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	01db      	lsls	r3, r3, #7
 80085d6:	4413      	add	r3, r2
 80085d8:	3384      	adds	r3, #132	; 0x84
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	6812      	ldr	r2, [r2, #0]
 80085e0:	4611      	mov	r1, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	01d2      	lsls	r2, r2, #7
 80085e6:	440a      	add	r2, r1
 80085e8:	3284      	adds	r2, #132	; 0x84
 80085ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	461a      	mov	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	01db      	lsls	r3, r3, #7
 80085fa:	4413      	add	r3, r2
 80085fc:	3384      	adds	r3, #132	; 0x84
 80085fe:	461a      	mov	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	01db      	lsls	r3, r3, #7
 8008610:	4413      	add	r3, r2
 8008612:	3384      	adds	r3, #132	; 0x84
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	4611      	mov	r1, r2
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	01d2      	lsls	r2, r2, #7
 8008620:	440a      	add	r2, r1
 8008622:	3284      	adds	r2, #132	; 0x84
 8008624:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008628:	f023 0307 	bic.w	r3, r3, #7
 800862c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	69da      	ldr	r2, [r3, #28]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	68f9      	ldr	r1, [r7, #12]
 8008638:	6809      	ldr	r1, [r1, #0]
 800863a:	4608      	mov	r0, r1
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	01c9      	lsls	r1, r1, #7
 8008640:	4401      	add	r1, r0
 8008642:	3184      	adds	r1, #132	; 0x84
 8008644:	4313      	orrs	r3, r2
 8008646:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	01db      	lsls	r3, r3, #7
 8008652:	4413      	add	r3, r2
 8008654:	3384      	adds	r3, #132	; 0x84
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	01db      	lsls	r3, r3, #7
 8008662:	4413      	add	r3, r2
 8008664:	3384      	adds	r3, #132	; 0x84
 8008666:	461a      	mov	r2, r3
 8008668:	2300      	movs	r3, #0
 800866a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	01db      	lsls	r3, r3, #7
 8008676:	4413      	add	r3, r2
 8008678:	3384      	adds	r3, #132	; 0x84
 800867a:	461a      	mov	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800868a:	2304      	movs	r3, #4
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	e01b      	b.n	80086c8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d102      	bne.n	800869e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008698:	2303      	movs	r3, #3
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	e014      	b.n	80086c8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d00b      	beq.n	80086be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d007      	beq.n	80086be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d003      	beq.n	80086be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086ba:	2b07      	cmp	r3, #7
 80086bc:	d102      	bne.n	80086c4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80086be:	2302      	movs	r3, #2
 80086c0:	61fb      	str	r3, [r7, #28]
 80086c2:	e001      	b.n	80086c8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80086c4:	2301      	movs	r3, #1
 80086c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	01db      	lsls	r3, r3, #7
 80086d2:	4413      	add	r3, r2
 80086d4:	3384      	adds	r3, #132	; 0x84
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	6812      	ldr	r2, [r2, #0]
 80086dc:	4611      	mov	r1, r2
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	01d2      	lsls	r2, r2, #7
 80086e2:	440a      	add	r2, r1
 80086e4:	3284      	adds	r2, #132	; 0x84
 80086e6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80086ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	69fa      	ldr	r2, [r7, #28]
 80086f2:	fb02 f303 	mul.w	r3, r2, r3
 80086f6:	041a      	lsls	r2, r3, #16
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	6859      	ldr	r1, [r3, #4]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	1acb      	subs	r3, r1, r3
 8008702:	69f9      	ldr	r1, [r7, #28]
 8008704:	fb01 f303 	mul.w	r3, r1, r3
 8008708:	3303      	adds	r3, #3
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	6809      	ldr	r1, [r1, #0]
 800870e:	4608      	mov	r0, r1
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	01c9      	lsls	r1, r1, #7
 8008714:	4401      	add	r1, r0
 8008716:	3184      	adds	r1, #132	; 0x84
 8008718:	4313      	orrs	r3, r2
 800871a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	461a      	mov	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	01db      	lsls	r3, r3, #7
 8008726:	4413      	add	r3, r2
 8008728:	3384      	adds	r3, #132	; 0x84
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	6812      	ldr	r2, [r2, #0]
 8008730:	4611      	mov	r1, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	01d2      	lsls	r2, r2, #7
 8008736:	440a      	add	r2, r1
 8008738:	3284      	adds	r2, #132	; 0x84
 800873a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800873e:	f023 0307 	bic.w	r3, r3, #7
 8008742:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	01db      	lsls	r3, r3, #7
 800874e:	4413      	add	r3, r2
 8008750:	3384      	adds	r3, #132	; 0x84
 8008752:	461a      	mov	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	01db      	lsls	r3, r3, #7
 8008764:	4413      	add	r3, r2
 8008766:	3384      	adds	r3, #132	; 0x84
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	4611      	mov	r1, r2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	01d2      	lsls	r2, r2, #7
 8008774:	440a      	add	r2, r1
 8008776:	3284      	adds	r2, #132	; 0x84
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	6013      	str	r3, [r2, #0]
}
 800877e:	bf00      	nop
 8008780:	3724      	adds	r7, #36	; 0x24
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
	...

0800878c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e25b      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d075      	beq.n	8008896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087aa:	4ba3      	ldr	r3, [pc, #652]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f003 030c 	and.w	r3, r3, #12
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d00c      	beq.n	80087d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087b6:	4ba0      	ldr	r3, [pc, #640]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087be:	2b08      	cmp	r3, #8
 80087c0:	d112      	bne.n	80087e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087c2:	4b9d      	ldr	r3, [pc, #628]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087ce:	d10b      	bne.n	80087e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087d0:	4b99      	ldr	r3, [pc, #612]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d05b      	beq.n	8008894 <HAL_RCC_OscConfig+0x108>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d157      	bne.n	8008894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e236      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f0:	d106      	bne.n	8008800 <HAL_RCC_OscConfig+0x74>
 80087f2:	4b91      	ldr	r3, [pc, #580]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a90      	ldr	r2, [pc, #576]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80087f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	e01d      	b.n	800883c <HAL_RCC_OscConfig+0xb0>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008808:	d10c      	bne.n	8008824 <HAL_RCC_OscConfig+0x98>
 800880a:	4b8b      	ldr	r3, [pc, #556]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a8a      	ldr	r2, [pc, #552]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	4b88      	ldr	r3, [pc, #544]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a87      	ldr	r2, [pc, #540]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 800881c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	e00b      	b.n	800883c <HAL_RCC_OscConfig+0xb0>
 8008824:	4b84      	ldr	r3, [pc, #528]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a83      	ldr	r2, [pc, #524]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 800882a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	4b81      	ldr	r3, [pc, #516]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a80      	ldr	r2, [pc, #512]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800883a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d013      	beq.n	800886c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008844:	f7fd fd44 	bl	80062d0 <HAL_GetTick>
 8008848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800884c:	f7fd fd40 	bl	80062d0 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b64      	cmp	r3, #100	; 0x64
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e1fb      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800885e:	4b76      	ldr	r3, [pc, #472]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0f0      	beq.n	800884c <HAL_RCC_OscConfig+0xc0>
 800886a:	e014      	b.n	8008896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800886c:	f7fd fd30 	bl	80062d0 <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008872:	e008      	b.n	8008886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008874:	f7fd fd2c 	bl	80062d0 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b64      	cmp	r3, #100	; 0x64
 8008880:	d901      	bls.n	8008886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e1e7      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008886:	4b6c      	ldr	r3, [pc, #432]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f0      	bne.n	8008874 <HAL_RCC_OscConfig+0xe8>
 8008892:	e000      	b.n	8008896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d063      	beq.n	800896a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088a2:	4b65      	ldr	r3, [pc, #404]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f003 030c 	and.w	r3, r3, #12
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00b      	beq.n	80088c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ae:	4b62      	ldr	r3, [pc, #392]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088b6:	2b08      	cmp	r3, #8
 80088b8:	d11c      	bne.n	80088f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ba:	4b5f      	ldr	r3, [pc, #380]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d116      	bne.n	80088f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088c6:	4b5c      	ldr	r3, [pc, #368]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <HAL_RCC_OscConfig+0x152>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d001      	beq.n	80088de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e1bb      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088de:	4b56      	ldr	r3, [pc, #344]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	4952      	ldr	r1, [pc, #328]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088f2:	e03a      	b.n	800896a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d020      	beq.n	800893e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088fc:	4b4f      	ldr	r3, [pc, #316]	; (8008a3c <HAL_RCC_OscConfig+0x2b0>)
 80088fe:	2201      	movs	r2, #1
 8008900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008902:	f7fd fce5 	bl	80062d0 <HAL_GetTick>
 8008906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008908:	e008      	b.n	800891c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800890a:	f7fd fce1 	bl	80062d0 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d901      	bls.n	800891c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e19c      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800891c:	4b46      	ldr	r3, [pc, #280]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0f0      	beq.n	800890a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008928:	4b43      	ldr	r3, [pc, #268]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	4940      	ldr	r1, [pc, #256]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008938:	4313      	orrs	r3, r2
 800893a:	600b      	str	r3, [r1, #0]
 800893c:	e015      	b.n	800896a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800893e:	4b3f      	ldr	r3, [pc, #252]	; (8008a3c <HAL_RCC_OscConfig+0x2b0>)
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008944:	f7fd fcc4 	bl	80062d0 <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800894c:	f7fd fcc0 	bl	80062d0 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e17b      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800895e:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1f0      	bne.n	800894c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0308 	and.w	r3, r3, #8
 8008972:	2b00      	cmp	r3, #0
 8008974:	d030      	beq.n	80089d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d016      	beq.n	80089ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800897e:	4b30      	ldr	r3, [pc, #192]	; (8008a40 <HAL_RCC_OscConfig+0x2b4>)
 8008980:	2201      	movs	r2, #1
 8008982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008984:	f7fd fca4 	bl	80062d0 <HAL_GetTick>
 8008988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800898c:	f7fd fca0 	bl	80062d0 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e15b      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800899e:	4b26      	ldr	r3, [pc, #152]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80089a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0f0      	beq.n	800898c <HAL_RCC_OscConfig+0x200>
 80089aa:	e015      	b.n	80089d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089ac:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <HAL_RCC_OscConfig+0x2b4>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089b2:	f7fd fc8d 	bl	80062d0 <HAL_GetTick>
 80089b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089b8:	e008      	b.n	80089cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089ba:	f7fd fc89 	bl	80062d0 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e144      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089cc:	4b1a      	ldr	r3, [pc, #104]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80089ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f0      	bne.n	80089ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80a0 	beq.w	8008b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10f      	bne.n	8008a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089f6:	2300      	movs	r3, #0
 80089f8:	60bb      	str	r3, [r7, #8]
 80089fa:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	4a0e      	ldr	r2, [pc, #56]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a04:	6413      	str	r3, [r2, #64]	; 0x40
 8008a06:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <HAL_RCC_OscConfig+0x2ac>)
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a0e:	60bb      	str	r3, [r7, #8]
 8008a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a12:	2301      	movs	r3, #1
 8008a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a16:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <HAL_RCC_OscConfig+0x2b8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d121      	bne.n	8008a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a22:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <HAL_RCC_OscConfig+0x2b8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a07      	ldr	r2, [pc, #28]	; (8008a44 <HAL_RCC_OscConfig+0x2b8>)
 8008a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a2e:	f7fd fc4f 	bl	80062d0 <HAL_GetTick>
 8008a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a34:	e011      	b.n	8008a5a <HAL_RCC_OscConfig+0x2ce>
 8008a36:	bf00      	nop
 8008a38:	40023800 	.word	0x40023800
 8008a3c:	42470000 	.word	0x42470000
 8008a40:	42470e80 	.word	0x42470e80
 8008a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a48:	f7fd fc42 	bl	80062d0 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e0fd      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a5a:	4b81      	ldr	r3, [pc, #516]	; (8008c60 <HAL_RCC_OscConfig+0x4d4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0f0      	beq.n	8008a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d106      	bne.n	8008a7c <HAL_RCC_OscConfig+0x2f0>
 8008a6e:	4b7d      	ldr	r3, [pc, #500]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a72:	4a7c      	ldr	r2, [pc, #496]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008a74:	f043 0301 	orr.w	r3, r3, #1
 8008a78:	6713      	str	r3, [r2, #112]	; 0x70
 8008a7a:	e01c      	b.n	8008ab6 <HAL_RCC_OscConfig+0x32a>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	2b05      	cmp	r3, #5
 8008a82:	d10c      	bne.n	8008a9e <HAL_RCC_OscConfig+0x312>
 8008a84:	4b77      	ldr	r3, [pc, #476]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a88:	4a76      	ldr	r2, [pc, #472]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008a8a:	f043 0304 	orr.w	r3, r3, #4
 8008a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a90:	4b74      	ldr	r3, [pc, #464]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a94:	4a73      	ldr	r2, [pc, #460]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008a9c:	e00b      	b.n	8008ab6 <HAL_RCC_OscConfig+0x32a>
 8008a9e:	4b71      	ldr	r3, [pc, #452]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa2:	4a70      	ldr	r2, [pc, #448]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008aa4:	f023 0301 	bic.w	r3, r3, #1
 8008aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aaa:	4b6e      	ldr	r3, [pc, #440]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aae:	4a6d      	ldr	r2, [pc, #436]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008ab0:	f023 0304 	bic.w	r3, r3, #4
 8008ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d015      	beq.n	8008aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008abe:	f7fd fc07 	bl	80062d0 <HAL_GetTick>
 8008ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ac4:	e00a      	b.n	8008adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ac6:	f7fd fc03 	bl	80062d0 <HAL_GetTick>
 8008aca:	4602      	mov	r2, r0
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d901      	bls.n	8008adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e0bc      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008adc:	4b61      	ldr	r3, [pc, #388]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0ee      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x33a>
 8008ae8:	e014      	b.n	8008b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aea:	f7fd fbf1 	bl	80062d0 <HAL_GetTick>
 8008aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008af0:	e00a      	b.n	8008b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008af2:	f7fd fbed 	bl	80062d0 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d901      	bls.n	8008b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e0a6      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b08:	4b56      	ldr	r3, [pc, #344]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1ee      	bne.n	8008af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d105      	bne.n	8008b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b1a:	4b52      	ldr	r3, [pc, #328]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	4a51      	ldr	r2, [pc, #324]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 8092 	beq.w	8008c54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b30:	4b4c      	ldr	r3, [pc, #304]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030c 	and.w	r3, r3, #12
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d05c      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d141      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b44:	4b48      	ldr	r3, [pc, #288]	; (8008c68 <HAL_RCC_OscConfig+0x4dc>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b4a:	f7fd fbc1 	bl	80062d0 <HAL_GetTick>
 8008b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b50:	e008      	b.n	8008b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b52:	f7fd fbbd 	bl	80062d0 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d901      	bls.n	8008b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e078      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b64:	4b3f      	ldr	r3, [pc, #252]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1f0      	bne.n	8008b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	019b      	lsls	r3, r3, #6
 8008b80:	431a      	orrs	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	4933      	ldr	r1, [pc, #204]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b9a:	4b33      	ldr	r3, [pc, #204]	; (8008c68 <HAL_RCC_OscConfig+0x4dc>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ba0:	f7fd fb96 	bl	80062d0 <HAL_GetTick>
 8008ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ba6:	e008      	b.n	8008bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ba8:	f7fd fb92 	bl	80062d0 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e04d      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bba:	4b2a      	ldr	r3, [pc, #168]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0f0      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x41c>
 8008bc6:	e045      	b.n	8008c54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bc8:	4b27      	ldr	r3, [pc, #156]	; (8008c68 <HAL_RCC_OscConfig+0x4dc>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bce:	f7fd fb7f 	bl	80062d0 <HAL_GetTick>
 8008bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bd4:	e008      	b.n	8008be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bd6:	f7fd fb7b 	bl	80062d0 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d901      	bls.n	8008be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e036      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be8:	4b1e      	ldr	r3, [pc, #120]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1f0      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x44a>
 8008bf4:	e02e      	b.n	8008c54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d101      	bne.n	8008c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e029      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c02:	4b18      	ldr	r3, [pc, #96]	; (8008c64 <HAL_RCC_OscConfig+0x4d8>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d11c      	bne.n	8008c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d115      	bne.n	8008c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d10d      	bne.n	8008c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d106      	bne.n	8008c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d001      	beq.n	8008c54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e000      	b.n	8008c56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	40007000 	.word	0x40007000
 8008c64:	40023800 	.word	0x40023800
 8008c68:	42470060 	.word	0x42470060

08008c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0cc      	b.n	8008e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c80:	4b68      	ldr	r3, [pc, #416]	; (8008e24 <HAL_RCC_ClockConfig+0x1b8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 030f 	and.w	r3, r3, #15
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d90c      	bls.n	8008ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c8e:	4b65      	ldr	r3, [pc, #404]	; (8008e24 <HAL_RCC_ClockConfig+0x1b8>)
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c96:	4b63      	ldr	r3, [pc, #396]	; (8008e24 <HAL_RCC_ClockConfig+0x1b8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d001      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e0b8      	b.n	8008e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d020      	beq.n	8008cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cc0:	4b59      	ldr	r3, [pc, #356]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	4a58      	ldr	r2, [pc, #352]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0308 	and.w	r3, r3, #8
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cd8:	4b53      	ldr	r3, [pc, #332]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	4a52      	ldr	r2, [pc, #328]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ce4:	4b50      	ldr	r3, [pc, #320]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	494d      	ldr	r1, [pc, #308]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d044      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d107      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d0a:	4b47      	ldr	r3, [pc, #284]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d119      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e07f      	b.n	8008e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d003      	beq.n	8008d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d107      	bne.n	8008d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d2a:	4b3f      	ldr	r3, [pc, #252]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d109      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e06f      	b.n	8008e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d3a:	4b3b      	ldr	r3, [pc, #236]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e067      	b.n	8008e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d4a:	4b37      	ldr	r3, [pc, #220]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f023 0203 	bic.w	r2, r3, #3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	4934      	ldr	r1, [pc, #208]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d5c:	f7fd fab8 	bl	80062d0 <HAL_GetTick>
 8008d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d62:	e00a      	b.n	8008d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d64:	f7fd fab4 	bl	80062d0 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e04f      	b.n	8008e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d7a:	4b2b      	ldr	r3, [pc, #172]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 020c 	and.w	r2, r3, #12
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d1eb      	bne.n	8008d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d8c:	4b25      	ldr	r3, [pc, #148]	; (8008e24 <HAL_RCC_ClockConfig+0x1b8>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d20c      	bcs.n	8008db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d9a:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <HAL_RCC_ClockConfig+0x1b8>)
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	b2d2      	uxtb	r2, r2
 8008da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008da2:	4b20      	ldr	r3, [pc, #128]	; (8008e24 <HAL_RCC_ClockConfig+0x1b8>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 030f 	and.w	r3, r3, #15
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d001      	beq.n	8008db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e032      	b.n	8008e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d008      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dc0:	4b19      	ldr	r3, [pc, #100]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	4916      	ldr	r1, [pc, #88]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dde:	4b12      	ldr	r3, [pc, #72]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	490e      	ldr	r1, [pc, #56]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008df2:	f000 f821 	bl	8008e38 <HAL_RCC_GetSysClockFreq>
 8008df6:	4602      	mov	r2, r0
 8008df8:	4b0b      	ldr	r3, [pc, #44]	; (8008e28 <HAL_RCC_ClockConfig+0x1bc>)
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	091b      	lsrs	r3, r3, #4
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	490a      	ldr	r1, [pc, #40]	; (8008e2c <HAL_RCC_ClockConfig+0x1c0>)
 8008e04:	5ccb      	ldrb	r3, [r1, r3]
 8008e06:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0a:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <HAL_RCC_ClockConfig+0x1c4>)
 8008e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e0e:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <HAL_RCC_ClockConfig+0x1c8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fd fa18 	bl	8006248 <HAL_InitTick>

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	40023c00 	.word	0x40023c00
 8008e28:	40023800 	.word	0x40023800
 8008e2c:	0800f4b4 	.word	0x0800f4b4
 8008e30:	20000210 	.word	0x20000210
 8008e34:	200002a8 	.word	0x200002a8

08008e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	607b      	str	r3, [r7, #4]
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e50:	4b67      	ldr	r3, [pc, #412]	; (8008ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f003 030c 	and.w	r3, r3, #12
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d00d      	beq.n	8008e78 <HAL_RCC_GetSysClockFreq+0x40>
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	f200 80bd 	bhi.w	8008fdc <HAL_RCC_GetSysClockFreq+0x1a4>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <HAL_RCC_GetSysClockFreq+0x34>
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d003      	beq.n	8008e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e6a:	e0b7      	b.n	8008fdc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e6c:	4b61      	ldr	r3, [pc, #388]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008e6e:	60bb      	str	r3, [r7, #8]
       break;
 8008e70:	e0b7      	b.n	8008fe2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e72:	4b61      	ldr	r3, [pc, #388]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008e74:	60bb      	str	r3, [r7, #8]
      break;
 8008e76:	e0b4      	b.n	8008fe2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e78:	4b5d      	ldr	r3, [pc, #372]	; (8008ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e82:	4b5b      	ldr	r3, [pc, #364]	; (8008ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d04d      	beq.n	8008f2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e8e:	4b58      	ldr	r3, [pc, #352]	; (8008ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	099b      	lsrs	r3, r3, #6
 8008e94:	461a      	mov	r2, r3
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008e9e:	f04f 0100 	mov.w	r1, #0
 8008ea2:	ea02 0800 	and.w	r8, r2, r0
 8008ea6:	ea03 0901 	and.w	r9, r3, r1
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	014b      	lsls	r3, r1, #5
 8008eb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008ebc:	0142      	lsls	r2, r0, #5
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	ebb0 0008 	subs.w	r0, r0, r8
 8008ec6:	eb61 0109 	sbc.w	r1, r1, r9
 8008eca:	f04f 0200 	mov.w	r2, #0
 8008ece:	f04f 0300 	mov.w	r3, #0
 8008ed2:	018b      	lsls	r3, r1, #6
 8008ed4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008ed8:	0182      	lsls	r2, r0, #6
 8008eda:	1a12      	subs	r2, r2, r0
 8008edc:	eb63 0301 	sbc.w	r3, r3, r1
 8008ee0:	f04f 0000 	mov.w	r0, #0
 8008ee4:	f04f 0100 	mov.w	r1, #0
 8008ee8:	00d9      	lsls	r1, r3, #3
 8008eea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008eee:	00d0      	lsls	r0, r2, #3
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	eb12 0208 	adds.w	r2, r2, r8
 8008ef8:	eb43 0309 	adc.w	r3, r3, r9
 8008efc:	f04f 0000 	mov.w	r0, #0
 8008f00:	f04f 0100 	mov.w	r1, #0
 8008f04:	0259      	lsls	r1, r3, #9
 8008f06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008f0a:	0250      	lsls	r0, r2, #9
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4610      	mov	r0, r2
 8008f12:	4619      	mov	r1, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	461a      	mov	r2, r3
 8008f18:	f04f 0300 	mov.w	r3, #0
 8008f1c:	f7f7 fea4 	bl	8000c68 <__aeabi_uldivmod>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4613      	mov	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e04a      	b.n	8008fc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f2a:	4b31      	ldr	r3, [pc, #196]	; (8008ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	099b      	lsrs	r3, r3, #6
 8008f30:	461a      	mov	r2, r3
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008f3a:	f04f 0100 	mov.w	r1, #0
 8008f3e:	ea02 0400 	and.w	r4, r2, r0
 8008f42:	ea03 0501 	and.w	r5, r3, r1
 8008f46:	4620      	mov	r0, r4
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f04f 0200 	mov.w	r2, #0
 8008f4e:	f04f 0300 	mov.w	r3, #0
 8008f52:	014b      	lsls	r3, r1, #5
 8008f54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008f58:	0142      	lsls	r2, r0, #5
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	1b00      	subs	r0, r0, r4
 8008f60:	eb61 0105 	sbc.w	r1, r1, r5
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	018b      	lsls	r3, r1, #6
 8008f6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008f72:	0182      	lsls	r2, r0, #6
 8008f74:	1a12      	subs	r2, r2, r0
 8008f76:	eb63 0301 	sbc.w	r3, r3, r1
 8008f7a:	f04f 0000 	mov.w	r0, #0
 8008f7e:	f04f 0100 	mov.w	r1, #0
 8008f82:	00d9      	lsls	r1, r3, #3
 8008f84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f88:	00d0      	lsls	r0, r2, #3
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	1912      	adds	r2, r2, r4
 8008f90:	eb45 0303 	adc.w	r3, r5, r3
 8008f94:	f04f 0000 	mov.w	r0, #0
 8008f98:	f04f 0100 	mov.w	r1, #0
 8008f9c:	0299      	lsls	r1, r3, #10
 8008f9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008fa2:	0290      	lsls	r0, r2, #10
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4619      	mov	r1, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f04f 0300 	mov.w	r3, #0
 8008fb4:	f7f7 fe58 	bl	8000c68 <__aeabi_uldivmod>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	0c1b      	lsrs	r3, r3, #16
 8008fc6:	f003 0303 	and.w	r3, r3, #3
 8008fca:	3301      	adds	r3, #1
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd8:	60bb      	str	r3, [r7, #8]
      break;
 8008fda:	e002      	b.n	8008fe2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fdc:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008fde:	60bb      	str	r3, [r7, #8]
      break;
 8008fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008fee:	bf00      	nop
 8008ff0:	40023800 	.word	0x40023800
 8008ff4:	00f42400 	.word	0x00f42400
 8008ff8:	007a1200 	.word	0x007a1200

08008ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009000:	4b03      	ldr	r3, [pc, #12]	; (8009010 <HAL_RCC_GetHCLKFreq+0x14>)
 8009002:	681b      	ldr	r3, [r3, #0]
}
 8009004:	4618      	mov	r0, r3
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000210 	.word	0x20000210

08009014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009018:	f7ff fff0 	bl	8008ffc <HAL_RCC_GetHCLKFreq>
 800901c:	4602      	mov	r2, r0
 800901e:	4b05      	ldr	r3, [pc, #20]	; (8009034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	0a9b      	lsrs	r3, r3, #10
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	4903      	ldr	r1, [pc, #12]	; (8009038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800902a:	5ccb      	ldrb	r3, [r1, r3]
 800902c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009030:	4618      	mov	r0, r3
 8009032:	bd80      	pop	{r7, pc}
 8009034:	40023800 	.word	0x40023800
 8009038:	0800f4c4 	.word	0x0800f4c4

0800903c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10b      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800906c:	2b00      	cmp	r3, #0
 800906e:	d075      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009070:	4bad      	ldr	r3, [pc, #692]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009076:	f7fd f92b 	bl	80062d0 <HAL_GetTick>
 800907a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800907c:	e008      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800907e:	f7fd f927 	bl	80062d0 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b02      	cmp	r3, #2
 800908a:	d901      	bls.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e18b      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009090:	4ba6      	ldr	r3, [pc, #664]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1f0      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d009      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	019a      	lsls	r2, r3, #6
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	071b      	lsls	r3, r3, #28
 80090b4:	499d      	ldr	r1, [pc, #628]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01f      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090c8:	4b98      	ldr	r3, [pc, #608]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ce:	0f1b      	lsrs	r3, r3, #28
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	019a      	lsls	r2, r3, #6
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	061b      	lsls	r3, r3, #24
 80090e2:	431a      	orrs	r2, r3
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	071b      	lsls	r3, r3, #28
 80090e8:	4990      	ldr	r1, [pc, #576]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80090f0:	4b8e      	ldr	r3, [pc, #568]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f6:	f023 021f 	bic.w	r2, r3, #31
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	3b01      	subs	r3, #1
 8009100:	498a      	ldr	r1, [pc, #552]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009102:	4313      	orrs	r3, r2
 8009104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00d      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	019a      	lsls	r2, r3, #6
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	061b      	lsls	r3, r3, #24
 8009120:	431a      	orrs	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	071b      	lsls	r3, r3, #28
 8009128:	4980      	ldr	r1, [pc, #512]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800912a:	4313      	orrs	r3, r2
 800912c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009130:	4b7d      	ldr	r3, [pc, #500]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009132:	2201      	movs	r2, #1
 8009134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009136:	f7fd f8cb 	bl	80062d0 <HAL_GetTick>
 800913a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800913c:	e008      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800913e:	f7fd f8c7 	bl	80062d0 <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	2b02      	cmp	r3, #2
 800914a:	d901      	bls.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e12b      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009150:	4b76      	ldr	r3, [pc, #472]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0f0      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d105      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009170:	2b00      	cmp	r3, #0
 8009172:	d079      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009174:	4b6e      	ldr	r3, [pc, #440]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800917a:	f7fd f8a9 	bl	80062d0 <HAL_GetTick>
 800917e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009180:	e008      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009182:	f7fd f8a5 	bl	80062d0 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d901      	bls.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e109      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009194:	4b65      	ldr	r3, [pc, #404]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800919c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a0:	d0ef      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d020      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80091ae:	4b5f      	ldr	r3, [pc, #380]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b4:	0f1b      	lsrs	r3, r3, #28
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	019a      	lsls	r2, r3, #6
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	061b      	lsls	r3, r3, #24
 80091c8:	431a      	orrs	r2, r3
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	071b      	lsls	r3, r3, #28
 80091ce:	4957      	ldr	r1, [pc, #348]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80091d6:	4b55      	ldr	r3, [pc, #340]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	4950      	ldr	r1, [pc, #320]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0308 	and.w	r3, r3, #8
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01e      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80091fc:	4b4b      	ldr	r3, [pc, #300]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009202:	0e1b      	lsrs	r3, r3, #24
 8009204:	f003 030f 	and.w	r3, r3, #15
 8009208:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	019a      	lsls	r2, r3, #6
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	061b      	lsls	r3, r3, #24
 8009214:	431a      	orrs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	071b      	lsls	r3, r3, #28
 800921c:	4943      	ldr	r1, [pc, #268]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800921e:	4313      	orrs	r3, r2
 8009220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009224:	4b41      	ldr	r3, [pc, #260]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800922a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	493e      	ldr	r1, [pc, #248]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800923a:	4b3d      	ldr	r3, [pc, #244]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800923c:	2201      	movs	r2, #1
 800923e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009240:	f7fd f846 	bl	80062d0 <HAL_GetTick>
 8009244:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009246:	e008      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009248:	f7fd f842 	bl	80062d0 <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	2b02      	cmp	r3, #2
 8009254:	d901      	bls.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e0a6      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800925a:	4b34      	ldr	r3, [pc, #208]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009266:	d1ef      	bne.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0320 	and.w	r3, r3, #32
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 808d 	beq.w	8009390 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
 800927a:	4b2c      	ldr	r3, [pc, #176]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800927c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927e:	4a2b      	ldr	r2, [pc, #172]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009284:	6413      	str	r3, [r2, #64]	; 0x40
 8009286:	4b29      	ldr	r3, [pc, #164]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009292:	4b28      	ldr	r3, [pc, #160]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a27      	ldr	r2, [pc, #156]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800929c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800929e:	f7fd f817 	bl	80062d0 <HAL_GetTick>
 80092a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80092a4:	e008      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80092a6:	f7fd f813 	bl	80062d0 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d901      	bls.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e077      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80092b8:	4b1e      	ldr	r3, [pc, #120]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0f0      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092c4:	4b19      	ldr	r3, [pc, #100]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80092c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d039      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d032      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092e2:	4b12      	ldr	r3, [pc, #72]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80092e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80092ec:	4b12      	ldr	r3, [pc, #72]	; (8009338 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80092ee:	2201      	movs	r2, #1
 80092f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80092f8:	4a0c      	ldr	r2, [pc, #48]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80092fe:	4b0b      	ldr	r3, [pc, #44]	; (800932c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b01      	cmp	r3, #1
 8009308:	d11e      	bne.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800930a:	f7fc ffe1 	bl	80062d0 <HAL_GetTick>
 800930e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009310:	e014      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009312:	f7fc ffdd 	bl	80062d0 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009320:	4293      	cmp	r3, r2
 8009322:	d90b      	bls.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e03f      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8009328:	42470068 	.word	0x42470068
 800932c:	40023800 	.word	0x40023800
 8009330:	42470070 	.word	0x42470070
 8009334:	40007000 	.word	0x40007000
 8009338:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800933c:	4b1c      	ldr	r3, [pc, #112]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800933e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0e4      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009354:	d10d      	bne.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8009356:	4b16      	ldr	r3, [pc, #88]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009362:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800936a:	4911      	ldr	r1, [pc, #68]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800936c:	4313      	orrs	r3, r2
 800936e:	608b      	str	r3, [r1, #8]
 8009370:	e005      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009372:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	4a0e      	ldr	r2, [pc, #56]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009378:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800937c:	6093      	str	r3, [r2, #8]
 800937e:	4b0c      	ldr	r3, [pc, #48]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800938a:	4909      	ldr	r1, [pc, #36]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800938c:	4313      	orrs	r3, r2
 800938e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80093a2:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80093a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	40023800 	.word	0x40023800
 80093b4:	424711e0 	.word	0x424711e0

080093b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e025      	b.n	8009418 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d106      	bne.n	80093e6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f81d 	bl	8009420 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2202      	movs	r2, #2
 80093ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3304      	adds	r3, #4
 80093f6:	4619      	mov	r1, r3
 80093f8:	4610      	mov	r0, r2
 80093fa:	f000 ff0f 	bl	800a21c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	461a      	mov	r2, r3
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	f000 ff7a 	bl	800a302 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d101      	bne.n	8009450 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800944c:	2302      	movs	r3, #2
 800944e:	e018      	b.n	8009482 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 ffcd 	bl	800a400 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b02      	cmp	r3, #2
 800946c:	d104      	bne.n	8009478 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2205      	movs	r2, #5
 8009472:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009476:	e003      	b.n	8009480 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b02      	cmp	r3, #2
 800949e:	d101      	bne.n	80094a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80094a0:	2302      	movs	r3, #2
 80094a2:	e00e      	b.n	80094c2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 ffe0 	bl	800a478 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e05d      	b.n	8009598 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f87d 	bl	80095f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2202      	movs	r2, #2
 80094fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800950c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	431a      	orrs	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	431a      	orrs	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009532:	431a      	orrs	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	ea42 0103 	orr.w	r1, r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	0c1b      	lsrs	r3, r3, #16
 8009554:	f003 0104 	and.w	r1, r3, #4
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800956c:	d104      	bne.n	8009578 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009576:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69da      	ldr	r2, [r3, #28]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e01a      	b.n	80095e8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f81a 	bl	8009604 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	4613      	mov	r3, r2
 8009626:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HAL_SPI_Transmit+0x22>
 8009636:	2302      	movs	r3, #2
 8009638:	e140      	b.n	80098bc <HAL_SPI_Transmit+0x2a4>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009642:	f7fc fe45 	bl	80062d0 <HAL_GetTick>
 8009646:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b01      	cmp	r3, #1
 8009656:	d002      	beq.n	800965e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009658:	2302      	movs	r3, #2
 800965a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800965c:	e125      	b.n	80098aa <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <HAL_SPI_Transmit+0x52>
 8009664:	88fb      	ldrh	r3, [r7, #6]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800966e:	e11c      	b.n	80098aa <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2203      	movs	r2, #3
 8009674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	88fa      	ldrh	r2, [r7, #6]
 8009688:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	88fa      	ldrh	r2, [r7, #6]
 800968e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b6:	d107      	bne.n	80096c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096c6:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d0:	d10f      	bne.n	80096f2 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096f0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fc:	2b40      	cmp	r3, #64	; 0x40
 80096fe:	d007      	beq.n	8009710 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800970e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009718:	d14b      	bne.n	80097b2 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <HAL_SPI_Transmit+0x110>
 8009722:	8afb      	ldrh	r3, [r7, #22]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d13e      	bne.n	80097a6 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972c:	881a      	ldrh	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009738:	1c9a      	adds	r2, r3, #2
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009742:	b29b      	uxth	r3, r3
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800974c:	e02b      	b.n	80097a6 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b02      	cmp	r3, #2
 800975a:	d112      	bne.n	8009782 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009760:	881a      	ldrh	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976c:	1c9a      	adds	r2, r3, #2
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009776:	b29b      	uxth	r3, r3
 8009778:	3b01      	subs	r3, #1
 800977a:	b29a      	uxth	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009780:	e011      	b.n	80097a6 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009782:	f7fc fda5 	bl	80062d0 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d803      	bhi.n	800979a <HAL_SPI_Transmit+0x182>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009798:	d102      	bne.n	80097a0 <HAL_SPI_Transmit+0x188>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d102      	bne.n	80097a6 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097a4:	e081      	b.n	80098aa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1ce      	bne.n	800974e <HAL_SPI_Transmit+0x136>
 80097b0:	e04c      	b.n	800984c <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <HAL_SPI_Transmit+0x1a8>
 80097ba:	8afb      	ldrh	r3, [r7, #22]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d140      	bne.n	8009842 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	330c      	adds	r3, #12
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80097e6:	e02c      	b.n	8009842 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d113      	bne.n	800981e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	330c      	adds	r3, #12
 8009800:	7812      	ldrb	r2, [r2, #0]
 8009802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b01      	subs	r3, #1
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	86da      	strh	r2, [r3, #54]	; 0x36
 800981c:	e011      	b.n	8009842 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800981e:	f7fc fd57 	bl	80062d0 <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d803      	bhi.n	8009836 <HAL_SPI_Transmit+0x21e>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009834:	d102      	bne.n	800983c <HAL_SPI_Transmit+0x224>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009840:	e033      	b.n	80098aa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009846:	b29b      	uxth	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1cd      	bne.n	80097e8 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009854:	d107      	bne.n	8009866 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009864:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fc94 	bl	800a198 <SPI_EndRxTxTransaction>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2220      	movs	r2, #32
 800987a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009884:	2300      	movs	r3, #0
 8009886:	613b      	str	r3, [r7, #16]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	77fb      	strb	r3, [r7, #31]
 80098a6:	e000      	b.n	80098aa <HAL_SPI_Transmit+0x292>
  }

error:
 80098a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3720      	adds	r7, #32
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	4613      	mov	r3, r2
 80098d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098e0:	d112      	bne.n	8009908 <HAL_SPI_Receive+0x44>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10e      	bne.n	8009908 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2204      	movs	r2, #4
 80098ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80098f2:	88fa      	ldrh	r2, [r7, #6]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	68b9      	ldr	r1, [r7, #8]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 f95f 	bl	8009bc2 <HAL_SPI_TransmitReceive>
 8009904:	4603      	mov	r3, r0
 8009906:	e158      	b.n	8009bba <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <HAL_SPI_Receive+0x52>
 8009912:	2302      	movs	r3, #2
 8009914:	e151      	b.n	8009bba <HAL_SPI_Receive+0x2f6>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800991e:	f7fc fcd7 	bl	80062d0 <HAL_GetTick>
 8009922:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	d002      	beq.n	8009936 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009930:	2302      	movs	r3, #2
 8009932:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009934:	e138      	b.n	8009ba8 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <HAL_SPI_Receive+0x7e>
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009946:	e12f      	b.n	8009ba8 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2204      	movs	r2, #4
 800994c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	88fa      	ldrh	r2, [r7, #6]
 8009960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	88fa      	ldrh	r2, [r7, #6]
 8009966:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800998e:	d116      	bne.n	80099be <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099ae:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099c6:	d107      	bne.n	80099d8 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80099d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	d007      	beq.n	80099f6 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d162      	bne.n	8009ac4 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80099fe:	e02e      	b.n	8009a5e <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d115      	bne.n	8009a3a <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f103 020c 	add.w	r2, r3, #12
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1a:	7812      	ldrb	r2, [r2, #0]
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a38:	e011      	b.n	8009a5e <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a3a:	f7fc fc49 	bl	80062d0 <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d803      	bhi.n	8009a52 <HAL_SPI_Receive+0x18e>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a50:	d102      	bne.n	8009a58 <HAL_SPI_Receive+0x194>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009a5c:	e0a4      	b.n	8009ba8 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1cb      	bne.n	8009a00 <HAL_SPI_Receive+0x13c>
 8009a68:	e031      	b.n	8009ace <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d113      	bne.n	8009aa0 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68da      	ldr	r2, [r3, #12]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a82:	b292      	uxth	r2, r2
 8009a84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	1c9a      	adds	r2, r3, #2
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a9e:	e011      	b.n	8009ac4 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009aa0:	f7fc fc16 	bl	80062d0 <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d803      	bhi.n	8009ab8 <HAL_SPI_Receive+0x1f4>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab6:	d102      	bne.n	8009abe <HAL_SPI_Receive+0x1fa>
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009ac2:	e071      	b.n	8009ba8 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1cd      	bne.n	8009a6a <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad6:	d142      	bne.n	8009b5e <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ae6:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	2201      	movs	r2, #1
 8009af0:	2101      	movs	r1, #1
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fa81 	bl	8009ffa <SPI_WaitFlagStateUntilTimeout>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	75fb      	strb	r3, [r7, #23]
      goto error;
 8009b02:	e051      	b.n	8009ba8 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b0c:	d107      	bne.n	8009b1e <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	b292      	uxth	r2, r2
 8009b1a:	801a      	strh	r2, [r3, #0]
 8009b1c:	e008      	b.n	8009b30 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f103 020c 	add.w	r2, r3, #12
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	b2d2      	uxtb	r2, r2
 8009b2e:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2201      	movs	r2, #1
 8009b38:	2101      	movs	r1, #1
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 fa5d 	bl	8009ffa <SPI_WaitFlagStateUntilTimeout>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d008      	beq.n	8009b58 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4a:	f043 0202 	orr.w	r2, r3, #2
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	75fb      	strb	r3, [r7, #23]
      goto error;
 8009b56:	e027      	b.n	8009ba8 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 fab3 	bl	800a0ce <SPI_EndRxTransaction>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2220      	movs	r2, #32
 8009b72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 0310 	and.w	r3, r3, #16
 8009b7e:	2b10      	cmp	r3, #16
 8009b80:	d10a      	bne.n	8009b98 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b86:	f043 0202 	orr.w	r2, r3, #2
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009b96:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
 8009ba4:	e000      	b.n	8009ba8 <HAL_SPI_Receive+0x2e4>
  }

error :
 8009ba6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3718      	adds	r7, #24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b08e      	sub	sp, #56	; 0x38
 8009bc6:	af02      	add	r7, sp, #8
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d101      	bne.n	8009be8 <HAL_SPI_TransmitReceive+0x26>
 8009be4:	2302      	movs	r3, #2
 8009be6:	e1f6      	b.n	8009fd6 <HAL_SPI_TransmitReceive+0x414>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bf0:	f7fc fb6e 	bl	80062d0 <HAL_GetTick>
 8009bf4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c06:	887b      	ldrh	r3, [r7, #2]
 8009c08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d00f      	beq.n	8009c32 <HAL_SPI_TransmitReceive+0x70>
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c18:	d107      	bne.n	8009c2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d103      	bne.n	8009c2a <HAL_SPI_TransmitReceive+0x68>
 8009c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d003      	beq.n	8009c32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c30:	e1c7      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <HAL_SPI_TransmitReceive+0x82>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <HAL_SPI_TransmitReceive+0x82>
 8009c3e:	887b      	ldrh	r3, [r7, #2]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d103      	bne.n	8009c4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009c4a:	e1ba      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d003      	beq.n	8009c60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2205      	movs	r2, #5
 8009c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	887a      	ldrh	r2, [r7, #2]
 8009c70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	887a      	ldrh	r2, [r7, #2]
 8009c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	887a      	ldrh	r2, [r7, #2]
 8009c82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	887a      	ldrh	r2, [r7, #2]
 8009c88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9e:	d10f      	bne.n	8009cc0 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cbe:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cca:	2b40      	cmp	r3, #64	; 0x40
 8009ccc:	d007      	beq.n	8009cde <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce6:	f040 808b 	bne.w	8009e00 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <HAL_SPI_TransmitReceive+0x136>
 8009cf2:	8b7b      	ldrh	r3, [r7, #26]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d178      	bne.n	8009dea <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfc:	881a      	ldrh	r2, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d08:	1c9a      	adds	r2, r3, #2
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d1c:	e065      	b.n	8009dea <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f003 0302 	and.w	r3, r3, #2
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d12d      	bne.n	8009d88 <HAL_SPI_TransmitReceive+0x1c6>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d028      	beq.n	8009d88 <HAL_SPI_TransmitReceive+0x1c6>
 8009d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d125      	bne.n	8009d88 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	881a      	ldrh	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	1c9a      	adds	r2, r3, #2
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10c      	bne.n	8009d88 <HAL_SPI_TransmitReceive+0x1c6>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d76:	d107      	bne.n	8009d88 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d86:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d119      	bne.n	8009dca <HAL_SPI_TransmitReceive+0x208>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d014      	beq.n	8009dca <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	b292      	uxth	r2, r2
 8009dac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	1c9a      	adds	r2, r3, #2
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009dca:	f7fc fa81 	bl	80062d0 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d807      	bhi.n	8009dea <HAL_SPI_TransmitReceive+0x228>
 8009dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de0:	d003      	beq.n	8009dea <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009de8:	e0eb      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d194      	bne.n	8009d1e <HAL_SPI_TransmitReceive+0x15c>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d18f      	bne.n	8009d1e <HAL_SPI_TransmitReceive+0x15c>
 8009dfe:	e08e      	b.n	8009f1e <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <HAL_SPI_TransmitReceive+0x24c>
 8009e08:	8b7b      	ldrh	r3, [r7, #26]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d17d      	bne.n	8009f0a <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	330c      	adds	r3, #12
 8009e18:	7812      	ldrb	r2, [r2, #0]
 8009e1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e34:	e069      	b.n	8009f0a <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d12e      	bne.n	8009ea2 <HAL_SPI_TransmitReceive+0x2e0>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d029      	beq.n	8009ea2 <HAL_SPI_TransmitReceive+0x2e0>
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d126      	bne.n	8009ea2 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	3b01      	subs	r3, #1
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10c      	bne.n	8009ea2 <HAL_SPI_TransmitReceive+0x2e0>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e90:	d107      	bne.n	8009ea2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ea0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d119      	bne.n	8009ee4 <HAL_SPI_TransmitReceive+0x322>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d014      	beq.n	8009ee4 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ee4:	f7fc f9f4 	bl	80062d0 <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d803      	bhi.n	8009efc <HAL_SPI_TransmitReceive+0x33a>
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efa:	d102      	bne.n	8009f02 <HAL_SPI_TransmitReceive+0x340>
 8009efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d103      	bne.n	8009f0a <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f08:	e05b      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d190      	bne.n	8009e36 <HAL_SPI_TransmitReceive+0x274>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d18b      	bne.n	8009e36 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f26:	d117      	bne.n	8009f58 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	2201      	movs	r2, #1
 8009f30:	2101      	movs	r1, #1
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 f861 	bl	8009ffa <SPI_WaitFlagStateUntilTimeout>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f42:	f043 0202 	orr.w	r2, r3, #2
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8009f50:	e037      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f003 0310 	and.w	r3, r3, #16
 8009f62:	2b10      	cmp	r3, #16
 8009f64:	d10d      	bne.n	8009f82 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6a:	f043 0202 	orr.w	r2, r3, #2
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009f7a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 f906 	bl	800a198 <SPI_EndRxTxTransaction>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d006      	beq.n	8009fa0 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f9e:	e010      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10b      	bne.n	8009fc0 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fa8:	2300      	movs	r3, #0
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	e000      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8009fc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3730      	adds	r7, #48	; 0x30
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009fec:	b2db      	uxtb	r3, r3
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	60b9      	str	r1, [r7, #8]
 800a004:	603b      	str	r3, [r7, #0]
 800a006:	4613      	mov	r3, r2
 800a008:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a00a:	e04c      	b.n	800a0a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d048      	beq.n	800a0a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a014:	f7fc f95c 	bl	80062d0 <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	429a      	cmp	r2, r3
 800a022:	d902      	bls.n	800a02a <SPI_WaitFlagStateUntilTimeout+0x30>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d13d      	bne.n	800a0a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a038:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a042:	d111      	bne.n	800a068 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a04c:	d004      	beq.n	800a058 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a056:	d107      	bne.n	800a068 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a070:	d10f      	bne.n	800a092 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a090:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e00f      	b.n	800a0c6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	bf0c      	ite	eq
 800a0b6:	2301      	moveq	r3, #1
 800a0b8:	2300      	movne	r3, #0
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d1a3      	bne.n	800a00c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b086      	sub	sp, #24
 800a0d2:	af02      	add	r7, sp, #8
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0e2:	d111      	bne.n	800a108 <SPI_EndRxTransaction+0x3a>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0ec:	d004      	beq.n	800a0f8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f6:	d107      	bne.n	800a108 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a106:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a110:	d12a      	bne.n	800a168 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a11a:	d012      	beq.n	800a142 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2200      	movs	r2, #0
 800a124:	2180      	movs	r1, #128	; 0x80
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7ff ff67 	bl	8009ffa <SPI_WaitFlagStateUntilTimeout>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d02d      	beq.n	800a18e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a136:	f043 0220 	orr.w	r2, r3, #32
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e026      	b.n	800a190 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2200      	movs	r2, #0
 800a14a:	2101      	movs	r1, #1
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7ff ff54 	bl	8009ffa <SPI_WaitFlagStateUntilTimeout>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01a      	beq.n	800a18e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15c:	f043 0220 	orr.w	r2, r3, #32
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e013      	b.n	800a190 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2200      	movs	r2, #0
 800a170:	2101      	movs	r1, #1
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7ff ff41 	bl	8009ffa <SPI_WaitFlagStateUntilTimeout>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d007      	beq.n	800a18e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a182:	f043 0220 	orr.w	r2, r3, #32
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e000      	b.n	800a190 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1a4:	4b1b      	ldr	r3, [pc, #108]	; (800a214 <SPI_EndRxTxTransaction+0x7c>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a1b      	ldr	r2, [pc, #108]	; (800a218 <SPI_EndRxTxTransaction+0x80>)
 800a1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ae:	0d5b      	lsrs	r3, r3, #21
 800a1b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1b4:	fb02 f303 	mul.w	r3, r2, r3
 800a1b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1c2:	d112      	bne.n	800a1ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2180      	movs	r1, #128	; 0x80
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff ff13 	bl	8009ffa <SPI_WaitFlagStateUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d016      	beq.n	800a208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1de:	f043 0220 	orr.w	r2, r3, #32
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e00f      	b.n	800a20a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a200:	2b80      	cmp	r3, #128	; 0x80
 800a202:	d0f2      	beq.n	800a1ea <SPI_EndRxTxTransaction+0x52>
 800a204:	e000      	b.n	800a208 <SPI_EndRxTxTransaction+0x70>
        break;
 800a206:	bf00      	nop
  }

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000210 	.word	0x20000210
 800a218:	165e9f81 	.word	0x165e9f81

0800a21c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d029      	beq.n	800a28a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a246:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a250:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a256:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a25c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a262:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a268:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a26e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a274:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a27a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	e034      	b.n	800a2f4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a296:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a2a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2be:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2c8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a2ce:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a2d4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a2da:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a2e0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a302:	b480      	push	{r7}
 800a304:	b087      	sub	sp, #28
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d02e      	beq.n	800a37a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a328:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	3b01      	subs	r3, #1
 800a336:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a338:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	3b01      	subs	r3, #1
 800a340:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a342:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	3b01      	subs	r3, #1
 800a34a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a34c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	3b01      	subs	r3, #1
 800a354:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a356:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a360:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	3b01      	subs	r3, #1
 800a368:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a36a:	4313      	orrs	r3, r2
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	4313      	orrs	r3, r2
 800a370:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	609a      	str	r2, [r3, #8]
 800a378:	e03b      	b.n	800a3f2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a38a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	3b01      	subs	r3, #1
 800a392:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	3b01      	subs	r3, #1
 800a39a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a39c:	4313      	orrs	r3, r2
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3b0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3c0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a3ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a3d4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	371c      	adds	r7, #28
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a41c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	3b01      	subs	r3, #1
 800a424:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a426:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a438:	f7fb ff4a 	bl	80062d0 <HAL_GetTick>
 800a43c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a43e:	e010      	b.n	800a462 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d00c      	beq.n	800a462 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d007      	beq.n	800a45e <FMC_SDRAM_SendCommand+0x5e>
 800a44e:	f7fb ff3f 	bl	80062d0 <HAL_GetTick>
 800a452:	4602      	mov	r2, r0
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d201      	bcs.n	800a462 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e006      	b.n	800a470 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	d0e8      	beq.n	800a440 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	695a      	ldr	r2, [r3, #20]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	431a      	orrs	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
	...

0800a4a0 <__libc_init_array>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	4d0d      	ldr	r5, [pc, #52]	; (800a4d8 <__libc_init_array+0x38>)
 800a4a4:	4c0d      	ldr	r4, [pc, #52]	; (800a4dc <__libc_init_array+0x3c>)
 800a4a6:	1b64      	subs	r4, r4, r5
 800a4a8:	10a4      	asrs	r4, r4, #2
 800a4aa:	2600      	movs	r6, #0
 800a4ac:	42a6      	cmp	r6, r4
 800a4ae:	d109      	bne.n	800a4c4 <__libc_init_array+0x24>
 800a4b0:	4d0b      	ldr	r5, [pc, #44]	; (800a4e0 <__libc_init_array+0x40>)
 800a4b2:	4c0c      	ldr	r4, [pc, #48]	; (800a4e4 <__libc_init_array+0x44>)
 800a4b4:	f004 ff3a 	bl	800f32c <_init>
 800a4b8:	1b64      	subs	r4, r4, r5
 800a4ba:	10a4      	asrs	r4, r4, #2
 800a4bc:	2600      	movs	r6, #0
 800a4be:	42a6      	cmp	r6, r4
 800a4c0:	d105      	bne.n	800a4ce <__libc_init_array+0x2e>
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c8:	4798      	blx	r3
 800a4ca:	3601      	adds	r6, #1
 800a4cc:	e7ee      	b.n	800a4ac <__libc_init_array+0xc>
 800a4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d2:	4798      	blx	r3
 800a4d4:	3601      	adds	r6, #1
 800a4d6:	e7f2      	b.n	800a4be <__libc_init_array+0x1e>
 800a4d8:	08013850 	.word	0x08013850
 800a4dc:	08013850 	.word	0x08013850
 800a4e0:	08013850 	.word	0x08013850
 800a4e4:	08013854 	.word	0x08013854

0800a4e8 <memset>:
 800a4e8:	4402      	add	r2, r0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d100      	bne.n	800a4f2 <memset+0xa>
 800a4f0:	4770      	bx	lr
 800a4f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4f6:	e7f9      	b.n	800a4ec <memset+0x4>

0800a4f8 <__cvt>:
 800a4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4fc:	ec55 4b10 	vmov	r4, r5, d0
 800a500:	2d00      	cmp	r5, #0
 800a502:	460e      	mov	r6, r1
 800a504:	4619      	mov	r1, r3
 800a506:	462b      	mov	r3, r5
 800a508:	bfbb      	ittet	lt
 800a50a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a50e:	461d      	movlt	r5, r3
 800a510:	2300      	movge	r3, #0
 800a512:	232d      	movlt	r3, #45	; 0x2d
 800a514:	700b      	strb	r3, [r1, #0]
 800a516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a518:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a51c:	4691      	mov	r9, r2
 800a51e:	f023 0820 	bic.w	r8, r3, #32
 800a522:	bfbc      	itt	lt
 800a524:	4622      	movlt	r2, r4
 800a526:	4614      	movlt	r4, r2
 800a528:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a52c:	d005      	beq.n	800a53a <__cvt+0x42>
 800a52e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a532:	d100      	bne.n	800a536 <__cvt+0x3e>
 800a534:	3601      	adds	r6, #1
 800a536:	2102      	movs	r1, #2
 800a538:	e000      	b.n	800a53c <__cvt+0x44>
 800a53a:	2103      	movs	r1, #3
 800a53c:	ab03      	add	r3, sp, #12
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	ab02      	add	r3, sp, #8
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	ec45 4b10 	vmov	d0, r4, r5
 800a548:	4653      	mov	r3, sl
 800a54a:	4632      	mov	r2, r6
 800a54c:	f000 fd00 	bl	800af50 <_dtoa_r>
 800a550:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a554:	4607      	mov	r7, r0
 800a556:	d102      	bne.n	800a55e <__cvt+0x66>
 800a558:	f019 0f01 	tst.w	r9, #1
 800a55c:	d022      	beq.n	800a5a4 <__cvt+0xac>
 800a55e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a562:	eb07 0906 	add.w	r9, r7, r6
 800a566:	d110      	bne.n	800a58a <__cvt+0x92>
 800a568:	783b      	ldrb	r3, [r7, #0]
 800a56a:	2b30      	cmp	r3, #48	; 0x30
 800a56c:	d10a      	bne.n	800a584 <__cvt+0x8c>
 800a56e:	2200      	movs	r2, #0
 800a570:	2300      	movs	r3, #0
 800a572:	4620      	mov	r0, r4
 800a574:	4629      	mov	r1, r5
 800a576:	f7f6 fab7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a57a:	b918      	cbnz	r0, 800a584 <__cvt+0x8c>
 800a57c:	f1c6 0601 	rsb	r6, r6, #1
 800a580:	f8ca 6000 	str.w	r6, [sl]
 800a584:	f8da 3000 	ldr.w	r3, [sl]
 800a588:	4499      	add	r9, r3
 800a58a:	2200      	movs	r2, #0
 800a58c:	2300      	movs	r3, #0
 800a58e:	4620      	mov	r0, r4
 800a590:	4629      	mov	r1, r5
 800a592:	f7f6 faa9 	bl	8000ae8 <__aeabi_dcmpeq>
 800a596:	b108      	cbz	r0, 800a59c <__cvt+0xa4>
 800a598:	f8cd 900c 	str.w	r9, [sp, #12]
 800a59c:	2230      	movs	r2, #48	; 0x30
 800a59e:	9b03      	ldr	r3, [sp, #12]
 800a5a0:	454b      	cmp	r3, r9
 800a5a2:	d307      	bcc.n	800a5b4 <__cvt+0xbc>
 800a5a4:	9b03      	ldr	r3, [sp, #12]
 800a5a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5a8:	1bdb      	subs	r3, r3, r7
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	b004      	add	sp, #16
 800a5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b4:	1c59      	adds	r1, r3, #1
 800a5b6:	9103      	str	r1, [sp, #12]
 800a5b8:	701a      	strb	r2, [r3, #0]
 800a5ba:	e7f0      	b.n	800a59e <__cvt+0xa6>

0800a5bc <__exponent>:
 800a5bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2900      	cmp	r1, #0
 800a5c2:	bfb8      	it	lt
 800a5c4:	4249      	neglt	r1, r1
 800a5c6:	f803 2b02 	strb.w	r2, [r3], #2
 800a5ca:	bfb4      	ite	lt
 800a5cc:	222d      	movlt	r2, #45	; 0x2d
 800a5ce:	222b      	movge	r2, #43	; 0x2b
 800a5d0:	2909      	cmp	r1, #9
 800a5d2:	7042      	strb	r2, [r0, #1]
 800a5d4:	dd2a      	ble.n	800a62c <__exponent+0x70>
 800a5d6:	f10d 0407 	add.w	r4, sp, #7
 800a5da:	46a4      	mov	ip, r4
 800a5dc:	270a      	movs	r7, #10
 800a5de:	46a6      	mov	lr, r4
 800a5e0:	460a      	mov	r2, r1
 800a5e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5e6:	fb07 1516 	mls	r5, r7, r6, r1
 800a5ea:	3530      	adds	r5, #48	; 0x30
 800a5ec:	2a63      	cmp	r2, #99	; 0x63
 800a5ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	dcf1      	bgt.n	800a5de <__exponent+0x22>
 800a5fa:	3130      	adds	r1, #48	; 0x30
 800a5fc:	f1ae 0502 	sub.w	r5, lr, #2
 800a600:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a604:	1c44      	adds	r4, r0, #1
 800a606:	4629      	mov	r1, r5
 800a608:	4561      	cmp	r1, ip
 800a60a:	d30a      	bcc.n	800a622 <__exponent+0x66>
 800a60c:	f10d 0209 	add.w	r2, sp, #9
 800a610:	eba2 020e 	sub.w	r2, r2, lr
 800a614:	4565      	cmp	r5, ip
 800a616:	bf88      	it	hi
 800a618:	2200      	movhi	r2, #0
 800a61a:	4413      	add	r3, r2
 800a61c:	1a18      	subs	r0, r3, r0
 800a61e:	b003      	add	sp, #12
 800a620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a622:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a626:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a62a:	e7ed      	b.n	800a608 <__exponent+0x4c>
 800a62c:	2330      	movs	r3, #48	; 0x30
 800a62e:	3130      	adds	r1, #48	; 0x30
 800a630:	7083      	strb	r3, [r0, #2]
 800a632:	70c1      	strb	r1, [r0, #3]
 800a634:	1d03      	adds	r3, r0, #4
 800a636:	e7f1      	b.n	800a61c <__exponent+0x60>

0800a638 <_printf_float>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	ed2d 8b02 	vpush	{d8}
 800a640:	b08d      	sub	sp, #52	; 0x34
 800a642:	460c      	mov	r4, r1
 800a644:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a648:	4616      	mov	r6, r2
 800a64a:	461f      	mov	r7, r3
 800a64c:	4605      	mov	r5, r0
 800a64e:	f001 fa6b 	bl	800bb28 <_localeconv_r>
 800a652:	f8d0 a000 	ldr.w	sl, [r0]
 800a656:	4650      	mov	r0, sl
 800a658:	f7f5 fdca 	bl	80001f0 <strlen>
 800a65c:	2300      	movs	r3, #0
 800a65e:	930a      	str	r3, [sp, #40]	; 0x28
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	9305      	str	r3, [sp, #20]
 800a664:	f8d8 3000 	ldr.w	r3, [r8]
 800a668:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a66c:	3307      	adds	r3, #7
 800a66e:	f023 0307 	bic.w	r3, r3, #7
 800a672:	f103 0208 	add.w	r2, r3, #8
 800a676:	f8c8 2000 	str.w	r2, [r8]
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a682:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a686:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a68a:	9307      	str	r3, [sp, #28]
 800a68c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a690:	ee08 0a10 	vmov	s16, r0
 800a694:	4b9f      	ldr	r3, [pc, #636]	; (800a914 <_printf_float+0x2dc>)
 800a696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a69a:	f04f 32ff 	mov.w	r2, #4294967295
 800a69e:	f7f6 fa55 	bl	8000b4c <__aeabi_dcmpun>
 800a6a2:	bb88      	cbnz	r0, 800a708 <_printf_float+0xd0>
 800a6a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6a8:	4b9a      	ldr	r3, [pc, #616]	; (800a914 <_printf_float+0x2dc>)
 800a6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ae:	f7f6 fa2f 	bl	8000b10 <__aeabi_dcmple>
 800a6b2:	bb48      	cbnz	r0, 800a708 <_printf_float+0xd0>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	f7f6 fa1e 	bl	8000afc <__aeabi_dcmplt>
 800a6c0:	b110      	cbz	r0, 800a6c8 <_printf_float+0x90>
 800a6c2:	232d      	movs	r3, #45	; 0x2d
 800a6c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6c8:	4b93      	ldr	r3, [pc, #588]	; (800a918 <_printf_float+0x2e0>)
 800a6ca:	4894      	ldr	r0, [pc, #592]	; (800a91c <_printf_float+0x2e4>)
 800a6cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6d0:	bf94      	ite	ls
 800a6d2:	4698      	movls	r8, r3
 800a6d4:	4680      	movhi	r8, r0
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	6123      	str	r3, [r4, #16]
 800a6da:	9b05      	ldr	r3, [sp, #20]
 800a6dc:	f023 0204 	bic.w	r2, r3, #4
 800a6e0:	6022      	str	r2, [r4, #0]
 800a6e2:	f04f 0900 	mov.w	r9, #0
 800a6e6:	9700      	str	r7, [sp, #0]
 800a6e8:	4633      	mov	r3, r6
 800a6ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 f9d8 	bl	800aaa4 <_printf_common>
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	f040 8090 	bne.w	800a81a <_printf_float+0x1e2>
 800a6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fe:	b00d      	add	sp, #52	; 0x34
 800a700:	ecbd 8b02 	vpop	{d8}
 800a704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a708:	4642      	mov	r2, r8
 800a70a:	464b      	mov	r3, r9
 800a70c:	4640      	mov	r0, r8
 800a70e:	4649      	mov	r1, r9
 800a710:	f7f6 fa1c 	bl	8000b4c <__aeabi_dcmpun>
 800a714:	b140      	cbz	r0, 800a728 <_printf_float+0xf0>
 800a716:	464b      	mov	r3, r9
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bfbc      	itt	lt
 800a71c:	232d      	movlt	r3, #45	; 0x2d
 800a71e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a722:	487f      	ldr	r0, [pc, #508]	; (800a920 <_printf_float+0x2e8>)
 800a724:	4b7f      	ldr	r3, [pc, #508]	; (800a924 <_printf_float+0x2ec>)
 800a726:	e7d1      	b.n	800a6cc <_printf_float+0x94>
 800a728:	6863      	ldr	r3, [r4, #4]
 800a72a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a72e:	9206      	str	r2, [sp, #24]
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	d13f      	bne.n	800a7b4 <_printf_float+0x17c>
 800a734:	2306      	movs	r3, #6
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	9b05      	ldr	r3, [sp, #20]
 800a73a:	6861      	ldr	r1, [r4, #4]
 800a73c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a740:	2300      	movs	r3, #0
 800a742:	9303      	str	r3, [sp, #12]
 800a744:	ab0a      	add	r3, sp, #40	; 0x28
 800a746:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a74a:	ab09      	add	r3, sp, #36	; 0x24
 800a74c:	ec49 8b10 	vmov	d0, r8, r9
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	6022      	str	r2, [r4, #0]
 800a754:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a758:	4628      	mov	r0, r5
 800a75a:	f7ff fecd 	bl	800a4f8 <__cvt>
 800a75e:	9b06      	ldr	r3, [sp, #24]
 800a760:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a762:	2b47      	cmp	r3, #71	; 0x47
 800a764:	4680      	mov	r8, r0
 800a766:	d108      	bne.n	800a77a <_printf_float+0x142>
 800a768:	1cc8      	adds	r0, r1, #3
 800a76a:	db02      	blt.n	800a772 <_printf_float+0x13a>
 800a76c:	6863      	ldr	r3, [r4, #4]
 800a76e:	4299      	cmp	r1, r3
 800a770:	dd41      	ble.n	800a7f6 <_printf_float+0x1be>
 800a772:	f1ab 0b02 	sub.w	fp, fp, #2
 800a776:	fa5f fb8b 	uxtb.w	fp, fp
 800a77a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a77e:	d820      	bhi.n	800a7c2 <_printf_float+0x18a>
 800a780:	3901      	subs	r1, #1
 800a782:	465a      	mov	r2, fp
 800a784:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a788:	9109      	str	r1, [sp, #36]	; 0x24
 800a78a:	f7ff ff17 	bl	800a5bc <__exponent>
 800a78e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a790:	1813      	adds	r3, r2, r0
 800a792:	2a01      	cmp	r2, #1
 800a794:	4681      	mov	r9, r0
 800a796:	6123      	str	r3, [r4, #16]
 800a798:	dc02      	bgt.n	800a7a0 <_printf_float+0x168>
 800a79a:	6822      	ldr	r2, [r4, #0]
 800a79c:	07d2      	lsls	r2, r2, #31
 800a79e:	d501      	bpl.n	800a7a4 <_printf_float+0x16c>
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	6123      	str	r3, [r4, #16]
 800a7a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d09c      	beq.n	800a6e6 <_printf_float+0xae>
 800a7ac:	232d      	movs	r3, #45	; 0x2d
 800a7ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7b2:	e798      	b.n	800a6e6 <_printf_float+0xae>
 800a7b4:	9a06      	ldr	r2, [sp, #24]
 800a7b6:	2a47      	cmp	r2, #71	; 0x47
 800a7b8:	d1be      	bne.n	800a738 <_printf_float+0x100>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1bc      	bne.n	800a738 <_printf_float+0x100>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e7b9      	b.n	800a736 <_printf_float+0xfe>
 800a7c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7c6:	d118      	bne.n	800a7fa <_printf_float+0x1c2>
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	6863      	ldr	r3, [r4, #4]
 800a7cc:	dd0b      	ble.n	800a7e6 <_printf_float+0x1ae>
 800a7ce:	6121      	str	r1, [r4, #16]
 800a7d0:	b913      	cbnz	r3, 800a7d8 <_printf_float+0x1a0>
 800a7d2:	6822      	ldr	r2, [r4, #0]
 800a7d4:	07d0      	lsls	r0, r2, #31
 800a7d6:	d502      	bpl.n	800a7de <_printf_float+0x1a6>
 800a7d8:	3301      	adds	r3, #1
 800a7da:	440b      	add	r3, r1
 800a7dc:	6123      	str	r3, [r4, #16]
 800a7de:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7e0:	f04f 0900 	mov.w	r9, #0
 800a7e4:	e7de      	b.n	800a7a4 <_printf_float+0x16c>
 800a7e6:	b913      	cbnz	r3, 800a7ee <_printf_float+0x1b6>
 800a7e8:	6822      	ldr	r2, [r4, #0]
 800a7ea:	07d2      	lsls	r2, r2, #31
 800a7ec:	d501      	bpl.n	800a7f2 <_printf_float+0x1ba>
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	e7f4      	b.n	800a7dc <_printf_float+0x1a4>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e7f2      	b.n	800a7dc <_printf_float+0x1a4>
 800a7f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fc:	4299      	cmp	r1, r3
 800a7fe:	db05      	blt.n	800a80c <_printf_float+0x1d4>
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	6121      	str	r1, [r4, #16]
 800a804:	07d8      	lsls	r0, r3, #31
 800a806:	d5ea      	bpl.n	800a7de <_printf_float+0x1a6>
 800a808:	1c4b      	adds	r3, r1, #1
 800a80a:	e7e7      	b.n	800a7dc <_printf_float+0x1a4>
 800a80c:	2900      	cmp	r1, #0
 800a80e:	bfd4      	ite	le
 800a810:	f1c1 0202 	rsble	r2, r1, #2
 800a814:	2201      	movgt	r2, #1
 800a816:	4413      	add	r3, r2
 800a818:	e7e0      	b.n	800a7dc <_printf_float+0x1a4>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	055a      	lsls	r2, r3, #21
 800a81e:	d407      	bmi.n	800a830 <_printf_float+0x1f8>
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	4642      	mov	r2, r8
 800a824:	4631      	mov	r1, r6
 800a826:	4628      	mov	r0, r5
 800a828:	47b8      	blx	r7
 800a82a:	3001      	adds	r0, #1
 800a82c:	d12c      	bne.n	800a888 <_printf_float+0x250>
 800a82e:	e764      	b.n	800a6fa <_printf_float+0xc2>
 800a830:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a834:	f240 80e0 	bls.w	800a9f8 <_printf_float+0x3c0>
 800a838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a83c:	2200      	movs	r2, #0
 800a83e:	2300      	movs	r3, #0
 800a840:	f7f6 f952 	bl	8000ae8 <__aeabi_dcmpeq>
 800a844:	2800      	cmp	r0, #0
 800a846:	d034      	beq.n	800a8b2 <_printf_float+0x27a>
 800a848:	4a37      	ldr	r2, [pc, #220]	; (800a928 <_printf_float+0x2f0>)
 800a84a:	2301      	movs	r3, #1
 800a84c:	4631      	mov	r1, r6
 800a84e:	4628      	mov	r0, r5
 800a850:	47b8      	blx	r7
 800a852:	3001      	adds	r0, #1
 800a854:	f43f af51 	beq.w	800a6fa <_printf_float+0xc2>
 800a858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a85c:	429a      	cmp	r2, r3
 800a85e:	db02      	blt.n	800a866 <_printf_float+0x22e>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	07d8      	lsls	r0, r3, #31
 800a864:	d510      	bpl.n	800a888 <_printf_float+0x250>
 800a866:	ee18 3a10 	vmov	r3, s16
 800a86a:	4652      	mov	r2, sl
 800a86c:	4631      	mov	r1, r6
 800a86e:	4628      	mov	r0, r5
 800a870:	47b8      	blx	r7
 800a872:	3001      	adds	r0, #1
 800a874:	f43f af41 	beq.w	800a6fa <_printf_float+0xc2>
 800a878:	f04f 0800 	mov.w	r8, #0
 800a87c:	f104 091a 	add.w	r9, r4, #26
 800a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a882:	3b01      	subs	r3, #1
 800a884:	4543      	cmp	r3, r8
 800a886:	dc09      	bgt.n	800a89c <_printf_float+0x264>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	079b      	lsls	r3, r3, #30
 800a88c:	f100 8105 	bmi.w	800aa9a <_printf_float+0x462>
 800a890:	68e0      	ldr	r0, [r4, #12]
 800a892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a894:	4298      	cmp	r0, r3
 800a896:	bfb8      	it	lt
 800a898:	4618      	movlt	r0, r3
 800a89a:	e730      	b.n	800a6fe <_printf_float+0xc6>
 800a89c:	2301      	movs	r3, #1
 800a89e:	464a      	mov	r2, r9
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	47b8      	blx	r7
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	f43f af27 	beq.w	800a6fa <_printf_float+0xc2>
 800a8ac:	f108 0801 	add.w	r8, r8, #1
 800a8b0:	e7e6      	b.n	800a880 <_printf_float+0x248>
 800a8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dc39      	bgt.n	800a92c <_printf_float+0x2f4>
 800a8b8:	4a1b      	ldr	r2, [pc, #108]	; (800a928 <_printf_float+0x2f0>)
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4631      	mov	r1, r6
 800a8be:	4628      	mov	r0, r5
 800a8c0:	47b8      	blx	r7
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	f43f af19 	beq.w	800a6fa <_printf_float+0xc2>
 800a8c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d102      	bne.n	800a8d6 <_printf_float+0x29e>
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	07d9      	lsls	r1, r3, #31
 800a8d4:	d5d8      	bpl.n	800a888 <_printf_float+0x250>
 800a8d6:	ee18 3a10 	vmov	r3, s16
 800a8da:	4652      	mov	r2, sl
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b8      	blx	r7
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	f43f af09 	beq.w	800a6fa <_printf_float+0xc2>
 800a8e8:	f04f 0900 	mov.w	r9, #0
 800a8ec:	f104 0a1a 	add.w	sl, r4, #26
 800a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f2:	425b      	negs	r3, r3
 800a8f4:	454b      	cmp	r3, r9
 800a8f6:	dc01      	bgt.n	800a8fc <_printf_float+0x2c4>
 800a8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8fa:	e792      	b.n	800a822 <_printf_float+0x1ea>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	4652      	mov	r2, sl
 800a900:	4631      	mov	r1, r6
 800a902:	4628      	mov	r0, r5
 800a904:	47b8      	blx	r7
 800a906:	3001      	adds	r0, #1
 800a908:	f43f aef7 	beq.w	800a6fa <_printf_float+0xc2>
 800a90c:	f109 0901 	add.w	r9, r9, #1
 800a910:	e7ee      	b.n	800a8f0 <_printf_float+0x2b8>
 800a912:	bf00      	nop
 800a914:	7fefffff 	.word	0x7fefffff
 800a918:	08012ec0 	.word	0x08012ec0
 800a91c:	08012ec4 	.word	0x08012ec4
 800a920:	08012ecc 	.word	0x08012ecc
 800a924:	08012ec8 	.word	0x08012ec8
 800a928:	08012ed0 	.word	0x08012ed0
 800a92c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a92e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a930:	429a      	cmp	r2, r3
 800a932:	bfa8      	it	ge
 800a934:	461a      	movge	r2, r3
 800a936:	2a00      	cmp	r2, #0
 800a938:	4691      	mov	r9, r2
 800a93a:	dc37      	bgt.n	800a9ac <_printf_float+0x374>
 800a93c:	f04f 0b00 	mov.w	fp, #0
 800a940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a944:	f104 021a 	add.w	r2, r4, #26
 800a948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a94a:	9305      	str	r3, [sp, #20]
 800a94c:	eba3 0309 	sub.w	r3, r3, r9
 800a950:	455b      	cmp	r3, fp
 800a952:	dc33      	bgt.n	800a9bc <_printf_float+0x384>
 800a954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a958:	429a      	cmp	r2, r3
 800a95a:	db3b      	blt.n	800a9d4 <_printf_float+0x39c>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	07da      	lsls	r2, r3, #31
 800a960:	d438      	bmi.n	800a9d4 <_printf_float+0x39c>
 800a962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a964:	9b05      	ldr	r3, [sp, #20]
 800a966:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	eba2 0901 	sub.w	r9, r2, r1
 800a96e:	4599      	cmp	r9, r3
 800a970:	bfa8      	it	ge
 800a972:	4699      	movge	r9, r3
 800a974:	f1b9 0f00 	cmp.w	r9, #0
 800a978:	dc35      	bgt.n	800a9e6 <_printf_float+0x3ae>
 800a97a:	f04f 0800 	mov.w	r8, #0
 800a97e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a982:	f104 0a1a 	add.w	sl, r4, #26
 800a986:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a98a:	1a9b      	subs	r3, r3, r2
 800a98c:	eba3 0309 	sub.w	r3, r3, r9
 800a990:	4543      	cmp	r3, r8
 800a992:	f77f af79 	ble.w	800a888 <_printf_float+0x250>
 800a996:	2301      	movs	r3, #1
 800a998:	4652      	mov	r2, sl
 800a99a:	4631      	mov	r1, r6
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b8      	blx	r7
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	f43f aeaa 	beq.w	800a6fa <_printf_float+0xc2>
 800a9a6:	f108 0801 	add.w	r8, r8, #1
 800a9aa:	e7ec      	b.n	800a986 <_printf_float+0x34e>
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	4642      	mov	r2, r8
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b8      	blx	r7
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d1c0      	bne.n	800a93c <_printf_float+0x304>
 800a9ba:	e69e      	b.n	800a6fa <_printf_float+0xc2>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	9205      	str	r2, [sp, #20]
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	f43f ae97 	beq.w	800a6fa <_printf_float+0xc2>
 800a9cc:	9a05      	ldr	r2, [sp, #20]
 800a9ce:	f10b 0b01 	add.w	fp, fp, #1
 800a9d2:	e7b9      	b.n	800a948 <_printf_float+0x310>
 800a9d4:	ee18 3a10 	vmov	r3, s16
 800a9d8:	4652      	mov	r2, sl
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4628      	mov	r0, r5
 800a9de:	47b8      	blx	r7
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d1be      	bne.n	800a962 <_printf_float+0x32a>
 800a9e4:	e689      	b.n	800a6fa <_printf_float+0xc2>
 800a9e6:	9a05      	ldr	r2, [sp, #20]
 800a9e8:	464b      	mov	r3, r9
 800a9ea:	4442      	add	r2, r8
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	47b8      	blx	r7
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	d1c1      	bne.n	800a97a <_printf_float+0x342>
 800a9f6:	e680      	b.n	800a6fa <_printf_float+0xc2>
 800a9f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9fa:	2a01      	cmp	r2, #1
 800a9fc:	dc01      	bgt.n	800aa02 <_printf_float+0x3ca>
 800a9fe:	07db      	lsls	r3, r3, #31
 800aa00:	d538      	bpl.n	800aa74 <_printf_float+0x43c>
 800aa02:	2301      	movs	r3, #1
 800aa04:	4642      	mov	r2, r8
 800aa06:	4631      	mov	r1, r6
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b8      	blx	r7
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	f43f ae74 	beq.w	800a6fa <_printf_float+0xc2>
 800aa12:	ee18 3a10 	vmov	r3, s16
 800aa16:	4652      	mov	r2, sl
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f43f ae6b 	beq.w	800a6fa <_printf_float+0xc2>
 800aa24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f7f6 f85c 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa30:	b9d8      	cbnz	r0, 800aa6a <_printf_float+0x432>
 800aa32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa34:	f108 0201 	add.w	r2, r8, #1
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	47b8      	blx	r7
 800aa40:	3001      	adds	r0, #1
 800aa42:	d10e      	bne.n	800aa62 <_printf_float+0x42a>
 800aa44:	e659      	b.n	800a6fa <_printf_float+0xc2>
 800aa46:	2301      	movs	r3, #1
 800aa48:	4652      	mov	r2, sl
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	f43f ae52 	beq.w	800a6fa <_printf_float+0xc2>
 800aa56:	f108 0801 	add.w	r8, r8, #1
 800aa5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	4543      	cmp	r3, r8
 800aa60:	dcf1      	bgt.n	800aa46 <_printf_float+0x40e>
 800aa62:	464b      	mov	r3, r9
 800aa64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa68:	e6dc      	b.n	800a824 <_printf_float+0x1ec>
 800aa6a:	f04f 0800 	mov.w	r8, #0
 800aa6e:	f104 0a1a 	add.w	sl, r4, #26
 800aa72:	e7f2      	b.n	800aa5a <_printf_float+0x422>
 800aa74:	2301      	movs	r3, #1
 800aa76:	4642      	mov	r2, r8
 800aa78:	e7df      	b.n	800aa3a <_printf_float+0x402>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	464a      	mov	r2, r9
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	f43f ae38 	beq.w	800a6fa <_printf_float+0xc2>
 800aa8a:	f108 0801 	add.w	r8, r8, #1
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa92:	1a5b      	subs	r3, r3, r1
 800aa94:	4543      	cmp	r3, r8
 800aa96:	dcf0      	bgt.n	800aa7a <_printf_float+0x442>
 800aa98:	e6fa      	b.n	800a890 <_printf_float+0x258>
 800aa9a:	f04f 0800 	mov.w	r8, #0
 800aa9e:	f104 0919 	add.w	r9, r4, #25
 800aaa2:	e7f4      	b.n	800aa8e <_printf_float+0x456>

0800aaa4 <_printf_common>:
 800aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa8:	4616      	mov	r6, r2
 800aaaa:	4699      	mov	r9, r3
 800aaac:	688a      	ldr	r2, [r1, #8]
 800aaae:	690b      	ldr	r3, [r1, #16]
 800aab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aab4:	4293      	cmp	r3, r2
 800aab6:	bfb8      	it	lt
 800aab8:	4613      	movlt	r3, r2
 800aaba:	6033      	str	r3, [r6, #0]
 800aabc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aac0:	4607      	mov	r7, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	b10a      	cbz	r2, 800aaca <_printf_common+0x26>
 800aac6:	3301      	adds	r3, #1
 800aac8:	6033      	str	r3, [r6, #0]
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	0699      	lsls	r1, r3, #26
 800aace:	bf42      	ittt	mi
 800aad0:	6833      	ldrmi	r3, [r6, #0]
 800aad2:	3302      	addmi	r3, #2
 800aad4:	6033      	strmi	r3, [r6, #0]
 800aad6:	6825      	ldr	r5, [r4, #0]
 800aad8:	f015 0506 	ands.w	r5, r5, #6
 800aadc:	d106      	bne.n	800aaec <_printf_common+0x48>
 800aade:	f104 0a19 	add.w	sl, r4, #25
 800aae2:	68e3      	ldr	r3, [r4, #12]
 800aae4:	6832      	ldr	r2, [r6, #0]
 800aae6:	1a9b      	subs	r3, r3, r2
 800aae8:	42ab      	cmp	r3, r5
 800aaea:	dc26      	bgt.n	800ab3a <_printf_common+0x96>
 800aaec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaf0:	1e13      	subs	r3, r2, #0
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	bf18      	it	ne
 800aaf6:	2301      	movne	r3, #1
 800aaf8:	0692      	lsls	r2, r2, #26
 800aafa:	d42b      	bmi.n	800ab54 <_printf_common+0xb0>
 800aafc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab00:	4649      	mov	r1, r9
 800ab02:	4638      	mov	r0, r7
 800ab04:	47c0      	blx	r8
 800ab06:	3001      	adds	r0, #1
 800ab08:	d01e      	beq.n	800ab48 <_printf_common+0xa4>
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	68e5      	ldr	r5, [r4, #12]
 800ab0e:	6832      	ldr	r2, [r6, #0]
 800ab10:	f003 0306 	and.w	r3, r3, #6
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	bf08      	it	eq
 800ab18:	1aad      	subeq	r5, r5, r2
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	6922      	ldr	r2, [r4, #16]
 800ab1e:	bf0c      	ite	eq
 800ab20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab24:	2500      	movne	r5, #0
 800ab26:	4293      	cmp	r3, r2
 800ab28:	bfc4      	itt	gt
 800ab2a:	1a9b      	subgt	r3, r3, r2
 800ab2c:	18ed      	addgt	r5, r5, r3
 800ab2e:	2600      	movs	r6, #0
 800ab30:	341a      	adds	r4, #26
 800ab32:	42b5      	cmp	r5, r6
 800ab34:	d11a      	bne.n	800ab6c <_printf_common+0xc8>
 800ab36:	2000      	movs	r0, #0
 800ab38:	e008      	b.n	800ab4c <_printf_common+0xa8>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4652      	mov	r2, sl
 800ab3e:	4649      	mov	r1, r9
 800ab40:	4638      	mov	r0, r7
 800ab42:	47c0      	blx	r8
 800ab44:	3001      	adds	r0, #1
 800ab46:	d103      	bne.n	800ab50 <_printf_common+0xac>
 800ab48:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab50:	3501      	adds	r5, #1
 800ab52:	e7c6      	b.n	800aae2 <_printf_common+0x3e>
 800ab54:	18e1      	adds	r1, r4, r3
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	2030      	movs	r0, #48	; 0x30
 800ab5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab5e:	4422      	add	r2, r4
 800ab60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab68:	3302      	adds	r3, #2
 800ab6a:	e7c7      	b.n	800aafc <_printf_common+0x58>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	4622      	mov	r2, r4
 800ab70:	4649      	mov	r1, r9
 800ab72:	4638      	mov	r0, r7
 800ab74:	47c0      	blx	r8
 800ab76:	3001      	adds	r0, #1
 800ab78:	d0e6      	beq.n	800ab48 <_printf_common+0xa4>
 800ab7a:	3601      	adds	r6, #1
 800ab7c:	e7d9      	b.n	800ab32 <_printf_common+0x8e>
	...

0800ab80 <_printf_i>:
 800ab80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab84:	460c      	mov	r4, r1
 800ab86:	4691      	mov	r9, r2
 800ab88:	7e27      	ldrb	r7, [r4, #24]
 800ab8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab8c:	2f78      	cmp	r7, #120	; 0x78
 800ab8e:	4680      	mov	r8, r0
 800ab90:	469a      	mov	sl, r3
 800ab92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab96:	d807      	bhi.n	800aba8 <_printf_i+0x28>
 800ab98:	2f62      	cmp	r7, #98	; 0x62
 800ab9a:	d80a      	bhi.n	800abb2 <_printf_i+0x32>
 800ab9c:	2f00      	cmp	r7, #0
 800ab9e:	f000 80d8 	beq.w	800ad52 <_printf_i+0x1d2>
 800aba2:	2f58      	cmp	r7, #88	; 0x58
 800aba4:	f000 80a3 	beq.w	800acee <_printf_i+0x16e>
 800aba8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abb0:	e03a      	b.n	800ac28 <_printf_i+0xa8>
 800abb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abb6:	2b15      	cmp	r3, #21
 800abb8:	d8f6      	bhi.n	800aba8 <_printf_i+0x28>
 800abba:	a001      	add	r0, pc, #4	; (adr r0, 800abc0 <_printf_i+0x40>)
 800abbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abc0:	0800ac19 	.word	0x0800ac19
 800abc4:	0800ac2d 	.word	0x0800ac2d
 800abc8:	0800aba9 	.word	0x0800aba9
 800abcc:	0800aba9 	.word	0x0800aba9
 800abd0:	0800aba9 	.word	0x0800aba9
 800abd4:	0800aba9 	.word	0x0800aba9
 800abd8:	0800ac2d 	.word	0x0800ac2d
 800abdc:	0800aba9 	.word	0x0800aba9
 800abe0:	0800aba9 	.word	0x0800aba9
 800abe4:	0800aba9 	.word	0x0800aba9
 800abe8:	0800aba9 	.word	0x0800aba9
 800abec:	0800ad39 	.word	0x0800ad39
 800abf0:	0800ac5d 	.word	0x0800ac5d
 800abf4:	0800ad1b 	.word	0x0800ad1b
 800abf8:	0800aba9 	.word	0x0800aba9
 800abfc:	0800aba9 	.word	0x0800aba9
 800ac00:	0800ad5b 	.word	0x0800ad5b
 800ac04:	0800aba9 	.word	0x0800aba9
 800ac08:	0800ac5d 	.word	0x0800ac5d
 800ac0c:	0800aba9 	.word	0x0800aba9
 800ac10:	0800aba9 	.word	0x0800aba9
 800ac14:	0800ad23 	.word	0x0800ad23
 800ac18:	680b      	ldr	r3, [r1, #0]
 800ac1a:	1d1a      	adds	r2, r3, #4
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	600a      	str	r2, [r1, #0]
 800ac20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e0a3      	b.n	800ad74 <_printf_i+0x1f4>
 800ac2c:	6825      	ldr	r5, [r4, #0]
 800ac2e:	6808      	ldr	r0, [r1, #0]
 800ac30:	062e      	lsls	r6, r5, #24
 800ac32:	f100 0304 	add.w	r3, r0, #4
 800ac36:	d50a      	bpl.n	800ac4e <_printf_i+0xce>
 800ac38:	6805      	ldr	r5, [r0, #0]
 800ac3a:	600b      	str	r3, [r1, #0]
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	da03      	bge.n	800ac48 <_printf_i+0xc8>
 800ac40:	232d      	movs	r3, #45	; 0x2d
 800ac42:	426d      	negs	r5, r5
 800ac44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac48:	485e      	ldr	r0, [pc, #376]	; (800adc4 <_printf_i+0x244>)
 800ac4a:	230a      	movs	r3, #10
 800ac4c:	e019      	b.n	800ac82 <_printf_i+0x102>
 800ac4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac52:	6805      	ldr	r5, [r0, #0]
 800ac54:	600b      	str	r3, [r1, #0]
 800ac56:	bf18      	it	ne
 800ac58:	b22d      	sxthne	r5, r5
 800ac5a:	e7ef      	b.n	800ac3c <_printf_i+0xbc>
 800ac5c:	680b      	ldr	r3, [r1, #0]
 800ac5e:	6825      	ldr	r5, [r4, #0]
 800ac60:	1d18      	adds	r0, r3, #4
 800ac62:	6008      	str	r0, [r1, #0]
 800ac64:	0628      	lsls	r0, r5, #24
 800ac66:	d501      	bpl.n	800ac6c <_printf_i+0xec>
 800ac68:	681d      	ldr	r5, [r3, #0]
 800ac6a:	e002      	b.n	800ac72 <_printf_i+0xf2>
 800ac6c:	0669      	lsls	r1, r5, #25
 800ac6e:	d5fb      	bpl.n	800ac68 <_printf_i+0xe8>
 800ac70:	881d      	ldrh	r5, [r3, #0]
 800ac72:	4854      	ldr	r0, [pc, #336]	; (800adc4 <_printf_i+0x244>)
 800ac74:	2f6f      	cmp	r7, #111	; 0x6f
 800ac76:	bf0c      	ite	eq
 800ac78:	2308      	moveq	r3, #8
 800ac7a:	230a      	movne	r3, #10
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac82:	6866      	ldr	r6, [r4, #4]
 800ac84:	60a6      	str	r6, [r4, #8]
 800ac86:	2e00      	cmp	r6, #0
 800ac88:	bfa2      	ittt	ge
 800ac8a:	6821      	ldrge	r1, [r4, #0]
 800ac8c:	f021 0104 	bicge.w	r1, r1, #4
 800ac90:	6021      	strge	r1, [r4, #0]
 800ac92:	b90d      	cbnz	r5, 800ac98 <_printf_i+0x118>
 800ac94:	2e00      	cmp	r6, #0
 800ac96:	d04d      	beq.n	800ad34 <_printf_i+0x1b4>
 800ac98:	4616      	mov	r6, r2
 800ac9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac9e:	fb03 5711 	mls	r7, r3, r1, r5
 800aca2:	5dc7      	ldrb	r7, [r0, r7]
 800aca4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aca8:	462f      	mov	r7, r5
 800acaa:	42bb      	cmp	r3, r7
 800acac:	460d      	mov	r5, r1
 800acae:	d9f4      	bls.n	800ac9a <_printf_i+0x11a>
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d10b      	bne.n	800accc <_printf_i+0x14c>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	07df      	lsls	r7, r3, #31
 800acb8:	d508      	bpl.n	800accc <_printf_i+0x14c>
 800acba:	6923      	ldr	r3, [r4, #16]
 800acbc:	6861      	ldr	r1, [r4, #4]
 800acbe:	4299      	cmp	r1, r3
 800acc0:	bfde      	ittt	le
 800acc2:	2330      	movle	r3, #48	; 0x30
 800acc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800accc:	1b92      	subs	r2, r2, r6
 800acce:	6122      	str	r2, [r4, #16]
 800acd0:	f8cd a000 	str.w	sl, [sp]
 800acd4:	464b      	mov	r3, r9
 800acd6:	aa03      	add	r2, sp, #12
 800acd8:	4621      	mov	r1, r4
 800acda:	4640      	mov	r0, r8
 800acdc:	f7ff fee2 	bl	800aaa4 <_printf_common>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d14c      	bne.n	800ad7e <_printf_i+0x1fe>
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295
 800ace8:	b004      	add	sp, #16
 800acea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acee:	4835      	ldr	r0, [pc, #212]	; (800adc4 <_printf_i+0x244>)
 800acf0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	680e      	ldr	r6, [r1, #0]
 800acf8:	061f      	lsls	r7, r3, #24
 800acfa:	f856 5b04 	ldr.w	r5, [r6], #4
 800acfe:	600e      	str	r6, [r1, #0]
 800ad00:	d514      	bpl.n	800ad2c <_printf_i+0x1ac>
 800ad02:	07d9      	lsls	r1, r3, #31
 800ad04:	bf44      	itt	mi
 800ad06:	f043 0320 	orrmi.w	r3, r3, #32
 800ad0a:	6023      	strmi	r3, [r4, #0]
 800ad0c:	b91d      	cbnz	r5, 800ad16 <_printf_i+0x196>
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	f023 0320 	bic.w	r3, r3, #32
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	2310      	movs	r3, #16
 800ad18:	e7b0      	b.n	800ac7c <_printf_i+0xfc>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	f043 0320 	orr.w	r3, r3, #32
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	2378      	movs	r3, #120	; 0x78
 800ad24:	4828      	ldr	r0, [pc, #160]	; (800adc8 <_printf_i+0x248>)
 800ad26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad2a:	e7e3      	b.n	800acf4 <_printf_i+0x174>
 800ad2c:	065e      	lsls	r6, r3, #25
 800ad2e:	bf48      	it	mi
 800ad30:	b2ad      	uxthmi	r5, r5
 800ad32:	e7e6      	b.n	800ad02 <_printf_i+0x182>
 800ad34:	4616      	mov	r6, r2
 800ad36:	e7bb      	b.n	800acb0 <_printf_i+0x130>
 800ad38:	680b      	ldr	r3, [r1, #0]
 800ad3a:	6826      	ldr	r6, [r4, #0]
 800ad3c:	6960      	ldr	r0, [r4, #20]
 800ad3e:	1d1d      	adds	r5, r3, #4
 800ad40:	600d      	str	r5, [r1, #0]
 800ad42:	0635      	lsls	r5, r6, #24
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	d501      	bpl.n	800ad4c <_printf_i+0x1cc>
 800ad48:	6018      	str	r0, [r3, #0]
 800ad4a:	e002      	b.n	800ad52 <_printf_i+0x1d2>
 800ad4c:	0671      	lsls	r1, r6, #25
 800ad4e:	d5fb      	bpl.n	800ad48 <_printf_i+0x1c8>
 800ad50:	8018      	strh	r0, [r3, #0]
 800ad52:	2300      	movs	r3, #0
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	4616      	mov	r6, r2
 800ad58:	e7ba      	b.n	800acd0 <_printf_i+0x150>
 800ad5a:	680b      	ldr	r3, [r1, #0]
 800ad5c:	1d1a      	adds	r2, r3, #4
 800ad5e:	600a      	str	r2, [r1, #0]
 800ad60:	681e      	ldr	r6, [r3, #0]
 800ad62:	6862      	ldr	r2, [r4, #4]
 800ad64:	2100      	movs	r1, #0
 800ad66:	4630      	mov	r0, r6
 800ad68:	f7f5 fa4a 	bl	8000200 <memchr>
 800ad6c:	b108      	cbz	r0, 800ad72 <_printf_i+0x1f2>
 800ad6e:	1b80      	subs	r0, r0, r6
 800ad70:	6060      	str	r0, [r4, #4]
 800ad72:	6863      	ldr	r3, [r4, #4]
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	2300      	movs	r3, #0
 800ad78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad7c:	e7a8      	b.n	800acd0 <_printf_i+0x150>
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	4632      	mov	r2, r6
 800ad82:	4649      	mov	r1, r9
 800ad84:	4640      	mov	r0, r8
 800ad86:	47d0      	blx	sl
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d0ab      	beq.n	800ace4 <_printf_i+0x164>
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	079b      	lsls	r3, r3, #30
 800ad90:	d413      	bmi.n	800adba <_printf_i+0x23a>
 800ad92:	68e0      	ldr	r0, [r4, #12]
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	4298      	cmp	r0, r3
 800ad98:	bfb8      	it	lt
 800ad9a:	4618      	movlt	r0, r3
 800ad9c:	e7a4      	b.n	800ace8 <_printf_i+0x168>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	4632      	mov	r2, r6
 800ada2:	4649      	mov	r1, r9
 800ada4:	4640      	mov	r0, r8
 800ada6:	47d0      	blx	sl
 800ada8:	3001      	adds	r0, #1
 800adaa:	d09b      	beq.n	800ace4 <_printf_i+0x164>
 800adac:	3501      	adds	r5, #1
 800adae:	68e3      	ldr	r3, [r4, #12]
 800adb0:	9903      	ldr	r1, [sp, #12]
 800adb2:	1a5b      	subs	r3, r3, r1
 800adb4:	42ab      	cmp	r3, r5
 800adb6:	dcf2      	bgt.n	800ad9e <_printf_i+0x21e>
 800adb8:	e7eb      	b.n	800ad92 <_printf_i+0x212>
 800adba:	2500      	movs	r5, #0
 800adbc:	f104 0619 	add.w	r6, r4, #25
 800adc0:	e7f5      	b.n	800adae <_printf_i+0x22e>
 800adc2:	bf00      	nop
 800adc4:	08012ed2 	.word	0x08012ed2
 800adc8:	08012ee3 	.word	0x08012ee3

0800adcc <sniprintf>:
 800adcc:	b40c      	push	{r2, r3}
 800adce:	b530      	push	{r4, r5, lr}
 800add0:	4b17      	ldr	r3, [pc, #92]	; (800ae30 <sniprintf+0x64>)
 800add2:	1e0c      	subs	r4, r1, #0
 800add4:	681d      	ldr	r5, [r3, #0]
 800add6:	b09d      	sub	sp, #116	; 0x74
 800add8:	da08      	bge.n	800adec <sniprintf+0x20>
 800adda:	238b      	movs	r3, #139	; 0x8b
 800addc:	602b      	str	r3, [r5, #0]
 800adde:	f04f 30ff 	mov.w	r0, #4294967295
 800ade2:	b01d      	add	sp, #116	; 0x74
 800ade4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ade8:	b002      	add	sp, #8
 800adea:	4770      	bx	lr
 800adec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800adf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adf4:	bf14      	ite	ne
 800adf6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800adfa:	4623      	moveq	r3, r4
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	9307      	str	r3, [sp, #28]
 800ae00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae04:	9002      	str	r0, [sp, #8]
 800ae06:	9006      	str	r0, [sp, #24]
 800ae08:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ae0e:	ab21      	add	r3, sp, #132	; 0x84
 800ae10:	a902      	add	r1, sp, #8
 800ae12:	4628      	mov	r0, r5
 800ae14:	9301      	str	r3, [sp, #4]
 800ae16:	f001 fb35 	bl	800c484 <_svfiprintf_r>
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	bfbc      	itt	lt
 800ae1e:	238b      	movlt	r3, #139	; 0x8b
 800ae20:	602b      	strlt	r3, [r5, #0]
 800ae22:	2c00      	cmp	r4, #0
 800ae24:	d0dd      	beq.n	800ade2 <sniprintf+0x16>
 800ae26:	9b02      	ldr	r3, [sp, #8]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	701a      	strb	r2, [r3, #0]
 800ae2c:	e7d9      	b.n	800ade2 <sniprintf+0x16>
 800ae2e:	bf00      	nop
 800ae30:	200002b0 	.word	0x200002b0

0800ae34 <quorem>:
 800ae34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	6903      	ldr	r3, [r0, #16]
 800ae3a:	690c      	ldr	r4, [r1, #16]
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	4607      	mov	r7, r0
 800ae40:	f2c0 8081 	blt.w	800af46 <quorem+0x112>
 800ae44:	3c01      	subs	r4, #1
 800ae46:	f101 0814 	add.w	r8, r1, #20
 800ae4a:	f100 0514 	add.w	r5, r0, #20
 800ae4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae68:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae6c:	d331      	bcc.n	800aed2 <quorem+0x9e>
 800ae6e:	f04f 0e00 	mov.w	lr, #0
 800ae72:	4640      	mov	r0, r8
 800ae74:	46ac      	mov	ip, r5
 800ae76:	46f2      	mov	sl, lr
 800ae78:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae7c:	b293      	uxth	r3, r2
 800ae7e:	fb06 e303 	mla	r3, r6, r3, lr
 800ae82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	ebaa 0303 	sub.w	r3, sl, r3
 800ae8c:	0c12      	lsrs	r2, r2, #16
 800ae8e:	f8dc a000 	ldr.w	sl, [ip]
 800ae92:	fb06 e202 	mla	r2, r6, r2, lr
 800ae96:	fa13 f38a 	uxtah	r3, r3, sl
 800ae9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae9e:	fa1f fa82 	uxth.w	sl, r2
 800aea2:	f8dc 2000 	ldr.w	r2, [ip]
 800aea6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800aeaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeb4:	4581      	cmp	r9, r0
 800aeb6:	f84c 3b04 	str.w	r3, [ip], #4
 800aeba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aebe:	d2db      	bcs.n	800ae78 <quorem+0x44>
 800aec0:	f855 300b 	ldr.w	r3, [r5, fp]
 800aec4:	b92b      	cbnz	r3, 800aed2 <quorem+0x9e>
 800aec6:	9b01      	ldr	r3, [sp, #4]
 800aec8:	3b04      	subs	r3, #4
 800aeca:	429d      	cmp	r5, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	d32e      	bcc.n	800af2e <quorem+0xfa>
 800aed0:	613c      	str	r4, [r7, #16]
 800aed2:	4638      	mov	r0, r7
 800aed4:	f001 f8c0 	bl	800c058 <__mcmp>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	db24      	blt.n	800af26 <quorem+0xf2>
 800aedc:	3601      	adds	r6, #1
 800aede:	4628      	mov	r0, r5
 800aee0:	f04f 0c00 	mov.w	ip, #0
 800aee4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aee8:	f8d0 e000 	ldr.w	lr, [r0]
 800aeec:	b293      	uxth	r3, r2
 800aeee:	ebac 0303 	sub.w	r3, ip, r3
 800aef2:	0c12      	lsrs	r2, r2, #16
 800aef4:	fa13 f38e 	uxtah	r3, r3, lr
 800aef8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aefc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af00:	b29b      	uxth	r3, r3
 800af02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af06:	45c1      	cmp	r9, r8
 800af08:	f840 3b04 	str.w	r3, [r0], #4
 800af0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af10:	d2e8      	bcs.n	800aee4 <quorem+0xb0>
 800af12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af1a:	b922      	cbnz	r2, 800af26 <quorem+0xf2>
 800af1c:	3b04      	subs	r3, #4
 800af1e:	429d      	cmp	r5, r3
 800af20:	461a      	mov	r2, r3
 800af22:	d30a      	bcc.n	800af3a <quorem+0x106>
 800af24:	613c      	str	r4, [r7, #16]
 800af26:	4630      	mov	r0, r6
 800af28:	b003      	add	sp, #12
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2e:	6812      	ldr	r2, [r2, #0]
 800af30:	3b04      	subs	r3, #4
 800af32:	2a00      	cmp	r2, #0
 800af34:	d1cc      	bne.n	800aed0 <quorem+0x9c>
 800af36:	3c01      	subs	r4, #1
 800af38:	e7c7      	b.n	800aeca <quorem+0x96>
 800af3a:	6812      	ldr	r2, [r2, #0]
 800af3c:	3b04      	subs	r3, #4
 800af3e:	2a00      	cmp	r2, #0
 800af40:	d1f0      	bne.n	800af24 <quorem+0xf0>
 800af42:	3c01      	subs	r4, #1
 800af44:	e7eb      	b.n	800af1e <quorem+0xea>
 800af46:	2000      	movs	r0, #0
 800af48:	e7ee      	b.n	800af28 <quorem+0xf4>
 800af4a:	0000      	movs	r0, r0
 800af4c:	0000      	movs	r0, r0
	...

0800af50 <_dtoa_r>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	ed2d 8b02 	vpush	{d8}
 800af58:	ec57 6b10 	vmov	r6, r7, d0
 800af5c:	b095      	sub	sp, #84	; 0x54
 800af5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af64:	9105      	str	r1, [sp, #20]
 800af66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800af6a:	4604      	mov	r4, r0
 800af6c:	9209      	str	r2, [sp, #36]	; 0x24
 800af6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af70:	b975      	cbnz	r5, 800af90 <_dtoa_r+0x40>
 800af72:	2010      	movs	r0, #16
 800af74:	f000 fddc 	bl	800bb30 <malloc>
 800af78:	4602      	mov	r2, r0
 800af7a:	6260      	str	r0, [r4, #36]	; 0x24
 800af7c:	b920      	cbnz	r0, 800af88 <_dtoa_r+0x38>
 800af7e:	4bb2      	ldr	r3, [pc, #712]	; (800b248 <_dtoa_r+0x2f8>)
 800af80:	21ea      	movs	r1, #234	; 0xea
 800af82:	48b2      	ldr	r0, [pc, #712]	; (800b24c <_dtoa_r+0x2fc>)
 800af84:	f001 fb8e 	bl	800c6a4 <__assert_func>
 800af88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af8c:	6005      	str	r5, [r0, #0]
 800af8e:	60c5      	str	r5, [r0, #12]
 800af90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	b151      	cbz	r1, 800afac <_dtoa_r+0x5c>
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	604a      	str	r2, [r1, #4]
 800af9a:	2301      	movs	r3, #1
 800af9c:	4093      	lsls	r3, r2
 800af9e:	608b      	str	r3, [r1, #8]
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 fe1b 	bl	800bbdc <_Bfree>
 800afa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afa8:	2200      	movs	r2, #0
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	1e3b      	subs	r3, r7, #0
 800afae:	bfb9      	ittee	lt
 800afb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800afb4:	9303      	strlt	r3, [sp, #12]
 800afb6:	2300      	movge	r3, #0
 800afb8:	f8c8 3000 	strge.w	r3, [r8]
 800afbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800afc0:	4ba3      	ldr	r3, [pc, #652]	; (800b250 <_dtoa_r+0x300>)
 800afc2:	bfbc      	itt	lt
 800afc4:	2201      	movlt	r2, #1
 800afc6:	f8c8 2000 	strlt.w	r2, [r8]
 800afca:	ea33 0309 	bics.w	r3, r3, r9
 800afce:	d11b      	bne.n	800b008 <_dtoa_r+0xb8>
 800afd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afd2:	f242 730f 	movw	r3, #9999	; 0x270f
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afdc:	4333      	orrs	r3, r6
 800afde:	f000 857a 	beq.w	800bad6 <_dtoa_r+0xb86>
 800afe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afe4:	b963      	cbnz	r3, 800b000 <_dtoa_r+0xb0>
 800afe6:	4b9b      	ldr	r3, [pc, #620]	; (800b254 <_dtoa_r+0x304>)
 800afe8:	e024      	b.n	800b034 <_dtoa_r+0xe4>
 800afea:	4b9b      	ldr	r3, [pc, #620]	; (800b258 <_dtoa_r+0x308>)
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	3308      	adds	r3, #8
 800aff0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	9800      	ldr	r0, [sp, #0]
 800aff6:	b015      	add	sp, #84	; 0x54
 800aff8:	ecbd 8b02 	vpop	{d8}
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b000:	4b94      	ldr	r3, [pc, #592]	; (800b254 <_dtoa_r+0x304>)
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	3303      	adds	r3, #3
 800b006:	e7f3      	b.n	800aff0 <_dtoa_r+0xa0>
 800b008:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b00c:	2200      	movs	r2, #0
 800b00e:	ec51 0b17 	vmov	r0, r1, d7
 800b012:	2300      	movs	r3, #0
 800b014:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b018:	f7f5 fd66 	bl	8000ae8 <__aeabi_dcmpeq>
 800b01c:	4680      	mov	r8, r0
 800b01e:	b158      	cbz	r0, 800b038 <_dtoa_r+0xe8>
 800b020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b022:	2301      	movs	r3, #1
 800b024:	6013      	str	r3, [r2, #0]
 800b026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8551 	beq.w	800bad0 <_dtoa_r+0xb80>
 800b02e:	488b      	ldr	r0, [pc, #556]	; (800b25c <_dtoa_r+0x30c>)
 800b030:	6018      	str	r0, [r3, #0]
 800b032:	1e43      	subs	r3, r0, #1
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	e7dd      	b.n	800aff4 <_dtoa_r+0xa4>
 800b038:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b03c:	aa12      	add	r2, sp, #72	; 0x48
 800b03e:	a913      	add	r1, sp, #76	; 0x4c
 800b040:	4620      	mov	r0, r4
 800b042:	f001 f8ad 	bl	800c1a0 <__d2b>
 800b046:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b04a:	4683      	mov	fp, r0
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	d07c      	beq.n	800b14a <_dtoa_r+0x1fa>
 800b050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b052:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b05a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b05e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b062:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b06a:	4b7d      	ldr	r3, [pc, #500]	; (800b260 <_dtoa_r+0x310>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	4630      	mov	r0, r6
 800b070:	4639      	mov	r1, r7
 800b072:	f7f5 f919 	bl	80002a8 <__aeabi_dsub>
 800b076:	a36e      	add	r3, pc, #440	; (adr r3, 800b230 <_dtoa_r+0x2e0>)
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	f7f5 facc 	bl	8000618 <__aeabi_dmul>
 800b080:	a36d      	add	r3, pc, #436	; (adr r3, 800b238 <_dtoa_r+0x2e8>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 f911 	bl	80002ac <__adddf3>
 800b08a:	4606      	mov	r6, r0
 800b08c:	4628      	mov	r0, r5
 800b08e:	460f      	mov	r7, r1
 800b090:	f7f5 fa58 	bl	8000544 <__aeabi_i2d>
 800b094:	a36a      	add	r3, pc, #424	; (adr r3, 800b240 <_dtoa_r+0x2f0>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	f7f5 fabd 	bl	8000618 <__aeabi_dmul>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	f7f5 f901 	bl	80002ac <__adddf3>
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	f7f5 fd63 	bl	8000b78 <__aeabi_d2iz>
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	4682      	mov	sl, r0
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	f7f5 fd1e 	bl	8000afc <__aeabi_dcmplt>
 800b0c0:	b148      	cbz	r0, 800b0d6 <_dtoa_r+0x186>
 800b0c2:	4650      	mov	r0, sl
 800b0c4:	f7f5 fa3e 	bl	8000544 <__aeabi_i2d>
 800b0c8:	4632      	mov	r2, r6
 800b0ca:	463b      	mov	r3, r7
 800b0cc:	f7f5 fd0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0d0:	b908      	cbnz	r0, 800b0d6 <_dtoa_r+0x186>
 800b0d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0d6:	f1ba 0f16 	cmp.w	sl, #22
 800b0da:	d854      	bhi.n	800b186 <_dtoa_r+0x236>
 800b0dc:	4b61      	ldr	r3, [pc, #388]	; (800b264 <_dtoa_r+0x314>)
 800b0de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0ea:	f7f5 fd07 	bl	8000afc <__aeabi_dcmplt>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d04b      	beq.n	800b18a <_dtoa_r+0x23a>
 800b0f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	930e      	str	r3, [sp, #56]	; 0x38
 800b0fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0fc:	1b5d      	subs	r5, r3, r5
 800b0fe:	1e6b      	subs	r3, r5, #1
 800b100:	9304      	str	r3, [sp, #16]
 800b102:	bf43      	ittte	mi
 800b104:	2300      	movmi	r3, #0
 800b106:	f1c5 0801 	rsbmi	r8, r5, #1
 800b10a:	9304      	strmi	r3, [sp, #16]
 800b10c:	f04f 0800 	movpl.w	r8, #0
 800b110:	f1ba 0f00 	cmp.w	sl, #0
 800b114:	db3b      	blt.n	800b18e <_dtoa_r+0x23e>
 800b116:	9b04      	ldr	r3, [sp, #16]
 800b118:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b11c:	4453      	add	r3, sl
 800b11e:	9304      	str	r3, [sp, #16]
 800b120:	2300      	movs	r3, #0
 800b122:	9306      	str	r3, [sp, #24]
 800b124:	9b05      	ldr	r3, [sp, #20]
 800b126:	2b09      	cmp	r3, #9
 800b128:	d869      	bhi.n	800b1fe <_dtoa_r+0x2ae>
 800b12a:	2b05      	cmp	r3, #5
 800b12c:	bfc4      	itt	gt
 800b12e:	3b04      	subgt	r3, #4
 800b130:	9305      	strgt	r3, [sp, #20]
 800b132:	9b05      	ldr	r3, [sp, #20]
 800b134:	f1a3 0302 	sub.w	r3, r3, #2
 800b138:	bfcc      	ite	gt
 800b13a:	2500      	movgt	r5, #0
 800b13c:	2501      	movle	r5, #1
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d869      	bhi.n	800b216 <_dtoa_r+0x2c6>
 800b142:	e8df f003 	tbb	[pc, r3]
 800b146:	4e2c      	.short	0x4e2c
 800b148:	5a4c      	.short	0x5a4c
 800b14a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b14e:	441d      	add	r5, r3
 800b150:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b154:	2b20      	cmp	r3, #32
 800b156:	bfc1      	itttt	gt
 800b158:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b15c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b160:	fa09 f303 	lslgt.w	r3, r9, r3
 800b164:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b168:	bfda      	itte	le
 800b16a:	f1c3 0320 	rsble	r3, r3, #32
 800b16e:	fa06 f003 	lslle.w	r0, r6, r3
 800b172:	4318      	orrgt	r0, r3
 800b174:	f7f5 f9d6 	bl	8000524 <__aeabi_ui2d>
 800b178:	2301      	movs	r3, #1
 800b17a:	4606      	mov	r6, r0
 800b17c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b180:	3d01      	subs	r5, #1
 800b182:	9310      	str	r3, [sp, #64]	; 0x40
 800b184:	e771      	b.n	800b06a <_dtoa_r+0x11a>
 800b186:	2301      	movs	r3, #1
 800b188:	e7b6      	b.n	800b0f8 <_dtoa_r+0x1a8>
 800b18a:	900e      	str	r0, [sp, #56]	; 0x38
 800b18c:	e7b5      	b.n	800b0fa <_dtoa_r+0x1aa>
 800b18e:	f1ca 0300 	rsb	r3, sl, #0
 800b192:	9306      	str	r3, [sp, #24]
 800b194:	2300      	movs	r3, #0
 800b196:	eba8 080a 	sub.w	r8, r8, sl
 800b19a:	930d      	str	r3, [sp, #52]	; 0x34
 800b19c:	e7c2      	b.n	800b124 <_dtoa_r+0x1d4>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	9308      	str	r3, [sp, #32]
 800b1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dc39      	bgt.n	800b21c <_dtoa_r+0x2cc>
 800b1a8:	f04f 0901 	mov.w	r9, #1
 800b1ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1b0:	464b      	mov	r3, r9
 800b1b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b1b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	6042      	str	r2, [r0, #4]
 800b1bc:	2204      	movs	r2, #4
 800b1be:	f102 0614 	add.w	r6, r2, #20
 800b1c2:	429e      	cmp	r6, r3
 800b1c4:	6841      	ldr	r1, [r0, #4]
 800b1c6:	d92f      	bls.n	800b228 <_dtoa_r+0x2d8>
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 fcc7 	bl	800bb5c <_Balloc>
 800b1ce:	9000      	str	r0, [sp, #0]
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d14b      	bne.n	800b26c <_dtoa_r+0x31c>
 800b1d4:	4b24      	ldr	r3, [pc, #144]	; (800b268 <_dtoa_r+0x318>)
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1dc:	e6d1      	b.n	800af82 <_dtoa_r+0x32>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e7de      	b.n	800b1a0 <_dtoa_r+0x250>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9308      	str	r3, [sp, #32]
 800b1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e8:	eb0a 0903 	add.w	r9, sl, r3
 800b1ec:	f109 0301 	add.w	r3, r9, #1
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	9301      	str	r3, [sp, #4]
 800b1f4:	bfb8      	it	lt
 800b1f6:	2301      	movlt	r3, #1
 800b1f8:	e7dd      	b.n	800b1b6 <_dtoa_r+0x266>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e7f2      	b.n	800b1e4 <_dtoa_r+0x294>
 800b1fe:	2501      	movs	r5, #1
 800b200:	2300      	movs	r3, #0
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	9508      	str	r5, [sp, #32]
 800b206:	f04f 39ff 	mov.w	r9, #4294967295
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b210:	2312      	movs	r3, #18
 800b212:	9209      	str	r2, [sp, #36]	; 0x24
 800b214:	e7cf      	b.n	800b1b6 <_dtoa_r+0x266>
 800b216:	2301      	movs	r3, #1
 800b218:	9308      	str	r3, [sp, #32]
 800b21a:	e7f4      	b.n	800b206 <_dtoa_r+0x2b6>
 800b21c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b220:	f8cd 9004 	str.w	r9, [sp, #4]
 800b224:	464b      	mov	r3, r9
 800b226:	e7c6      	b.n	800b1b6 <_dtoa_r+0x266>
 800b228:	3101      	adds	r1, #1
 800b22a:	6041      	str	r1, [r0, #4]
 800b22c:	0052      	lsls	r2, r2, #1
 800b22e:	e7c6      	b.n	800b1be <_dtoa_r+0x26e>
 800b230:	636f4361 	.word	0x636f4361
 800b234:	3fd287a7 	.word	0x3fd287a7
 800b238:	8b60c8b3 	.word	0x8b60c8b3
 800b23c:	3fc68a28 	.word	0x3fc68a28
 800b240:	509f79fb 	.word	0x509f79fb
 800b244:	3fd34413 	.word	0x3fd34413
 800b248:	08012f01 	.word	0x08012f01
 800b24c:	08012f18 	.word	0x08012f18
 800b250:	7ff00000 	.word	0x7ff00000
 800b254:	08012efd 	.word	0x08012efd
 800b258:	08012ef4 	.word	0x08012ef4
 800b25c:	08012ed1 	.word	0x08012ed1
 800b260:	3ff80000 	.word	0x3ff80000
 800b264:	08013010 	.word	0x08013010
 800b268:	08012f77 	.word	0x08012f77
 800b26c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b26e:	9a00      	ldr	r2, [sp, #0]
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	9b01      	ldr	r3, [sp, #4]
 800b274:	2b0e      	cmp	r3, #14
 800b276:	f200 80ad 	bhi.w	800b3d4 <_dtoa_r+0x484>
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	f000 80aa 	beq.w	800b3d4 <_dtoa_r+0x484>
 800b280:	f1ba 0f00 	cmp.w	sl, #0
 800b284:	dd36      	ble.n	800b2f4 <_dtoa_r+0x3a4>
 800b286:	4ac3      	ldr	r2, [pc, #780]	; (800b594 <_dtoa_r+0x644>)
 800b288:	f00a 030f 	and.w	r3, sl, #15
 800b28c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b290:	ed93 7b00 	vldr	d7, [r3]
 800b294:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b298:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b29c:	eeb0 8a47 	vmov.f32	s16, s14
 800b2a0:	eef0 8a67 	vmov.f32	s17, s15
 800b2a4:	d016      	beq.n	800b2d4 <_dtoa_r+0x384>
 800b2a6:	4bbc      	ldr	r3, [pc, #752]	; (800b598 <_dtoa_r+0x648>)
 800b2a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2b0:	f7f5 fadc 	bl	800086c <__aeabi_ddiv>
 800b2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2b8:	f007 070f 	and.w	r7, r7, #15
 800b2bc:	2503      	movs	r5, #3
 800b2be:	4eb6      	ldr	r6, [pc, #728]	; (800b598 <_dtoa_r+0x648>)
 800b2c0:	b957      	cbnz	r7, 800b2d8 <_dtoa_r+0x388>
 800b2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c6:	ec53 2b18 	vmov	r2, r3, d8
 800b2ca:	f7f5 facf 	bl	800086c <__aeabi_ddiv>
 800b2ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d2:	e029      	b.n	800b328 <_dtoa_r+0x3d8>
 800b2d4:	2502      	movs	r5, #2
 800b2d6:	e7f2      	b.n	800b2be <_dtoa_r+0x36e>
 800b2d8:	07f9      	lsls	r1, r7, #31
 800b2da:	d508      	bpl.n	800b2ee <_dtoa_r+0x39e>
 800b2dc:	ec51 0b18 	vmov	r0, r1, d8
 800b2e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2e4:	f7f5 f998 	bl	8000618 <__aeabi_dmul>
 800b2e8:	ec41 0b18 	vmov	d8, r0, r1
 800b2ec:	3501      	adds	r5, #1
 800b2ee:	107f      	asrs	r7, r7, #1
 800b2f0:	3608      	adds	r6, #8
 800b2f2:	e7e5      	b.n	800b2c0 <_dtoa_r+0x370>
 800b2f4:	f000 80a6 	beq.w	800b444 <_dtoa_r+0x4f4>
 800b2f8:	f1ca 0600 	rsb	r6, sl, #0
 800b2fc:	4ba5      	ldr	r3, [pc, #660]	; (800b594 <_dtoa_r+0x644>)
 800b2fe:	4fa6      	ldr	r7, [pc, #664]	; (800b598 <_dtoa_r+0x648>)
 800b300:	f006 020f 	and.w	r2, r6, #15
 800b304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b310:	f7f5 f982 	bl	8000618 <__aeabi_dmul>
 800b314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b318:	1136      	asrs	r6, r6, #4
 800b31a:	2300      	movs	r3, #0
 800b31c:	2502      	movs	r5, #2
 800b31e:	2e00      	cmp	r6, #0
 800b320:	f040 8085 	bne.w	800b42e <_dtoa_r+0x4de>
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1d2      	bne.n	800b2ce <_dtoa_r+0x37e>
 800b328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 808c 	beq.w	800b448 <_dtoa_r+0x4f8>
 800b330:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b334:	4b99      	ldr	r3, [pc, #612]	; (800b59c <_dtoa_r+0x64c>)
 800b336:	2200      	movs	r2, #0
 800b338:	4630      	mov	r0, r6
 800b33a:	4639      	mov	r1, r7
 800b33c:	f7f5 fbde 	bl	8000afc <__aeabi_dcmplt>
 800b340:	2800      	cmp	r0, #0
 800b342:	f000 8081 	beq.w	800b448 <_dtoa_r+0x4f8>
 800b346:	9b01      	ldr	r3, [sp, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d07d      	beq.n	800b448 <_dtoa_r+0x4f8>
 800b34c:	f1b9 0f00 	cmp.w	r9, #0
 800b350:	dd3c      	ble.n	800b3cc <_dtoa_r+0x47c>
 800b352:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b356:	9307      	str	r3, [sp, #28]
 800b358:	2200      	movs	r2, #0
 800b35a:	4b91      	ldr	r3, [pc, #580]	; (800b5a0 <_dtoa_r+0x650>)
 800b35c:	4630      	mov	r0, r6
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f5 f95a 	bl	8000618 <__aeabi_dmul>
 800b364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b368:	3501      	adds	r5, #1
 800b36a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b36e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b372:	4628      	mov	r0, r5
 800b374:	f7f5 f8e6 	bl	8000544 <__aeabi_i2d>
 800b378:	4632      	mov	r2, r6
 800b37a:	463b      	mov	r3, r7
 800b37c:	f7f5 f94c 	bl	8000618 <__aeabi_dmul>
 800b380:	4b88      	ldr	r3, [pc, #544]	; (800b5a4 <_dtoa_r+0x654>)
 800b382:	2200      	movs	r2, #0
 800b384:	f7f4 ff92 	bl	80002ac <__adddf3>
 800b388:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b38c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b390:	9303      	str	r3, [sp, #12]
 800b392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b394:	2b00      	cmp	r3, #0
 800b396:	d15c      	bne.n	800b452 <_dtoa_r+0x502>
 800b398:	4b83      	ldr	r3, [pc, #524]	; (800b5a8 <_dtoa_r+0x658>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	4630      	mov	r0, r6
 800b39e:	4639      	mov	r1, r7
 800b3a0:	f7f4 ff82 	bl	80002a8 <__aeabi_dsub>
 800b3a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3a8:	4606      	mov	r6, r0
 800b3aa:	460f      	mov	r7, r1
 800b3ac:	f7f5 fbc4 	bl	8000b38 <__aeabi_dcmpgt>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f040 8296 	bne.w	800b8e2 <_dtoa_r+0x992>
 800b3b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3c0:	4639      	mov	r1, r7
 800b3c2:	f7f5 fb9b 	bl	8000afc <__aeabi_dcmplt>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f040 8288 	bne.w	800b8dc <_dtoa_r+0x98c>
 800b3cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f2c0 8158 	blt.w	800b68c <_dtoa_r+0x73c>
 800b3dc:	f1ba 0f0e 	cmp.w	sl, #14
 800b3e0:	f300 8154 	bgt.w	800b68c <_dtoa_r+0x73c>
 800b3e4:	4b6b      	ldr	r3, [pc, #428]	; (800b594 <_dtoa_r+0x644>)
 800b3e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f280 80e3 	bge.w	800b5bc <_dtoa_r+0x66c>
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f300 80df 	bgt.w	800b5bc <_dtoa_r+0x66c>
 800b3fe:	f040 826d 	bne.w	800b8dc <_dtoa_r+0x98c>
 800b402:	4b69      	ldr	r3, [pc, #420]	; (800b5a8 <_dtoa_r+0x658>)
 800b404:	2200      	movs	r2, #0
 800b406:	4640      	mov	r0, r8
 800b408:	4649      	mov	r1, r9
 800b40a:	f7f5 f905 	bl	8000618 <__aeabi_dmul>
 800b40e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b412:	f7f5 fb87 	bl	8000b24 <__aeabi_dcmpge>
 800b416:	9e01      	ldr	r6, [sp, #4]
 800b418:	4637      	mov	r7, r6
 800b41a:	2800      	cmp	r0, #0
 800b41c:	f040 8243 	bne.w	800b8a6 <_dtoa_r+0x956>
 800b420:	9d00      	ldr	r5, [sp, #0]
 800b422:	2331      	movs	r3, #49	; 0x31
 800b424:	f805 3b01 	strb.w	r3, [r5], #1
 800b428:	f10a 0a01 	add.w	sl, sl, #1
 800b42c:	e23f      	b.n	800b8ae <_dtoa_r+0x95e>
 800b42e:	07f2      	lsls	r2, r6, #31
 800b430:	d505      	bpl.n	800b43e <_dtoa_r+0x4ee>
 800b432:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b436:	f7f5 f8ef 	bl	8000618 <__aeabi_dmul>
 800b43a:	3501      	adds	r5, #1
 800b43c:	2301      	movs	r3, #1
 800b43e:	1076      	asrs	r6, r6, #1
 800b440:	3708      	adds	r7, #8
 800b442:	e76c      	b.n	800b31e <_dtoa_r+0x3ce>
 800b444:	2502      	movs	r5, #2
 800b446:	e76f      	b.n	800b328 <_dtoa_r+0x3d8>
 800b448:	9b01      	ldr	r3, [sp, #4]
 800b44a:	f8cd a01c 	str.w	sl, [sp, #28]
 800b44e:	930c      	str	r3, [sp, #48]	; 0x30
 800b450:	e78d      	b.n	800b36e <_dtoa_r+0x41e>
 800b452:	9900      	ldr	r1, [sp, #0]
 800b454:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b458:	4b4e      	ldr	r3, [pc, #312]	; (800b594 <_dtoa_r+0x644>)
 800b45a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b45e:	4401      	add	r1, r0
 800b460:	9102      	str	r1, [sp, #8]
 800b462:	9908      	ldr	r1, [sp, #32]
 800b464:	eeb0 8a47 	vmov.f32	s16, s14
 800b468:	eef0 8a67 	vmov.f32	s17, s15
 800b46c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b470:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b474:	2900      	cmp	r1, #0
 800b476:	d045      	beq.n	800b504 <_dtoa_r+0x5b4>
 800b478:	494c      	ldr	r1, [pc, #304]	; (800b5ac <_dtoa_r+0x65c>)
 800b47a:	2000      	movs	r0, #0
 800b47c:	f7f5 f9f6 	bl	800086c <__aeabi_ddiv>
 800b480:	ec53 2b18 	vmov	r2, r3, d8
 800b484:	f7f4 ff10 	bl	80002a8 <__aeabi_dsub>
 800b488:	9d00      	ldr	r5, [sp, #0]
 800b48a:	ec41 0b18 	vmov	d8, r0, r1
 800b48e:	4639      	mov	r1, r7
 800b490:	4630      	mov	r0, r6
 800b492:	f7f5 fb71 	bl	8000b78 <__aeabi_d2iz>
 800b496:	900c      	str	r0, [sp, #48]	; 0x30
 800b498:	f7f5 f854 	bl	8000544 <__aeabi_i2d>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f4 ff00 	bl	80002a8 <__aeabi_dsub>
 800b4a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4aa:	3330      	adds	r3, #48	; 0x30
 800b4ac:	f805 3b01 	strb.w	r3, [r5], #1
 800b4b0:	ec53 2b18 	vmov	r2, r3, d8
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	460f      	mov	r7, r1
 800b4b8:	f7f5 fb20 	bl	8000afc <__aeabi_dcmplt>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d165      	bne.n	800b58c <_dtoa_r+0x63c>
 800b4c0:	4632      	mov	r2, r6
 800b4c2:	463b      	mov	r3, r7
 800b4c4:	4935      	ldr	r1, [pc, #212]	; (800b59c <_dtoa_r+0x64c>)
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	f7f4 feee 	bl	80002a8 <__aeabi_dsub>
 800b4cc:	ec53 2b18 	vmov	r2, r3, d8
 800b4d0:	f7f5 fb14 	bl	8000afc <__aeabi_dcmplt>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	f040 80b9 	bne.w	800b64c <_dtoa_r+0x6fc>
 800b4da:	9b02      	ldr	r3, [sp, #8]
 800b4dc:	429d      	cmp	r5, r3
 800b4de:	f43f af75 	beq.w	800b3cc <_dtoa_r+0x47c>
 800b4e2:	4b2f      	ldr	r3, [pc, #188]	; (800b5a0 <_dtoa_r+0x650>)
 800b4e4:	ec51 0b18 	vmov	r0, r1, d8
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f7f5 f895 	bl	8000618 <__aeabi_dmul>
 800b4ee:	4b2c      	ldr	r3, [pc, #176]	; (800b5a0 <_dtoa_r+0x650>)
 800b4f0:	ec41 0b18 	vmov	d8, r0, r1
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	f7f5 f88d 	bl	8000618 <__aeabi_dmul>
 800b4fe:	4606      	mov	r6, r0
 800b500:	460f      	mov	r7, r1
 800b502:	e7c4      	b.n	800b48e <_dtoa_r+0x53e>
 800b504:	ec51 0b17 	vmov	r0, r1, d7
 800b508:	f7f5 f886 	bl	8000618 <__aeabi_dmul>
 800b50c:	9b02      	ldr	r3, [sp, #8]
 800b50e:	9d00      	ldr	r5, [sp, #0]
 800b510:	930c      	str	r3, [sp, #48]	; 0x30
 800b512:	ec41 0b18 	vmov	d8, r0, r1
 800b516:	4639      	mov	r1, r7
 800b518:	4630      	mov	r0, r6
 800b51a:	f7f5 fb2d 	bl	8000b78 <__aeabi_d2iz>
 800b51e:	9011      	str	r0, [sp, #68]	; 0x44
 800b520:	f7f5 f810 	bl	8000544 <__aeabi_i2d>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4630      	mov	r0, r6
 800b52a:	4639      	mov	r1, r7
 800b52c:	f7f4 febc 	bl	80002a8 <__aeabi_dsub>
 800b530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b532:	3330      	adds	r3, #48	; 0x30
 800b534:	f805 3b01 	strb.w	r3, [r5], #1
 800b538:	9b02      	ldr	r3, [sp, #8]
 800b53a:	429d      	cmp	r5, r3
 800b53c:	4606      	mov	r6, r0
 800b53e:	460f      	mov	r7, r1
 800b540:	f04f 0200 	mov.w	r2, #0
 800b544:	d134      	bne.n	800b5b0 <_dtoa_r+0x660>
 800b546:	4b19      	ldr	r3, [pc, #100]	; (800b5ac <_dtoa_r+0x65c>)
 800b548:	ec51 0b18 	vmov	r0, r1, d8
 800b54c:	f7f4 feae 	bl	80002ac <__adddf3>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4630      	mov	r0, r6
 800b556:	4639      	mov	r1, r7
 800b558:	f7f5 faee 	bl	8000b38 <__aeabi_dcmpgt>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d175      	bne.n	800b64c <_dtoa_r+0x6fc>
 800b560:	ec53 2b18 	vmov	r2, r3, d8
 800b564:	4911      	ldr	r1, [pc, #68]	; (800b5ac <_dtoa_r+0x65c>)
 800b566:	2000      	movs	r0, #0
 800b568:	f7f4 fe9e 	bl	80002a8 <__aeabi_dsub>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4630      	mov	r0, r6
 800b572:	4639      	mov	r1, r7
 800b574:	f7f5 fac2 	bl	8000afc <__aeabi_dcmplt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	f43f af27 	beq.w	800b3cc <_dtoa_r+0x47c>
 800b57e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b580:	1e6b      	subs	r3, r5, #1
 800b582:	930c      	str	r3, [sp, #48]	; 0x30
 800b584:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b588:	2b30      	cmp	r3, #48	; 0x30
 800b58a:	d0f8      	beq.n	800b57e <_dtoa_r+0x62e>
 800b58c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b590:	e04a      	b.n	800b628 <_dtoa_r+0x6d8>
 800b592:	bf00      	nop
 800b594:	08013010 	.word	0x08013010
 800b598:	08012fe8 	.word	0x08012fe8
 800b59c:	3ff00000 	.word	0x3ff00000
 800b5a0:	40240000 	.word	0x40240000
 800b5a4:	401c0000 	.word	0x401c0000
 800b5a8:	40140000 	.word	0x40140000
 800b5ac:	3fe00000 	.word	0x3fe00000
 800b5b0:	4baf      	ldr	r3, [pc, #700]	; (800b870 <_dtoa_r+0x920>)
 800b5b2:	f7f5 f831 	bl	8000618 <__aeabi_dmul>
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	460f      	mov	r7, r1
 800b5ba:	e7ac      	b.n	800b516 <_dtoa_r+0x5c6>
 800b5bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5c0:	9d00      	ldr	r5, [sp, #0]
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f5 f94f 	bl	800086c <__aeabi_ddiv>
 800b5ce:	f7f5 fad3 	bl	8000b78 <__aeabi_d2iz>
 800b5d2:	9002      	str	r0, [sp, #8]
 800b5d4:	f7f4 ffb6 	bl	8000544 <__aeabi_i2d>
 800b5d8:	4642      	mov	r2, r8
 800b5da:	464b      	mov	r3, r9
 800b5dc:	f7f5 f81c 	bl	8000618 <__aeabi_dmul>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	f7f4 fe5e 	bl	80002a8 <__aeabi_dsub>
 800b5ec:	9e02      	ldr	r6, [sp, #8]
 800b5ee:	9f01      	ldr	r7, [sp, #4]
 800b5f0:	3630      	adds	r6, #48	; 0x30
 800b5f2:	f805 6b01 	strb.w	r6, [r5], #1
 800b5f6:	9e00      	ldr	r6, [sp, #0]
 800b5f8:	1bae      	subs	r6, r5, r6
 800b5fa:	42b7      	cmp	r7, r6
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	d137      	bne.n	800b672 <_dtoa_r+0x722>
 800b602:	f7f4 fe53 	bl	80002ac <__adddf3>
 800b606:	4642      	mov	r2, r8
 800b608:	464b      	mov	r3, r9
 800b60a:	4606      	mov	r6, r0
 800b60c:	460f      	mov	r7, r1
 800b60e:	f7f5 fa93 	bl	8000b38 <__aeabi_dcmpgt>
 800b612:	b9c8      	cbnz	r0, 800b648 <_dtoa_r+0x6f8>
 800b614:	4642      	mov	r2, r8
 800b616:	464b      	mov	r3, r9
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f5 fa64 	bl	8000ae8 <__aeabi_dcmpeq>
 800b620:	b110      	cbz	r0, 800b628 <_dtoa_r+0x6d8>
 800b622:	9b02      	ldr	r3, [sp, #8]
 800b624:	07d9      	lsls	r1, r3, #31
 800b626:	d40f      	bmi.n	800b648 <_dtoa_r+0x6f8>
 800b628:	4620      	mov	r0, r4
 800b62a:	4659      	mov	r1, fp
 800b62c:	f000 fad6 	bl	800bbdc <_Bfree>
 800b630:	2300      	movs	r3, #0
 800b632:	702b      	strb	r3, [r5, #0]
 800b634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b636:	f10a 0001 	add.w	r0, sl, #1
 800b63a:	6018      	str	r0, [r3, #0]
 800b63c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f43f acd8 	beq.w	800aff4 <_dtoa_r+0xa4>
 800b644:	601d      	str	r5, [r3, #0]
 800b646:	e4d5      	b.n	800aff4 <_dtoa_r+0xa4>
 800b648:	f8cd a01c 	str.w	sl, [sp, #28]
 800b64c:	462b      	mov	r3, r5
 800b64e:	461d      	mov	r5, r3
 800b650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b654:	2a39      	cmp	r2, #57	; 0x39
 800b656:	d108      	bne.n	800b66a <_dtoa_r+0x71a>
 800b658:	9a00      	ldr	r2, [sp, #0]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d1f7      	bne.n	800b64e <_dtoa_r+0x6fe>
 800b65e:	9a07      	ldr	r2, [sp, #28]
 800b660:	9900      	ldr	r1, [sp, #0]
 800b662:	3201      	adds	r2, #1
 800b664:	9207      	str	r2, [sp, #28]
 800b666:	2230      	movs	r2, #48	; 0x30
 800b668:	700a      	strb	r2, [r1, #0]
 800b66a:	781a      	ldrb	r2, [r3, #0]
 800b66c:	3201      	adds	r2, #1
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	e78c      	b.n	800b58c <_dtoa_r+0x63c>
 800b672:	4b7f      	ldr	r3, [pc, #508]	; (800b870 <_dtoa_r+0x920>)
 800b674:	2200      	movs	r2, #0
 800b676:	f7f4 ffcf 	bl	8000618 <__aeabi_dmul>
 800b67a:	2200      	movs	r2, #0
 800b67c:	2300      	movs	r3, #0
 800b67e:	4606      	mov	r6, r0
 800b680:	460f      	mov	r7, r1
 800b682:	f7f5 fa31 	bl	8000ae8 <__aeabi_dcmpeq>
 800b686:	2800      	cmp	r0, #0
 800b688:	d09b      	beq.n	800b5c2 <_dtoa_r+0x672>
 800b68a:	e7cd      	b.n	800b628 <_dtoa_r+0x6d8>
 800b68c:	9a08      	ldr	r2, [sp, #32]
 800b68e:	2a00      	cmp	r2, #0
 800b690:	f000 80c4 	beq.w	800b81c <_dtoa_r+0x8cc>
 800b694:	9a05      	ldr	r2, [sp, #20]
 800b696:	2a01      	cmp	r2, #1
 800b698:	f300 80a8 	bgt.w	800b7ec <_dtoa_r+0x89c>
 800b69c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	f000 80a0 	beq.w	800b7e4 <_dtoa_r+0x894>
 800b6a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6a8:	9e06      	ldr	r6, [sp, #24]
 800b6aa:	4645      	mov	r5, r8
 800b6ac:	9a04      	ldr	r2, [sp, #16]
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	441a      	add	r2, r3
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	4498      	add	r8, r3
 800b6b6:	9204      	str	r2, [sp, #16]
 800b6b8:	f000 fb4c 	bl	800bd54 <__i2b>
 800b6bc:	4607      	mov	r7, r0
 800b6be:	2d00      	cmp	r5, #0
 800b6c0:	dd0b      	ble.n	800b6da <_dtoa_r+0x78a>
 800b6c2:	9b04      	ldr	r3, [sp, #16]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dd08      	ble.n	800b6da <_dtoa_r+0x78a>
 800b6c8:	42ab      	cmp	r3, r5
 800b6ca:	9a04      	ldr	r2, [sp, #16]
 800b6cc:	bfa8      	it	ge
 800b6ce:	462b      	movge	r3, r5
 800b6d0:	eba8 0803 	sub.w	r8, r8, r3
 800b6d4:	1aed      	subs	r5, r5, r3
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	9304      	str	r3, [sp, #16]
 800b6da:	9b06      	ldr	r3, [sp, #24]
 800b6dc:	b1fb      	cbz	r3, 800b71e <_dtoa_r+0x7ce>
 800b6de:	9b08      	ldr	r3, [sp, #32]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 809f 	beq.w	800b824 <_dtoa_r+0x8d4>
 800b6e6:	2e00      	cmp	r6, #0
 800b6e8:	dd11      	ble.n	800b70e <_dtoa_r+0x7be>
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f000 fbec 	bl	800becc <__pow5mult>
 800b6f4:	465a      	mov	r2, fp
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 fb40 	bl	800bd80 <__multiply>
 800b700:	4659      	mov	r1, fp
 800b702:	9007      	str	r0, [sp, #28]
 800b704:	4620      	mov	r0, r4
 800b706:	f000 fa69 	bl	800bbdc <_Bfree>
 800b70a:	9b07      	ldr	r3, [sp, #28]
 800b70c:	469b      	mov	fp, r3
 800b70e:	9b06      	ldr	r3, [sp, #24]
 800b710:	1b9a      	subs	r2, r3, r6
 800b712:	d004      	beq.n	800b71e <_dtoa_r+0x7ce>
 800b714:	4659      	mov	r1, fp
 800b716:	4620      	mov	r0, r4
 800b718:	f000 fbd8 	bl	800becc <__pow5mult>
 800b71c:	4683      	mov	fp, r0
 800b71e:	2101      	movs	r1, #1
 800b720:	4620      	mov	r0, r4
 800b722:	f000 fb17 	bl	800bd54 <__i2b>
 800b726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b728:	2b00      	cmp	r3, #0
 800b72a:	4606      	mov	r6, r0
 800b72c:	dd7c      	ble.n	800b828 <_dtoa_r+0x8d8>
 800b72e:	461a      	mov	r2, r3
 800b730:	4601      	mov	r1, r0
 800b732:	4620      	mov	r0, r4
 800b734:	f000 fbca 	bl	800becc <__pow5mult>
 800b738:	9b05      	ldr	r3, [sp, #20]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	4606      	mov	r6, r0
 800b73e:	dd76      	ble.n	800b82e <_dtoa_r+0x8de>
 800b740:	2300      	movs	r3, #0
 800b742:	9306      	str	r3, [sp, #24]
 800b744:	6933      	ldr	r3, [r6, #16]
 800b746:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b74a:	6918      	ldr	r0, [r3, #16]
 800b74c:	f000 fab2 	bl	800bcb4 <__hi0bits>
 800b750:	f1c0 0020 	rsb	r0, r0, #32
 800b754:	9b04      	ldr	r3, [sp, #16]
 800b756:	4418      	add	r0, r3
 800b758:	f010 001f 	ands.w	r0, r0, #31
 800b75c:	f000 8086 	beq.w	800b86c <_dtoa_r+0x91c>
 800b760:	f1c0 0320 	rsb	r3, r0, #32
 800b764:	2b04      	cmp	r3, #4
 800b766:	dd7f      	ble.n	800b868 <_dtoa_r+0x918>
 800b768:	f1c0 001c 	rsb	r0, r0, #28
 800b76c:	9b04      	ldr	r3, [sp, #16]
 800b76e:	4403      	add	r3, r0
 800b770:	4480      	add	r8, r0
 800b772:	4405      	add	r5, r0
 800b774:	9304      	str	r3, [sp, #16]
 800b776:	f1b8 0f00 	cmp.w	r8, #0
 800b77a:	dd05      	ble.n	800b788 <_dtoa_r+0x838>
 800b77c:	4659      	mov	r1, fp
 800b77e:	4642      	mov	r2, r8
 800b780:	4620      	mov	r0, r4
 800b782:	f000 fbfd 	bl	800bf80 <__lshift>
 800b786:	4683      	mov	fp, r0
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dd05      	ble.n	800b79a <_dtoa_r+0x84a>
 800b78e:	4631      	mov	r1, r6
 800b790:	461a      	mov	r2, r3
 800b792:	4620      	mov	r0, r4
 800b794:	f000 fbf4 	bl	800bf80 <__lshift>
 800b798:	4606      	mov	r6, r0
 800b79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d069      	beq.n	800b874 <_dtoa_r+0x924>
 800b7a0:	4631      	mov	r1, r6
 800b7a2:	4658      	mov	r0, fp
 800b7a4:	f000 fc58 	bl	800c058 <__mcmp>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	da63      	bge.n	800b874 <_dtoa_r+0x924>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4659      	mov	r1, fp
 800b7b0:	220a      	movs	r2, #10
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fa34 	bl	800bc20 <__multadd>
 800b7b8:	9b08      	ldr	r3, [sp, #32]
 800b7ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7be:	4683      	mov	fp, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 818f 	beq.w	800bae4 <_dtoa_r+0xb94>
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	220a      	movs	r2, #10
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 fa27 	bl	800bc20 <__multadd>
 800b7d2:	f1b9 0f00 	cmp.w	r9, #0
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	f300 808e 	bgt.w	800b8f8 <_dtoa_r+0x9a8>
 800b7dc:	9b05      	ldr	r3, [sp, #20]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	dc50      	bgt.n	800b884 <_dtoa_r+0x934>
 800b7e2:	e089      	b.n	800b8f8 <_dtoa_r+0x9a8>
 800b7e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7ea:	e75d      	b.n	800b6a8 <_dtoa_r+0x758>
 800b7ec:	9b01      	ldr	r3, [sp, #4]
 800b7ee:	1e5e      	subs	r6, r3, #1
 800b7f0:	9b06      	ldr	r3, [sp, #24]
 800b7f2:	42b3      	cmp	r3, r6
 800b7f4:	bfbf      	itttt	lt
 800b7f6:	9b06      	ldrlt	r3, [sp, #24]
 800b7f8:	9606      	strlt	r6, [sp, #24]
 800b7fa:	1af2      	sublt	r2, r6, r3
 800b7fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b7fe:	bfb6      	itet	lt
 800b800:	189b      	addlt	r3, r3, r2
 800b802:	1b9e      	subge	r6, r3, r6
 800b804:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b806:	9b01      	ldr	r3, [sp, #4]
 800b808:	bfb8      	it	lt
 800b80a:	2600      	movlt	r6, #0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	bfb5      	itete	lt
 800b810:	eba8 0503 	sublt.w	r5, r8, r3
 800b814:	9b01      	ldrge	r3, [sp, #4]
 800b816:	2300      	movlt	r3, #0
 800b818:	4645      	movge	r5, r8
 800b81a:	e747      	b.n	800b6ac <_dtoa_r+0x75c>
 800b81c:	9e06      	ldr	r6, [sp, #24]
 800b81e:	9f08      	ldr	r7, [sp, #32]
 800b820:	4645      	mov	r5, r8
 800b822:	e74c      	b.n	800b6be <_dtoa_r+0x76e>
 800b824:	9a06      	ldr	r2, [sp, #24]
 800b826:	e775      	b.n	800b714 <_dtoa_r+0x7c4>
 800b828:	9b05      	ldr	r3, [sp, #20]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	dc18      	bgt.n	800b860 <_dtoa_r+0x910>
 800b82e:	9b02      	ldr	r3, [sp, #8]
 800b830:	b9b3      	cbnz	r3, 800b860 <_dtoa_r+0x910>
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b838:	b9a3      	cbnz	r3, 800b864 <_dtoa_r+0x914>
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b840:	0d1b      	lsrs	r3, r3, #20
 800b842:	051b      	lsls	r3, r3, #20
 800b844:	b12b      	cbz	r3, 800b852 <_dtoa_r+0x902>
 800b846:	9b04      	ldr	r3, [sp, #16]
 800b848:	3301      	adds	r3, #1
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	f108 0801 	add.w	r8, r8, #1
 800b850:	2301      	movs	r3, #1
 800b852:	9306      	str	r3, [sp, #24]
 800b854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b856:	2b00      	cmp	r3, #0
 800b858:	f47f af74 	bne.w	800b744 <_dtoa_r+0x7f4>
 800b85c:	2001      	movs	r0, #1
 800b85e:	e779      	b.n	800b754 <_dtoa_r+0x804>
 800b860:	2300      	movs	r3, #0
 800b862:	e7f6      	b.n	800b852 <_dtoa_r+0x902>
 800b864:	9b02      	ldr	r3, [sp, #8]
 800b866:	e7f4      	b.n	800b852 <_dtoa_r+0x902>
 800b868:	d085      	beq.n	800b776 <_dtoa_r+0x826>
 800b86a:	4618      	mov	r0, r3
 800b86c:	301c      	adds	r0, #28
 800b86e:	e77d      	b.n	800b76c <_dtoa_r+0x81c>
 800b870:	40240000 	.word	0x40240000
 800b874:	9b01      	ldr	r3, [sp, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	dc38      	bgt.n	800b8ec <_dtoa_r+0x99c>
 800b87a:	9b05      	ldr	r3, [sp, #20]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	dd35      	ble.n	800b8ec <_dtoa_r+0x99c>
 800b880:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b884:	f1b9 0f00 	cmp.w	r9, #0
 800b888:	d10d      	bne.n	800b8a6 <_dtoa_r+0x956>
 800b88a:	4631      	mov	r1, r6
 800b88c:	464b      	mov	r3, r9
 800b88e:	2205      	movs	r2, #5
 800b890:	4620      	mov	r0, r4
 800b892:	f000 f9c5 	bl	800bc20 <__multadd>
 800b896:	4601      	mov	r1, r0
 800b898:	4606      	mov	r6, r0
 800b89a:	4658      	mov	r0, fp
 800b89c:	f000 fbdc 	bl	800c058 <__mcmp>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	f73f adbd 	bgt.w	800b420 <_dtoa_r+0x4d0>
 800b8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a8:	9d00      	ldr	r5, [sp, #0]
 800b8aa:	ea6f 0a03 	mvn.w	sl, r3
 800b8ae:	f04f 0800 	mov.w	r8, #0
 800b8b2:	4631      	mov	r1, r6
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 f991 	bl	800bbdc <_Bfree>
 800b8ba:	2f00      	cmp	r7, #0
 800b8bc:	f43f aeb4 	beq.w	800b628 <_dtoa_r+0x6d8>
 800b8c0:	f1b8 0f00 	cmp.w	r8, #0
 800b8c4:	d005      	beq.n	800b8d2 <_dtoa_r+0x982>
 800b8c6:	45b8      	cmp	r8, r7
 800b8c8:	d003      	beq.n	800b8d2 <_dtoa_r+0x982>
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f000 f985 	bl	800bbdc <_Bfree>
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 f981 	bl	800bbdc <_Bfree>
 800b8da:	e6a5      	b.n	800b628 <_dtoa_r+0x6d8>
 800b8dc:	2600      	movs	r6, #0
 800b8de:	4637      	mov	r7, r6
 800b8e0:	e7e1      	b.n	800b8a6 <_dtoa_r+0x956>
 800b8e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b8e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b8e8:	4637      	mov	r7, r6
 800b8ea:	e599      	b.n	800b420 <_dtoa_r+0x4d0>
 800b8ec:	9b08      	ldr	r3, [sp, #32]
 800b8ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 80fd 	beq.w	800baf2 <_dtoa_r+0xba2>
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	dd05      	ble.n	800b908 <_dtoa_r+0x9b8>
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	462a      	mov	r2, r5
 800b900:	4620      	mov	r0, r4
 800b902:	f000 fb3d 	bl	800bf80 <__lshift>
 800b906:	4607      	mov	r7, r0
 800b908:	9b06      	ldr	r3, [sp, #24]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d05c      	beq.n	800b9c8 <_dtoa_r+0xa78>
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4620      	mov	r0, r4
 800b912:	f000 f923 	bl	800bb5c <_Balloc>
 800b916:	4605      	mov	r5, r0
 800b918:	b928      	cbnz	r0, 800b926 <_dtoa_r+0x9d6>
 800b91a:	4b80      	ldr	r3, [pc, #512]	; (800bb1c <_dtoa_r+0xbcc>)
 800b91c:	4602      	mov	r2, r0
 800b91e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b922:	f7ff bb2e 	b.w	800af82 <_dtoa_r+0x32>
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	3202      	adds	r2, #2
 800b92a:	0092      	lsls	r2, r2, #2
 800b92c:	f107 010c 	add.w	r1, r7, #12
 800b930:	300c      	adds	r0, #12
 800b932:	f000 f905 	bl	800bb40 <memcpy>
 800b936:	2201      	movs	r2, #1
 800b938:	4629      	mov	r1, r5
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 fb20 	bl	800bf80 <__lshift>
 800b940:	9b00      	ldr	r3, [sp, #0]
 800b942:	3301      	adds	r3, #1
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	9b00      	ldr	r3, [sp, #0]
 800b948:	444b      	add	r3, r9
 800b94a:	9307      	str	r3, [sp, #28]
 800b94c:	9b02      	ldr	r3, [sp, #8]
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	46b8      	mov	r8, r7
 800b954:	9306      	str	r3, [sp, #24]
 800b956:	4607      	mov	r7, r0
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	4631      	mov	r1, r6
 800b95c:	3b01      	subs	r3, #1
 800b95e:	4658      	mov	r0, fp
 800b960:	9302      	str	r3, [sp, #8]
 800b962:	f7ff fa67 	bl	800ae34 <quorem>
 800b966:	4603      	mov	r3, r0
 800b968:	3330      	adds	r3, #48	; 0x30
 800b96a:	9004      	str	r0, [sp, #16]
 800b96c:	4641      	mov	r1, r8
 800b96e:	4658      	mov	r0, fp
 800b970:	9308      	str	r3, [sp, #32]
 800b972:	f000 fb71 	bl	800c058 <__mcmp>
 800b976:	463a      	mov	r2, r7
 800b978:	4681      	mov	r9, r0
 800b97a:	4631      	mov	r1, r6
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fb87 	bl	800c090 <__mdiff>
 800b982:	68c2      	ldr	r2, [r0, #12]
 800b984:	9b08      	ldr	r3, [sp, #32]
 800b986:	4605      	mov	r5, r0
 800b988:	bb02      	cbnz	r2, 800b9cc <_dtoa_r+0xa7c>
 800b98a:	4601      	mov	r1, r0
 800b98c:	4658      	mov	r0, fp
 800b98e:	f000 fb63 	bl	800c058 <__mcmp>
 800b992:	9b08      	ldr	r3, [sp, #32]
 800b994:	4602      	mov	r2, r0
 800b996:	4629      	mov	r1, r5
 800b998:	4620      	mov	r0, r4
 800b99a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b99e:	f000 f91d 	bl	800bbdc <_Bfree>
 800b9a2:	9b05      	ldr	r3, [sp, #20]
 800b9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a6:	9d01      	ldr	r5, [sp, #4]
 800b9a8:	ea43 0102 	orr.w	r1, r3, r2
 800b9ac:	9b06      	ldr	r3, [sp, #24]
 800b9ae:	430b      	orrs	r3, r1
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	d10d      	bne.n	800b9d0 <_dtoa_r+0xa80>
 800b9b4:	2b39      	cmp	r3, #57	; 0x39
 800b9b6:	d029      	beq.n	800ba0c <_dtoa_r+0xabc>
 800b9b8:	f1b9 0f00 	cmp.w	r9, #0
 800b9bc:	dd01      	ble.n	800b9c2 <_dtoa_r+0xa72>
 800b9be:	9b04      	ldr	r3, [sp, #16]
 800b9c0:	3331      	adds	r3, #49	; 0x31
 800b9c2:	9a02      	ldr	r2, [sp, #8]
 800b9c4:	7013      	strb	r3, [r2, #0]
 800b9c6:	e774      	b.n	800b8b2 <_dtoa_r+0x962>
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	e7b9      	b.n	800b940 <_dtoa_r+0x9f0>
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	e7e2      	b.n	800b996 <_dtoa_r+0xa46>
 800b9d0:	f1b9 0f00 	cmp.w	r9, #0
 800b9d4:	db06      	blt.n	800b9e4 <_dtoa_r+0xa94>
 800b9d6:	9905      	ldr	r1, [sp, #20]
 800b9d8:	ea41 0909 	orr.w	r9, r1, r9
 800b9dc:	9906      	ldr	r1, [sp, #24]
 800b9de:	ea59 0101 	orrs.w	r1, r9, r1
 800b9e2:	d120      	bne.n	800ba26 <_dtoa_r+0xad6>
 800b9e4:	2a00      	cmp	r2, #0
 800b9e6:	ddec      	ble.n	800b9c2 <_dtoa_r+0xa72>
 800b9e8:	4659      	mov	r1, fp
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	f000 fac6 	bl	800bf80 <__lshift>
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4683      	mov	fp, r0
 800b9f8:	f000 fb2e 	bl	800c058 <__mcmp>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	dc02      	bgt.n	800ba08 <_dtoa_r+0xab8>
 800ba02:	d1de      	bne.n	800b9c2 <_dtoa_r+0xa72>
 800ba04:	07da      	lsls	r2, r3, #31
 800ba06:	d5dc      	bpl.n	800b9c2 <_dtoa_r+0xa72>
 800ba08:	2b39      	cmp	r3, #57	; 0x39
 800ba0a:	d1d8      	bne.n	800b9be <_dtoa_r+0xa6e>
 800ba0c:	9a02      	ldr	r2, [sp, #8]
 800ba0e:	2339      	movs	r3, #57	; 0x39
 800ba10:	7013      	strb	r3, [r2, #0]
 800ba12:	462b      	mov	r3, r5
 800ba14:	461d      	mov	r5, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba1c:	2a39      	cmp	r2, #57	; 0x39
 800ba1e:	d050      	beq.n	800bac2 <_dtoa_r+0xb72>
 800ba20:	3201      	adds	r2, #1
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	e745      	b.n	800b8b2 <_dtoa_r+0x962>
 800ba26:	2a00      	cmp	r2, #0
 800ba28:	dd03      	ble.n	800ba32 <_dtoa_r+0xae2>
 800ba2a:	2b39      	cmp	r3, #57	; 0x39
 800ba2c:	d0ee      	beq.n	800ba0c <_dtoa_r+0xabc>
 800ba2e:	3301      	adds	r3, #1
 800ba30:	e7c7      	b.n	800b9c2 <_dtoa_r+0xa72>
 800ba32:	9a01      	ldr	r2, [sp, #4]
 800ba34:	9907      	ldr	r1, [sp, #28]
 800ba36:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba3a:	428a      	cmp	r2, r1
 800ba3c:	d02a      	beq.n	800ba94 <_dtoa_r+0xb44>
 800ba3e:	4659      	mov	r1, fp
 800ba40:	2300      	movs	r3, #0
 800ba42:	220a      	movs	r2, #10
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 f8eb 	bl	800bc20 <__multadd>
 800ba4a:	45b8      	cmp	r8, r7
 800ba4c:	4683      	mov	fp, r0
 800ba4e:	f04f 0300 	mov.w	r3, #0
 800ba52:	f04f 020a 	mov.w	r2, #10
 800ba56:	4641      	mov	r1, r8
 800ba58:	4620      	mov	r0, r4
 800ba5a:	d107      	bne.n	800ba6c <_dtoa_r+0xb1c>
 800ba5c:	f000 f8e0 	bl	800bc20 <__multadd>
 800ba60:	4680      	mov	r8, r0
 800ba62:	4607      	mov	r7, r0
 800ba64:	9b01      	ldr	r3, [sp, #4]
 800ba66:	3301      	adds	r3, #1
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	e775      	b.n	800b958 <_dtoa_r+0xa08>
 800ba6c:	f000 f8d8 	bl	800bc20 <__multadd>
 800ba70:	4639      	mov	r1, r7
 800ba72:	4680      	mov	r8, r0
 800ba74:	2300      	movs	r3, #0
 800ba76:	220a      	movs	r2, #10
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 f8d1 	bl	800bc20 <__multadd>
 800ba7e:	4607      	mov	r7, r0
 800ba80:	e7f0      	b.n	800ba64 <_dtoa_r+0xb14>
 800ba82:	f1b9 0f00 	cmp.w	r9, #0
 800ba86:	9a00      	ldr	r2, [sp, #0]
 800ba88:	bfcc      	ite	gt
 800ba8a:	464d      	movgt	r5, r9
 800ba8c:	2501      	movle	r5, #1
 800ba8e:	4415      	add	r5, r2
 800ba90:	f04f 0800 	mov.w	r8, #0
 800ba94:	4659      	mov	r1, fp
 800ba96:	2201      	movs	r2, #1
 800ba98:	4620      	mov	r0, r4
 800ba9a:	9301      	str	r3, [sp, #4]
 800ba9c:	f000 fa70 	bl	800bf80 <__lshift>
 800baa0:	4631      	mov	r1, r6
 800baa2:	4683      	mov	fp, r0
 800baa4:	f000 fad8 	bl	800c058 <__mcmp>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	dcb2      	bgt.n	800ba12 <_dtoa_r+0xac2>
 800baac:	d102      	bne.n	800bab4 <_dtoa_r+0xb64>
 800baae:	9b01      	ldr	r3, [sp, #4]
 800bab0:	07db      	lsls	r3, r3, #31
 800bab2:	d4ae      	bmi.n	800ba12 <_dtoa_r+0xac2>
 800bab4:	462b      	mov	r3, r5
 800bab6:	461d      	mov	r5, r3
 800bab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800babc:	2a30      	cmp	r2, #48	; 0x30
 800babe:	d0fa      	beq.n	800bab6 <_dtoa_r+0xb66>
 800bac0:	e6f7      	b.n	800b8b2 <_dtoa_r+0x962>
 800bac2:	9a00      	ldr	r2, [sp, #0]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d1a5      	bne.n	800ba14 <_dtoa_r+0xac4>
 800bac8:	f10a 0a01 	add.w	sl, sl, #1
 800bacc:	2331      	movs	r3, #49	; 0x31
 800bace:	e779      	b.n	800b9c4 <_dtoa_r+0xa74>
 800bad0:	4b13      	ldr	r3, [pc, #76]	; (800bb20 <_dtoa_r+0xbd0>)
 800bad2:	f7ff baaf 	b.w	800b034 <_dtoa_r+0xe4>
 800bad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f47f aa86 	bne.w	800afea <_dtoa_r+0x9a>
 800bade:	4b11      	ldr	r3, [pc, #68]	; (800bb24 <_dtoa_r+0xbd4>)
 800bae0:	f7ff baa8 	b.w	800b034 <_dtoa_r+0xe4>
 800bae4:	f1b9 0f00 	cmp.w	r9, #0
 800bae8:	dc03      	bgt.n	800baf2 <_dtoa_r+0xba2>
 800baea:	9b05      	ldr	r3, [sp, #20]
 800baec:	2b02      	cmp	r3, #2
 800baee:	f73f aec9 	bgt.w	800b884 <_dtoa_r+0x934>
 800baf2:	9d00      	ldr	r5, [sp, #0]
 800baf4:	4631      	mov	r1, r6
 800baf6:	4658      	mov	r0, fp
 800baf8:	f7ff f99c 	bl	800ae34 <quorem>
 800bafc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bb00:	f805 3b01 	strb.w	r3, [r5], #1
 800bb04:	9a00      	ldr	r2, [sp, #0]
 800bb06:	1aaa      	subs	r2, r5, r2
 800bb08:	4591      	cmp	r9, r2
 800bb0a:	ddba      	ble.n	800ba82 <_dtoa_r+0xb32>
 800bb0c:	4659      	mov	r1, fp
 800bb0e:	2300      	movs	r3, #0
 800bb10:	220a      	movs	r2, #10
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 f884 	bl	800bc20 <__multadd>
 800bb18:	4683      	mov	fp, r0
 800bb1a:	e7eb      	b.n	800baf4 <_dtoa_r+0xba4>
 800bb1c:	08012f77 	.word	0x08012f77
 800bb20:	08012ed0 	.word	0x08012ed0
 800bb24:	08012ef4 	.word	0x08012ef4

0800bb28 <_localeconv_r>:
 800bb28:	4800      	ldr	r0, [pc, #0]	; (800bb2c <_localeconv_r+0x4>)
 800bb2a:	4770      	bx	lr
 800bb2c:	20000404 	.word	0x20000404

0800bb30 <malloc>:
 800bb30:	4b02      	ldr	r3, [pc, #8]	; (800bb3c <malloc+0xc>)
 800bb32:	4601      	mov	r1, r0
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	f000 bbef 	b.w	800c318 <_malloc_r>
 800bb3a:	bf00      	nop
 800bb3c:	200002b0 	.word	0x200002b0

0800bb40 <memcpy>:
 800bb40:	440a      	add	r2, r1
 800bb42:	4291      	cmp	r1, r2
 800bb44:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb48:	d100      	bne.n	800bb4c <memcpy+0xc>
 800bb4a:	4770      	bx	lr
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb56:	4291      	cmp	r1, r2
 800bb58:	d1f9      	bne.n	800bb4e <memcpy+0xe>
 800bb5a:	bd10      	pop	{r4, pc}

0800bb5c <_Balloc>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb60:	4604      	mov	r4, r0
 800bb62:	460d      	mov	r5, r1
 800bb64:	b976      	cbnz	r6, 800bb84 <_Balloc+0x28>
 800bb66:	2010      	movs	r0, #16
 800bb68:	f7ff ffe2 	bl	800bb30 <malloc>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	6260      	str	r0, [r4, #36]	; 0x24
 800bb70:	b920      	cbnz	r0, 800bb7c <_Balloc+0x20>
 800bb72:	4b18      	ldr	r3, [pc, #96]	; (800bbd4 <_Balloc+0x78>)
 800bb74:	4818      	ldr	r0, [pc, #96]	; (800bbd8 <_Balloc+0x7c>)
 800bb76:	2166      	movs	r1, #102	; 0x66
 800bb78:	f000 fd94 	bl	800c6a4 <__assert_func>
 800bb7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb80:	6006      	str	r6, [r0, #0]
 800bb82:	60c6      	str	r6, [r0, #12]
 800bb84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb86:	68f3      	ldr	r3, [r6, #12]
 800bb88:	b183      	cbz	r3, 800bbac <_Balloc+0x50>
 800bb8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb92:	b9b8      	cbnz	r0, 800bbc4 <_Balloc+0x68>
 800bb94:	2101      	movs	r1, #1
 800bb96:	fa01 f605 	lsl.w	r6, r1, r5
 800bb9a:	1d72      	adds	r2, r6, #5
 800bb9c:	0092      	lsls	r2, r2, #2
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 fb5a 	bl	800c258 <_calloc_r>
 800bba4:	b160      	cbz	r0, 800bbc0 <_Balloc+0x64>
 800bba6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbaa:	e00e      	b.n	800bbca <_Balloc+0x6e>
 800bbac:	2221      	movs	r2, #33	; 0x21
 800bbae:	2104      	movs	r1, #4
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fb51 	bl	800c258 <_calloc_r>
 800bbb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbb8:	60f0      	str	r0, [r6, #12]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1e4      	bne.n	800bb8a <_Balloc+0x2e>
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	6802      	ldr	r2, [r0, #0]
 800bbc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbd0:	e7f7      	b.n	800bbc2 <_Balloc+0x66>
 800bbd2:	bf00      	nop
 800bbd4:	08012f01 	.word	0x08012f01
 800bbd8:	08012f88 	.word	0x08012f88

0800bbdc <_Bfree>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	460c      	mov	r4, r1
 800bbe4:	b976      	cbnz	r6, 800bc04 <_Bfree+0x28>
 800bbe6:	2010      	movs	r0, #16
 800bbe8:	f7ff ffa2 	bl	800bb30 <malloc>
 800bbec:	4602      	mov	r2, r0
 800bbee:	6268      	str	r0, [r5, #36]	; 0x24
 800bbf0:	b920      	cbnz	r0, 800bbfc <_Bfree+0x20>
 800bbf2:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <_Bfree+0x3c>)
 800bbf4:	4809      	ldr	r0, [pc, #36]	; (800bc1c <_Bfree+0x40>)
 800bbf6:	218a      	movs	r1, #138	; 0x8a
 800bbf8:	f000 fd54 	bl	800c6a4 <__assert_func>
 800bbfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc00:	6006      	str	r6, [r0, #0]
 800bc02:	60c6      	str	r6, [r0, #12]
 800bc04:	b13c      	cbz	r4, 800bc16 <_Bfree+0x3a>
 800bc06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc08:	6862      	ldr	r2, [r4, #4]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc10:	6021      	str	r1, [r4, #0]
 800bc12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc16:	bd70      	pop	{r4, r5, r6, pc}
 800bc18:	08012f01 	.word	0x08012f01
 800bc1c:	08012f88 	.word	0x08012f88

0800bc20 <__multadd>:
 800bc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc24:	690e      	ldr	r6, [r1, #16]
 800bc26:	4607      	mov	r7, r0
 800bc28:	4698      	mov	r8, r3
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	f101 0014 	add.w	r0, r1, #20
 800bc30:	2300      	movs	r3, #0
 800bc32:	6805      	ldr	r5, [r0, #0]
 800bc34:	b2a9      	uxth	r1, r5
 800bc36:	fb02 8101 	mla	r1, r2, r1, r8
 800bc3a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bc3e:	0c2d      	lsrs	r5, r5, #16
 800bc40:	fb02 c505 	mla	r5, r2, r5, ip
 800bc44:	b289      	uxth	r1, r1
 800bc46:	3301      	adds	r3, #1
 800bc48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bc4c:	429e      	cmp	r6, r3
 800bc4e:	f840 1b04 	str.w	r1, [r0], #4
 800bc52:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bc56:	dcec      	bgt.n	800bc32 <__multadd+0x12>
 800bc58:	f1b8 0f00 	cmp.w	r8, #0
 800bc5c:	d022      	beq.n	800bca4 <__multadd+0x84>
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	42b3      	cmp	r3, r6
 800bc62:	dc19      	bgt.n	800bc98 <__multadd+0x78>
 800bc64:	6861      	ldr	r1, [r4, #4]
 800bc66:	4638      	mov	r0, r7
 800bc68:	3101      	adds	r1, #1
 800bc6a:	f7ff ff77 	bl	800bb5c <_Balloc>
 800bc6e:	4605      	mov	r5, r0
 800bc70:	b928      	cbnz	r0, 800bc7e <__multadd+0x5e>
 800bc72:	4602      	mov	r2, r0
 800bc74:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <__multadd+0x8c>)
 800bc76:	480e      	ldr	r0, [pc, #56]	; (800bcb0 <__multadd+0x90>)
 800bc78:	21b5      	movs	r1, #181	; 0xb5
 800bc7a:	f000 fd13 	bl	800c6a4 <__assert_func>
 800bc7e:	6922      	ldr	r2, [r4, #16]
 800bc80:	3202      	adds	r2, #2
 800bc82:	f104 010c 	add.w	r1, r4, #12
 800bc86:	0092      	lsls	r2, r2, #2
 800bc88:	300c      	adds	r0, #12
 800bc8a:	f7ff ff59 	bl	800bb40 <memcpy>
 800bc8e:	4621      	mov	r1, r4
 800bc90:	4638      	mov	r0, r7
 800bc92:	f7ff ffa3 	bl	800bbdc <_Bfree>
 800bc96:	462c      	mov	r4, r5
 800bc98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bc9c:	3601      	adds	r6, #1
 800bc9e:	f8c3 8014 	str.w	r8, [r3, #20]
 800bca2:	6126      	str	r6, [r4, #16]
 800bca4:	4620      	mov	r0, r4
 800bca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcaa:	bf00      	nop
 800bcac:	08012f77 	.word	0x08012f77
 800bcb0:	08012f88 	.word	0x08012f88

0800bcb4 <__hi0bits>:
 800bcb4:	0c03      	lsrs	r3, r0, #16
 800bcb6:	041b      	lsls	r3, r3, #16
 800bcb8:	b9d3      	cbnz	r3, 800bcf0 <__hi0bits+0x3c>
 800bcba:	0400      	lsls	r0, r0, #16
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bcc2:	bf04      	itt	eq
 800bcc4:	0200      	lsleq	r0, r0, #8
 800bcc6:	3308      	addeq	r3, #8
 800bcc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bccc:	bf04      	itt	eq
 800bcce:	0100      	lsleq	r0, r0, #4
 800bcd0:	3304      	addeq	r3, #4
 800bcd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bcd6:	bf04      	itt	eq
 800bcd8:	0080      	lsleq	r0, r0, #2
 800bcda:	3302      	addeq	r3, #2
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	db05      	blt.n	800bcec <__hi0bits+0x38>
 800bce0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bce4:	f103 0301 	add.w	r3, r3, #1
 800bce8:	bf08      	it	eq
 800bcea:	2320      	moveq	r3, #32
 800bcec:	4618      	mov	r0, r3
 800bcee:	4770      	bx	lr
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	e7e4      	b.n	800bcbe <__hi0bits+0xa>

0800bcf4 <__lo0bits>:
 800bcf4:	6803      	ldr	r3, [r0, #0]
 800bcf6:	f013 0207 	ands.w	r2, r3, #7
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	d00b      	beq.n	800bd16 <__lo0bits+0x22>
 800bcfe:	07da      	lsls	r2, r3, #31
 800bd00:	d424      	bmi.n	800bd4c <__lo0bits+0x58>
 800bd02:	0798      	lsls	r0, r3, #30
 800bd04:	bf49      	itett	mi
 800bd06:	085b      	lsrmi	r3, r3, #1
 800bd08:	089b      	lsrpl	r3, r3, #2
 800bd0a:	2001      	movmi	r0, #1
 800bd0c:	600b      	strmi	r3, [r1, #0]
 800bd0e:	bf5c      	itt	pl
 800bd10:	600b      	strpl	r3, [r1, #0]
 800bd12:	2002      	movpl	r0, #2
 800bd14:	4770      	bx	lr
 800bd16:	b298      	uxth	r0, r3
 800bd18:	b9b0      	cbnz	r0, 800bd48 <__lo0bits+0x54>
 800bd1a:	0c1b      	lsrs	r3, r3, #16
 800bd1c:	2010      	movs	r0, #16
 800bd1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd22:	bf04      	itt	eq
 800bd24:	0a1b      	lsreq	r3, r3, #8
 800bd26:	3008      	addeq	r0, #8
 800bd28:	071a      	lsls	r2, r3, #28
 800bd2a:	bf04      	itt	eq
 800bd2c:	091b      	lsreq	r3, r3, #4
 800bd2e:	3004      	addeq	r0, #4
 800bd30:	079a      	lsls	r2, r3, #30
 800bd32:	bf04      	itt	eq
 800bd34:	089b      	lsreq	r3, r3, #2
 800bd36:	3002      	addeq	r0, #2
 800bd38:	07da      	lsls	r2, r3, #31
 800bd3a:	d403      	bmi.n	800bd44 <__lo0bits+0x50>
 800bd3c:	085b      	lsrs	r3, r3, #1
 800bd3e:	f100 0001 	add.w	r0, r0, #1
 800bd42:	d005      	beq.n	800bd50 <__lo0bits+0x5c>
 800bd44:	600b      	str	r3, [r1, #0]
 800bd46:	4770      	bx	lr
 800bd48:	4610      	mov	r0, r2
 800bd4a:	e7e8      	b.n	800bd1e <__lo0bits+0x2a>
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	4770      	bx	lr
 800bd50:	2020      	movs	r0, #32
 800bd52:	4770      	bx	lr

0800bd54 <__i2b>:
 800bd54:	b510      	push	{r4, lr}
 800bd56:	460c      	mov	r4, r1
 800bd58:	2101      	movs	r1, #1
 800bd5a:	f7ff feff 	bl	800bb5c <_Balloc>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	b928      	cbnz	r0, 800bd6e <__i2b+0x1a>
 800bd62:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <__i2b+0x24>)
 800bd64:	4805      	ldr	r0, [pc, #20]	; (800bd7c <__i2b+0x28>)
 800bd66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd6a:	f000 fc9b 	bl	800c6a4 <__assert_func>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	6144      	str	r4, [r0, #20]
 800bd72:	6103      	str	r3, [r0, #16]
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	bf00      	nop
 800bd78:	08012f77 	.word	0x08012f77
 800bd7c:	08012f88 	.word	0x08012f88

0800bd80 <__multiply>:
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	4614      	mov	r4, r2
 800bd86:	690a      	ldr	r2, [r1, #16]
 800bd88:	6923      	ldr	r3, [r4, #16]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	bfb8      	it	lt
 800bd8e:	460b      	movlt	r3, r1
 800bd90:	460d      	mov	r5, r1
 800bd92:	bfbc      	itt	lt
 800bd94:	4625      	movlt	r5, r4
 800bd96:	461c      	movlt	r4, r3
 800bd98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bda0:	68ab      	ldr	r3, [r5, #8]
 800bda2:	6869      	ldr	r1, [r5, #4]
 800bda4:	eb0a 0709 	add.w	r7, sl, r9
 800bda8:	42bb      	cmp	r3, r7
 800bdaa:	b085      	sub	sp, #20
 800bdac:	bfb8      	it	lt
 800bdae:	3101      	addlt	r1, #1
 800bdb0:	f7ff fed4 	bl	800bb5c <_Balloc>
 800bdb4:	b930      	cbnz	r0, 800bdc4 <__multiply+0x44>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	4b42      	ldr	r3, [pc, #264]	; (800bec4 <__multiply+0x144>)
 800bdba:	4843      	ldr	r0, [pc, #268]	; (800bec8 <__multiply+0x148>)
 800bdbc:	f240 115d 	movw	r1, #349	; 0x15d
 800bdc0:	f000 fc70 	bl	800c6a4 <__assert_func>
 800bdc4:	f100 0614 	add.w	r6, r0, #20
 800bdc8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bdcc:	4633      	mov	r3, r6
 800bdce:	2200      	movs	r2, #0
 800bdd0:	4543      	cmp	r3, r8
 800bdd2:	d31e      	bcc.n	800be12 <__multiply+0x92>
 800bdd4:	f105 0c14 	add.w	ip, r5, #20
 800bdd8:	f104 0314 	add.w	r3, r4, #20
 800bddc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bde0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bde4:	9202      	str	r2, [sp, #8]
 800bde6:	ebac 0205 	sub.w	r2, ip, r5
 800bdea:	3a15      	subs	r2, #21
 800bdec:	f022 0203 	bic.w	r2, r2, #3
 800bdf0:	3204      	adds	r2, #4
 800bdf2:	f105 0115 	add.w	r1, r5, #21
 800bdf6:	458c      	cmp	ip, r1
 800bdf8:	bf38      	it	cc
 800bdfa:	2204      	movcc	r2, #4
 800bdfc:	9201      	str	r2, [sp, #4]
 800bdfe:	9a02      	ldr	r2, [sp, #8]
 800be00:	9303      	str	r3, [sp, #12]
 800be02:	429a      	cmp	r2, r3
 800be04:	d808      	bhi.n	800be18 <__multiply+0x98>
 800be06:	2f00      	cmp	r7, #0
 800be08:	dc55      	bgt.n	800beb6 <__multiply+0x136>
 800be0a:	6107      	str	r7, [r0, #16]
 800be0c:	b005      	add	sp, #20
 800be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be12:	f843 2b04 	str.w	r2, [r3], #4
 800be16:	e7db      	b.n	800bdd0 <__multiply+0x50>
 800be18:	f8b3 a000 	ldrh.w	sl, [r3]
 800be1c:	f1ba 0f00 	cmp.w	sl, #0
 800be20:	d020      	beq.n	800be64 <__multiply+0xe4>
 800be22:	f105 0e14 	add.w	lr, r5, #20
 800be26:	46b1      	mov	r9, r6
 800be28:	2200      	movs	r2, #0
 800be2a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800be2e:	f8d9 b000 	ldr.w	fp, [r9]
 800be32:	b2a1      	uxth	r1, r4
 800be34:	fa1f fb8b 	uxth.w	fp, fp
 800be38:	fb0a b101 	mla	r1, sl, r1, fp
 800be3c:	4411      	add	r1, r2
 800be3e:	f8d9 2000 	ldr.w	r2, [r9]
 800be42:	0c24      	lsrs	r4, r4, #16
 800be44:	0c12      	lsrs	r2, r2, #16
 800be46:	fb0a 2404 	mla	r4, sl, r4, r2
 800be4a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800be4e:	b289      	uxth	r1, r1
 800be50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be54:	45f4      	cmp	ip, lr
 800be56:	f849 1b04 	str.w	r1, [r9], #4
 800be5a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800be5e:	d8e4      	bhi.n	800be2a <__multiply+0xaa>
 800be60:	9901      	ldr	r1, [sp, #4]
 800be62:	5072      	str	r2, [r6, r1]
 800be64:	9a03      	ldr	r2, [sp, #12]
 800be66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be6a:	3304      	adds	r3, #4
 800be6c:	f1b9 0f00 	cmp.w	r9, #0
 800be70:	d01f      	beq.n	800beb2 <__multiply+0x132>
 800be72:	6834      	ldr	r4, [r6, #0]
 800be74:	f105 0114 	add.w	r1, r5, #20
 800be78:	46b6      	mov	lr, r6
 800be7a:	f04f 0a00 	mov.w	sl, #0
 800be7e:	880a      	ldrh	r2, [r1, #0]
 800be80:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be84:	fb09 b202 	mla	r2, r9, r2, fp
 800be88:	4492      	add	sl, r2
 800be8a:	b2a4      	uxth	r4, r4
 800be8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be90:	f84e 4b04 	str.w	r4, [lr], #4
 800be94:	f851 4b04 	ldr.w	r4, [r1], #4
 800be98:	f8be 2000 	ldrh.w	r2, [lr]
 800be9c:	0c24      	lsrs	r4, r4, #16
 800be9e:	fb09 2404 	mla	r4, r9, r4, r2
 800bea2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bea6:	458c      	cmp	ip, r1
 800bea8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800beac:	d8e7      	bhi.n	800be7e <__multiply+0xfe>
 800beae:	9a01      	ldr	r2, [sp, #4]
 800beb0:	50b4      	str	r4, [r6, r2]
 800beb2:	3604      	adds	r6, #4
 800beb4:	e7a3      	b.n	800bdfe <__multiply+0x7e>
 800beb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1a5      	bne.n	800be0a <__multiply+0x8a>
 800bebe:	3f01      	subs	r7, #1
 800bec0:	e7a1      	b.n	800be06 <__multiply+0x86>
 800bec2:	bf00      	nop
 800bec4:	08012f77 	.word	0x08012f77
 800bec8:	08012f88 	.word	0x08012f88

0800becc <__pow5mult>:
 800becc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed0:	4615      	mov	r5, r2
 800bed2:	f012 0203 	ands.w	r2, r2, #3
 800bed6:	4606      	mov	r6, r0
 800bed8:	460f      	mov	r7, r1
 800beda:	d007      	beq.n	800beec <__pow5mult+0x20>
 800bedc:	4c25      	ldr	r4, [pc, #148]	; (800bf74 <__pow5mult+0xa8>)
 800bede:	3a01      	subs	r2, #1
 800bee0:	2300      	movs	r3, #0
 800bee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bee6:	f7ff fe9b 	bl	800bc20 <__multadd>
 800beea:	4607      	mov	r7, r0
 800beec:	10ad      	asrs	r5, r5, #2
 800beee:	d03d      	beq.n	800bf6c <__pow5mult+0xa0>
 800bef0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bef2:	b97c      	cbnz	r4, 800bf14 <__pow5mult+0x48>
 800bef4:	2010      	movs	r0, #16
 800bef6:	f7ff fe1b 	bl	800bb30 <malloc>
 800befa:	4602      	mov	r2, r0
 800befc:	6270      	str	r0, [r6, #36]	; 0x24
 800befe:	b928      	cbnz	r0, 800bf0c <__pow5mult+0x40>
 800bf00:	4b1d      	ldr	r3, [pc, #116]	; (800bf78 <__pow5mult+0xac>)
 800bf02:	481e      	ldr	r0, [pc, #120]	; (800bf7c <__pow5mult+0xb0>)
 800bf04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bf08:	f000 fbcc 	bl	800c6a4 <__assert_func>
 800bf0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf10:	6004      	str	r4, [r0, #0]
 800bf12:	60c4      	str	r4, [r0, #12]
 800bf14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf1c:	b94c      	cbnz	r4, 800bf32 <__pow5mult+0x66>
 800bf1e:	f240 2171 	movw	r1, #625	; 0x271
 800bf22:	4630      	mov	r0, r6
 800bf24:	f7ff ff16 	bl	800bd54 <__i2b>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf2e:	4604      	mov	r4, r0
 800bf30:	6003      	str	r3, [r0, #0]
 800bf32:	f04f 0900 	mov.w	r9, #0
 800bf36:	07eb      	lsls	r3, r5, #31
 800bf38:	d50a      	bpl.n	800bf50 <__pow5mult+0x84>
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7ff ff1e 	bl	800bd80 <__multiply>
 800bf44:	4639      	mov	r1, r7
 800bf46:	4680      	mov	r8, r0
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f7ff fe47 	bl	800bbdc <_Bfree>
 800bf4e:	4647      	mov	r7, r8
 800bf50:	106d      	asrs	r5, r5, #1
 800bf52:	d00b      	beq.n	800bf6c <__pow5mult+0xa0>
 800bf54:	6820      	ldr	r0, [r4, #0]
 800bf56:	b938      	cbnz	r0, 800bf68 <__pow5mult+0x9c>
 800bf58:	4622      	mov	r2, r4
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f7ff ff0f 	bl	800bd80 <__multiply>
 800bf62:	6020      	str	r0, [r4, #0]
 800bf64:	f8c0 9000 	str.w	r9, [r0]
 800bf68:	4604      	mov	r4, r0
 800bf6a:	e7e4      	b.n	800bf36 <__pow5mult+0x6a>
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf72:	bf00      	nop
 800bf74:	080130d8 	.word	0x080130d8
 800bf78:	08012f01 	.word	0x08012f01
 800bf7c:	08012f88 	.word	0x08012f88

0800bf80 <__lshift>:
 800bf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf84:	460c      	mov	r4, r1
 800bf86:	6849      	ldr	r1, [r1, #4]
 800bf88:	6923      	ldr	r3, [r4, #16]
 800bf8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf8e:	68a3      	ldr	r3, [r4, #8]
 800bf90:	4607      	mov	r7, r0
 800bf92:	4691      	mov	r9, r2
 800bf94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf98:	f108 0601 	add.w	r6, r8, #1
 800bf9c:	42b3      	cmp	r3, r6
 800bf9e:	db0b      	blt.n	800bfb8 <__lshift+0x38>
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f7ff fddb 	bl	800bb5c <_Balloc>
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	b948      	cbnz	r0, 800bfbe <__lshift+0x3e>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	4b28      	ldr	r3, [pc, #160]	; (800c050 <__lshift+0xd0>)
 800bfae:	4829      	ldr	r0, [pc, #164]	; (800c054 <__lshift+0xd4>)
 800bfb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bfb4:	f000 fb76 	bl	800c6a4 <__assert_func>
 800bfb8:	3101      	adds	r1, #1
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	e7ee      	b.n	800bf9c <__lshift+0x1c>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	f100 0114 	add.w	r1, r0, #20
 800bfc4:	f100 0210 	add.w	r2, r0, #16
 800bfc8:	4618      	mov	r0, r3
 800bfca:	4553      	cmp	r3, sl
 800bfcc:	db33      	blt.n	800c036 <__lshift+0xb6>
 800bfce:	6920      	ldr	r0, [r4, #16]
 800bfd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfd4:	f104 0314 	add.w	r3, r4, #20
 800bfd8:	f019 091f 	ands.w	r9, r9, #31
 800bfdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bfe4:	d02b      	beq.n	800c03e <__lshift+0xbe>
 800bfe6:	f1c9 0e20 	rsb	lr, r9, #32
 800bfea:	468a      	mov	sl, r1
 800bfec:	2200      	movs	r2, #0
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	fa00 f009 	lsl.w	r0, r0, r9
 800bff4:	4302      	orrs	r2, r0
 800bff6:	f84a 2b04 	str.w	r2, [sl], #4
 800bffa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bffe:	459c      	cmp	ip, r3
 800c000:	fa22 f20e 	lsr.w	r2, r2, lr
 800c004:	d8f3      	bhi.n	800bfee <__lshift+0x6e>
 800c006:	ebac 0304 	sub.w	r3, ip, r4
 800c00a:	3b15      	subs	r3, #21
 800c00c:	f023 0303 	bic.w	r3, r3, #3
 800c010:	3304      	adds	r3, #4
 800c012:	f104 0015 	add.w	r0, r4, #21
 800c016:	4584      	cmp	ip, r0
 800c018:	bf38      	it	cc
 800c01a:	2304      	movcc	r3, #4
 800c01c:	50ca      	str	r2, [r1, r3]
 800c01e:	b10a      	cbz	r2, 800c024 <__lshift+0xa4>
 800c020:	f108 0602 	add.w	r6, r8, #2
 800c024:	3e01      	subs	r6, #1
 800c026:	4638      	mov	r0, r7
 800c028:	612e      	str	r6, [r5, #16]
 800c02a:	4621      	mov	r1, r4
 800c02c:	f7ff fdd6 	bl	800bbdc <_Bfree>
 800c030:	4628      	mov	r0, r5
 800c032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c036:	f842 0f04 	str.w	r0, [r2, #4]!
 800c03a:	3301      	adds	r3, #1
 800c03c:	e7c5      	b.n	800bfca <__lshift+0x4a>
 800c03e:	3904      	subs	r1, #4
 800c040:	f853 2b04 	ldr.w	r2, [r3], #4
 800c044:	f841 2f04 	str.w	r2, [r1, #4]!
 800c048:	459c      	cmp	ip, r3
 800c04a:	d8f9      	bhi.n	800c040 <__lshift+0xc0>
 800c04c:	e7ea      	b.n	800c024 <__lshift+0xa4>
 800c04e:	bf00      	nop
 800c050:	08012f77 	.word	0x08012f77
 800c054:	08012f88 	.word	0x08012f88

0800c058 <__mcmp>:
 800c058:	b530      	push	{r4, r5, lr}
 800c05a:	6902      	ldr	r2, [r0, #16]
 800c05c:	690c      	ldr	r4, [r1, #16]
 800c05e:	1b12      	subs	r2, r2, r4
 800c060:	d10e      	bne.n	800c080 <__mcmp+0x28>
 800c062:	f100 0314 	add.w	r3, r0, #20
 800c066:	3114      	adds	r1, #20
 800c068:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c06c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c070:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c074:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c078:	42a5      	cmp	r5, r4
 800c07a:	d003      	beq.n	800c084 <__mcmp+0x2c>
 800c07c:	d305      	bcc.n	800c08a <__mcmp+0x32>
 800c07e:	2201      	movs	r2, #1
 800c080:	4610      	mov	r0, r2
 800c082:	bd30      	pop	{r4, r5, pc}
 800c084:	4283      	cmp	r3, r0
 800c086:	d3f3      	bcc.n	800c070 <__mcmp+0x18>
 800c088:	e7fa      	b.n	800c080 <__mcmp+0x28>
 800c08a:	f04f 32ff 	mov.w	r2, #4294967295
 800c08e:	e7f7      	b.n	800c080 <__mcmp+0x28>

0800c090 <__mdiff>:
 800c090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	460c      	mov	r4, r1
 800c096:	4606      	mov	r6, r0
 800c098:	4611      	mov	r1, r2
 800c09a:	4620      	mov	r0, r4
 800c09c:	4617      	mov	r7, r2
 800c09e:	f7ff ffdb 	bl	800c058 <__mcmp>
 800c0a2:	1e05      	subs	r5, r0, #0
 800c0a4:	d110      	bne.n	800c0c8 <__mdiff+0x38>
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f7ff fd57 	bl	800bb5c <_Balloc>
 800c0ae:	b930      	cbnz	r0, 800c0be <__mdiff+0x2e>
 800c0b0:	4b39      	ldr	r3, [pc, #228]	; (800c198 <__mdiff+0x108>)
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	f240 2132 	movw	r1, #562	; 0x232
 800c0b8:	4838      	ldr	r0, [pc, #224]	; (800c19c <__mdiff+0x10c>)
 800c0ba:	f000 faf3 	bl	800c6a4 <__assert_func>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c8:	bfa4      	itt	ge
 800c0ca:	463b      	movge	r3, r7
 800c0cc:	4627      	movge	r7, r4
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	bfa6      	itte	ge
 800c0d4:	461c      	movge	r4, r3
 800c0d6:	2500      	movge	r5, #0
 800c0d8:	2501      	movlt	r5, #1
 800c0da:	f7ff fd3f 	bl	800bb5c <_Balloc>
 800c0de:	b920      	cbnz	r0, 800c0ea <__mdiff+0x5a>
 800c0e0:	4b2d      	ldr	r3, [pc, #180]	; (800c198 <__mdiff+0x108>)
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0e8:	e7e6      	b.n	800c0b8 <__mdiff+0x28>
 800c0ea:	693e      	ldr	r6, [r7, #16]
 800c0ec:	60c5      	str	r5, [r0, #12]
 800c0ee:	6925      	ldr	r5, [r4, #16]
 800c0f0:	f107 0114 	add.w	r1, r7, #20
 800c0f4:	f104 0914 	add.w	r9, r4, #20
 800c0f8:	f100 0e14 	add.w	lr, r0, #20
 800c0fc:	f107 0210 	add.w	r2, r7, #16
 800c100:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c104:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c108:	46f2      	mov	sl, lr
 800c10a:	2700      	movs	r7, #0
 800c10c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c110:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c114:	fa1f f883 	uxth.w	r8, r3
 800c118:	fa17 f78b 	uxtah	r7, r7, fp
 800c11c:	0c1b      	lsrs	r3, r3, #16
 800c11e:	eba7 0808 	sub.w	r8, r7, r8
 800c122:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c126:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c12a:	fa1f f888 	uxth.w	r8, r8
 800c12e:	141f      	asrs	r7, r3, #16
 800c130:	454d      	cmp	r5, r9
 800c132:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c136:	f84a 3b04 	str.w	r3, [sl], #4
 800c13a:	d8e7      	bhi.n	800c10c <__mdiff+0x7c>
 800c13c:	1b2b      	subs	r3, r5, r4
 800c13e:	3b15      	subs	r3, #21
 800c140:	f023 0303 	bic.w	r3, r3, #3
 800c144:	3304      	adds	r3, #4
 800c146:	3415      	adds	r4, #21
 800c148:	42a5      	cmp	r5, r4
 800c14a:	bf38      	it	cc
 800c14c:	2304      	movcc	r3, #4
 800c14e:	4419      	add	r1, r3
 800c150:	4473      	add	r3, lr
 800c152:	469e      	mov	lr, r3
 800c154:	460d      	mov	r5, r1
 800c156:	4565      	cmp	r5, ip
 800c158:	d30e      	bcc.n	800c178 <__mdiff+0xe8>
 800c15a:	f10c 0203 	add.w	r2, ip, #3
 800c15e:	1a52      	subs	r2, r2, r1
 800c160:	f022 0203 	bic.w	r2, r2, #3
 800c164:	3903      	subs	r1, #3
 800c166:	458c      	cmp	ip, r1
 800c168:	bf38      	it	cc
 800c16a:	2200      	movcc	r2, #0
 800c16c:	441a      	add	r2, r3
 800c16e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c172:	b17b      	cbz	r3, 800c194 <__mdiff+0x104>
 800c174:	6106      	str	r6, [r0, #16]
 800c176:	e7a5      	b.n	800c0c4 <__mdiff+0x34>
 800c178:	f855 8b04 	ldr.w	r8, [r5], #4
 800c17c:	fa17 f488 	uxtah	r4, r7, r8
 800c180:	1422      	asrs	r2, r4, #16
 800c182:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c186:	b2a4      	uxth	r4, r4
 800c188:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c18c:	f84e 4b04 	str.w	r4, [lr], #4
 800c190:	1417      	asrs	r7, r2, #16
 800c192:	e7e0      	b.n	800c156 <__mdiff+0xc6>
 800c194:	3e01      	subs	r6, #1
 800c196:	e7ea      	b.n	800c16e <__mdiff+0xde>
 800c198:	08012f77 	.word	0x08012f77
 800c19c:	08012f88 	.word	0x08012f88

0800c1a0 <__d2b>:
 800c1a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1a4:	4689      	mov	r9, r1
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	ec57 6b10 	vmov	r6, r7, d0
 800c1ac:	4690      	mov	r8, r2
 800c1ae:	f7ff fcd5 	bl	800bb5c <_Balloc>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	b930      	cbnz	r0, 800c1c4 <__d2b+0x24>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	4b25      	ldr	r3, [pc, #148]	; (800c250 <__d2b+0xb0>)
 800c1ba:	4826      	ldr	r0, [pc, #152]	; (800c254 <__d2b+0xb4>)
 800c1bc:	f240 310a 	movw	r1, #778	; 0x30a
 800c1c0:	f000 fa70 	bl	800c6a4 <__assert_func>
 800c1c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1cc:	bb35      	cbnz	r5, 800c21c <__d2b+0x7c>
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	9301      	str	r3, [sp, #4]
 800c1d2:	d028      	beq.n	800c226 <__d2b+0x86>
 800c1d4:	4668      	mov	r0, sp
 800c1d6:	9600      	str	r6, [sp, #0]
 800c1d8:	f7ff fd8c 	bl	800bcf4 <__lo0bits>
 800c1dc:	9900      	ldr	r1, [sp, #0]
 800c1de:	b300      	cbz	r0, 800c222 <__d2b+0x82>
 800c1e0:	9a01      	ldr	r2, [sp, #4]
 800c1e2:	f1c0 0320 	rsb	r3, r0, #32
 800c1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ea:	430b      	orrs	r3, r1
 800c1ec:	40c2      	lsrs	r2, r0
 800c1ee:	6163      	str	r3, [r4, #20]
 800c1f0:	9201      	str	r2, [sp, #4]
 800c1f2:	9b01      	ldr	r3, [sp, #4]
 800c1f4:	61a3      	str	r3, [r4, #24]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	bf14      	ite	ne
 800c1fa:	2202      	movne	r2, #2
 800c1fc:	2201      	moveq	r2, #1
 800c1fe:	6122      	str	r2, [r4, #16]
 800c200:	b1d5      	cbz	r5, 800c238 <__d2b+0x98>
 800c202:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c206:	4405      	add	r5, r0
 800c208:	f8c9 5000 	str.w	r5, [r9]
 800c20c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c210:	f8c8 0000 	str.w	r0, [r8]
 800c214:	4620      	mov	r0, r4
 800c216:	b003      	add	sp, #12
 800c218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c21c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c220:	e7d5      	b.n	800c1ce <__d2b+0x2e>
 800c222:	6161      	str	r1, [r4, #20]
 800c224:	e7e5      	b.n	800c1f2 <__d2b+0x52>
 800c226:	a801      	add	r0, sp, #4
 800c228:	f7ff fd64 	bl	800bcf4 <__lo0bits>
 800c22c:	9b01      	ldr	r3, [sp, #4]
 800c22e:	6163      	str	r3, [r4, #20]
 800c230:	2201      	movs	r2, #1
 800c232:	6122      	str	r2, [r4, #16]
 800c234:	3020      	adds	r0, #32
 800c236:	e7e3      	b.n	800c200 <__d2b+0x60>
 800c238:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c23c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c240:	f8c9 0000 	str.w	r0, [r9]
 800c244:	6918      	ldr	r0, [r3, #16]
 800c246:	f7ff fd35 	bl	800bcb4 <__hi0bits>
 800c24a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c24e:	e7df      	b.n	800c210 <__d2b+0x70>
 800c250:	08012f77 	.word	0x08012f77
 800c254:	08012f88 	.word	0x08012f88

0800c258 <_calloc_r>:
 800c258:	b513      	push	{r0, r1, r4, lr}
 800c25a:	434a      	muls	r2, r1
 800c25c:	4611      	mov	r1, r2
 800c25e:	9201      	str	r2, [sp, #4]
 800c260:	f000 f85a 	bl	800c318 <_malloc_r>
 800c264:	4604      	mov	r4, r0
 800c266:	b118      	cbz	r0, 800c270 <_calloc_r+0x18>
 800c268:	9a01      	ldr	r2, [sp, #4]
 800c26a:	2100      	movs	r1, #0
 800c26c:	f7fe f93c 	bl	800a4e8 <memset>
 800c270:	4620      	mov	r0, r4
 800c272:	b002      	add	sp, #8
 800c274:	bd10      	pop	{r4, pc}
	...

0800c278 <_free_r>:
 800c278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c27a:	2900      	cmp	r1, #0
 800c27c:	d048      	beq.n	800c310 <_free_r+0x98>
 800c27e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c282:	9001      	str	r0, [sp, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	f1a1 0404 	sub.w	r4, r1, #4
 800c28a:	bfb8      	it	lt
 800c28c:	18e4      	addlt	r4, r4, r3
 800c28e:	f000 fa65 	bl	800c75c <__malloc_lock>
 800c292:	4a20      	ldr	r2, [pc, #128]	; (800c314 <_free_r+0x9c>)
 800c294:	9801      	ldr	r0, [sp, #4]
 800c296:	6813      	ldr	r3, [r2, #0]
 800c298:	4615      	mov	r5, r2
 800c29a:	b933      	cbnz	r3, 800c2aa <_free_r+0x32>
 800c29c:	6063      	str	r3, [r4, #4]
 800c29e:	6014      	str	r4, [r2, #0]
 800c2a0:	b003      	add	sp, #12
 800c2a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2a6:	f000 ba5f 	b.w	800c768 <__malloc_unlock>
 800c2aa:	42a3      	cmp	r3, r4
 800c2ac:	d90b      	bls.n	800c2c6 <_free_r+0x4e>
 800c2ae:	6821      	ldr	r1, [r4, #0]
 800c2b0:	1862      	adds	r2, r4, r1
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	bf04      	itt	eq
 800c2b6:	681a      	ldreq	r2, [r3, #0]
 800c2b8:	685b      	ldreq	r3, [r3, #4]
 800c2ba:	6063      	str	r3, [r4, #4]
 800c2bc:	bf04      	itt	eq
 800c2be:	1852      	addeq	r2, r2, r1
 800c2c0:	6022      	streq	r2, [r4, #0]
 800c2c2:	602c      	str	r4, [r5, #0]
 800c2c4:	e7ec      	b.n	800c2a0 <_free_r+0x28>
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	b10b      	cbz	r3, 800c2d0 <_free_r+0x58>
 800c2cc:	42a3      	cmp	r3, r4
 800c2ce:	d9fa      	bls.n	800c2c6 <_free_r+0x4e>
 800c2d0:	6811      	ldr	r1, [r2, #0]
 800c2d2:	1855      	adds	r5, r2, r1
 800c2d4:	42a5      	cmp	r5, r4
 800c2d6:	d10b      	bne.n	800c2f0 <_free_r+0x78>
 800c2d8:	6824      	ldr	r4, [r4, #0]
 800c2da:	4421      	add	r1, r4
 800c2dc:	1854      	adds	r4, r2, r1
 800c2de:	42a3      	cmp	r3, r4
 800c2e0:	6011      	str	r1, [r2, #0]
 800c2e2:	d1dd      	bne.n	800c2a0 <_free_r+0x28>
 800c2e4:	681c      	ldr	r4, [r3, #0]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	6053      	str	r3, [r2, #4]
 800c2ea:	4421      	add	r1, r4
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	e7d7      	b.n	800c2a0 <_free_r+0x28>
 800c2f0:	d902      	bls.n	800c2f8 <_free_r+0x80>
 800c2f2:	230c      	movs	r3, #12
 800c2f4:	6003      	str	r3, [r0, #0]
 800c2f6:	e7d3      	b.n	800c2a0 <_free_r+0x28>
 800c2f8:	6825      	ldr	r5, [r4, #0]
 800c2fa:	1961      	adds	r1, r4, r5
 800c2fc:	428b      	cmp	r3, r1
 800c2fe:	bf04      	itt	eq
 800c300:	6819      	ldreq	r1, [r3, #0]
 800c302:	685b      	ldreq	r3, [r3, #4]
 800c304:	6063      	str	r3, [r4, #4]
 800c306:	bf04      	itt	eq
 800c308:	1949      	addeq	r1, r1, r5
 800c30a:	6021      	streq	r1, [r4, #0]
 800c30c:	6054      	str	r4, [r2, #4]
 800c30e:	e7c7      	b.n	800c2a0 <_free_r+0x28>
 800c310:	b003      	add	sp, #12
 800c312:	bd30      	pop	{r4, r5, pc}
 800c314:	20000888 	.word	0x20000888

0800c318 <_malloc_r>:
 800c318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31a:	1ccd      	adds	r5, r1, #3
 800c31c:	f025 0503 	bic.w	r5, r5, #3
 800c320:	3508      	adds	r5, #8
 800c322:	2d0c      	cmp	r5, #12
 800c324:	bf38      	it	cc
 800c326:	250c      	movcc	r5, #12
 800c328:	2d00      	cmp	r5, #0
 800c32a:	4606      	mov	r6, r0
 800c32c:	db01      	blt.n	800c332 <_malloc_r+0x1a>
 800c32e:	42a9      	cmp	r1, r5
 800c330:	d903      	bls.n	800c33a <_malloc_r+0x22>
 800c332:	230c      	movs	r3, #12
 800c334:	6033      	str	r3, [r6, #0]
 800c336:	2000      	movs	r0, #0
 800c338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c33a:	f000 fa0f 	bl	800c75c <__malloc_lock>
 800c33e:	4921      	ldr	r1, [pc, #132]	; (800c3c4 <_malloc_r+0xac>)
 800c340:	680a      	ldr	r2, [r1, #0]
 800c342:	4614      	mov	r4, r2
 800c344:	b99c      	cbnz	r4, 800c36e <_malloc_r+0x56>
 800c346:	4f20      	ldr	r7, [pc, #128]	; (800c3c8 <_malloc_r+0xb0>)
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	b923      	cbnz	r3, 800c356 <_malloc_r+0x3e>
 800c34c:	4621      	mov	r1, r4
 800c34e:	4630      	mov	r0, r6
 800c350:	f000 f998 	bl	800c684 <_sbrk_r>
 800c354:	6038      	str	r0, [r7, #0]
 800c356:	4629      	mov	r1, r5
 800c358:	4630      	mov	r0, r6
 800c35a:	f000 f993 	bl	800c684 <_sbrk_r>
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	d123      	bne.n	800c3aa <_malloc_r+0x92>
 800c362:	230c      	movs	r3, #12
 800c364:	6033      	str	r3, [r6, #0]
 800c366:	4630      	mov	r0, r6
 800c368:	f000 f9fe 	bl	800c768 <__malloc_unlock>
 800c36c:	e7e3      	b.n	800c336 <_malloc_r+0x1e>
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	1b5b      	subs	r3, r3, r5
 800c372:	d417      	bmi.n	800c3a4 <_malloc_r+0x8c>
 800c374:	2b0b      	cmp	r3, #11
 800c376:	d903      	bls.n	800c380 <_malloc_r+0x68>
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	441c      	add	r4, r3
 800c37c:	6025      	str	r5, [r4, #0]
 800c37e:	e004      	b.n	800c38a <_malloc_r+0x72>
 800c380:	6863      	ldr	r3, [r4, #4]
 800c382:	42a2      	cmp	r2, r4
 800c384:	bf0c      	ite	eq
 800c386:	600b      	streq	r3, [r1, #0]
 800c388:	6053      	strne	r3, [r2, #4]
 800c38a:	4630      	mov	r0, r6
 800c38c:	f000 f9ec 	bl	800c768 <__malloc_unlock>
 800c390:	f104 000b 	add.w	r0, r4, #11
 800c394:	1d23      	adds	r3, r4, #4
 800c396:	f020 0007 	bic.w	r0, r0, #7
 800c39a:	1ac2      	subs	r2, r0, r3
 800c39c:	d0cc      	beq.n	800c338 <_malloc_r+0x20>
 800c39e:	1a1b      	subs	r3, r3, r0
 800c3a0:	50a3      	str	r3, [r4, r2]
 800c3a2:	e7c9      	b.n	800c338 <_malloc_r+0x20>
 800c3a4:	4622      	mov	r2, r4
 800c3a6:	6864      	ldr	r4, [r4, #4]
 800c3a8:	e7cc      	b.n	800c344 <_malloc_r+0x2c>
 800c3aa:	1cc4      	adds	r4, r0, #3
 800c3ac:	f024 0403 	bic.w	r4, r4, #3
 800c3b0:	42a0      	cmp	r0, r4
 800c3b2:	d0e3      	beq.n	800c37c <_malloc_r+0x64>
 800c3b4:	1a21      	subs	r1, r4, r0
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	f000 f964 	bl	800c684 <_sbrk_r>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d1dd      	bne.n	800c37c <_malloc_r+0x64>
 800c3c0:	e7cf      	b.n	800c362 <_malloc_r+0x4a>
 800c3c2:	bf00      	nop
 800c3c4:	20000888 	.word	0x20000888
 800c3c8:	2000088c 	.word	0x2000088c

0800c3cc <__ssputs_r>:
 800c3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d0:	688e      	ldr	r6, [r1, #8]
 800c3d2:	429e      	cmp	r6, r3
 800c3d4:	4682      	mov	sl, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	4690      	mov	r8, r2
 800c3da:	461f      	mov	r7, r3
 800c3dc:	d838      	bhi.n	800c450 <__ssputs_r+0x84>
 800c3de:	898a      	ldrh	r2, [r1, #12]
 800c3e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3e4:	d032      	beq.n	800c44c <__ssputs_r+0x80>
 800c3e6:	6825      	ldr	r5, [r4, #0]
 800c3e8:	6909      	ldr	r1, [r1, #16]
 800c3ea:	eba5 0901 	sub.w	r9, r5, r1
 800c3ee:	6965      	ldr	r5, [r4, #20]
 800c3f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	444b      	add	r3, r9
 800c3fc:	106d      	asrs	r5, r5, #1
 800c3fe:	429d      	cmp	r5, r3
 800c400:	bf38      	it	cc
 800c402:	461d      	movcc	r5, r3
 800c404:	0553      	lsls	r3, r2, #21
 800c406:	d531      	bpl.n	800c46c <__ssputs_r+0xa0>
 800c408:	4629      	mov	r1, r5
 800c40a:	f7ff ff85 	bl	800c318 <_malloc_r>
 800c40e:	4606      	mov	r6, r0
 800c410:	b950      	cbnz	r0, 800c428 <__ssputs_r+0x5c>
 800c412:	230c      	movs	r3, #12
 800c414:	f8ca 3000 	str.w	r3, [sl]
 800c418:	89a3      	ldrh	r3, [r4, #12]
 800c41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c41e:	81a3      	strh	r3, [r4, #12]
 800c420:	f04f 30ff 	mov.w	r0, #4294967295
 800c424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c428:	6921      	ldr	r1, [r4, #16]
 800c42a:	464a      	mov	r2, r9
 800c42c:	f7ff fb88 	bl	800bb40 <memcpy>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	6126      	str	r6, [r4, #16]
 800c43e:	6165      	str	r5, [r4, #20]
 800c440:	444e      	add	r6, r9
 800c442:	eba5 0509 	sub.w	r5, r5, r9
 800c446:	6026      	str	r6, [r4, #0]
 800c448:	60a5      	str	r5, [r4, #8]
 800c44a:	463e      	mov	r6, r7
 800c44c:	42be      	cmp	r6, r7
 800c44e:	d900      	bls.n	800c452 <__ssputs_r+0x86>
 800c450:	463e      	mov	r6, r7
 800c452:	4632      	mov	r2, r6
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	4641      	mov	r1, r8
 800c458:	f000 f966 	bl	800c728 <memmove>
 800c45c:	68a3      	ldr	r3, [r4, #8]
 800c45e:	6822      	ldr	r2, [r4, #0]
 800c460:	1b9b      	subs	r3, r3, r6
 800c462:	4432      	add	r2, r6
 800c464:	60a3      	str	r3, [r4, #8]
 800c466:	6022      	str	r2, [r4, #0]
 800c468:	2000      	movs	r0, #0
 800c46a:	e7db      	b.n	800c424 <__ssputs_r+0x58>
 800c46c:	462a      	mov	r2, r5
 800c46e:	f000 f981 	bl	800c774 <_realloc_r>
 800c472:	4606      	mov	r6, r0
 800c474:	2800      	cmp	r0, #0
 800c476:	d1e1      	bne.n	800c43c <__ssputs_r+0x70>
 800c478:	6921      	ldr	r1, [r4, #16]
 800c47a:	4650      	mov	r0, sl
 800c47c:	f7ff fefc 	bl	800c278 <_free_r>
 800c480:	e7c7      	b.n	800c412 <__ssputs_r+0x46>
	...

0800c484 <_svfiprintf_r>:
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	4698      	mov	r8, r3
 800c48a:	898b      	ldrh	r3, [r1, #12]
 800c48c:	061b      	lsls	r3, r3, #24
 800c48e:	b09d      	sub	sp, #116	; 0x74
 800c490:	4607      	mov	r7, r0
 800c492:	460d      	mov	r5, r1
 800c494:	4614      	mov	r4, r2
 800c496:	d50e      	bpl.n	800c4b6 <_svfiprintf_r+0x32>
 800c498:	690b      	ldr	r3, [r1, #16]
 800c49a:	b963      	cbnz	r3, 800c4b6 <_svfiprintf_r+0x32>
 800c49c:	2140      	movs	r1, #64	; 0x40
 800c49e:	f7ff ff3b 	bl	800c318 <_malloc_r>
 800c4a2:	6028      	str	r0, [r5, #0]
 800c4a4:	6128      	str	r0, [r5, #16]
 800c4a6:	b920      	cbnz	r0, 800c4b2 <_svfiprintf_r+0x2e>
 800c4a8:	230c      	movs	r3, #12
 800c4aa:	603b      	str	r3, [r7, #0]
 800c4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b0:	e0d1      	b.n	800c656 <_svfiprintf_r+0x1d2>
 800c4b2:	2340      	movs	r3, #64	; 0x40
 800c4b4:	616b      	str	r3, [r5, #20]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ba:	2320      	movs	r3, #32
 800c4bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4c4:	2330      	movs	r3, #48	; 0x30
 800c4c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c670 <_svfiprintf_r+0x1ec>
 800c4ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4ce:	f04f 0901 	mov.w	r9, #1
 800c4d2:	4623      	mov	r3, r4
 800c4d4:	469a      	mov	sl, r3
 800c4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4da:	b10a      	cbz	r2, 800c4e0 <_svfiprintf_r+0x5c>
 800c4dc:	2a25      	cmp	r2, #37	; 0x25
 800c4de:	d1f9      	bne.n	800c4d4 <_svfiprintf_r+0x50>
 800c4e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c4e4:	d00b      	beq.n	800c4fe <_svfiprintf_r+0x7a>
 800c4e6:	465b      	mov	r3, fp
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	f7ff ff6d 	bl	800c3cc <__ssputs_r>
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	f000 80aa 	beq.w	800c64c <_svfiprintf_r+0x1c8>
 800c4f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4fa:	445a      	add	r2, fp
 800c4fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 80a2 	beq.w	800c64c <_svfiprintf_r+0x1c8>
 800c508:	2300      	movs	r3, #0
 800c50a:	f04f 32ff 	mov.w	r2, #4294967295
 800c50e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c512:	f10a 0a01 	add.w	sl, sl, #1
 800c516:	9304      	str	r3, [sp, #16]
 800c518:	9307      	str	r3, [sp, #28]
 800c51a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c51e:	931a      	str	r3, [sp, #104]	; 0x68
 800c520:	4654      	mov	r4, sl
 800c522:	2205      	movs	r2, #5
 800c524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c528:	4851      	ldr	r0, [pc, #324]	; (800c670 <_svfiprintf_r+0x1ec>)
 800c52a:	f7f3 fe69 	bl	8000200 <memchr>
 800c52e:	9a04      	ldr	r2, [sp, #16]
 800c530:	b9d8      	cbnz	r0, 800c56a <_svfiprintf_r+0xe6>
 800c532:	06d0      	lsls	r0, r2, #27
 800c534:	bf44      	itt	mi
 800c536:	2320      	movmi	r3, #32
 800c538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c53c:	0711      	lsls	r1, r2, #28
 800c53e:	bf44      	itt	mi
 800c540:	232b      	movmi	r3, #43	; 0x2b
 800c542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c546:	f89a 3000 	ldrb.w	r3, [sl]
 800c54a:	2b2a      	cmp	r3, #42	; 0x2a
 800c54c:	d015      	beq.n	800c57a <_svfiprintf_r+0xf6>
 800c54e:	9a07      	ldr	r2, [sp, #28]
 800c550:	4654      	mov	r4, sl
 800c552:	2000      	movs	r0, #0
 800c554:	f04f 0c0a 	mov.w	ip, #10
 800c558:	4621      	mov	r1, r4
 800c55a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c55e:	3b30      	subs	r3, #48	; 0x30
 800c560:	2b09      	cmp	r3, #9
 800c562:	d94e      	bls.n	800c602 <_svfiprintf_r+0x17e>
 800c564:	b1b0      	cbz	r0, 800c594 <_svfiprintf_r+0x110>
 800c566:	9207      	str	r2, [sp, #28]
 800c568:	e014      	b.n	800c594 <_svfiprintf_r+0x110>
 800c56a:	eba0 0308 	sub.w	r3, r0, r8
 800c56e:	fa09 f303 	lsl.w	r3, r9, r3
 800c572:	4313      	orrs	r3, r2
 800c574:	9304      	str	r3, [sp, #16]
 800c576:	46a2      	mov	sl, r4
 800c578:	e7d2      	b.n	800c520 <_svfiprintf_r+0x9c>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	1d19      	adds	r1, r3, #4
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	9103      	str	r1, [sp, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	bfbb      	ittet	lt
 800c586:	425b      	neglt	r3, r3
 800c588:	f042 0202 	orrlt.w	r2, r2, #2
 800c58c:	9307      	strge	r3, [sp, #28]
 800c58e:	9307      	strlt	r3, [sp, #28]
 800c590:	bfb8      	it	lt
 800c592:	9204      	strlt	r2, [sp, #16]
 800c594:	7823      	ldrb	r3, [r4, #0]
 800c596:	2b2e      	cmp	r3, #46	; 0x2e
 800c598:	d10c      	bne.n	800c5b4 <_svfiprintf_r+0x130>
 800c59a:	7863      	ldrb	r3, [r4, #1]
 800c59c:	2b2a      	cmp	r3, #42	; 0x2a
 800c59e:	d135      	bne.n	800c60c <_svfiprintf_r+0x188>
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	1d1a      	adds	r2, r3, #4
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	9203      	str	r2, [sp, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	bfb8      	it	lt
 800c5ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5b0:	3402      	adds	r4, #2
 800c5b2:	9305      	str	r3, [sp, #20]
 800c5b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c680 <_svfiprintf_r+0x1fc>
 800c5b8:	7821      	ldrb	r1, [r4, #0]
 800c5ba:	2203      	movs	r2, #3
 800c5bc:	4650      	mov	r0, sl
 800c5be:	f7f3 fe1f 	bl	8000200 <memchr>
 800c5c2:	b140      	cbz	r0, 800c5d6 <_svfiprintf_r+0x152>
 800c5c4:	2340      	movs	r3, #64	; 0x40
 800c5c6:	eba0 000a 	sub.w	r0, r0, sl
 800c5ca:	fa03 f000 	lsl.w	r0, r3, r0
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	4303      	orrs	r3, r0
 800c5d2:	3401      	adds	r4, #1
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5da:	4826      	ldr	r0, [pc, #152]	; (800c674 <_svfiprintf_r+0x1f0>)
 800c5dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5e0:	2206      	movs	r2, #6
 800c5e2:	f7f3 fe0d 	bl	8000200 <memchr>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d038      	beq.n	800c65c <_svfiprintf_r+0x1d8>
 800c5ea:	4b23      	ldr	r3, [pc, #140]	; (800c678 <_svfiprintf_r+0x1f4>)
 800c5ec:	bb1b      	cbnz	r3, 800c636 <_svfiprintf_r+0x1b2>
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	f023 0307 	bic.w	r3, r3, #7
 800c5f6:	3308      	adds	r3, #8
 800c5f8:	9303      	str	r3, [sp, #12]
 800c5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5fc:	4433      	add	r3, r6
 800c5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c600:	e767      	b.n	800c4d2 <_svfiprintf_r+0x4e>
 800c602:	fb0c 3202 	mla	r2, ip, r2, r3
 800c606:	460c      	mov	r4, r1
 800c608:	2001      	movs	r0, #1
 800c60a:	e7a5      	b.n	800c558 <_svfiprintf_r+0xd4>
 800c60c:	2300      	movs	r3, #0
 800c60e:	3401      	adds	r4, #1
 800c610:	9305      	str	r3, [sp, #20]
 800c612:	4619      	mov	r1, r3
 800c614:	f04f 0c0a 	mov.w	ip, #10
 800c618:	4620      	mov	r0, r4
 800c61a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c61e:	3a30      	subs	r2, #48	; 0x30
 800c620:	2a09      	cmp	r2, #9
 800c622:	d903      	bls.n	800c62c <_svfiprintf_r+0x1a8>
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0c5      	beq.n	800c5b4 <_svfiprintf_r+0x130>
 800c628:	9105      	str	r1, [sp, #20]
 800c62a:	e7c3      	b.n	800c5b4 <_svfiprintf_r+0x130>
 800c62c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c630:	4604      	mov	r4, r0
 800c632:	2301      	movs	r3, #1
 800c634:	e7f0      	b.n	800c618 <_svfiprintf_r+0x194>
 800c636:	ab03      	add	r3, sp, #12
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	462a      	mov	r2, r5
 800c63c:	4b0f      	ldr	r3, [pc, #60]	; (800c67c <_svfiprintf_r+0x1f8>)
 800c63e:	a904      	add	r1, sp, #16
 800c640:	4638      	mov	r0, r7
 800c642:	f7fd fff9 	bl	800a638 <_printf_float>
 800c646:	1c42      	adds	r2, r0, #1
 800c648:	4606      	mov	r6, r0
 800c64a:	d1d6      	bne.n	800c5fa <_svfiprintf_r+0x176>
 800c64c:	89ab      	ldrh	r3, [r5, #12]
 800c64e:	065b      	lsls	r3, r3, #25
 800c650:	f53f af2c 	bmi.w	800c4ac <_svfiprintf_r+0x28>
 800c654:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c656:	b01d      	add	sp, #116	; 0x74
 800c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65c:	ab03      	add	r3, sp, #12
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	462a      	mov	r2, r5
 800c662:	4b06      	ldr	r3, [pc, #24]	; (800c67c <_svfiprintf_r+0x1f8>)
 800c664:	a904      	add	r1, sp, #16
 800c666:	4638      	mov	r0, r7
 800c668:	f7fe fa8a 	bl	800ab80 <_printf_i>
 800c66c:	e7eb      	b.n	800c646 <_svfiprintf_r+0x1c2>
 800c66e:	bf00      	nop
 800c670:	080130e4 	.word	0x080130e4
 800c674:	080130ee 	.word	0x080130ee
 800c678:	0800a639 	.word	0x0800a639
 800c67c:	0800c3cd 	.word	0x0800c3cd
 800c680:	080130ea 	.word	0x080130ea

0800c684 <_sbrk_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4d06      	ldr	r5, [pc, #24]	; (800c6a0 <_sbrk_r+0x1c>)
 800c688:	2300      	movs	r3, #0
 800c68a:	4604      	mov	r4, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	602b      	str	r3, [r5, #0]
 800c690:	f002 fe34 	bl	800f2fc <_sbrk>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_sbrk_r+0x1a>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_sbrk_r+0x1a>
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	20000a58 	.word	0x20000a58

0800c6a4 <__assert_func>:
 800c6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6a6:	4614      	mov	r4, r2
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <__assert_func+0x2c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	68d8      	ldr	r0, [r3, #12]
 800c6b2:	b14c      	cbz	r4, 800c6c8 <__assert_func+0x24>
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <__assert_func+0x30>)
 800c6b6:	9100      	str	r1, [sp, #0]
 800c6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6bc:	4906      	ldr	r1, [pc, #24]	; (800c6d8 <__assert_func+0x34>)
 800c6be:	462b      	mov	r3, r5
 800c6c0:	f000 f80e 	bl	800c6e0 <fiprintf>
 800c6c4:	f000 faa4 	bl	800cc10 <abort>
 800c6c8:	4b04      	ldr	r3, [pc, #16]	; (800c6dc <__assert_func+0x38>)
 800c6ca:	461c      	mov	r4, r3
 800c6cc:	e7f3      	b.n	800c6b6 <__assert_func+0x12>
 800c6ce:	bf00      	nop
 800c6d0:	200002b0 	.word	0x200002b0
 800c6d4:	080130f5 	.word	0x080130f5
 800c6d8:	08013102 	.word	0x08013102
 800c6dc:	08013130 	.word	0x08013130

0800c6e0 <fiprintf>:
 800c6e0:	b40e      	push	{r1, r2, r3}
 800c6e2:	b503      	push	{r0, r1, lr}
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	ab03      	add	r3, sp, #12
 800c6e8:	4805      	ldr	r0, [pc, #20]	; (800c700 <fiprintf+0x20>)
 800c6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ee:	6800      	ldr	r0, [r0, #0]
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	f000 f88f 	bl	800c814 <_vfiprintf_r>
 800c6f6:	b002      	add	sp, #8
 800c6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6fc:	b003      	add	sp, #12
 800c6fe:	4770      	bx	lr
 800c700:	200002b0 	.word	0x200002b0

0800c704 <__ascii_mbtowc>:
 800c704:	b082      	sub	sp, #8
 800c706:	b901      	cbnz	r1, 800c70a <__ascii_mbtowc+0x6>
 800c708:	a901      	add	r1, sp, #4
 800c70a:	b142      	cbz	r2, 800c71e <__ascii_mbtowc+0x1a>
 800c70c:	b14b      	cbz	r3, 800c722 <__ascii_mbtowc+0x1e>
 800c70e:	7813      	ldrb	r3, [r2, #0]
 800c710:	600b      	str	r3, [r1, #0]
 800c712:	7812      	ldrb	r2, [r2, #0]
 800c714:	1e10      	subs	r0, r2, #0
 800c716:	bf18      	it	ne
 800c718:	2001      	movne	r0, #1
 800c71a:	b002      	add	sp, #8
 800c71c:	4770      	bx	lr
 800c71e:	4610      	mov	r0, r2
 800c720:	e7fb      	b.n	800c71a <__ascii_mbtowc+0x16>
 800c722:	f06f 0001 	mvn.w	r0, #1
 800c726:	e7f8      	b.n	800c71a <__ascii_mbtowc+0x16>

0800c728 <memmove>:
 800c728:	4288      	cmp	r0, r1
 800c72a:	b510      	push	{r4, lr}
 800c72c:	eb01 0402 	add.w	r4, r1, r2
 800c730:	d902      	bls.n	800c738 <memmove+0x10>
 800c732:	4284      	cmp	r4, r0
 800c734:	4623      	mov	r3, r4
 800c736:	d807      	bhi.n	800c748 <memmove+0x20>
 800c738:	1e43      	subs	r3, r0, #1
 800c73a:	42a1      	cmp	r1, r4
 800c73c:	d008      	beq.n	800c750 <memmove+0x28>
 800c73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c746:	e7f8      	b.n	800c73a <memmove+0x12>
 800c748:	4402      	add	r2, r0
 800c74a:	4601      	mov	r1, r0
 800c74c:	428a      	cmp	r2, r1
 800c74e:	d100      	bne.n	800c752 <memmove+0x2a>
 800c750:	bd10      	pop	{r4, pc}
 800c752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c75a:	e7f7      	b.n	800c74c <memmove+0x24>

0800c75c <__malloc_lock>:
 800c75c:	4801      	ldr	r0, [pc, #4]	; (800c764 <__malloc_lock+0x8>)
 800c75e:	f000 bc17 	b.w	800cf90 <__retarget_lock_acquire_recursive>
 800c762:	bf00      	nop
 800c764:	20000a60 	.word	0x20000a60

0800c768 <__malloc_unlock>:
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <__malloc_unlock+0x8>)
 800c76a:	f000 bc12 	b.w	800cf92 <__retarget_lock_release_recursive>
 800c76e:	bf00      	nop
 800c770:	20000a60 	.word	0x20000a60

0800c774 <_realloc_r>:
 800c774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c776:	4607      	mov	r7, r0
 800c778:	4614      	mov	r4, r2
 800c77a:	460e      	mov	r6, r1
 800c77c:	b921      	cbnz	r1, 800c788 <_realloc_r+0x14>
 800c77e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c782:	4611      	mov	r1, r2
 800c784:	f7ff bdc8 	b.w	800c318 <_malloc_r>
 800c788:	b922      	cbnz	r2, 800c794 <_realloc_r+0x20>
 800c78a:	f7ff fd75 	bl	800c278 <_free_r>
 800c78e:	4625      	mov	r5, r4
 800c790:	4628      	mov	r0, r5
 800c792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c794:	f000 fc62 	bl	800d05c <_malloc_usable_size_r>
 800c798:	42a0      	cmp	r0, r4
 800c79a:	d20f      	bcs.n	800c7bc <_realloc_r+0x48>
 800c79c:	4621      	mov	r1, r4
 800c79e:	4638      	mov	r0, r7
 800c7a0:	f7ff fdba 	bl	800c318 <_malloc_r>
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d0f2      	beq.n	800c790 <_realloc_r+0x1c>
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	f7ff f9c7 	bl	800bb40 <memcpy>
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff fd5f 	bl	800c278 <_free_r>
 800c7ba:	e7e9      	b.n	800c790 <_realloc_r+0x1c>
 800c7bc:	4635      	mov	r5, r6
 800c7be:	e7e7      	b.n	800c790 <_realloc_r+0x1c>

0800c7c0 <__sfputc_r>:
 800c7c0:	6893      	ldr	r3, [r2, #8]
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	b410      	push	{r4}
 800c7c8:	6093      	str	r3, [r2, #8]
 800c7ca:	da08      	bge.n	800c7de <__sfputc_r+0x1e>
 800c7cc:	6994      	ldr	r4, [r2, #24]
 800c7ce:	42a3      	cmp	r3, r4
 800c7d0:	db01      	blt.n	800c7d6 <__sfputc_r+0x16>
 800c7d2:	290a      	cmp	r1, #10
 800c7d4:	d103      	bne.n	800c7de <__sfputc_r+0x1e>
 800c7d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7da:	f000 b94b 	b.w	800ca74 <__swbuf_r>
 800c7de:	6813      	ldr	r3, [r2, #0]
 800c7e0:	1c58      	adds	r0, r3, #1
 800c7e2:	6010      	str	r0, [r2, #0]
 800c7e4:	7019      	strb	r1, [r3, #0]
 800c7e6:	4608      	mov	r0, r1
 800c7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <__sfputs_r>:
 800c7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f0:	4606      	mov	r6, r0
 800c7f2:	460f      	mov	r7, r1
 800c7f4:	4614      	mov	r4, r2
 800c7f6:	18d5      	adds	r5, r2, r3
 800c7f8:	42ac      	cmp	r4, r5
 800c7fa:	d101      	bne.n	800c800 <__sfputs_r+0x12>
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	e007      	b.n	800c810 <__sfputs_r+0x22>
 800c800:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c804:	463a      	mov	r2, r7
 800c806:	4630      	mov	r0, r6
 800c808:	f7ff ffda 	bl	800c7c0 <__sfputc_r>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d1f3      	bne.n	800c7f8 <__sfputs_r+0xa>
 800c810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c814 <_vfiprintf_r>:
 800c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	460d      	mov	r5, r1
 800c81a:	b09d      	sub	sp, #116	; 0x74
 800c81c:	4614      	mov	r4, r2
 800c81e:	4698      	mov	r8, r3
 800c820:	4606      	mov	r6, r0
 800c822:	b118      	cbz	r0, 800c82c <_vfiprintf_r+0x18>
 800c824:	6983      	ldr	r3, [r0, #24]
 800c826:	b90b      	cbnz	r3, 800c82c <_vfiprintf_r+0x18>
 800c828:	f000 fb14 	bl	800ce54 <__sinit>
 800c82c:	4b89      	ldr	r3, [pc, #548]	; (800ca54 <_vfiprintf_r+0x240>)
 800c82e:	429d      	cmp	r5, r3
 800c830:	d11b      	bne.n	800c86a <_vfiprintf_r+0x56>
 800c832:	6875      	ldr	r5, [r6, #4]
 800c834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c836:	07d9      	lsls	r1, r3, #31
 800c838:	d405      	bmi.n	800c846 <_vfiprintf_r+0x32>
 800c83a:	89ab      	ldrh	r3, [r5, #12]
 800c83c:	059a      	lsls	r2, r3, #22
 800c83e:	d402      	bmi.n	800c846 <_vfiprintf_r+0x32>
 800c840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c842:	f000 fba5 	bl	800cf90 <__retarget_lock_acquire_recursive>
 800c846:	89ab      	ldrh	r3, [r5, #12]
 800c848:	071b      	lsls	r3, r3, #28
 800c84a:	d501      	bpl.n	800c850 <_vfiprintf_r+0x3c>
 800c84c:	692b      	ldr	r3, [r5, #16]
 800c84e:	b9eb      	cbnz	r3, 800c88c <_vfiprintf_r+0x78>
 800c850:	4629      	mov	r1, r5
 800c852:	4630      	mov	r0, r6
 800c854:	f000 f96e 	bl	800cb34 <__swsetup_r>
 800c858:	b1c0      	cbz	r0, 800c88c <_vfiprintf_r+0x78>
 800c85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c85c:	07dc      	lsls	r4, r3, #31
 800c85e:	d50e      	bpl.n	800c87e <_vfiprintf_r+0x6a>
 800c860:	f04f 30ff 	mov.w	r0, #4294967295
 800c864:	b01d      	add	sp, #116	; 0x74
 800c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86a:	4b7b      	ldr	r3, [pc, #492]	; (800ca58 <_vfiprintf_r+0x244>)
 800c86c:	429d      	cmp	r5, r3
 800c86e:	d101      	bne.n	800c874 <_vfiprintf_r+0x60>
 800c870:	68b5      	ldr	r5, [r6, #8]
 800c872:	e7df      	b.n	800c834 <_vfiprintf_r+0x20>
 800c874:	4b79      	ldr	r3, [pc, #484]	; (800ca5c <_vfiprintf_r+0x248>)
 800c876:	429d      	cmp	r5, r3
 800c878:	bf08      	it	eq
 800c87a:	68f5      	ldreq	r5, [r6, #12]
 800c87c:	e7da      	b.n	800c834 <_vfiprintf_r+0x20>
 800c87e:	89ab      	ldrh	r3, [r5, #12]
 800c880:	0598      	lsls	r0, r3, #22
 800c882:	d4ed      	bmi.n	800c860 <_vfiprintf_r+0x4c>
 800c884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c886:	f000 fb84 	bl	800cf92 <__retarget_lock_release_recursive>
 800c88a:	e7e9      	b.n	800c860 <_vfiprintf_r+0x4c>
 800c88c:	2300      	movs	r3, #0
 800c88e:	9309      	str	r3, [sp, #36]	; 0x24
 800c890:	2320      	movs	r3, #32
 800c892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c896:	f8cd 800c 	str.w	r8, [sp, #12]
 800c89a:	2330      	movs	r3, #48	; 0x30
 800c89c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca60 <_vfiprintf_r+0x24c>
 800c8a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8a4:	f04f 0901 	mov.w	r9, #1
 800c8a8:	4623      	mov	r3, r4
 800c8aa:	469a      	mov	sl, r3
 800c8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b0:	b10a      	cbz	r2, 800c8b6 <_vfiprintf_r+0xa2>
 800c8b2:	2a25      	cmp	r2, #37	; 0x25
 800c8b4:	d1f9      	bne.n	800c8aa <_vfiprintf_r+0x96>
 800c8b6:	ebba 0b04 	subs.w	fp, sl, r4
 800c8ba:	d00b      	beq.n	800c8d4 <_vfiprintf_r+0xc0>
 800c8bc:	465b      	mov	r3, fp
 800c8be:	4622      	mov	r2, r4
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7ff ff93 	bl	800c7ee <__sfputs_r>
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	f000 80aa 	beq.w	800ca22 <_vfiprintf_r+0x20e>
 800c8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d0:	445a      	add	r2, fp
 800c8d2:	9209      	str	r2, [sp, #36]	; 0x24
 800c8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 80a2 	beq.w	800ca22 <_vfiprintf_r+0x20e>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8e8:	f10a 0a01 	add.w	sl, sl, #1
 800c8ec:	9304      	str	r3, [sp, #16]
 800c8ee:	9307      	str	r3, [sp, #28]
 800c8f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8f4:	931a      	str	r3, [sp, #104]	; 0x68
 800c8f6:	4654      	mov	r4, sl
 800c8f8:	2205      	movs	r2, #5
 800c8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8fe:	4858      	ldr	r0, [pc, #352]	; (800ca60 <_vfiprintf_r+0x24c>)
 800c900:	f7f3 fc7e 	bl	8000200 <memchr>
 800c904:	9a04      	ldr	r2, [sp, #16]
 800c906:	b9d8      	cbnz	r0, 800c940 <_vfiprintf_r+0x12c>
 800c908:	06d1      	lsls	r1, r2, #27
 800c90a:	bf44      	itt	mi
 800c90c:	2320      	movmi	r3, #32
 800c90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c912:	0713      	lsls	r3, r2, #28
 800c914:	bf44      	itt	mi
 800c916:	232b      	movmi	r3, #43	; 0x2b
 800c918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c91c:	f89a 3000 	ldrb.w	r3, [sl]
 800c920:	2b2a      	cmp	r3, #42	; 0x2a
 800c922:	d015      	beq.n	800c950 <_vfiprintf_r+0x13c>
 800c924:	9a07      	ldr	r2, [sp, #28]
 800c926:	4654      	mov	r4, sl
 800c928:	2000      	movs	r0, #0
 800c92a:	f04f 0c0a 	mov.w	ip, #10
 800c92e:	4621      	mov	r1, r4
 800c930:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c934:	3b30      	subs	r3, #48	; 0x30
 800c936:	2b09      	cmp	r3, #9
 800c938:	d94e      	bls.n	800c9d8 <_vfiprintf_r+0x1c4>
 800c93a:	b1b0      	cbz	r0, 800c96a <_vfiprintf_r+0x156>
 800c93c:	9207      	str	r2, [sp, #28]
 800c93e:	e014      	b.n	800c96a <_vfiprintf_r+0x156>
 800c940:	eba0 0308 	sub.w	r3, r0, r8
 800c944:	fa09 f303 	lsl.w	r3, r9, r3
 800c948:	4313      	orrs	r3, r2
 800c94a:	9304      	str	r3, [sp, #16]
 800c94c:	46a2      	mov	sl, r4
 800c94e:	e7d2      	b.n	800c8f6 <_vfiprintf_r+0xe2>
 800c950:	9b03      	ldr	r3, [sp, #12]
 800c952:	1d19      	adds	r1, r3, #4
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	9103      	str	r1, [sp, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bfbb      	ittet	lt
 800c95c:	425b      	neglt	r3, r3
 800c95e:	f042 0202 	orrlt.w	r2, r2, #2
 800c962:	9307      	strge	r3, [sp, #28]
 800c964:	9307      	strlt	r3, [sp, #28]
 800c966:	bfb8      	it	lt
 800c968:	9204      	strlt	r2, [sp, #16]
 800c96a:	7823      	ldrb	r3, [r4, #0]
 800c96c:	2b2e      	cmp	r3, #46	; 0x2e
 800c96e:	d10c      	bne.n	800c98a <_vfiprintf_r+0x176>
 800c970:	7863      	ldrb	r3, [r4, #1]
 800c972:	2b2a      	cmp	r3, #42	; 0x2a
 800c974:	d135      	bne.n	800c9e2 <_vfiprintf_r+0x1ce>
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	1d1a      	adds	r2, r3, #4
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	9203      	str	r2, [sp, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	bfb8      	it	lt
 800c982:	f04f 33ff 	movlt.w	r3, #4294967295
 800c986:	3402      	adds	r4, #2
 800c988:	9305      	str	r3, [sp, #20]
 800c98a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca70 <_vfiprintf_r+0x25c>
 800c98e:	7821      	ldrb	r1, [r4, #0]
 800c990:	2203      	movs	r2, #3
 800c992:	4650      	mov	r0, sl
 800c994:	f7f3 fc34 	bl	8000200 <memchr>
 800c998:	b140      	cbz	r0, 800c9ac <_vfiprintf_r+0x198>
 800c99a:	2340      	movs	r3, #64	; 0x40
 800c99c:	eba0 000a 	sub.w	r0, r0, sl
 800c9a0:	fa03 f000 	lsl.w	r0, r3, r0
 800c9a4:	9b04      	ldr	r3, [sp, #16]
 800c9a6:	4303      	orrs	r3, r0
 800c9a8:	3401      	adds	r4, #1
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b0:	482c      	ldr	r0, [pc, #176]	; (800ca64 <_vfiprintf_r+0x250>)
 800c9b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9b6:	2206      	movs	r2, #6
 800c9b8:	f7f3 fc22 	bl	8000200 <memchr>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d03f      	beq.n	800ca40 <_vfiprintf_r+0x22c>
 800c9c0:	4b29      	ldr	r3, [pc, #164]	; (800ca68 <_vfiprintf_r+0x254>)
 800c9c2:	bb1b      	cbnz	r3, 800ca0c <_vfiprintf_r+0x1f8>
 800c9c4:	9b03      	ldr	r3, [sp, #12]
 800c9c6:	3307      	adds	r3, #7
 800c9c8:	f023 0307 	bic.w	r3, r3, #7
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	9303      	str	r3, [sp, #12]
 800c9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d2:	443b      	add	r3, r7
 800c9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d6:	e767      	b.n	800c8a8 <_vfiprintf_r+0x94>
 800c9d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9dc:	460c      	mov	r4, r1
 800c9de:	2001      	movs	r0, #1
 800c9e0:	e7a5      	b.n	800c92e <_vfiprintf_r+0x11a>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	3401      	adds	r4, #1
 800c9e6:	9305      	str	r3, [sp, #20]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	f04f 0c0a 	mov.w	ip, #10
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9f4:	3a30      	subs	r2, #48	; 0x30
 800c9f6:	2a09      	cmp	r2, #9
 800c9f8:	d903      	bls.n	800ca02 <_vfiprintf_r+0x1ee>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d0c5      	beq.n	800c98a <_vfiprintf_r+0x176>
 800c9fe:	9105      	str	r1, [sp, #20]
 800ca00:	e7c3      	b.n	800c98a <_vfiprintf_r+0x176>
 800ca02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca06:	4604      	mov	r4, r0
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e7f0      	b.n	800c9ee <_vfiprintf_r+0x1da>
 800ca0c:	ab03      	add	r3, sp, #12
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	462a      	mov	r2, r5
 800ca12:	4b16      	ldr	r3, [pc, #88]	; (800ca6c <_vfiprintf_r+0x258>)
 800ca14:	a904      	add	r1, sp, #16
 800ca16:	4630      	mov	r0, r6
 800ca18:	f7fd fe0e 	bl	800a638 <_printf_float>
 800ca1c:	4607      	mov	r7, r0
 800ca1e:	1c78      	adds	r0, r7, #1
 800ca20:	d1d6      	bne.n	800c9d0 <_vfiprintf_r+0x1bc>
 800ca22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca24:	07d9      	lsls	r1, r3, #31
 800ca26:	d405      	bmi.n	800ca34 <_vfiprintf_r+0x220>
 800ca28:	89ab      	ldrh	r3, [r5, #12]
 800ca2a:	059a      	lsls	r2, r3, #22
 800ca2c:	d402      	bmi.n	800ca34 <_vfiprintf_r+0x220>
 800ca2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca30:	f000 faaf 	bl	800cf92 <__retarget_lock_release_recursive>
 800ca34:	89ab      	ldrh	r3, [r5, #12]
 800ca36:	065b      	lsls	r3, r3, #25
 800ca38:	f53f af12 	bmi.w	800c860 <_vfiprintf_r+0x4c>
 800ca3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca3e:	e711      	b.n	800c864 <_vfiprintf_r+0x50>
 800ca40:	ab03      	add	r3, sp, #12
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	462a      	mov	r2, r5
 800ca46:	4b09      	ldr	r3, [pc, #36]	; (800ca6c <_vfiprintf_r+0x258>)
 800ca48:	a904      	add	r1, sp, #16
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f7fe f898 	bl	800ab80 <_printf_i>
 800ca50:	e7e4      	b.n	800ca1c <_vfiprintf_r+0x208>
 800ca52:	bf00      	nop
 800ca54:	0801325c 	.word	0x0801325c
 800ca58:	0801327c 	.word	0x0801327c
 800ca5c:	0801323c 	.word	0x0801323c
 800ca60:	080130e4 	.word	0x080130e4
 800ca64:	080130ee 	.word	0x080130ee
 800ca68:	0800a639 	.word	0x0800a639
 800ca6c:	0800c7ef 	.word	0x0800c7ef
 800ca70:	080130ea 	.word	0x080130ea

0800ca74 <__swbuf_r>:
 800ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca76:	460e      	mov	r6, r1
 800ca78:	4614      	mov	r4, r2
 800ca7a:	4605      	mov	r5, r0
 800ca7c:	b118      	cbz	r0, 800ca86 <__swbuf_r+0x12>
 800ca7e:	6983      	ldr	r3, [r0, #24]
 800ca80:	b90b      	cbnz	r3, 800ca86 <__swbuf_r+0x12>
 800ca82:	f000 f9e7 	bl	800ce54 <__sinit>
 800ca86:	4b21      	ldr	r3, [pc, #132]	; (800cb0c <__swbuf_r+0x98>)
 800ca88:	429c      	cmp	r4, r3
 800ca8a:	d12b      	bne.n	800cae4 <__swbuf_r+0x70>
 800ca8c:	686c      	ldr	r4, [r5, #4]
 800ca8e:	69a3      	ldr	r3, [r4, #24]
 800ca90:	60a3      	str	r3, [r4, #8]
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	071a      	lsls	r2, r3, #28
 800ca96:	d52f      	bpl.n	800caf8 <__swbuf_r+0x84>
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	b36b      	cbz	r3, 800caf8 <__swbuf_r+0x84>
 800ca9c:	6923      	ldr	r3, [r4, #16]
 800ca9e:	6820      	ldr	r0, [r4, #0]
 800caa0:	1ac0      	subs	r0, r0, r3
 800caa2:	6963      	ldr	r3, [r4, #20]
 800caa4:	b2f6      	uxtb	r6, r6
 800caa6:	4283      	cmp	r3, r0
 800caa8:	4637      	mov	r7, r6
 800caaa:	dc04      	bgt.n	800cab6 <__swbuf_r+0x42>
 800caac:	4621      	mov	r1, r4
 800caae:	4628      	mov	r0, r5
 800cab0:	f000 f93c 	bl	800cd2c <_fflush_r>
 800cab4:	bb30      	cbnz	r0, 800cb04 <__swbuf_r+0x90>
 800cab6:	68a3      	ldr	r3, [r4, #8]
 800cab8:	3b01      	subs	r3, #1
 800caba:	60a3      	str	r3, [r4, #8]
 800cabc:	6823      	ldr	r3, [r4, #0]
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	6022      	str	r2, [r4, #0]
 800cac2:	701e      	strb	r6, [r3, #0]
 800cac4:	6963      	ldr	r3, [r4, #20]
 800cac6:	3001      	adds	r0, #1
 800cac8:	4283      	cmp	r3, r0
 800caca:	d004      	beq.n	800cad6 <__swbuf_r+0x62>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	07db      	lsls	r3, r3, #31
 800cad0:	d506      	bpl.n	800cae0 <__swbuf_r+0x6c>
 800cad2:	2e0a      	cmp	r6, #10
 800cad4:	d104      	bne.n	800cae0 <__swbuf_r+0x6c>
 800cad6:	4621      	mov	r1, r4
 800cad8:	4628      	mov	r0, r5
 800cada:	f000 f927 	bl	800cd2c <_fflush_r>
 800cade:	b988      	cbnz	r0, 800cb04 <__swbuf_r+0x90>
 800cae0:	4638      	mov	r0, r7
 800cae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae4:	4b0a      	ldr	r3, [pc, #40]	; (800cb10 <__swbuf_r+0x9c>)
 800cae6:	429c      	cmp	r4, r3
 800cae8:	d101      	bne.n	800caee <__swbuf_r+0x7a>
 800caea:	68ac      	ldr	r4, [r5, #8]
 800caec:	e7cf      	b.n	800ca8e <__swbuf_r+0x1a>
 800caee:	4b09      	ldr	r3, [pc, #36]	; (800cb14 <__swbuf_r+0xa0>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	bf08      	it	eq
 800caf4:	68ec      	ldreq	r4, [r5, #12]
 800caf6:	e7ca      	b.n	800ca8e <__swbuf_r+0x1a>
 800caf8:	4621      	mov	r1, r4
 800cafa:	4628      	mov	r0, r5
 800cafc:	f000 f81a 	bl	800cb34 <__swsetup_r>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d0cb      	beq.n	800ca9c <__swbuf_r+0x28>
 800cb04:	f04f 37ff 	mov.w	r7, #4294967295
 800cb08:	e7ea      	b.n	800cae0 <__swbuf_r+0x6c>
 800cb0a:	bf00      	nop
 800cb0c:	0801325c 	.word	0x0801325c
 800cb10:	0801327c 	.word	0x0801327c
 800cb14:	0801323c 	.word	0x0801323c

0800cb18 <__ascii_wctomb>:
 800cb18:	b149      	cbz	r1, 800cb2e <__ascii_wctomb+0x16>
 800cb1a:	2aff      	cmp	r2, #255	; 0xff
 800cb1c:	bf85      	ittet	hi
 800cb1e:	238a      	movhi	r3, #138	; 0x8a
 800cb20:	6003      	strhi	r3, [r0, #0]
 800cb22:	700a      	strbls	r2, [r1, #0]
 800cb24:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb28:	bf98      	it	ls
 800cb2a:	2001      	movls	r0, #1
 800cb2c:	4770      	bx	lr
 800cb2e:	4608      	mov	r0, r1
 800cb30:	4770      	bx	lr
	...

0800cb34 <__swsetup_r>:
 800cb34:	4b32      	ldr	r3, [pc, #200]	; (800cc00 <__swsetup_r+0xcc>)
 800cb36:	b570      	push	{r4, r5, r6, lr}
 800cb38:	681d      	ldr	r5, [r3, #0]
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	b125      	cbz	r5, 800cb4a <__swsetup_r+0x16>
 800cb40:	69ab      	ldr	r3, [r5, #24]
 800cb42:	b913      	cbnz	r3, 800cb4a <__swsetup_r+0x16>
 800cb44:	4628      	mov	r0, r5
 800cb46:	f000 f985 	bl	800ce54 <__sinit>
 800cb4a:	4b2e      	ldr	r3, [pc, #184]	; (800cc04 <__swsetup_r+0xd0>)
 800cb4c:	429c      	cmp	r4, r3
 800cb4e:	d10f      	bne.n	800cb70 <__swsetup_r+0x3c>
 800cb50:	686c      	ldr	r4, [r5, #4]
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb58:	0719      	lsls	r1, r3, #28
 800cb5a:	d42c      	bmi.n	800cbb6 <__swsetup_r+0x82>
 800cb5c:	06dd      	lsls	r5, r3, #27
 800cb5e:	d411      	bmi.n	800cb84 <__swsetup_r+0x50>
 800cb60:	2309      	movs	r3, #9
 800cb62:	6033      	str	r3, [r6, #0]
 800cb64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb68:	81a3      	strh	r3, [r4, #12]
 800cb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6e:	e03e      	b.n	800cbee <__swsetup_r+0xba>
 800cb70:	4b25      	ldr	r3, [pc, #148]	; (800cc08 <__swsetup_r+0xd4>)
 800cb72:	429c      	cmp	r4, r3
 800cb74:	d101      	bne.n	800cb7a <__swsetup_r+0x46>
 800cb76:	68ac      	ldr	r4, [r5, #8]
 800cb78:	e7eb      	b.n	800cb52 <__swsetup_r+0x1e>
 800cb7a:	4b24      	ldr	r3, [pc, #144]	; (800cc0c <__swsetup_r+0xd8>)
 800cb7c:	429c      	cmp	r4, r3
 800cb7e:	bf08      	it	eq
 800cb80:	68ec      	ldreq	r4, [r5, #12]
 800cb82:	e7e6      	b.n	800cb52 <__swsetup_r+0x1e>
 800cb84:	0758      	lsls	r0, r3, #29
 800cb86:	d512      	bpl.n	800cbae <__swsetup_r+0x7a>
 800cb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb8a:	b141      	cbz	r1, 800cb9e <__swsetup_r+0x6a>
 800cb8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb90:	4299      	cmp	r1, r3
 800cb92:	d002      	beq.n	800cb9a <__swsetup_r+0x66>
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7ff fb6f 	bl	800c278 <_free_r>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cba4:	81a3      	strh	r3, [r4, #12]
 800cba6:	2300      	movs	r3, #0
 800cba8:	6063      	str	r3, [r4, #4]
 800cbaa:	6923      	ldr	r3, [r4, #16]
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	f043 0308 	orr.w	r3, r3, #8
 800cbb4:	81a3      	strh	r3, [r4, #12]
 800cbb6:	6923      	ldr	r3, [r4, #16]
 800cbb8:	b94b      	cbnz	r3, 800cbce <__swsetup_r+0x9a>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbc4:	d003      	beq.n	800cbce <__swsetup_r+0x9a>
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f000 fa07 	bl	800cfdc <__smakebuf_r>
 800cbce:	89a0      	ldrh	r0, [r4, #12]
 800cbd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbd4:	f010 0301 	ands.w	r3, r0, #1
 800cbd8:	d00a      	beq.n	800cbf0 <__swsetup_r+0xbc>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	60a3      	str	r3, [r4, #8]
 800cbde:	6963      	ldr	r3, [r4, #20]
 800cbe0:	425b      	negs	r3, r3
 800cbe2:	61a3      	str	r3, [r4, #24]
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	b943      	cbnz	r3, 800cbfa <__swsetup_r+0xc6>
 800cbe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbec:	d1ba      	bne.n	800cb64 <__swsetup_r+0x30>
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	0781      	lsls	r1, r0, #30
 800cbf2:	bf58      	it	pl
 800cbf4:	6963      	ldrpl	r3, [r4, #20]
 800cbf6:	60a3      	str	r3, [r4, #8]
 800cbf8:	e7f4      	b.n	800cbe4 <__swsetup_r+0xb0>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e7f7      	b.n	800cbee <__swsetup_r+0xba>
 800cbfe:	bf00      	nop
 800cc00:	200002b0 	.word	0x200002b0
 800cc04:	0801325c 	.word	0x0801325c
 800cc08:	0801327c 	.word	0x0801327c
 800cc0c:	0801323c 	.word	0x0801323c

0800cc10 <abort>:
 800cc10:	b508      	push	{r3, lr}
 800cc12:	2006      	movs	r0, #6
 800cc14:	f000 fa52 	bl	800d0bc <raise>
 800cc18:	2001      	movs	r0, #1
 800cc1a:	f002 fb85 	bl	800f328 <_exit>
	...

0800cc20 <__sflush_r>:
 800cc20:	898a      	ldrh	r2, [r1, #12]
 800cc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc26:	4605      	mov	r5, r0
 800cc28:	0710      	lsls	r0, r2, #28
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	d458      	bmi.n	800cce0 <__sflush_r+0xc0>
 800cc2e:	684b      	ldr	r3, [r1, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	dc05      	bgt.n	800cc40 <__sflush_r+0x20>
 800cc34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dc02      	bgt.n	800cc40 <__sflush_r+0x20>
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc42:	2e00      	cmp	r6, #0
 800cc44:	d0f9      	beq.n	800cc3a <__sflush_r+0x1a>
 800cc46:	2300      	movs	r3, #0
 800cc48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc4c:	682f      	ldr	r7, [r5, #0]
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	d032      	beq.n	800ccb8 <__sflush_r+0x98>
 800cc52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	075a      	lsls	r2, r3, #29
 800cc58:	d505      	bpl.n	800cc66 <__sflush_r+0x46>
 800cc5a:	6863      	ldr	r3, [r4, #4]
 800cc5c:	1ac0      	subs	r0, r0, r3
 800cc5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc60:	b10b      	cbz	r3, 800cc66 <__sflush_r+0x46>
 800cc62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc64:	1ac0      	subs	r0, r0, r3
 800cc66:	2300      	movs	r3, #0
 800cc68:	4602      	mov	r2, r0
 800cc6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc6c:	6a21      	ldr	r1, [r4, #32]
 800cc6e:	4628      	mov	r0, r5
 800cc70:	47b0      	blx	r6
 800cc72:	1c43      	adds	r3, r0, #1
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	d106      	bne.n	800cc86 <__sflush_r+0x66>
 800cc78:	6829      	ldr	r1, [r5, #0]
 800cc7a:	291d      	cmp	r1, #29
 800cc7c:	d82c      	bhi.n	800ccd8 <__sflush_r+0xb8>
 800cc7e:	4a2a      	ldr	r2, [pc, #168]	; (800cd28 <__sflush_r+0x108>)
 800cc80:	40ca      	lsrs	r2, r1
 800cc82:	07d6      	lsls	r6, r2, #31
 800cc84:	d528      	bpl.n	800ccd8 <__sflush_r+0xb8>
 800cc86:	2200      	movs	r2, #0
 800cc88:	6062      	str	r2, [r4, #4]
 800cc8a:	04d9      	lsls	r1, r3, #19
 800cc8c:	6922      	ldr	r2, [r4, #16]
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	d504      	bpl.n	800cc9c <__sflush_r+0x7c>
 800cc92:	1c42      	adds	r2, r0, #1
 800cc94:	d101      	bne.n	800cc9a <__sflush_r+0x7a>
 800cc96:	682b      	ldr	r3, [r5, #0]
 800cc98:	b903      	cbnz	r3, 800cc9c <__sflush_r+0x7c>
 800cc9a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc9e:	602f      	str	r7, [r5, #0]
 800cca0:	2900      	cmp	r1, #0
 800cca2:	d0ca      	beq.n	800cc3a <__sflush_r+0x1a>
 800cca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cca8:	4299      	cmp	r1, r3
 800ccaa:	d002      	beq.n	800ccb2 <__sflush_r+0x92>
 800ccac:	4628      	mov	r0, r5
 800ccae:	f7ff fae3 	bl	800c278 <_free_r>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	6360      	str	r0, [r4, #52]	; 0x34
 800ccb6:	e7c1      	b.n	800cc3c <__sflush_r+0x1c>
 800ccb8:	6a21      	ldr	r1, [r4, #32]
 800ccba:	2301      	movs	r3, #1
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	47b0      	blx	r6
 800ccc0:	1c41      	adds	r1, r0, #1
 800ccc2:	d1c7      	bne.n	800cc54 <__sflush_r+0x34>
 800ccc4:	682b      	ldr	r3, [r5, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d0c4      	beq.n	800cc54 <__sflush_r+0x34>
 800ccca:	2b1d      	cmp	r3, #29
 800cccc:	d001      	beq.n	800ccd2 <__sflush_r+0xb2>
 800ccce:	2b16      	cmp	r3, #22
 800ccd0:	d101      	bne.n	800ccd6 <__sflush_r+0xb6>
 800ccd2:	602f      	str	r7, [r5, #0]
 800ccd4:	e7b1      	b.n	800cc3a <__sflush_r+0x1a>
 800ccd6:	89a3      	ldrh	r3, [r4, #12]
 800ccd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccdc:	81a3      	strh	r3, [r4, #12]
 800ccde:	e7ad      	b.n	800cc3c <__sflush_r+0x1c>
 800cce0:	690f      	ldr	r7, [r1, #16]
 800cce2:	2f00      	cmp	r7, #0
 800cce4:	d0a9      	beq.n	800cc3a <__sflush_r+0x1a>
 800cce6:	0793      	lsls	r3, r2, #30
 800cce8:	680e      	ldr	r6, [r1, #0]
 800ccea:	bf08      	it	eq
 800ccec:	694b      	ldreq	r3, [r1, #20]
 800ccee:	600f      	str	r7, [r1, #0]
 800ccf0:	bf18      	it	ne
 800ccf2:	2300      	movne	r3, #0
 800ccf4:	eba6 0807 	sub.w	r8, r6, r7
 800ccf8:	608b      	str	r3, [r1, #8]
 800ccfa:	f1b8 0f00 	cmp.w	r8, #0
 800ccfe:	dd9c      	ble.n	800cc3a <__sflush_r+0x1a>
 800cd00:	6a21      	ldr	r1, [r4, #32]
 800cd02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd04:	4643      	mov	r3, r8
 800cd06:	463a      	mov	r2, r7
 800cd08:	4628      	mov	r0, r5
 800cd0a:	47b0      	blx	r6
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	dc06      	bgt.n	800cd1e <__sflush_r+0xfe>
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd16:	81a3      	strh	r3, [r4, #12]
 800cd18:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1c:	e78e      	b.n	800cc3c <__sflush_r+0x1c>
 800cd1e:	4407      	add	r7, r0
 800cd20:	eba8 0800 	sub.w	r8, r8, r0
 800cd24:	e7e9      	b.n	800ccfa <__sflush_r+0xda>
 800cd26:	bf00      	nop
 800cd28:	20400001 	.word	0x20400001

0800cd2c <_fflush_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	690b      	ldr	r3, [r1, #16]
 800cd30:	4605      	mov	r5, r0
 800cd32:	460c      	mov	r4, r1
 800cd34:	b913      	cbnz	r3, 800cd3c <_fflush_r+0x10>
 800cd36:	2500      	movs	r5, #0
 800cd38:	4628      	mov	r0, r5
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	b118      	cbz	r0, 800cd46 <_fflush_r+0x1a>
 800cd3e:	6983      	ldr	r3, [r0, #24]
 800cd40:	b90b      	cbnz	r3, 800cd46 <_fflush_r+0x1a>
 800cd42:	f000 f887 	bl	800ce54 <__sinit>
 800cd46:	4b14      	ldr	r3, [pc, #80]	; (800cd98 <_fflush_r+0x6c>)
 800cd48:	429c      	cmp	r4, r3
 800cd4a:	d11b      	bne.n	800cd84 <_fflush_r+0x58>
 800cd4c:	686c      	ldr	r4, [r5, #4]
 800cd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d0ef      	beq.n	800cd36 <_fflush_r+0xa>
 800cd56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd58:	07d0      	lsls	r0, r2, #31
 800cd5a:	d404      	bmi.n	800cd66 <_fflush_r+0x3a>
 800cd5c:	0599      	lsls	r1, r3, #22
 800cd5e:	d402      	bmi.n	800cd66 <_fflush_r+0x3a>
 800cd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd62:	f000 f915 	bl	800cf90 <__retarget_lock_acquire_recursive>
 800cd66:	4628      	mov	r0, r5
 800cd68:	4621      	mov	r1, r4
 800cd6a:	f7ff ff59 	bl	800cc20 <__sflush_r>
 800cd6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd70:	07da      	lsls	r2, r3, #31
 800cd72:	4605      	mov	r5, r0
 800cd74:	d4e0      	bmi.n	800cd38 <_fflush_r+0xc>
 800cd76:	89a3      	ldrh	r3, [r4, #12]
 800cd78:	059b      	lsls	r3, r3, #22
 800cd7a:	d4dd      	bmi.n	800cd38 <_fflush_r+0xc>
 800cd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd7e:	f000 f908 	bl	800cf92 <__retarget_lock_release_recursive>
 800cd82:	e7d9      	b.n	800cd38 <_fflush_r+0xc>
 800cd84:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <_fflush_r+0x70>)
 800cd86:	429c      	cmp	r4, r3
 800cd88:	d101      	bne.n	800cd8e <_fflush_r+0x62>
 800cd8a:	68ac      	ldr	r4, [r5, #8]
 800cd8c:	e7df      	b.n	800cd4e <_fflush_r+0x22>
 800cd8e:	4b04      	ldr	r3, [pc, #16]	; (800cda0 <_fflush_r+0x74>)
 800cd90:	429c      	cmp	r4, r3
 800cd92:	bf08      	it	eq
 800cd94:	68ec      	ldreq	r4, [r5, #12]
 800cd96:	e7da      	b.n	800cd4e <_fflush_r+0x22>
 800cd98:	0801325c 	.word	0x0801325c
 800cd9c:	0801327c 	.word	0x0801327c
 800cda0:	0801323c 	.word	0x0801323c

0800cda4 <std>:
 800cda4:	2300      	movs	r3, #0
 800cda6:	b510      	push	{r4, lr}
 800cda8:	4604      	mov	r4, r0
 800cdaa:	e9c0 3300 	strd	r3, r3, [r0]
 800cdae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdb2:	6083      	str	r3, [r0, #8]
 800cdb4:	8181      	strh	r1, [r0, #12]
 800cdb6:	6643      	str	r3, [r0, #100]	; 0x64
 800cdb8:	81c2      	strh	r2, [r0, #14]
 800cdba:	6183      	str	r3, [r0, #24]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	2208      	movs	r2, #8
 800cdc0:	305c      	adds	r0, #92	; 0x5c
 800cdc2:	f7fd fb91 	bl	800a4e8 <memset>
 800cdc6:	4b05      	ldr	r3, [pc, #20]	; (800cddc <std+0x38>)
 800cdc8:	6263      	str	r3, [r4, #36]	; 0x24
 800cdca:	4b05      	ldr	r3, [pc, #20]	; (800cde0 <std+0x3c>)
 800cdcc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdce:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <std+0x40>)
 800cdd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdd2:	4b05      	ldr	r3, [pc, #20]	; (800cde8 <std+0x44>)
 800cdd4:	6224      	str	r4, [r4, #32]
 800cdd6:	6323      	str	r3, [r4, #48]	; 0x30
 800cdd8:	bd10      	pop	{r4, pc}
 800cdda:	bf00      	nop
 800cddc:	0800d0f5 	.word	0x0800d0f5
 800cde0:	0800d117 	.word	0x0800d117
 800cde4:	0800d14f 	.word	0x0800d14f
 800cde8:	0800d173 	.word	0x0800d173

0800cdec <_cleanup_r>:
 800cdec:	4901      	ldr	r1, [pc, #4]	; (800cdf4 <_cleanup_r+0x8>)
 800cdee:	f000 b8af 	b.w	800cf50 <_fwalk_reent>
 800cdf2:	bf00      	nop
 800cdf4:	0800cd2d 	.word	0x0800cd2d

0800cdf8 <__sfmoreglue>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	1e4a      	subs	r2, r1, #1
 800cdfc:	2568      	movs	r5, #104	; 0x68
 800cdfe:	4355      	muls	r5, r2
 800ce00:	460e      	mov	r6, r1
 800ce02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce06:	f7ff fa87 	bl	800c318 <_malloc_r>
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	b140      	cbz	r0, 800ce20 <__sfmoreglue+0x28>
 800ce0e:	2100      	movs	r1, #0
 800ce10:	e9c0 1600 	strd	r1, r6, [r0]
 800ce14:	300c      	adds	r0, #12
 800ce16:	60a0      	str	r0, [r4, #8]
 800ce18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce1c:	f7fd fb64 	bl	800a4e8 <memset>
 800ce20:	4620      	mov	r0, r4
 800ce22:	bd70      	pop	{r4, r5, r6, pc}

0800ce24 <__sfp_lock_acquire>:
 800ce24:	4801      	ldr	r0, [pc, #4]	; (800ce2c <__sfp_lock_acquire+0x8>)
 800ce26:	f000 b8b3 	b.w	800cf90 <__retarget_lock_acquire_recursive>
 800ce2a:	bf00      	nop
 800ce2c:	20000a64 	.word	0x20000a64

0800ce30 <__sfp_lock_release>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__sfp_lock_release+0x8>)
 800ce32:	f000 b8ae 	b.w	800cf92 <__retarget_lock_release_recursive>
 800ce36:	bf00      	nop
 800ce38:	20000a64 	.word	0x20000a64

0800ce3c <__sinit_lock_acquire>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <__sinit_lock_acquire+0x8>)
 800ce3e:	f000 b8a7 	b.w	800cf90 <__retarget_lock_acquire_recursive>
 800ce42:	bf00      	nop
 800ce44:	20000a5f 	.word	0x20000a5f

0800ce48 <__sinit_lock_release>:
 800ce48:	4801      	ldr	r0, [pc, #4]	; (800ce50 <__sinit_lock_release+0x8>)
 800ce4a:	f000 b8a2 	b.w	800cf92 <__retarget_lock_release_recursive>
 800ce4e:	bf00      	nop
 800ce50:	20000a5f 	.word	0x20000a5f

0800ce54 <__sinit>:
 800ce54:	b510      	push	{r4, lr}
 800ce56:	4604      	mov	r4, r0
 800ce58:	f7ff fff0 	bl	800ce3c <__sinit_lock_acquire>
 800ce5c:	69a3      	ldr	r3, [r4, #24]
 800ce5e:	b11b      	cbz	r3, 800ce68 <__sinit+0x14>
 800ce60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce64:	f7ff bff0 	b.w	800ce48 <__sinit_lock_release>
 800ce68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce6c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce6e:	4b13      	ldr	r3, [pc, #76]	; (800cebc <__sinit+0x68>)
 800ce70:	4a13      	ldr	r2, [pc, #76]	; (800cec0 <__sinit+0x6c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	bf04      	itt	eq
 800ce7a:	2301      	moveq	r3, #1
 800ce7c:	61a3      	streq	r3, [r4, #24]
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 f820 	bl	800cec4 <__sfp>
 800ce84:	6060      	str	r0, [r4, #4]
 800ce86:	4620      	mov	r0, r4
 800ce88:	f000 f81c 	bl	800cec4 <__sfp>
 800ce8c:	60a0      	str	r0, [r4, #8]
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 f818 	bl	800cec4 <__sfp>
 800ce94:	2200      	movs	r2, #0
 800ce96:	60e0      	str	r0, [r4, #12]
 800ce98:	2104      	movs	r1, #4
 800ce9a:	6860      	ldr	r0, [r4, #4]
 800ce9c:	f7ff ff82 	bl	800cda4 <std>
 800cea0:	68a0      	ldr	r0, [r4, #8]
 800cea2:	2201      	movs	r2, #1
 800cea4:	2109      	movs	r1, #9
 800cea6:	f7ff ff7d 	bl	800cda4 <std>
 800ceaa:	68e0      	ldr	r0, [r4, #12]
 800ceac:	2202      	movs	r2, #2
 800ceae:	2112      	movs	r1, #18
 800ceb0:	f7ff ff78 	bl	800cda4 <std>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	61a3      	str	r3, [r4, #24]
 800ceb8:	e7d2      	b.n	800ce60 <__sinit+0xc>
 800ceba:	bf00      	nop
 800cebc:	08012ebc 	.word	0x08012ebc
 800cec0:	0800cded 	.word	0x0800cded

0800cec4 <__sfp>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	4607      	mov	r7, r0
 800cec8:	f7ff ffac 	bl	800ce24 <__sfp_lock_acquire>
 800cecc:	4b1e      	ldr	r3, [pc, #120]	; (800cf48 <__sfp+0x84>)
 800cece:	681e      	ldr	r6, [r3, #0]
 800ced0:	69b3      	ldr	r3, [r6, #24]
 800ced2:	b913      	cbnz	r3, 800ceda <__sfp+0x16>
 800ced4:	4630      	mov	r0, r6
 800ced6:	f7ff ffbd 	bl	800ce54 <__sinit>
 800ceda:	3648      	adds	r6, #72	; 0x48
 800cedc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	d503      	bpl.n	800ceec <__sfp+0x28>
 800cee4:	6833      	ldr	r3, [r6, #0]
 800cee6:	b30b      	cbz	r3, 800cf2c <__sfp+0x68>
 800cee8:	6836      	ldr	r6, [r6, #0]
 800ceea:	e7f7      	b.n	800cedc <__sfp+0x18>
 800ceec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cef0:	b9d5      	cbnz	r5, 800cf28 <__sfp+0x64>
 800cef2:	4b16      	ldr	r3, [pc, #88]	; (800cf4c <__sfp+0x88>)
 800cef4:	60e3      	str	r3, [r4, #12]
 800cef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cefa:	6665      	str	r5, [r4, #100]	; 0x64
 800cefc:	f000 f847 	bl	800cf8e <__retarget_lock_init_recursive>
 800cf00:	f7ff ff96 	bl	800ce30 <__sfp_lock_release>
 800cf04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf0c:	6025      	str	r5, [r4, #0]
 800cf0e:	61a5      	str	r5, [r4, #24]
 800cf10:	2208      	movs	r2, #8
 800cf12:	4629      	mov	r1, r5
 800cf14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf18:	f7fd fae6 	bl	800a4e8 <memset>
 800cf1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf24:	4620      	mov	r0, r4
 800cf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf28:	3468      	adds	r4, #104	; 0x68
 800cf2a:	e7d9      	b.n	800cee0 <__sfp+0x1c>
 800cf2c:	2104      	movs	r1, #4
 800cf2e:	4638      	mov	r0, r7
 800cf30:	f7ff ff62 	bl	800cdf8 <__sfmoreglue>
 800cf34:	4604      	mov	r4, r0
 800cf36:	6030      	str	r0, [r6, #0]
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d1d5      	bne.n	800cee8 <__sfp+0x24>
 800cf3c:	f7ff ff78 	bl	800ce30 <__sfp_lock_release>
 800cf40:	230c      	movs	r3, #12
 800cf42:	603b      	str	r3, [r7, #0]
 800cf44:	e7ee      	b.n	800cf24 <__sfp+0x60>
 800cf46:	bf00      	nop
 800cf48:	08012ebc 	.word	0x08012ebc
 800cf4c:	ffff0001 	.word	0xffff0001

0800cf50 <_fwalk_reent>:
 800cf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf54:	4606      	mov	r6, r0
 800cf56:	4688      	mov	r8, r1
 800cf58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf5c:	2700      	movs	r7, #0
 800cf5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf62:	f1b9 0901 	subs.w	r9, r9, #1
 800cf66:	d505      	bpl.n	800cf74 <_fwalk_reent+0x24>
 800cf68:	6824      	ldr	r4, [r4, #0]
 800cf6a:	2c00      	cmp	r4, #0
 800cf6c:	d1f7      	bne.n	800cf5e <_fwalk_reent+0xe>
 800cf6e:	4638      	mov	r0, r7
 800cf70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf74:	89ab      	ldrh	r3, [r5, #12]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d907      	bls.n	800cf8a <_fwalk_reent+0x3a>
 800cf7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	d003      	beq.n	800cf8a <_fwalk_reent+0x3a>
 800cf82:	4629      	mov	r1, r5
 800cf84:	4630      	mov	r0, r6
 800cf86:	47c0      	blx	r8
 800cf88:	4307      	orrs	r7, r0
 800cf8a:	3568      	adds	r5, #104	; 0x68
 800cf8c:	e7e9      	b.n	800cf62 <_fwalk_reent+0x12>

0800cf8e <__retarget_lock_init_recursive>:
 800cf8e:	4770      	bx	lr

0800cf90 <__retarget_lock_acquire_recursive>:
 800cf90:	4770      	bx	lr

0800cf92 <__retarget_lock_release_recursive>:
 800cf92:	4770      	bx	lr

0800cf94 <__swhatbuf_r>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	460e      	mov	r6, r1
 800cf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9c:	2900      	cmp	r1, #0
 800cf9e:	b096      	sub	sp, #88	; 0x58
 800cfa0:	4614      	mov	r4, r2
 800cfa2:	461d      	mov	r5, r3
 800cfa4:	da07      	bge.n	800cfb6 <__swhatbuf_r+0x22>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	602b      	str	r3, [r5, #0]
 800cfaa:	89b3      	ldrh	r3, [r6, #12]
 800cfac:	061a      	lsls	r2, r3, #24
 800cfae:	d410      	bmi.n	800cfd2 <__swhatbuf_r+0x3e>
 800cfb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfb4:	e00e      	b.n	800cfd4 <__swhatbuf_r+0x40>
 800cfb6:	466a      	mov	r2, sp
 800cfb8:	f000 f902 	bl	800d1c0 <_fstat_r>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	dbf2      	blt.n	800cfa6 <__swhatbuf_r+0x12>
 800cfc0:	9a01      	ldr	r2, [sp, #4]
 800cfc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfca:	425a      	negs	r2, r3
 800cfcc:	415a      	adcs	r2, r3
 800cfce:	602a      	str	r2, [r5, #0]
 800cfd0:	e7ee      	b.n	800cfb0 <__swhatbuf_r+0x1c>
 800cfd2:	2340      	movs	r3, #64	; 0x40
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	6023      	str	r3, [r4, #0]
 800cfd8:	b016      	add	sp, #88	; 0x58
 800cfda:	bd70      	pop	{r4, r5, r6, pc}

0800cfdc <__smakebuf_r>:
 800cfdc:	898b      	ldrh	r3, [r1, #12]
 800cfde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfe0:	079d      	lsls	r5, r3, #30
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	d507      	bpl.n	800cff8 <__smakebuf_r+0x1c>
 800cfe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	6123      	str	r3, [r4, #16]
 800cff0:	2301      	movs	r3, #1
 800cff2:	6163      	str	r3, [r4, #20]
 800cff4:	b002      	add	sp, #8
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	ab01      	add	r3, sp, #4
 800cffa:	466a      	mov	r2, sp
 800cffc:	f7ff ffca 	bl	800cf94 <__swhatbuf_r>
 800d000:	9900      	ldr	r1, [sp, #0]
 800d002:	4605      	mov	r5, r0
 800d004:	4630      	mov	r0, r6
 800d006:	f7ff f987 	bl	800c318 <_malloc_r>
 800d00a:	b948      	cbnz	r0, 800d020 <__smakebuf_r+0x44>
 800d00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d010:	059a      	lsls	r2, r3, #22
 800d012:	d4ef      	bmi.n	800cff4 <__smakebuf_r+0x18>
 800d014:	f023 0303 	bic.w	r3, r3, #3
 800d018:	f043 0302 	orr.w	r3, r3, #2
 800d01c:	81a3      	strh	r3, [r4, #12]
 800d01e:	e7e3      	b.n	800cfe8 <__smakebuf_r+0xc>
 800d020:	4b0d      	ldr	r3, [pc, #52]	; (800d058 <__smakebuf_r+0x7c>)
 800d022:	62b3      	str	r3, [r6, #40]	; 0x28
 800d024:	89a3      	ldrh	r3, [r4, #12]
 800d026:	6020      	str	r0, [r4, #0]
 800d028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d02c:	81a3      	strh	r3, [r4, #12]
 800d02e:	9b00      	ldr	r3, [sp, #0]
 800d030:	6163      	str	r3, [r4, #20]
 800d032:	9b01      	ldr	r3, [sp, #4]
 800d034:	6120      	str	r0, [r4, #16]
 800d036:	b15b      	cbz	r3, 800d050 <__smakebuf_r+0x74>
 800d038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d03c:	4630      	mov	r0, r6
 800d03e:	f000 f8d1 	bl	800d1e4 <_isatty_r>
 800d042:	b128      	cbz	r0, 800d050 <__smakebuf_r+0x74>
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	f023 0303 	bic.w	r3, r3, #3
 800d04a:	f043 0301 	orr.w	r3, r3, #1
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	89a0      	ldrh	r0, [r4, #12]
 800d052:	4305      	orrs	r5, r0
 800d054:	81a5      	strh	r5, [r4, #12]
 800d056:	e7cd      	b.n	800cff4 <__smakebuf_r+0x18>
 800d058:	0800cded 	.word	0x0800cded

0800d05c <_malloc_usable_size_r>:
 800d05c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d060:	1f18      	subs	r0, r3, #4
 800d062:	2b00      	cmp	r3, #0
 800d064:	bfbc      	itt	lt
 800d066:	580b      	ldrlt	r3, [r1, r0]
 800d068:	18c0      	addlt	r0, r0, r3
 800d06a:	4770      	bx	lr

0800d06c <_raise_r>:
 800d06c:	291f      	cmp	r1, #31
 800d06e:	b538      	push	{r3, r4, r5, lr}
 800d070:	4604      	mov	r4, r0
 800d072:	460d      	mov	r5, r1
 800d074:	d904      	bls.n	800d080 <_raise_r+0x14>
 800d076:	2316      	movs	r3, #22
 800d078:	6003      	str	r3, [r0, #0]
 800d07a:	f04f 30ff 	mov.w	r0, #4294967295
 800d07e:	bd38      	pop	{r3, r4, r5, pc}
 800d080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d082:	b112      	cbz	r2, 800d08a <_raise_r+0x1e>
 800d084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d088:	b94b      	cbnz	r3, 800d09e <_raise_r+0x32>
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 f830 	bl	800d0f0 <_getpid_r>
 800d090:	462a      	mov	r2, r5
 800d092:	4601      	mov	r1, r0
 800d094:	4620      	mov	r0, r4
 800d096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d09a:	f000 b817 	b.w	800d0cc <_kill_r>
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d00a      	beq.n	800d0b8 <_raise_r+0x4c>
 800d0a2:	1c59      	adds	r1, r3, #1
 800d0a4:	d103      	bne.n	800d0ae <_raise_r+0x42>
 800d0a6:	2316      	movs	r3, #22
 800d0a8:	6003      	str	r3, [r0, #0]
 800d0aa:	2001      	movs	r0, #1
 800d0ac:	e7e7      	b.n	800d07e <_raise_r+0x12>
 800d0ae:	2400      	movs	r4, #0
 800d0b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	4798      	blx	r3
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	e7e0      	b.n	800d07e <_raise_r+0x12>

0800d0bc <raise>:
 800d0bc:	4b02      	ldr	r3, [pc, #8]	; (800d0c8 <raise+0xc>)
 800d0be:	4601      	mov	r1, r0
 800d0c0:	6818      	ldr	r0, [r3, #0]
 800d0c2:	f7ff bfd3 	b.w	800d06c <_raise_r>
 800d0c6:	bf00      	nop
 800d0c8:	200002b0 	.word	0x200002b0

0800d0cc <_kill_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4d07      	ldr	r5, [pc, #28]	; (800d0ec <_kill_r+0x20>)
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	602b      	str	r3, [r5, #0]
 800d0da:	f002 f8f7 	bl	800f2cc <_kill>
 800d0de:	1c43      	adds	r3, r0, #1
 800d0e0:	d102      	bne.n	800d0e8 <_kill_r+0x1c>
 800d0e2:	682b      	ldr	r3, [r5, #0]
 800d0e4:	b103      	cbz	r3, 800d0e8 <_kill_r+0x1c>
 800d0e6:	6023      	str	r3, [r4, #0]
 800d0e8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ea:	bf00      	nop
 800d0ec:	20000a58 	.word	0x20000a58

0800d0f0 <_getpid_r>:
 800d0f0:	f002 b8dc 	b.w	800f2ac <_getpid>

0800d0f4 <__sread>:
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0fc:	f000 f894 	bl	800d228 <_read_r>
 800d100:	2800      	cmp	r0, #0
 800d102:	bfab      	itete	ge
 800d104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d106:	89a3      	ldrhlt	r3, [r4, #12]
 800d108:	181b      	addge	r3, r3, r0
 800d10a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d10e:	bfac      	ite	ge
 800d110:	6563      	strge	r3, [r4, #84]	; 0x54
 800d112:	81a3      	strhlt	r3, [r4, #12]
 800d114:	bd10      	pop	{r4, pc}

0800d116 <__swrite>:
 800d116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11a:	461f      	mov	r7, r3
 800d11c:	898b      	ldrh	r3, [r1, #12]
 800d11e:	05db      	lsls	r3, r3, #23
 800d120:	4605      	mov	r5, r0
 800d122:	460c      	mov	r4, r1
 800d124:	4616      	mov	r6, r2
 800d126:	d505      	bpl.n	800d134 <__swrite+0x1e>
 800d128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12c:	2302      	movs	r3, #2
 800d12e:	2200      	movs	r2, #0
 800d130:	f000 f868 	bl	800d204 <_lseek_r>
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d13a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	4632      	mov	r2, r6
 800d142:	463b      	mov	r3, r7
 800d144:	4628      	mov	r0, r5
 800d146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d14a:	f000 b817 	b.w	800d17c <_write_r>

0800d14e <__sseek>:
 800d14e:	b510      	push	{r4, lr}
 800d150:	460c      	mov	r4, r1
 800d152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d156:	f000 f855 	bl	800d204 <_lseek_r>
 800d15a:	1c43      	adds	r3, r0, #1
 800d15c:	89a3      	ldrh	r3, [r4, #12]
 800d15e:	bf15      	itete	ne
 800d160:	6560      	strne	r0, [r4, #84]	; 0x54
 800d162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d16a:	81a3      	strheq	r3, [r4, #12]
 800d16c:	bf18      	it	ne
 800d16e:	81a3      	strhne	r3, [r4, #12]
 800d170:	bd10      	pop	{r4, pc}

0800d172 <__sclose>:
 800d172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d176:	f000 b813 	b.w	800d1a0 <_close_r>
	...

0800d17c <_write_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4d07      	ldr	r5, [pc, #28]	; (800d19c <_write_r+0x20>)
 800d180:	4604      	mov	r4, r0
 800d182:	4608      	mov	r0, r1
 800d184:	4611      	mov	r1, r2
 800d186:	2200      	movs	r2, #0
 800d188:	602a      	str	r2, [r5, #0]
 800d18a:	461a      	mov	r2, r3
 800d18c:	f002 f8c4 	bl	800f318 <_write>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_write_r+0x1e>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_write_r+0x1e>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	20000a58 	.word	0x20000a58

0800d1a0 <_close_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4d06      	ldr	r5, [pc, #24]	; (800d1bc <_close_r+0x1c>)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	602b      	str	r3, [r5, #0]
 800d1ac:	f002 f86e 	bl	800f28c <_close>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_close_r+0x1a>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_close_r+0x1a>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	20000a58 	.word	0x20000a58

0800d1c0 <_fstat_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4d07      	ldr	r5, [pc, #28]	; (800d1e0 <_fstat_r+0x20>)
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	4608      	mov	r0, r1
 800d1ca:	4611      	mov	r1, r2
 800d1cc:	602b      	str	r3, [r5, #0]
 800d1ce:	f002 f865 	bl	800f29c <_fstat>
 800d1d2:	1c43      	adds	r3, r0, #1
 800d1d4:	d102      	bne.n	800d1dc <_fstat_r+0x1c>
 800d1d6:	682b      	ldr	r3, [r5, #0]
 800d1d8:	b103      	cbz	r3, 800d1dc <_fstat_r+0x1c>
 800d1da:	6023      	str	r3, [r4, #0]
 800d1dc:	bd38      	pop	{r3, r4, r5, pc}
 800d1de:	bf00      	nop
 800d1e0:	20000a58 	.word	0x20000a58

0800d1e4 <_isatty_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4d06      	ldr	r5, [pc, #24]	; (800d200 <_isatty_r+0x1c>)
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	602b      	str	r3, [r5, #0]
 800d1f0:	f002 f864 	bl	800f2bc <_isatty>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d102      	bne.n	800d1fe <_isatty_r+0x1a>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <_isatty_r+0x1a>
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	20000a58 	.word	0x20000a58

0800d204 <_lseek_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4d07      	ldr	r5, [pc, #28]	; (800d224 <_lseek_r+0x20>)
 800d208:	4604      	mov	r4, r0
 800d20a:	4608      	mov	r0, r1
 800d20c:	4611      	mov	r1, r2
 800d20e:	2200      	movs	r2, #0
 800d210:	602a      	str	r2, [r5, #0]
 800d212:	461a      	mov	r2, r3
 800d214:	f002 f862 	bl	800f2dc <_lseek>
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	d102      	bne.n	800d222 <_lseek_r+0x1e>
 800d21c:	682b      	ldr	r3, [r5, #0]
 800d21e:	b103      	cbz	r3, 800d222 <_lseek_r+0x1e>
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	bd38      	pop	{r3, r4, r5, pc}
 800d224:	20000a58 	.word	0x20000a58

0800d228 <_read_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d07      	ldr	r5, [pc, #28]	; (800d248 <_read_r+0x20>)
 800d22c:	4604      	mov	r4, r0
 800d22e:	4608      	mov	r0, r1
 800d230:	4611      	mov	r1, r2
 800d232:	2200      	movs	r2, #0
 800d234:	602a      	str	r2, [r5, #0]
 800d236:	461a      	mov	r2, r3
 800d238:	f002 f858 	bl	800f2ec <_read>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d102      	bne.n	800d246 <_read_r+0x1e>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	b103      	cbz	r3, 800d246 <_read_r+0x1e>
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	20000a58 	.word	0x20000a58
 800d24c:	00000000 	.word	0x00000000

0800d250 <sin>:
 800d250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d252:	ec53 2b10 	vmov	r2, r3, d0
 800d256:	4826      	ldr	r0, [pc, #152]	; (800d2f0 <sin+0xa0>)
 800d258:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d25c:	4281      	cmp	r1, r0
 800d25e:	dc07      	bgt.n	800d270 <sin+0x20>
 800d260:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d2e8 <sin+0x98>
 800d264:	2000      	movs	r0, #0
 800d266:	f001 fa47 	bl	800e6f8 <__kernel_sin>
 800d26a:	ec51 0b10 	vmov	r0, r1, d0
 800d26e:	e007      	b.n	800d280 <sin+0x30>
 800d270:	4820      	ldr	r0, [pc, #128]	; (800d2f4 <sin+0xa4>)
 800d272:	4281      	cmp	r1, r0
 800d274:	dd09      	ble.n	800d28a <sin+0x3a>
 800d276:	ee10 0a10 	vmov	r0, s0
 800d27a:	4619      	mov	r1, r3
 800d27c:	f7f3 f814 	bl	80002a8 <__aeabi_dsub>
 800d280:	ec41 0b10 	vmov	d0, r0, r1
 800d284:	b005      	add	sp, #20
 800d286:	f85d fb04 	ldr.w	pc, [sp], #4
 800d28a:	4668      	mov	r0, sp
 800d28c:	f000 f900 	bl	800d490 <__ieee754_rem_pio2>
 800d290:	f000 0003 	and.w	r0, r0, #3
 800d294:	2801      	cmp	r0, #1
 800d296:	d008      	beq.n	800d2aa <sin+0x5a>
 800d298:	2802      	cmp	r0, #2
 800d29a:	d00d      	beq.n	800d2b8 <sin+0x68>
 800d29c:	b9d0      	cbnz	r0, 800d2d4 <sin+0x84>
 800d29e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2a2:	ed9d 0b00 	vldr	d0, [sp]
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	e7dd      	b.n	800d266 <sin+0x16>
 800d2aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2ae:	ed9d 0b00 	vldr	d0, [sp]
 800d2b2:	f000 fe19 	bl	800dee8 <__kernel_cos>
 800d2b6:	e7d8      	b.n	800d26a <sin+0x1a>
 800d2b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2bc:	ed9d 0b00 	vldr	d0, [sp]
 800d2c0:	2001      	movs	r0, #1
 800d2c2:	f001 fa19 	bl	800e6f8 <__kernel_sin>
 800d2c6:	ec53 2b10 	vmov	r2, r3, d0
 800d2ca:	ee10 0a10 	vmov	r0, s0
 800d2ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d2d2:	e7d5      	b.n	800d280 <sin+0x30>
 800d2d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2d8:	ed9d 0b00 	vldr	d0, [sp]
 800d2dc:	f000 fe04 	bl	800dee8 <__kernel_cos>
 800d2e0:	e7f1      	b.n	800d2c6 <sin+0x76>
 800d2e2:	bf00      	nop
 800d2e4:	f3af 8000 	nop.w
	...
 800d2f0:	3fe921fb 	.word	0x3fe921fb
 800d2f4:	7fefffff 	.word	0x7fefffff

0800d2f8 <cosf>:
 800d2f8:	ee10 3a10 	vmov	r3, s0
 800d2fc:	b507      	push	{r0, r1, r2, lr}
 800d2fe:	4a1c      	ldr	r2, [pc, #112]	; (800d370 <cosf+0x78>)
 800d300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d304:	4293      	cmp	r3, r2
 800d306:	dc04      	bgt.n	800d312 <cosf+0x1a>
 800d308:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800d374 <cosf+0x7c>
 800d30c:	f001 fab2 	bl	800e874 <__kernel_cosf>
 800d310:	e004      	b.n	800d31c <cosf+0x24>
 800d312:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d316:	db04      	blt.n	800d322 <cosf+0x2a>
 800d318:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d31c:	b003      	add	sp, #12
 800d31e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d322:	4668      	mov	r0, sp
 800d324:	f000 fc9e 	bl	800dc64 <__ieee754_rem_pio2f>
 800d328:	f000 0003 	and.w	r0, r0, #3
 800d32c:	2801      	cmp	r0, #1
 800d32e:	d007      	beq.n	800d340 <cosf+0x48>
 800d330:	2802      	cmp	r0, #2
 800d332:	d00e      	beq.n	800d352 <cosf+0x5a>
 800d334:	b9a0      	cbnz	r0, 800d360 <cosf+0x68>
 800d336:	eddd 0a01 	vldr	s1, [sp, #4]
 800d33a:	ed9d 0a00 	vldr	s0, [sp]
 800d33e:	e7e5      	b.n	800d30c <cosf+0x14>
 800d340:	eddd 0a01 	vldr	s1, [sp, #4]
 800d344:	ed9d 0a00 	vldr	s0, [sp]
 800d348:	f001 fd7e 	bl	800ee48 <__kernel_sinf>
 800d34c:	eeb1 0a40 	vneg.f32	s0, s0
 800d350:	e7e4      	b.n	800d31c <cosf+0x24>
 800d352:	eddd 0a01 	vldr	s1, [sp, #4]
 800d356:	ed9d 0a00 	vldr	s0, [sp]
 800d35a:	f001 fa8b 	bl	800e874 <__kernel_cosf>
 800d35e:	e7f5      	b.n	800d34c <cosf+0x54>
 800d360:	eddd 0a01 	vldr	s1, [sp, #4]
 800d364:	ed9d 0a00 	vldr	s0, [sp]
 800d368:	2001      	movs	r0, #1
 800d36a:	f001 fd6d 	bl	800ee48 <__kernel_sinf>
 800d36e:	e7d5      	b.n	800d31c <cosf+0x24>
 800d370:	3f490fd8 	.word	0x3f490fd8
 800d374:	00000000 	.word	0x00000000

0800d378 <acosf>:
 800d378:	b508      	push	{r3, lr}
 800d37a:	ed2d 8b02 	vpush	{d8}
 800d37e:	eeb0 8a40 	vmov.f32	s16, s0
 800d382:	f000 fa8f 	bl	800d8a4 <__ieee754_acosf>
 800d386:	4b13      	ldr	r3, [pc, #76]	; (800d3d4 <acosf+0x5c>)
 800d388:	f993 3000 	ldrsb.w	r3, [r3]
 800d38c:	3301      	adds	r3, #1
 800d38e:	eef0 8a40 	vmov.f32	s17, s0
 800d392:	d01a      	beq.n	800d3ca <acosf+0x52>
 800d394:	eeb4 8a48 	vcmp.f32	s16, s16
 800d398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39c:	d615      	bvs.n	800d3ca <acosf+0x52>
 800d39e:	eeb0 0a48 	vmov.f32	s0, s16
 800d3a2:	f001 feab 	bl	800f0fc <fabsf>
 800d3a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d3aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b2:	dd0a      	ble.n	800d3ca <acosf+0x52>
 800d3b4:	f001 ff64 	bl	800f280 <__errno>
 800d3b8:	ecbd 8b02 	vpop	{d8}
 800d3bc:	2321      	movs	r3, #33	; 0x21
 800d3be:	6003      	str	r3, [r0, #0]
 800d3c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d3c4:	4804      	ldr	r0, [pc, #16]	; (800d3d8 <acosf+0x60>)
 800d3c6:	f001 bee3 	b.w	800f190 <nanf>
 800d3ca:	eeb0 0a68 	vmov.f32	s0, s17
 800d3ce:	ecbd 8b02 	vpop	{d8}
 800d3d2:	bd08      	pop	{r3, pc}
 800d3d4:	20000480 	.word	0x20000480
 800d3d8:	08013130 	.word	0x08013130

0800d3dc <asinf>:
 800d3dc:	b508      	push	{r3, lr}
 800d3de:	ed2d 8b02 	vpush	{d8}
 800d3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800d3e6:	f000 fb57 	bl	800da98 <__ieee754_asinf>
 800d3ea:	4b13      	ldr	r3, [pc, #76]	; (800d438 <asinf+0x5c>)
 800d3ec:	f993 3000 	ldrsb.w	r3, [r3]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	eef0 8a40 	vmov.f32	s17, s0
 800d3f6:	d01a      	beq.n	800d42e <asinf+0x52>
 800d3f8:	eeb4 8a48 	vcmp.f32	s16, s16
 800d3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d400:	d615      	bvs.n	800d42e <asinf+0x52>
 800d402:	eeb0 0a48 	vmov.f32	s0, s16
 800d406:	f001 fe79 	bl	800f0fc <fabsf>
 800d40a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d40e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d416:	dd0a      	ble.n	800d42e <asinf+0x52>
 800d418:	f001 ff32 	bl	800f280 <__errno>
 800d41c:	ecbd 8b02 	vpop	{d8}
 800d420:	2321      	movs	r3, #33	; 0x21
 800d422:	6003      	str	r3, [r0, #0]
 800d424:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d428:	4804      	ldr	r0, [pc, #16]	; (800d43c <asinf+0x60>)
 800d42a:	f001 beb1 	b.w	800f190 <nanf>
 800d42e:	eeb0 0a68 	vmov.f32	s0, s17
 800d432:	ecbd 8b02 	vpop	{d8}
 800d436:	bd08      	pop	{r3, pc}
 800d438:	20000480 	.word	0x20000480
 800d43c:	08013130 	.word	0x08013130

0800d440 <sqrtf>:
 800d440:	b508      	push	{r3, lr}
 800d442:	ed2d 8b02 	vpush	{d8}
 800d446:	eeb0 8a40 	vmov.f32	s16, s0
 800d44a:	f000 fd47 	bl	800dedc <__ieee754_sqrtf>
 800d44e:	4b0d      	ldr	r3, [pc, #52]	; (800d484 <sqrtf+0x44>)
 800d450:	f993 3000 	ldrsb.w	r3, [r3]
 800d454:	3301      	adds	r3, #1
 800d456:	d011      	beq.n	800d47c <sqrtf+0x3c>
 800d458:	eeb4 8a48 	vcmp.f32	s16, s16
 800d45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d460:	d60c      	bvs.n	800d47c <sqrtf+0x3c>
 800d462:	eddf 8a09 	vldr	s17, [pc, #36]	; 800d488 <sqrtf+0x48>
 800d466:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d46e:	d505      	bpl.n	800d47c <sqrtf+0x3c>
 800d470:	f001 ff06 	bl	800f280 <__errno>
 800d474:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d478:	2321      	movs	r3, #33	; 0x21
 800d47a:	6003      	str	r3, [r0, #0]
 800d47c:	ecbd 8b02 	vpop	{d8}
 800d480:	bd08      	pop	{r3, pc}
 800d482:	bf00      	nop
 800d484:	20000480 	.word	0x20000480
	...

0800d490 <__ieee754_rem_pio2>:
 800d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d494:	ed2d 8b02 	vpush	{d8}
 800d498:	ec55 4b10 	vmov	r4, r5, d0
 800d49c:	4bca      	ldr	r3, [pc, #808]	; (800d7c8 <__ieee754_rem_pio2+0x338>)
 800d49e:	b08b      	sub	sp, #44	; 0x2c
 800d4a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d4a4:	4598      	cmp	r8, r3
 800d4a6:	4682      	mov	sl, r0
 800d4a8:	9502      	str	r5, [sp, #8]
 800d4aa:	dc08      	bgt.n	800d4be <__ieee754_rem_pio2+0x2e>
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	ed80 0b00 	vstr	d0, [r0]
 800d4b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d4b8:	f04f 0b00 	mov.w	fp, #0
 800d4bc:	e028      	b.n	800d510 <__ieee754_rem_pio2+0x80>
 800d4be:	4bc3      	ldr	r3, [pc, #780]	; (800d7cc <__ieee754_rem_pio2+0x33c>)
 800d4c0:	4598      	cmp	r8, r3
 800d4c2:	dc78      	bgt.n	800d5b6 <__ieee754_rem_pio2+0x126>
 800d4c4:	9b02      	ldr	r3, [sp, #8]
 800d4c6:	4ec2      	ldr	r6, [pc, #776]	; (800d7d0 <__ieee754_rem_pio2+0x340>)
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	ee10 0a10 	vmov	r0, s0
 800d4ce:	a3b0      	add	r3, pc, #704	; (adr r3, 800d790 <__ieee754_rem_pio2+0x300>)
 800d4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	dd39      	ble.n	800d54c <__ieee754_rem_pio2+0xbc>
 800d4d8:	f7f2 fee6 	bl	80002a8 <__aeabi_dsub>
 800d4dc:	45b0      	cmp	r8, r6
 800d4de:	4604      	mov	r4, r0
 800d4e0:	460d      	mov	r5, r1
 800d4e2:	d01b      	beq.n	800d51c <__ieee754_rem_pio2+0x8c>
 800d4e4:	a3ac      	add	r3, pc, #688	; (adr r3, 800d798 <__ieee754_rem_pio2+0x308>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f2 fedd 	bl	80002a8 <__aeabi_dsub>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	e9ca 2300 	strd	r2, r3, [sl]
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	f7f2 fed5 	bl	80002a8 <__aeabi_dsub>
 800d4fe:	a3a6      	add	r3, pc, #664	; (adr r3, 800d798 <__ieee754_rem_pio2+0x308>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	f7f2 fed0 	bl	80002a8 <__aeabi_dsub>
 800d508:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d50c:	f04f 0b01 	mov.w	fp, #1
 800d510:	4658      	mov	r0, fp
 800d512:	b00b      	add	sp, #44	; 0x2c
 800d514:	ecbd 8b02 	vpop	{d8}
 800d518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x310>)
 800d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d522:	f7f2 fec1 	bl	80002a8 <__aeabi_dsub>
 800d526:	a3a0      	add	r3, pc, #640	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x318>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	4604      	mov	r4, r0
 800d52e:	460d      	mov	r5, r1
 800d530:	f7f2 feba 	bl	80002a8 <__aeabi_dsub>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	e9ca 2300 	strd	r2, r3, [sl]
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f7f2 feb2 	bl	80002a8 <__aeabi_dsub>
 800d544:	a398      	add	r3, pc, #608	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x318>)
 800d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54a:	e7db      	b.n	800d504 <__ieee754_rem_pio2+0x74>
 800d54c:	f7f2 feae 	bl	80002ac <__adddf3>
 800d550:	45b0      	cmp	r8, r6
 800d552:	4604      	mov	r4, r0
 800d554:	460d      	mov	r5, r1
 800d556:	d016      	beq.n	800d586 <__ieee754_rem_pio2+0xf6>
 800d558:	a38f      	add	r3, pc, #572	; (adr r3, 800d798 <__ieee754_rem_pio2+0x308>)
 800d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55e:	f7f2 fea5 	bl	80002ac <__adddf3>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	e9ca 2300 	strd	r2, r3, [sl]
 800d56a:	4620      	mov	r0, r4
 800d56c:	4629      	mov	r1, r5
 800d56e:	f7f2 fe9b 	bl	80002a8 <__aeabi_dsub>
 800d572:	a389      	add	r3, pc, #548	; (adr r3, 800d798 <__ieee754_rem_pio2+0x308>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f2 fe98 	bl	80002ac <__adddf3>
 800d57c:	f04f 3bff 	mov.w	fp, #4294967295
 800d580:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d584:	e7c4      	b.n	800d510 <__ieee754_rem_pio2+0x80>
 800d586:	a386      	add	r3, pc, #536	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x310>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	f7f2 fe8e 	bl	80002ac <__adddf3>
 800d590:	a385      	add	r3, pc, #532	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x318>)
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	4604      	mov	r4, r0
 800d598:	460d      	mov	r5, r1
 800d59a:	f7f2 fe87 	bl	80002ac <__adddf3>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	e9ca 2300 	strd	r2, r3, [sl]
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	f7f2 fe7d 	bl	80002a8 <__aeabi_dsub>
 800d5ae:	a37e      	add	r3, pc, #504	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x318>)
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	e7e0      	b.n	800d578 <__ieee754_rem_pio2+0xe8>
 800d5b6:	4b87      	ldr	r3, [pc, #540]	; (800d7d4 <__ieee754_rem_pio2+0x344>)
 800d5b8:	4598      	cmp	r8, r3
 800d5ba:	f300 80d9 	bgt.w	800d770 <__ieee754_rem_pio2+0x2e0>
 800d5be:	f001 fc8b 	bl	800eed8 <fabs>
 800d5c2:	ec55 4b10 	vmov	r4, r5, d0
 800d5c6:	ee10 0a10 	vmov	r0, s0
 800d5ca:	a379      	add	r3, pc, #484	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x320>)
 800d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	f7f3 f821 	bl	8000618 <__aeabi_dmul>
 800d5d6:	4b80      	ldr	r3, [pc, #512]	; (800d7d8 <__ieee754_rem_pio2+0x348>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f7f2 fe67 	bl	80002ac <__adddf3>
 800d5de:	f7f3 facb 	bl	8000b78 <__aeabi_d2iz>
 800d5e2:	4683      	mov	fp, r0
 800d5e4:	f7f2 ffae 	bl	8000544 <__aeabi_i2d>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	ec43 2b18 	vmov	d8, r2, r3
 800d5f0:	a367      	add	r3, pc, #412	; (adr r3, 800d790 <__ieee754_rem_pio2+0x300>)
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	f7f3 f80f 	bl	8000618 <__aeabi_dmul>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	4620      	mov	r0, r4
 800d600:	4629      	mov	r1, r5
 800d602:	f7f2 fe51 	bl	80002a8 <__aeabi_dsub>
 800d606:	a364      	add	r3, pc, #400	; (adr r3, 800d798 <__ieee754_rem_pio2+0x308>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	4606      	mov	r6, r0
 800d60e:	460f      	mov	r7, r1
 800d610:	ec51 0b18 	vmov	r0, r1, d8
 800d614:	f7f3 f800 	bl	8000618 <__aeabi_dmul>
 800d618:	f1bb 0f1f 	cmp.w	fp, #31
 800d61c:	4604      	mov	r4, r0
 800d61e:	460d      	mov	r5, r1
 800d620:	dc0d      	bgt.n	800d63e <__ieee754_rem_pio2+0x1ae>
 800d622:	4b6e      	ldr	r3, [pc, #440]	; (800d7dc <__ieee754_rem_pio2+0x34c>)
 800d624:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	4543      	cmp	r3, r8
 800d62e:	d006      	beq.n	800d63e <__ieee754_rem_pio2+0x1ae>
 800d630:	4622      	mov	r2, r4
 800d632:	462b      	mov	r3, r5
 800d634:	4630      	mov	r0, r6
 800d636:	4639      	mov	r1, r7
 800d638:	f7f2 fe36 	bl	80002a8 <__aeabi_dsub>
 800d63c:	e00f      	b.n	800d65e <__ieee754_rem_pio2+0x1ce>
 800d63e:	462b      	mov	r3, r5
 800d640:	4622      	mov	r2, r4
 800d642:	4630      	mov	r0, r6
 800d644:	4639      	mov	r1, r7
 800d646:	f7f2 fe2f 	bl	80002a8 <__aeabi_dsub>
 800d64a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d64e:	9303      	str	r3, [sp, #12]
 800d650:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d654:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d658:	f1b8 0f10 	cmp.w	r8, #16
 800d65c:	dc02      	bgt.n	800d664 <__ieee754_rem_pio2+0x1d4>
 800d65e:	e9ca 0100 	strd	r0, r1, [sl]
 800d662:	e039      	b.n	800d6d8 <__ieee754_rem_pio2+0x248>
 800d664:	a34e      	add	r3, pc, #312	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x310>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	ec51 0b18 	vmov	r0, r1, d8
 800d66e:	f7f2 ffd3 	bl	8000618 <__aeabi_dmul>
 800d672:	4604      	mov	r4, r0
 800d674:	460d      	mov	r5, r1
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	4630      	mov	r0, r6
 800d67c:	4639      	mov	r1, r7
 800d67e:	f7f2 fe13 	bl	80002a8 <__aeabi_dsub>
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	4680      	mov	r8, r0
 800d688:	4689      	mov	r9, r1
 800d68a:	4630      	mov	r0, r6
 800d68c:	4639      	mov	r1, r7
 800d68e:	f7f2 fe0b 	bl	80002a8 <__aeabi_dsub>
 800d692:	4622      	mov	r2, r4
 800d694:	462b      	mov	r3, r5
 800d696:	f7f2 fe07 	bl	80002a8 <__aeabi_dsub>
 800d69a:	a343      	add	r3, pc, #268	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x318>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	ec51 0b18 	vmov	r0, r1, d8
 800d6a8:	f7f2 ffb6 	bl	8000618 <__aeabi_dmul>
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	462b      	mov	r3, r5
 800d6b0:	f7f2 fdfa 	bl	80002a8 <__aeabi_dsub>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4604      	mov	r4, r0
 800d6ba:	460d      	mov	r5, r1
 800d6bc:	4640      	mov	r0, r8
 800d6be:	4649      	mov	r1, r9
 800d6c0:	f7f2 fdf2 	bl	80002a8 <__aeabi_dsub>
 800d6c4:	9a03      	ldr	r2, [sp, #12]
 800d6c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	2b31      	cmp	r3, #49	; 0x31
 800d6ce:	dc24      	bgt.n	800d71a <__ieee754_rem_pio2+0x28a>
 800d6d0:	e9ca 0100 	strd	r0, r1, [sl]
 800d6d4:	4646      	mov	r6, r8
 800d6d6:	464f      	mov	r7, r9
 800d6d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800d6dc:	4630      	mov	r0, r6
 800d6de:	4642      	mov	r2, r8
 800d6e0:	464b      	mov	r3, r9
 800d6e2:	4639      	mov	r1, r7
 800d6e4:	f7f2 fde0 	bl	80002a8 <__aeabi_dsub>
 800d6e8:	462b      	mov	r3, r5
 800d6ea:	4622      	mov	r2, r4
 800d6ec:	f7f2 fddc 	bl	80002a8 <__aeabi_dsub>
 800d6f0:	9b02      	ldr	r3, [sp, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d6f8:	f6bf af0a 	bge.w	800d510 <__ieee754_rem_pio2+0x80>
 800d6fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d700:	f8ca 3004 	str.w	r3, [sl, #4]
 800d704:	f8ca 8000 	str.w	r8, [sl]
 800d708:	f8ca 0008 	str.w	r0, [sl, #8]
 800d70c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d710:	f8ca 300c 	str.w	r3, [sl, #12]
 800d714:	f1cb 0b00 	rsb	fp, fp, #0
 800d718:	e6fa      	b.n	800d510 <__ieee754_rem_pio2+0x80>
 800d71a:	a327      	add	r3, pc, #156	; (adr r3, 800d7b8 <__ieee754_rem_pio2+0x328>)
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	ec51 0b18 	vmov	r0, r1, d8
 800d724:	f7f2 ff78 	bl	8000618 <__aeabi_dmul>
 800d728:	4604      	mov	r4, r0
 800d72a:	460d      	mov	r5, r1
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4640      	mov	r0, r8
 800d732:	4649      	mov	r1, r9
 800d734:	f7f2 fdb8 	bl	80002a8 <__aeabi_dsub>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4606      	mov	r6, r0
 800d73e:	460f      	mov	r7, r1
 800d740:	4640      	mov	r0, r8
 800d742:	4649      	mov	r1, r9
 800d744:	f7f2 fdb0 	bl	80002a8 <__aeabi_dsub>
 800d748:	4622      	mov	r2, r4
 800d74a:	462b      	mov	r3, r5
 800d74c:	f7f2 fdac 	bl	80002a8 <__aeabi_dsub>
 800d750:	a31b      	add	r3, pc, #108	; (adr r3, 800d7c0 <__ieee754_rem_pio2+0x330>)
 800d752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d756:	4604      	mov	r4, r0
 800d758:	460d      	mov	r5, r1
 800d75a:	ec51 0b18 	vmov	r0, r1, d8
 800d75e:	f7f2 ff5b 	bl	8000618 <__aeabi_dmul>
 800d762:	4622      	mov	r2, r4
 800d764:	462b      	mov	r3, r5
 800d766:	f7f2 fd9f 	bl	80002a8 <__aeabi_dsub>
 800d76a:	4604      	mov	r4, r0
 800d76c:	460d      	mov	r5, r1
 800d76e:	e75f      	b.n	800d630 <__ieee754_rem_pio2+0x1a0>
 800d770:	4b1b      	ldr	r3, [pc, #108]	; (800d7e0 <__ieee754_rem_pio2+0x350>)
 800d772:	4598      	cmp	r8, r3
 800d774:	dd36      	ble.n	800d7e4 <__ieee754_rem_pio2+0x354>
 800d776:	ee10 2a10 	vmov	r2, s0
 800d77a:	462b      	mov	r3, r5
 800d77c:	4620      	mov	r0, r4
 800d77e:	4629      	mov	r1, r5
 800d780:	f7f2 fd92 	bl	80002a8 <__aeabi_dsub>
 800d784:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d788:	e9ca 0100 	strd	r0, r1, [sl]
 800d78c:	e694      	b.n	800d4b8 <__ieee754_rem_pio2+0x28>
 800d78e:	bf00      	nop
 800d790:	54400000 	.word	0x54400000
 800d794:	3ff921fb 	.word	0x3ff921fb
 800d798:	1a626331 	.word	0x1a626331
 800d79c:	3dd0b461 	.word	0x3dd0b461
 800d7a0:	1a600000 	.word	0x1a600000
 800d7a4:	3dd0b461 	.word	0x3dd0b461
 800d7a8:	2e037073 	.word	0x2e037073
 800d7ac:	3ba3198a 	.word	0x3ba3198a
 800d7b0:	6dc9c883 	.word	0x6dc9c883
 800d7b4:	3fe45f30 	.word	0x3fe45f30
 800d7b8:	2e000000 	.word	0x2e000000
 800d7bc:	3ba3198a 	.word	0x3ba3198a
 800d7c0:	252049c1 	.word	0x252049c1
 800d7c4:	397b839a 	.word	0x397b839a
 800d7c8:	3fe921fb 	.word	0x3fe921fb
 800d7cc:	4002d97b 	.word	0x4002d97b
 800d7d0:	3ff921fb 	.word	0x3ff921fb
 800d7d4:	413921fb 	.word	0x413921fb
 800d7d8:	3fe00000 	.word	0x3fe00000
 800d7dc:	0801329c 	.word	0x0801329c
 800d7e0:	7fefffff 	.word	0x7fefffff
 800d7e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d7e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d7ec:	ee10 0a10 	vmov	r0, s0
 800d7f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d7f4:	ee10 6a10 	vmov	r6, s0
 800d7f8:	460f      	mov	r7, r1
 800d7fa:	f7f3 f9bd 	bl	8000b78 <__aeabi_d2iz>
 800d7fe:	f7f2 fea1 	bl	8000544 <__aeabi_i2d>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4630      	mov	r0, r6
 800d808:	4639      	mov	r1, r7
 800d80a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d80e:	f7f2 fd4b 	bl	80002a8 <__aeabi_dsub>
 800d812:	4b22      	ldr	r3, [pc, #136]	; (800d89c <__ieee754_rem_pio2+0x40c>)
 800d814:	2200      	movs	r2, #0
 800d816:	f7f2 feff 	bl	8000618 <__aeabi_dmul>
 800d81a:	460f      	mov	r7, r1
 800d81c:	4606      	mov	r6, r0
 800d81e:	f7f3 f9ab 	bl	8000b78 <__aeabi_d2iz>
 800d822:	f7f2 fe8f 	bl	8000544 <__aeabi_i2d>
 800d826:	4602      	mov	r2, r0
 800d828:	460b      	mov	r3, r1
 800d82a:	4630      	mov	r0, r6
 800d82c:	4639      	mov	r1, r7
 800d82e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d832:	f7f2 fd39 	bl	80002a8 <__aeabi_dsub>
 800d836:	4b19      	ldr	r3, [pc, #100]	; (800d89c <__ieee754_rem_pio2+0x40c>)
 800d838:	2200      	movs	r2, #0
 800d83a:	f7f2 feed 	bl	8000618 <__aeabi_dmul>
 800d83e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d842:	ad04      	add	r5, sp, #16
 800d844:	f04f 0803 	mov.w	r8, #3
 800d848:	46a9      	mov	r9, r5
 800d84a:	2600      	movs	r6, #0
 800d84c:	2700      	movs	r7, #0
 800d84e:	4632      	mov	r2, r6
 800d850:	463b      	mov	r3, r7
 800d852:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d856:	46c3      	mov	fp, r8
 800d858:	3d08      	subs	r5, #8
 800d85a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d85e:	f7f3 f943 	bl	8000ae8 <__aeabi_dcmpeq>
 800d862:	2800      	cmp	r0, #0
 800d864:	d1f3      	bne.n	800d84e <__ieee754_rem_pio2+0x3be>
 800d866:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <__ieee754_rem_pio2+0x410>)
 800d868:	9301      	str	r3, [sp, #4]
 800d86a:	2302      	movs	r3, #2
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	4622      	mov	r2, r4
 800d870:	465b      	mov	r3, fp
 800d872:	4651      	mov	r1, sl
 800d874:	4648      	mov	r0, r9
 800d876:	f000 fbff 	bl	800e078 <__kernel_rem_pio2>
 800d87a:	9b02      	ldr	r3, [sp, #8]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	4683      	mov	fp, r0
 800d880:	f6bf ae46 	bge.w	800d510 <__ieee754_rem_pio2+0x80>
 800d884:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d888:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d88c:	f8ca 3004 	str.w	r3, [sl, #4]
 800d890:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d894:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d898:	e73a      	b.n	800d710 <__ieee754_rem_pio2+0x280>
 800d89a:	bf00      	nop
 800d89c:	41700000 	.word	0x41700000
 800d8a0:	0801331c 	.word	0x0801331c

0800d8a4 <__ieee754_acosf>:
 800d8a4:	b508      	push	{r3, lr}
 800d8a6:	ee10 3a10 	vmov	r3, s0
 800d8aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d8ae:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d8b2:	ed2d 8b0c 	vpush	{d8-d13}
 800d8b6:	d10a      	bne.n	800d8ce <__ieee754_acosf+0x2a>
 800d8b8:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800da54 <__ieee754_acosf+0x1b0>
 800d8bc:	ed9f 8a66 	vldr	s16, [pc, #408]	; 800da58 <__ieee754_acosf+0x1b4>
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	bfd8      	it	le
 800d8c4:	eeb0 0a48 	vmovle.f32	s0, s16
 800d8c8:	ecbd 8b0c 	vpop	{d8-d13}
 800d8cc:	bd08      	pop	{r3, pc}
 800d8ce:	dd04      	ble.n	800d8da <__ieee754_acosf+0x36>
 800d8d0:	ee30 8a40 	vsub.f32	s16, s0, s0
 800d8d4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d8d8:	e7f6      	b.n	800d8c8 <__ieee754_acosf+0x24>
 800d8da:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800d8de:	da3e      	bge.n	800d95e <__ieee754_acosf+0xba>
 800d8e0:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800d8e4:	f340 80b3 	ble.w	800da4e <__ieee754_acosf+0x1aa>
 800d8e8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d8ec:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800da5c <__ieee754_acosf+0x1b8>
 800d8f0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800da60 <__ieee754_acosf+0x1bc>
 800d8f4:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800da64 <__ieee754_acosf+0x1c0>
 800d8f8:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 800da68 <__ieee754_acosf+0x1c4>
 800d8fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d900:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800da6c <__ieee754_acosf+0x1c8>
 800d904:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d908:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800da70 <__ieee754_acosf+0x1cc>
 800d90c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d910:	eddf 6a58 	vldr	s13, [pc, #352]	; 800da74 <__ieee754_acosf+0x1d0>
 800d914:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d918:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800da78 <__ieee754_acosf+0x1d4>
 800d91c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d920:	eddf 6a56 	vldr	s13, [pc, #344]	; 800da7c <__ieee754_acosf+0x1d8>
 800d924:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800d928:	eddf 6a55 	vldr	s13, [pc, #340]	; 800da80 <__ieee754_acosf+0x1dc>
 800d92c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d930:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800da84 <__ieee754_acosf+0x1e0>
 800d934:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d93c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d940:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d944:	eef0 7a66 	vmov.f32	s15, s13
 800d948:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d94c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800da88 <__ieee754_acosf+0x1e4>
 800d950:	eea0 8a66 	vfms.f32	s16, s0, s13
 800d954:	ee30 0a48 	vsub.f32	s0, s0, s16
 800d958:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d95c:	e7b4      	b.n	800d8c8 <__ieee754_acosf+0x24>
 800d95e:	2b00      	cmp	r3, #0
 800d960:	eddf da3e 	vldr	s27, [pc, #248]	; 800da5c <__ieee754_acosf+0x1b8>
 800d964:	eddf ca3e 	vldr	s25, [pc, #248]	; 800da60 <__ieee754_acosf+0x1bc>
 800d968:	ed9f ca40 	vldr	s24, [pc, #256]	; 800da6c <__ieee754_acosf+0x1c8>
 800d96c:	eddf ba40 	vldr	s23, [pc, #256]	; 800da70 <__ieee754_acosf+0x1cc>
 800d970:	ed9f ba40 	vldr	s22, [pc, #256]	; 800da74 <__ieee754_acosf+0x1d0>
 800d974:	eddf 8a40 	vldr	s17, [pc, #256]	; 800da78 <__ieee754_acosf+0x1d4>
 800d978:	ed9f da40 	vldr	s26, [pc, #256]	; 800da7c <__ieee754_acosf+0x1d8>
 800d97c:	eddf aa39 	vldr	s21, [pc, #228]	; 800da64 <__ieee754_acosf+0x1c0>
 800d980:	ed9f aa3f 	vldr	s20, [pc, #252]	; 800da80 <__ieee754_acosf+0x1dc>
 800d984:	eddf 9a3f 	vldr	s19, [pc, #252]	; 800da84 <__ieee754_acosf+0x1e0>
 800d988:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800d98c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d990:	da28      	bge.n	800d9e4 <__ieee754_acosf+0x140>
 800d992:	ee30 0a09 	vadd.f32	s0, s0, s18
 800d996:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d99a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800d99e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800d9a2:	eeac ca80 	vfma.f32	s24, s25, s0
 800d9a6:	eeaa aa80 	vfma.f32	s20, s21, s0
 800d9aa:	eeec ba00 	vfma.f32	s23, s24, s0
 800d9ae:	eeea 9a00 	vfma.f32	s19, s20, s0
 800d9b2:	eeab ba80 	vfma.f32	s22, s23, s0
 800d9b6:	eea9 9a80 	vfma.f32	s18, s19, s0
 800d9ba:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800d9be:	ee68 8a80 	vmul.f32	s17, s17, s0
 800d9c2:	f000 fa8b 	bl	800dedc <__ieee754_sqrtf>
 800d9c6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800d9ca:	eddf 7a30 	vldr	s15, [pc, #192]	; 800da8c <__ieee754_acosf+0x1e8>
 800d9ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d9d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d9d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d9da:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800da90 <__ieee754_acosf+0x1ec>
 800d9de:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d9e2:	e771      	b.n	800d8c8 <__ieee754_acosf+0x24>
 800d9e4:	ee39 8a40 	vsub.f32	s16, s18, s0
 800d9e8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d9ec:	eeb0 0a48 	vmov.f32	s0, s16
 800d9f0:	f000 fa74 	bl	800dedc <__ieee754_sqrtf>
 800d9f4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800d9f8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800d9fc:	eeac ca88 	vfma.f32	s24, s25, s16
 800da00:	eeaa aa88 	vfma.f32	s20, s21, s16
 800da04:	eeec ba08 	vfma.f32	s23, s24, s16
 800da08:	ee10 3a10 	vmov	r3, s0
 800da0c:	eeab ba88 	vfma.f32	s22, s23, s16
 800da10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800da14:	f023 030f 	bic.w	r3, r3, #15
 800da18:	eeea 9a08 	vfma.f32	s19, s20, s16
 800da1c:	ee07 3a90 	vmov	s15, r3
 800da20:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800da24:	eeb0 6a48 	vmov.f32	s12, s16
 800da28:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800da2c:	eea9 9a88 	vfma.f32	s18, s19, s16
 800da30:	ee70 6a27 	vadd.f32	s13, s0, s15
 800da34:	ee68 8a88 	vmul.f32	s17, s17, s16
 800da38:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800da3c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800da40:	eea0 7a26 	vfma.f32	s14, s0, s13
 800da44:	ee37 0a87 	vadd.f32	s0, s15, s14
 800da48:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da4c:	e73c      	b.n	800d8c8 <__ieee754_acosf+0x24>
 800da4e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800da94 <__ieee754_acosf+0x1f0>
 800da52:	e739      	b.n	800d8c8 <__ieee754_acosf+0x24>
 800da54:	00000000 	.word	0x00000000
 800da58:	40490fdb 	.word	0x40490fdb
 800da5c:	3811ef08 	.word	0x3811ef08
 800da60:	3a4f7f04 	.word	0x3a4f7f04
 800da64:	bf303361 	.word	0xbf303361
 800da68:	33a22168 	.word	0x33a22168
 800da6c:	bd241146 	.word	0xbd241146
 800da70:	3e4e0aa8 	.word	0x3e4e0aa8
 800da74:	bea6b090 	.word	0xbea6b090
 800da78:	3e2aaaab 	.word	0x3e2aaaab
 800da7c:	3d9dc62e 	.word	0x3d9dc62e
 800da80:	4001572d 	.word	0x4001572d
 800da84:	c019d139 	.word	0xc019d139
 800da88:	3fc90fda 	.word	0x3fc90fda
 800da8c:	b3a22168 	.word	0xb3a22168
 800da90:	40490fda 	.word	0x40490fda
 800da94:	3fc90fdb 	.word	0x3fc90fdb

0800da98 <__ieee754_asinf>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	ee10 5a10 	vmov	r5, s0
 800da9e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800daa2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800daa6:	ed2d 8b04 	vpush	{d8-d9}
 800daaa:	d10c      	bne.n	800dac6 <__ieee754_asinf+0x2e>
 800daac:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800dc24 <__ieee754_asinf+0x18c>
 800dab0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800dc28 <__ieee754_asinf+0x190>
 800dab4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dab8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dabc:	eeb0 0a67 	vmov.f32	s0, s15
 800dac0:	ecbd 8b04 	vpop	{d8-d9}
 800dac4:	bd38      	pop	{r3, r4, r5, pc}
 800dac6:	dd04      	ble.n	800dad2 <__ieee754_asinf+0x3a>
 800dac8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dacc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800dad0:	e7f6      	b.n	800dac0 <__ieee754_asinf+0x28>
 800dad2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800dad6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800dada:	da0b      	bge.n	800daf4 <__ieee754_asinf+0x5c>
 800dadc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800dae0:	da52      	bge.n	800db88 <__ieee754_asinf+0xf0>
 800dae2:	eddf 7a52 	vldr	s15, [pc, #328]	; 800dc2c <__ieee754_asinf+0x194>
 800dae6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800daea:	eef4 7ae8 	vcmpe.f32	s15, s17
 800daee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf2:	dce5      	bgt.n	800dac0 <__ieee754_asinf+0x28>
 800daf4:	f001 fb02 	bl	800f0fc <fabsf>
 800daf8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800dafc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800db00:	ee20 8a08 	vmul.f32	s16, s0, s16
 800db04:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800dc30 <__ieee754_asinf+0x198>
 800db08:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800dc34 <__ieee754_asinf+0x19c>
 800db0c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800dc38 <__ieee754_asinf+0x1a0>
 800db10:	eea8 7a27 	vfma.f32	s14, s16, s15
 800db14:	eddf 7a49 	vldr	s15, [pc, #292]	; 800dc3c <__ieee754_asinf+0x1a4>
 800db18:	eee7 7a08 	vfma.f32	s15, s14, s16
 800db1c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800dc40 <__ieee754_asinf+0x1a8>
 800db20:	eea7 7a88 	vfma.f32	s14, s15, s16
 800db24:	eddf 7a47 	vldr	s15, [pc, #284]	; 800dc44 <__ieee754_asinf+0x1ac>
 800db28:	eee7 7a08 	vfma.f32	s15, s14, s16
 800db2c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800dc48 <__ieee754_asinf+0x1b0>
 800db30:	eea7 9a88 	vfma.f32	s18, s15, s16
 800db34:	eddf 7a45 	vldr	s15, [pc, #276]	; 800dc4c <__ieee754_asinf+0x1b4>
 800db38:	eee8 7a07 	vfma.f32	s15, s16, s14
 800db3c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800dc50 <__ieee754_asinf+0x1b8>
 800db40:	eea7 7a88 	vfma.f32	s14, s15, s16
 800db44:	eddf 7a43 	vldr	s15, [pc, #268]	; 800dc54 <__ieee754_asinf+0x1bc>
 800db48:	eee7 7a08 	vfma.f32	s15, s14, s16
 800db4c:	eeb0 0a48 	vmov.f32	s0, s16
 800db50:	eee7 8a88 	vfma.f32	s17, s15, s16
 800db54:	f000 f9c2 	bl	800dedc <__ieee754_sqrtf>
 800db58:	4b3f      	ldr	r3, [pc, #252]	; (800dc58 <__ieee754_asinf+0x1c0>)
 800db5a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800db5e:	429c      	cmp	r4, r3
 800db60:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800db64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800db68:	dd3d      	ble.n	800dbe6 <__ieee754_asinf+0x14e>
 800db6a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800db6e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800dc5c <__ieee754_asinf+0x1c4>
 800db72:	eee0 7a26 	vfma.f32	s15, s0, s13
 800db76:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800dc28 <__ieee754_asinf+0x190>
 800db7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db7e:	2d00      	cmp	r5, #0
 800db80:	bfd8      	it	le
 800db82:	eeb1 0a40 	vnegle.f32	s0, s0
 800db86:	e79b      	b.n	800dac0 <__ieee754_asinf+0x28>
 800db88:	ee60 7a00 	vmul.f32	s15, s0, s0
 800db8c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800dc30 <__ieee754_asinf+0x198>
 800db90:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800dc34 <__ieee754_asinf+0x19c>
 800db94:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800dc48 <__ieee754_asinf+0x1b0>
 800db98:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800db9c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800dc3c <__ieee754_asinf+0x1a4>
 800dba0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dba4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800dc40 <__ieee754_asinf+0x1a8>
 800dba8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dbac:	eddf 6a25 	vldr	s13, [pc, #148]	; 800dc44 <__ieee754_asinf+0x1ac>
 800dbb0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dbb4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800dc38 <__ieee754_asinf+0x1a0>
 800dbb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dbbc:	eddf 6a23 	vldr	s13, [pc, #140]	; 800dc4c <__ieee754_asinf+0x1b4>
 800dbc0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800dbc4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800dc50 <__ieee754_asinf+0x1b8>
 800dbc8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800dbcc:	eddf 6a21 	vldr	s13, [pc, #132]	; 800dc54 <__ieee754_asinf+0x1bc>
 800dbd0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800dbd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbd8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800dbdc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800dbe0:	eea0 0a27 	vfma.f32	s0, s0, s15
 800dbe4:	e76c      	b.n	800dac0 <__ieee754_asinf+0x28>
 800dbe6:	ee10 3a10 	vmov	r3, s0
 800dbea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dbee:	f023 030f 	bic.w	r3, r3, #15
 800dbf2:	ee07 3a10 	vmov	s14, r3
 800dbf6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800dbfa:	ee70 7a07 	vadd.f32	s15, s0, s14
 800dbfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dc02:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800dc06:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dc24 <__ieee754_asinf+0x18c>
 800dc0a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800dc0e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800dc12:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800dc60 <__ieee754_asinf+0x1c8>
 800dc16:	eeb0 6a40 	vmov.f32	s12, s0
 800dc1a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800dc1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dc22:	e7aa      	b.n	800db7a <__ieee754_asinf+0xe2>
 800dc24:	b33bbd2e 	.word	0xb33bbd2e
 800dc28:	3fc90fdb 	.word	0x3fc90fdb
 800dc2c:	7149f2ca 	.word	0x7149f2ca
 800dc30:	3811ef08 	.word	0x3811ef08
 800dc34:	3a4f7f04 	.word	0x3a4f7f04
 800dc38:	3e2aaaab 	.word	0x3e2aaaab
 800dc3c:	bd241146 	.word	0xbd241146
 800dc40:	3e4e0aa8 	.word	0x3e4e0aa8
 800dc44:	bea6b090 	.word	0xbea6b090
 800dc48:	3d9dc62e 	.word	0x3d9dc62e
 800dc4c:	bf303361 	.word	0xbf303361
 800dc50:	4001572d 	.word	0x4001572d
 800dc54:	c019d139 	.word	0xc019d139
 800dc58:	3f799999 	.word	0x3f799999
 800dc5c:	333bbd2e 	.word	0x333bbd2e
 800dc60:	3f490fdb 	.word	0x3f490fdb

0800dc64 <__ieee754_rem_pio2f>:
 800dc64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc66:	ee10 6a10 	vmov	r6, s0
 800dc6a:	4b8e      	ldr	r3, [pc, #568]	; (800dea4 <__ieee754_rem_pio2f+0x240>)
 800dc6c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800dc70:	429d      	cmp	r5, r3
 800dc72:	b087      	sub	sp, #28
 800dc74:	eef0 7a40 	vmov.f32	s15, s0
 800dc78:	4604      	mov	r4, r0
 800dc7a:	dc05      	bgt.n	800dc88 <__ieee754_rem_pio2f+0x24>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	ed80 0a00 	vstr	s0, [r0]
 800dc82:	6043      	str	r3, [r0, #4]
 800dc84:	2000      	movs	r0, #0
 800dc86:	e01a      	b.n	800dcbe <__ieee754_rem_pio2f+0x5a>
 800dc88:	4b87      	ldr	r3, [pc, #540]	; (800dea8 <__ieee754_rem_pio2f+0x244>)
 800dc8a:	429d      	cmp	r5, r3
 800dc8c:	dc46      	bgt.n	800dd1c <__ieee754_rem_pio2f+0xb8>
 800dc8e:	2e00      	cmp	r6, #0
 800dc90:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800deac <__ieee754_rem_pio2f+0x248>
 800dc94:	4b86      	ldr	r3, [pc, #536]	; (800deb0 <__ieee754_rem_pio2f+0x24c>)
 800dc96:	f025 050f 	bic.w	r5, r5, #15
 800dc9a:	dd1f      	ble.n	800dcdc <__ieee754_rem_pio2f+0x78>
 800dc9c:	429d      	cmp	r5, r3
 800dc9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dca2:	d00e      	beq.n	800dcc2 <__ieee754_rem_pio2f+0x5e>
 800dca4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800deb4 <__ieee754_rem_pio2f+0x250>
 800dca8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800dcac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dcb0:	ed80 0a00 	vstr	s0, [r0]
 800dcb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dcb8:	2001      	movs	r0, #1
 800dcba:	edc4 7a01 	vstr	s15, [r4, #4]
 800dcbe:	b007      	add	sp, #28
 800dcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcc2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800deb8 <__ieee754_rem_pio2f+0x254>
 800dcc6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800debc <__ieee754_rem_pio2f+0x258>
 800dcca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dcce:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800dcd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dcd6:	edc0 6a00 	vstr	s13, [r0]
 800dcda:	e7eb      	b.n	800dcb4 <__ieee754_rem_pio2f+0x50>
 800dcdc:	429d      	cmp	r5, r3
 800dcde:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dce2:	d00e      	beq.n	800dd02 <__ieee754_rem_pio2f+0x9e>
 800dce4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800deb4 <__ieee754_rem_pio2f+0x250>
 800dce8:	ee37 0a87 	vadd.f32	s0, s15, s14
 800dcec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dcf0:	ed80 0a00 	vstr	s0, [r0]
 800dcf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfc:	edc4 7a01 	vstr	s15, [r4, #4]
 800dd00:	e7dd      	b.n	800dcbe <__ieee754_rem_pio2f+0x5a>
 800dd02:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800deb8 <__ieee754_rem_pio2f+0x254>
 800dd06:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800debc <__ieee754_rem_pio2f+0x258>
 800dd0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dd0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800dd12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dd16:	edc0 6a00 	vstr	s13, [r0]
 800dd1a:	e7eb      	b.n	800dcf4 <__ieee754_rem_pio2f+0x90>
 800dd1c:	4b68      	ldr	r3, [pc, #416]	; (800dec0 <__ieee754_rem_pio2f+0x25c>)
 800dd1e:	429d      	cmp	r5, r3
 800dd20:	dc72      	bgt.n	800de08 <__ieee754_rem_pio2f+0x1a4>
 800dd22:	f001 f9eb 	bl	800f0fc <fabsf>
 800dd26:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800dec4 <__ieee754_rem_pio2f+0x260>
 800dd2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dd2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dd32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dd3a:	ee17 0a90 	vmov	r0, s15
 800dd3e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800deac <__ieee754_rem_pio2f+0x248>
 800dd42:	eea7 0a67 	vfms.f32	s0, s14, s15
 800dd46:	281f      	cmp	r0, #31
 800dd48:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800deb4 <__ieee754_rem_pio2f+0x250>
 800dd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd50:	eeb1 6a47 	vneg.f32	s12, s14
 800dd54:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dd58:	ee16 2a90 	vmov	r2, s13
 800dd5c:	dc1c      	bgt.n	800dd98 <__ieee754_rem_pio2f+0x134>
 800dd5e:	495a      	ldr	r1, [pc, #360]	; (800dec8 <__ieee754_rem_pio2f+0x264>)
 800dd60:	1e47      	subs	r7, r0, #1
 800dd62:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800dd66:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800dd6a:	428b      	cmp	r3, r1
 800dd6c:	d014      	beq.n	800dd98 <__ieee754_rem_pio2f+0x134>
 800dd6e:	6022      	str	r2, [r4, #0]
 800dd70:	ed94 7a00 	vldr	s14, [r4]
 800dd74:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dd78:	2e00      	cmp	r6, #0
 800dd7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dd7e:	ed84 0a01 	vstr	s0, [r4, #4]
 800dd82:	da9c      	bge.n	800dcbe <__ieee754_rem_pio2f+0x5a>
 800dd84:	eeb1 7a47 	vneg.f32	s14, s14
 800dd88:	eeb1 0a40 	vneg.f32	s0, s0
 800dd8c:	ed84 7a00 	vstr	s14, [r4]
 800dd90:	ed84 0a01 	vstr	s0, [r4, #4]
 800dd94:	4240      	negs	r0, r0
 800dd96:	e792      	b.n	800dcbe <__ieee754_rem_pio2f+0x5a>
 800dd98:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800dd9c:	15eb      	asrs	r3, r5, #23
 800dd9e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800dda2:	2d08      	cmp	r5, #8
 800dda4:	dde3      	ble.n	800dd6e <__ieee754_rem_pio2f+0x10a>
 800dda6:	eddf 7a44 	vldr	s15, [pc, #272]	; 800deb8 <__ieee754_rem_pio2f+0x254>
 800ddaa:	eef0 6a40 	vmov.f32	s13, s0
 800ddae:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ddb2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ddb6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800ddba:	eddf 7a40 	vldr	s15, [pc, #256]	; 800debc <__ieee754_rem_pio2f+0x258>
 800ddbe:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800ddc2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ddc6:	eef0 7a40 	vmov.f32	s15, s0
 800ddca:	ee15 2a90 	vmov	r2, s11
 800ddce:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ddd2:	1a5b      	subs	r3, r3, r1
 800ddd4:	2b19      	cmp	r3, #25
 800ddd6:	dc04      	bgt.n	800dde2 <__ieee754_rem_pio2f+0x17e>
 800ddd8:	edc4 5a00 	vstr	s11, [r4]
 800dddc:	eeb0 0a66 	vmov.f32	s0, s13
 800dde0:	e7c6      	b.n	800dd70 <__ieee754_rem_pio2f+0x10c>
 800dde2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800decc <__ieee754_rem_pio2f+0x268>
 800dde6:	eeb0 0a66 	vmov.f32	s0, s13
 800ddea:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ddee:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ddf2:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ded0 <__ieee754_rem_pio2f+0x26c>
 800ddf6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ddfa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ddfe:	ee30 7a67 	vsub.f32	s14, s0, s15
 800de02:	ed84 7a00 	vstr	s14, [r4]
 800de06:	e7b3      	b.n	800dd70 <__ieee754_rem_pio2f+0x10c>
 800de08:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800de0c:	db06      	blt.n	800de1c <__ieee754_rem_pio2f+0x1b8>
 800de0e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800de12:	edc0 7a01 	vstr	s15, [r0, #4]
 800de16:	edc0 7a00 	vstr	s15, [r0]
 800de1a:	e733      	b.n	800dc84 <__ieee754_rem_pio2f+0x20>
 800de1c:	15ea      	asrs	r2, r5, #23
 800de1e:	3a86      	subs	r2, #134	; 0x86
 800de20:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800de24:	ee07 3a90 	vmov	s15, r3
 800de28:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800de2c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ded4 <__ieee754_rem_pio2f+0x270>
 800de30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800de34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de38:	ed8d 7a03 	vstr	s14, [sp, #12]
 800de3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800de40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800de44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800de48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de4c:	ed8d 7a04 	vstr	s14, [sp, #16]
 800de50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800de54:	eef5 7a40 	vcmp.f32	s15, #0.0
 800de58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de5c:	edcd 7a05 	vstr	s15, [sp, #20]
 800de60:	d11e      	bne.n	800dea0 <__ieee754_rem_pio2f+0x23c>
 800de62:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800de66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6a:	bf14      	ite	ne
 800de6c:	2302      	movne	r3, #2
 800de6e:	2301      	moveq	r3, #1
 800de70:	4919      	ldr	r1, [pc, #100]	; (800ded8 <__ieee754_rem_pio2f+0x274>)
 800de72:	9101      	str	r1, [sp, #4]
 800de74:	2102      	movs	r1, #2
 800de76:	9100      	str	r1, [sp, #0]
 800de78:	a803      	add	r0, sp, #12
 800de7a:	4621      	mov	r1, r4
 800de7c:	f000 fd5a 	bl	800e934 <__kernel_rem_pio2f>
 800de80:	2e00      	cmp	r6, #0
 800de82:	f6bf af1c 	bge.w	800dcbe <__ieee754_rem_pio2f+0x5a>
 800de86:	edd4 7a00 	vldr	s15, [r4]
 800de8a:	eef1 7a67 	vneg.f32	s15, s15
 800de8e:	edc4 7a00 	vstr	s15, [r4]
 800de92:	edd4 7a01 	vldr	s15, [r4, #4]
 800de96:	eef1 7a67 	vneg.f32	s15, s15
 800de9a:	edc4 7a01 	vstr	s15, [r4, #4]
 800de9e:	e779      	b.n	800dd94 <__ieee754_rem_pio2f+0x130>
 800dea0:	2303      	movs	r3, #3
 800dea2:	e7e5      	b.n	800de70 <__ieee754_rem_pio2f+0x20c>
 800dea4:	3f490fd8 	.word	0x3f490fd8
 800dea8:	4016cbe3 	.word	0x4016cbe3
 800deac:	3fc90f80 	.word	0x3fc90f80
 800deb0:	3fc90fd0 	.word	0x3fc90fd0
 800deb4:	37354443 	.word	0x37354443
 800deb8:	37354400 	.word	0x37354400
 800debc:	2e85a308 	.word	0x2e85a308
 800dec0:	43490f80 	.word	0x43490f80
 800dec4:	3f22f984 	.word	0x3f22f984
 800dec8:	08013424 	.word	0x08013424
 800decc:	2e85a300 	.word	0x2e85a300
 800ded0:	248d3132 	.word	0x248d3132
 800ded4:	43800000 	.word	0x43800000
 800ded8:	080134a4 	.word	0x080134a4

0800dedc <__ieee754_sqrtf>:
 800dedc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dee0:	4770      	bx	lr
 800dee2:	0000      	movs	r0, r0
 800dee4:	0000      	movs	r0, r0
	...

0800dee8 <__kernel_cos>:
 800dee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deec:	ec57 6b10 	vmov	r6, r7, d0
 800def0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800def4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800def8:	ed8d 1b00 	vstr	d1, [sp]
 800defc:	da07      	bge.n	800df0e <__kernel_cos+0x26>
 800defe:	ee10 0a10 	vmov	r0, s0
 800df02:	4639      	mov	r1, r7
 800df04:	f7f2 fe38 	bl	8000b78 <__aeabi_d2iz>
 800df08:	2800      	cmp	r0, #0
 800df0a:	f000 8088 	beq.w	800e01e <__kernel_cos+0x136>
 800df0e:	4632      	mov	r2, r6
 800df10:	463b      	mov	r3, r7
 800df12:	4630      	mov	r0, r6
 800df14:	4639      	mov	r1, r7
 800df16:	f7f2 fb7f 	bl	8000618 <__aeabi_dmul>
 800df1a:	4b51      	ldr	r3, [pc, #324]	; (800e060 <__kernel_cos+0x178>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	4604      	mov	r4, r0
 800df20:	460d      	mov	r5, r1
 800df22:	f7f2 fb79 	bl	8000618 <__aeabi_dmul>
 800df26:	a340      	add	r3, pc, #256	; (adr r3, 800e028 <__kernel_cos+0x140>)
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	4682      	mov	sl, r0
 800df2e:	468b      	mov	fp, r1
 800df30:	4620      	mov	r0, r4
 800df32:	4629      	mov	r1, r5
 800df34:	f7f2 fb70 	bl	8000618 <__aeabi_dmul>
 800df38:	a33d      	add	r3, pc, #244	; (adr r3, 800e030 <__kernel_cos+0x148>)
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	f7f2 f9b5 	bl	80002ac <__adddf3>
 800df42:	4622      	mov	r2, r4
 800df44:	462b      	mov	r3, r5
 800df46:	f7f2 fb67 	bl	8000618 <__aeabi_dmul>
 800df4a:	a33b      	add	r3, pc, #236	; (adr r3, 800e038 <__kernel_cos+0x150>)
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f7f2 f9aa 	bl	80002a8 <__aeabi_dsub>
 800df54:	4622      	mov	r2, r4
 800df56:	462b      	mov	r3, r5
 800df58:	f7f2 fb5e 	bl	8000618 <__aeabi_dmul>
 800df5c:	a338      	add	r3, pc, #224	; (adr r3, 800e040 <__kernel_cos+0x158>)
 800df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df62:	f7f2 f9a3 	bl	80002ac <__adddf3>
 800df66:	4622      	mov	r2, r4
 800df68:	462b      	mov	r3, r5
 800df6a:	f7f2 fb55 	bl	8000618 <__aeabi_dmul>
 800df6e:	a336      	add	r3, pc, #216	; (adr r3, 800e048 <__kernel_cos+0x160>)
 800df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df74:	f7f2 f998 	bl	80002a8 <__aeabi_dsub>
 800df78:	4622      	mov	r2, r4
 800df7a:	462b      	mov	r3, r5
 800df7c:	f7f2 fb4c 	bl	8000618 <__aeabi_dmul>
 800df80:	a333      	add	r3, pc, #204	; (adr r3, 800e050 <__kernel_cos+0x168>)
 800df82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df86:	f7f2 f991 	bl	80002ac <__adddf3>
 800df8a:	4622      	mov	r2, r4
 800df8c:	462b      	mov	r3, r5
 800df8e:	f7f2 fb43 	bl	8000618 <__aeabi_dmul>
 800df92:	4622      	mov	r2, r4
 800df94:	462b      	mov	r3, r5
 800df96:	f7f2 fb3f 	bl	8000618 <__aeabi_dmul>
 800df9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df9e:	4604      	mov	r4, r0
 800dfa0:	460d      	mov	r5, r1
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	f7f2 fb37 	bl	8000618 <__aeabi_dmul>
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4602      	mov	r2, r0
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f7f2 f979 	bl	80002a8 <__aeabi_dsub>
 800dfb6:	4b2b      	ldr	r3, [pc, #172]	; (800e064 <__kernel_cos+0x17c>)
 800dfb8:	4598      	cmp	r8, r3
 800dfba:	4606      	mov	r6, r0
 800dfbc:	460f      	mov	r7, r1
 800dfbe:	dc10      	bgt.n	800dfe2 <__kernel_cos+0xfa>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	4650      	mov	r0, sl
 800dfc6:	4659      	mov	r1, fp
 800dfc8:	f7f2 f96e 	bl	80002a8 <__aeabi_dsub>
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4926      	ldr	r1, [pc, #152]	; (800e068 <__kernel_cos+0x180>)
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	2000      	movs	r0, #0
 800dfd4:	f7f2 f968 	bl	80002a8 <__aeabi_dsub>
 800dfd8:	ec41 0b10 	vmov	d0, r0, r1
 800dfdc:	b003      	add	sp, #12
 800dfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe2:	4b22      	ldr	r3, [pc, #136]	; (800e06c <__kernel_cos+0x184>)
 800dfe4:	4920      	ldr	r1, [pc, #128]	; (800e068 <__kernel_cos+0x180>)
 800dfe6:	4598      	cmp	r8, r3
 800dfe8:	bfcc      	ite	gt
 800dfea:	4d21      	ldrgt	r5, [pc, #132]	; (800e070 <__kernel_cos+0x188>)
 800dfec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dff0:	2400      	movs	r4, #0
 800dff2:	4622      	mov	r2, r4
 800dff4:	462b      	mov	r3, r5
 800dff6:	2000      	movs	r0, #0
 800dff8:	f7f2 f956 	bl	80002a8 <__aeabi_dsub>
 800dffc:	4622      	mov	r2, r4
 800dffe:	4680      	mov	r8, r0
 800e000:	4689      	mov	r9, r1
 800e002:	462b      	mov	r3, r5
 800e004:	4650      	mov	r0, sl
 800e006:	4659      	mov	r1, fp
 800e008:	f7f2 f94e 	bl	80002a8 <__aeabi_dsub>
 800e00c:	4632      	mov	r2, r6
 800e00e:	463b      	mov	r3, r7
 800e010:	f7f2 f94a 	bl	80002a8 <__aeabi_dsub>
 800e014:	4602      	mov	r2, r0
 800e016:	460b      	mov	r3, r1
 800e018:	4640      	mov	r0, r8
 800e01a:	4649      	mov	r1, r9
 800e01c:	e7da      	b.n	800dfd4 <__kernel_cos+0xec>
 800e01e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e058 <__kernel_cos+0x170>
 800e022:	e7db      	b.n	800dfdc <__kernel_cos+0xf4>
 800e024:	f3af 8000 	nop.w
 800e028:	be8838d4 	.word	0xbe8838d4
 800e02c:	bda8fae9 	.word	0xbda8fae9
 800e030:	bdb4b1c4 	.word	0xbdb4b1c4
 800e034:	3e21ee9e 	.word	0x3e21ee9e
 800e038:	809c52ad 	.word	0x809c52ad
 800e03c:	3e927e4f 	.word	0x3e927e4f
 800e040:	19cb1590 	.word	0x19cb1590
 800e044:	3efa01a0 	.word	0x3efa01a0
 800e048:	16c15177 	.word	0x16c15177
 800e04c:	3f56c16c 	.word	0x3f56c16c
 800e050:	5555554c 	.word	0x5555554c
 800e054:	3fa55555 	.word	0x3fa55555
 800e058:	00000000 	.word	0x00000000
 800e05c:	3ff00000 	.word	0x3ff00000
 800e060:	3fe00000 	.word	0x3fe00000
 800e064:	3fd33332 	.word	0x3fd33332
 800e068:	3ff00000 	.word	0x3ff00000
 800e06c:	3fe90000 	.word	0x3fe90000
 800e070:	3fd20000 	.word	0x3fd20000
 800e074:	00000000 	.word	0x00000000

0800e078 <__kernel_rem_pio2>:
 800e078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07c:	ed2d 8b02 	vpush	{d8}
 800e080:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e084:	f112 0f14 	cmn.w	r2, #20
 800e088:	9308      	str	r3, [sp, #32]
 800e08a:	9101      	str	r1, [sp, #4]
 800e08c:	4bc6      	ldr	r3, [pc, #792]	; (800e3a8 <__kernel_rem_pio2+0x330>)
 800e08e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e090:	9009      	str	r0, [sp, #36]	; 0x24
 800e092:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e096:	9304      	str	r3, [sp, #16]
 800e098:	9b08      	ldr	r3, [sp, #32]
 800e09a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e09e:	bfa8      	it	ge
 800e0a0:	1ed4      	subge	r4, r2, #3
 800e0a2:	9306      	str	r3, [sp, #24]
 800e0a4:	bfb2      	itee	lt
 800e0a6:	2400      	movlt	r4, #0
 800e0a8:	2318      	movge	r3, #24
 800e0aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800e0ae:	f06f 0317 	mvn.w	r3, #23
 800e0b2:	fb04 3303 	mla	r3, r4, r3, r3
 800e0b6:	eb03 0a02 	add.w	sl, r3, r2
 800e0ba:	9b04      	ldr	r3, [sp, #16]
 800e0bc:	9a06      	ldr	r2, [sp, #24]
 800e0be:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e398 <__kernel_rem_pio2+0x320>
 800e0c2:	eb03 0802 	add.w	r8, r3, r2
 800e0c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e0c8:	1aa7      	subs	r7, r4, r2
 800e0ca:	ae20      	add	r6, sp, #128	; 0x80
 800e0cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e0d0:	2500      	movs	r5, #0
 800e0d2:	4545      	cmp	r5, r8
 800e0d4:	dd18      	ble.n	800e108 <__kernel_rem_pio2+0x90>
 800e0d6:	9b08      	ldr	r3, [sp, #32]
 800e0d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e0dc:	aa20      	add	r2, sp, #128	; 0x80
 800e0de:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800e398 <__kernel_rem_pio2+0x320>
 800e0e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e0e6:	f1c3 0301 	rsb	r3, r3, #1
 800e0ea:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e0ee:	9307      	str	r3, [sp, #28]
 800e0f0:	9b07      	ldr	r3, [sp, #28]
 800e0f2:	9a04      	ldr	r2, [sp, #16]
 800e0f4:	4443      	add	r3, r8
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	db2f      	blt.n	800e15a <__kernel_rem_pio2+0xe2>
 800e0fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e0fe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e102:	462f      	mov	r7, r5
 800e104:	2600      	movs	r6, #0
 800e106:	e01b      	b.n	800e140 <__kernel_rem_pio2+0xc8>
 800e108:	42ef      	cmn	r7, r5
 800e10a:	d407      	bmi.n	800e11c <__kernel_rem_pio2+0xa4>
 800e10c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e110:	f7f2 fa18 	bl	8000544 <__aeabi_i2d>
 800e114:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e118:	3501      	adds	r5, #1
 800e11a:	e7da      	b.n	800e0d2 <__kernel_rem_pio2+0x5a>
 800e11c:	ec51 0b18 	vmov	r0, r1, d8
 800e120:	e7f8      	b.n	800e114 <__kernel_rem_pio2+0x9c>
 800e122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e126:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e12a:	f7f2 fa75 	bl	8000618 <__aeabi_dmul>
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e136:	f7f2 f8b9 	bl	80002ac <__adddf3>
 800e13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e13e:	3601      	adds	r6, #1
 800e140:	9b06      	ldr	r3, [sp, #24]
 800e142:	429e      	cmp	r6, r3
 800e144:	f1a7 0708 	sub.w	r7, r7, #8
 800e148:	ddeb      	ble.n	800e122 <__kernel_rem_pio2+0xaa>
 800e14a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e14e:	3508      	adds	r5, #8
 800e150:	ecab 7b02 	vstmia	fp!, {d7}
 800e154:	f108 0801 	add.w	r8, r8, #1
 800e158:	e7ca      	b.n	800e0f0 <__kernel_rem_pio2+0x78>
 800e15a:	9b04      	ldr	r3, [sp, #16]
 800e15c:	aa0c      	add	r2, sp, #48	; 0x30
 800e15e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e162:	930b      	str	r3, [sp, #44]	; 0x2c
 800e164:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e166:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e16a:	9c04      	ldr	r4, [sp, #16]
 800e16c:	930a      	str	r3, [sp, #40]	; 0x28
 800e16e:	ab98      	add	r3, sp, #608	; 0x260
 800e170:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e174:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e178:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e17c:	f8cd b008 	str.w	fp, [sp, #8]
 800e180:	4625      	mov	r5, r4
 800e182:	2d00      	cmp	r5, #0
 800e184:	dc78      	bgt.n	800e278 <__kernel_rem_pio2+0x200>
 800e186:	ec47 6b10 	vmov	d0, r6, r7
 800e18a:	4650      	mov	r0, sl
 800e18c:	f000 ff30 	bl	800eff0 <scalbn>
 800e190:	ec57 6b10 	vmov	r6, r7, d0
 800e194:	2200      	movs	r2, #0
 800e196:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e19a:	ee10 0a10 	vmov	r0, s0
 800e19e:	4639      	mov	r1, r7
 800e1a0:	f7f2 fa3a 	bl	8000618 <__aeabi_dmul>
 800e1a4:	ec41 0b10 	vmov	d0, r0, r1
 800e1a8:	f000 fea2 	bl	800eef0 <floor>
 800e1ac:	4b7f      	ldr	r3, [pc, #508]	; (800e3ac <__kernel_rem_pio2+0x334>)
 800e1ae:	ec51 0b10 	vmov	r0, r1, d0
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f7f2 fa30 	bl	8000618 <__aeabi_dmul>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	4630      	mov	r0, r6
 800e1be:	4639      	mov	r1, r7
 800e1c0:	f7f2 f872 	bl	80002a8 <__aeabi_dsub>
 800e1c4:	460f      	mov	r7, r1
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	f7f2 fcd6 	bl	8000b78 <__aeabi_d2iz>
 800e1cc:	9007      	str	r0, [sp, #28]
 800e1ce:	f7f2 f9b9 	bl	8000544 <__aeabi_i2d>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	4639      	mov	r1, r7
 800e1da:	f7f2 f865 	bl	80002a8 <__aeabi_dsub>
 800e1de:	f1ba 0f00 	cmp.w	sl, #0
 800e1e2:	4606      	mov	r6, r0
 800e1e4:	460f      	mov	r7, r1
 800e1e6:	dd70      	ble.n	800e2ca <__kernel_rem_pio2+0x252>
 800e1e8:	1e62      	subs	r2, r4, #1
 800e1ea:	ab0c      	add	r3, sp, #48	; 0x30
 800e1ec:	9d07      	ldr	r5, [sp, #28]
 800e1ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e1f2:	f1ca 0118 	rsb	r1, sl, #24
 800e1f6:	fa40 f301 	asr.w	r3, r0, r1
 800e1fa:	441d      	add	r5, r3
 800e1fc:	408b      	lsls	r3, r1
 800e1fe:	1ac0      	subs	r0, r0, r3
 800e200:	ab0c      	add	r3, sp, #48	; 0x30
 800e202:	9507      	str	r5, [sp, #28]
 800e204:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e208:	f1ca 0317 	rsb	r3, sl, #23
 800e20c:	fa40 f303 	asr.w	r3, r0, r3
 800e210:	9302      	str	r3, [sp, #8]
 800e212:	9b02      	ldr	r3, [sp, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	dd66      	ble.n	800e2e6 <__kernel_rem_pio2+0x26e>
 800e218:	9b07      	ldr	r3, [sp, #28]
 800e21a:	2200      	movs	r2, #0
 800e21c:	3301      	adds	r3, #1
 800e21e:	9307      	str	r3, [sp, #28]
 800e220:	4615      	mov	r5, r2
 800e222:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e226:	4294      	cmp	r4, r2
 800e228:	f300 8099 	bgt.w	800e35e <__kernel_rem_pio2+0x2e6>
 800e22c:	f1ba 0f00 	cmp.w	sl, #0
 800e230:	dd07      	ble.n	800e242 <__kernel_rem_pio2+0x1ca>
 800e232:	f1ba 0f01 	cmp.w	sl, #1
 800e236:	f000 80a5 	beq.w	800e384 <__kernel_rem_pio2+0x30c>
 800e23a:	f1ba 0f02 	cmp.w	sl, #2
 800e23e:	f000 80c1 	beq.w	800e3c4 <__kernel_rem_pio2+0x34c>
 800e242:	9b02      	ldr	r3, [sp, #8]
 800e244:	2b02      	cmp	r3, #2
 800e246:	d14e      	bne.n	800e2e6 <__kernel_rem_pio2+0x26e>
 800e248:	4632      	mov	r2, r6
 800e24a:	463b      	mov	r3, r7
 800e24c:	4958      	ldr	r1, [pc, #352]	; (800e3b0 <__kernel_rem_pio2+0x338>)
 800e24e:	2000      	movs	r0, #0
 800e250:	f7f2 f82a 	bl	80002a8 <__aeabi_dsub>
 800e254:	4606      	mov	r6, r0
 800e256:	460f      	mov	r7, r1
 800e258:	2d00      	cmp	r5, #0
 800e25a:	d044      	beq.n	800e2e6 <__kernel_rem_pio2+0x26e>
 800e25c:	4650      	mov	r0, sl
 800e25e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e3a0 <__kernel_rem_pio2+0x328>
 800e262:	f000 fec5 	bl	800eff0 <scalbn>
 800e266:	4630      	mov	r0, r6
 800e268:	4639      	mov	r1, r7
 800e26a:	ec53 2b10 	vmov	r2, r3, d0
 800e26e:	f7f2 f81b 	bl	80002a8 <__aeabi_dsub>
 800e272:	4606      	mov	r6, r0
 800e274:	460f      	mov	r7, r1
 800e276:	e036      	b.n	800e2e6 <__kernel_rem_pio2+0x26e>
 800e278:	4b4e      	ldr	r3, [pc, #312]	; (800e3b4 <__kernel_rem_pio2+0x33c>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	4630      	mov	r0, r6
 800e27e:	4639      	mov	r1, r7
 800e280:	f7f2 f9ca 	bl	8000618 <__aeabi_dmul>
 800e284:	f7f2 fc78 	bl	8000b78 <__aeabi_d2iz>
 800e288:	f7f2 f95c 	bl	8000544 <__aeabi_i2d>
 800e28c:	4b4a      	ldr	r3, [pc, #296]	; (800e3b8 <__kernel_rem_pio2+0x340>)
 800e28e:	2200      	movs	r2, #0
 800e290:	4680      	mov	r8, r0
 800e292:	4689      	mov	r9, r1
 800e294:	f7f2 f9c0 	bl	8000618 <__aeabi_dmul>
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	4630      	mov	r0, r6
 800e29e:	4639      	mov	r1, r7
 800e2a0:	f7f2 f802 	bl	80002a8 <__aeabi_dsub>
 800e2a4:	f7f2 fc68 	bl	8000b78 <__aeabi_d2iz>
 800e2a8:	9b02      	ldr	r3, [sp, #8]
 800e2aa:	f843 0b04 	str.w	r0, [r3], #4
 800e2ae:	3d01      	subs	r5, #1
 800e2b0:	9302      	str	r3, [sp, #8]
 800e2b2:	ab70      	add	r3, sp, #448	; 0x1c0
 800e2b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	4640      	mov	r0, r8
 800e2be:	4649      	mov	r1, r9
 800e2c0:	f7f1 fff4 	bl	80002ac <__adddf3>
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	460f      	mov	r7, r1
 800e2c8:	e75b      	b.n	800e182 <__kernel_rem_pio2+0x10a>
 800e2ca:	d105      	bne.n	800e2d8 <__kernel_rem_pio2+0x260>
 800e2cc:	1e63      	subs	r3, r4, #1
 800e2ce:	aa0c      	add	r2, sp, #48	; 0x30
 800e2d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e2d4:	15c3      	asrs	r3, r0, #23
 800e2d6:	e79b      	b.n	800e210 <__kernel_rem_pio2+0x198>
 800e2d8:	4b38      	ldr	r3, [pc, #224]	; (800e3bc <__kernel_rem_pio2+0x344>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f7f2 fc22 	bl	8000b24 <__aeabi_dcmpge>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d139      	bne.n	800e358 <__kernel_rem_pio2+0x2e0>
 800e2e4:	9002      	str	r0, [sp, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	4639      	mov	r1, r7
 800e2ee:	f7f2 fbfb 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	f000 80b4 	beq.w	800e460 <__kernel_rem_pio2+0x3e8>
 800e2f8:	f104 3bff 	add.w	fp, r4, #4294967295
 800e2fc:	465b      	mov	r3, fp
 800e2fe:	2200      	movs	r2, #0
 800e300:	9904      	ldr	r1, [sp, #16]
 800e302:	428b      	cmp	r3, r1
 800e304:	da65      	bge.n	800e3d2 <__kernel_rem_pio2+0x35a>
 800e306:	2a00      	cmp	r2, #0
 800e308:	d07b      	beq.n	800e402 <__kernel_rem_pio2+0x38a>
 800e30a:	ab0c      	add	r3, sp, #48	; 0x30
 800e30c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e310:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e314:	2b00      	cmp	r3, #0
 800e316:	f000 80a0 	beq.w	800e45a <__kernel_rem_pio2+0x3e2>
 800e31a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e3a0 <__kernel_rem_pio2+0x328>
 800e31e:	4650      	mov	r0, sl
 800e320:	f000 fe66 	bl	800eff0 <scalbn>
 800e324:	4f23      	ldr	r7, [pc, #140]	; (800e3b4 <__kernel_rem_pio2+0x33c>)
 800e326:	ec55 4b10 	vmov	r4, r5, d0
 800e32a:	46d8      	mov	r8, fp
 800e32c:	2600      	movs	r6, #0
 800e32e:	f1b8 0f00 	cmp.w	r8, #0
 800e332:	f280 80cf 	bge.w	800e4d4 <__kernel_rem_pio2+0x45c>
 800e336:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800e398 <__kernel_rem_pio2+0x320>
 800e33a:	465f      	mov	r7, fp
 800e33c:	f04f 0800 	mov.w	r8, #0
 800e340:	2f00      	cmp	r7, #0
 800e342:	f2c0 80fd 	blt.w	800e540 <__kernel_rem_pio2+0x4c8>
 800e346:	ab70      	add	r3, sp, #448	; 0x1c0
 800e348:	f8df a074 	ldr.w	sl, [pc, #116]	; 800e3c0 <__kernel_rem_pio2+0x348>
 800e34c:	ec55 4b18 	vmov	r4, r5, d8
 800e350:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e354:	2600      	movs	r6, #0
 800e356:	e0e5      	b.n	800e524 <__kernel_rem_pio2+0x4ac>
 800e358:	2302      	movs	r3, #2
 800e35a:	9302      	str	r3, [sp, #8]
 800e35c:	e75c      	b.n	800e218 <__kernel_rem_pio2+0x1a0>
 800e35e:	f8db 3000 	ldr.w	r3, [fp]
 800e362:	b955      	cbnz	r5, 800e37a <__kernel_rem_pio2+0x302>
 800e364:	b123      	cbz	r3, 800e370 <__kernel_rem_pio2+0x2f8>
 800e366:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e36a:	f8cb 3000 	str.w	r3, [fp]
 800e36e:	2301      	movs	r3, #1
 800e370:	3201      	adds	r2, #1
 800e372:	f10b 0b04 	add.w	fp, fp, #4
 800e376:	461d      	mov	r5, r3
 800e378:	e755      	b.n	800e226 <__kernel_rem_pio2+0x1ae>
 800e37a:	1acb      	subs	r3, r1, r3
 800e37c:	f8cb 3000 	str.w	r3, [fp]
 800e380:	462b      	mov	r3, r5
 800e382:	e7f5      	b.n	800e370 <__kernel_rem_pio2+0x2f8>
 800e384:	1e62      	subs	r2, r4, #1
 800e386:	ab0c      	add	r3, sp, #48	; 0x30
 800e388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e38c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e390:	a90c      	add	r1, sp, #48	; 0x30
 800e392:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e396:	e754      	b.n	800e242 <__kernel_rem_pio2+0x1ca>
	...
 800e3a4:	3ff00000 	.word	0x3ff00000
 800e3a8:	08013800 	.word	0x08013800
 800e3ac:	40200000 	.word	0x40200000
 800e3b0:	3ff00000 	.word	0x3ff00000
 800e3b4:	3e700000 	.word	0x3e700000
 800e3b8:	41700000 	.word	0x41700000
 800e3bc:	3fe00000 	.word	0x3fe00000
 800e3c0:	080137c0 	.word	0x080137c0
 800e3c4:	1e62      	subs	r2, r4, #1
 800e3c6:	ab0c      	add	r3, sp, #48	; 0x30
 800e3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e3d0:	e7de      	b.n	800e390 <__kernel_rem_pio2+0x318>
 800e3d2:	a90c      	add	r1, sp, #48	; 0x30
 800e3d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	430a      	orrs	r2, r1
 800e3dc:	e790      	b.n	800e300 <__kernel_rem_pio2+0x288>
 800e3de:	3301      	adds	r3, #1
 800e3e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e3e4:	2900      	cmp	r1, #0
 800e3e6:	d0fa      	beq.n	800e3de <__kernel_rem_pio2+0x366>
 800e3e8:	9a08      	ldr	r2, [sp, #32]
 800e3ea:	18e3      	adds	r3, r4, r3
 800e3ec:	18a6      	adds	r6, r4, r2
 800e3ee:	aa20      	add	r2, sp, #128	; 0x80
 800e3f0:	1c65      	adds	r5, r4, #1
 800e3f2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e3f6:	9302      	str	r3, [sp, #8]
 800e3f8:	9b02      	ldr	r3, [sp, #8]
 800e3fa:	42ab      	cmp	r3, r5
 800e3fc:	da04      	bge.n	800e408 <__kernel_rem_pio2+0x390>
 800e3fe:	461c      	mov	r4, r3
 800e400:	e6b5      	b.n	800e16e <__kernel_rem_pio2+0xf6>
 800e402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e404:	2301      	movs	r3, #1
 800e406:	e7eb      	b.n	800e3e0 <__kernel_rem_pio2+0x368>
 800e408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e40a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e40e:	f7f2 f899 	bl	8000544 <__aeabi_i2d>
 800e412:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e418:	46b3      	mov	fp, r6
 800e41a:	461c      	mov	r4, r3
 800e41c:	2700      	movs	r7, #0
 800e41e:	f04f 0800 	mov.w	r8, #0
 800e422:	f04f 0900 	mov.w	r9, #0
 800e426:	9b06      	ldr	r3, [sp, #24]
 800e428:	429f      	cmp	r7, r3
 800e42a:	dd06      	ble.n	800e43a <__kernel_rem_pio2+0x3c2>
 800e42c:	ab70      	add	r3, sp, #448	; 0x1c0
 800e42e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e432:	e9c3 8900 	strd	r8, r9, [r3]
 800e436:	3501      	adds	r5, #1
 800e438:	e7de      	b.n	800e3f8 <__kernel_rem_pio2+0x380>
 800e43a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e43e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e442:	f7f2 f8e9 	bl	8000618 <__aeabi_dmul>
 800e446:	4602      	mov	r2, r0
 800e448:	460b      	mov	r3, r1
 800e44a:	4640      	mov	r0, r8
 800e44c:	4649      	mov	r1, r9
 800e44e:	f7f1 ff2d 	bl	80002ac <__adddf3>
 800e452:	3701      	adds	r7, #1
 800e454:	4680      	mov	r8, r0
 800e456:	4689      	mov	r9, r1
 800e458:	e7e5      	b.n	800e426 <__kernel_rem_pio2+0x3ae>
 800e45a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e45e:	e754      	b.n	800e30a <__kernel_rem_pio2+0x292>
 800e460:	ec47 6b10 	vmov	d0, r6, r7
 800e464:	f1ca 0000 	rsb	r0, sl, #0
 800e468:	f000 fdc2 	bl	800eff0 <scalbn>
 800e46c:	ec57 6b10 	vmov	r6, r7, d0
 800e470:	4b9f      	ldr	r3, [pc, #636]	; (800e6f0 <__kernel_rem_pio2+0x678>)
 800e472:	ee10 0a10 	vmov	r0, s0
 800e476:	2200      	movs	r2, #0
 800e478:	4639      	mov	r1, r7
 800e47a:	f7f2 fb53 	bl	8000b24 <__aeabi_dcmpge>
 800e47e:	b300      	cbz	r0, 800e4c2 <__kernel_rem_pio2+0x44a>
 800e480:	4b9c      	ldr	r3, [pc, #624]	; (800e6f4 <__kernel_rem_pio2+0x67c>)
 800e482:	2200      	movs	r2, #0
 800e484:	4630      	mov	r0, r6
 800e486:	4639      	mov	r1, r7
 800e488:	f7f2 f8c6 	bl	8000618 <__aeabi_dmul>
 800e48c:	f7f2 fb74 	bl	8000b78 <__aeabi_d2iz>
 800e490:	4605      	mov	r5, r0
 800e492:	f7f2 f857 	bl	8000544 <__aeabi_i2d>
 800e496:	4b96      	ldr	r3, [pc, #600]	; (800e6f0 <__kernel_rem_pio2+0x678>)
 800e498:	2200      	movs	r2, #0
 800e49a:	f7f2 f8bd 	bl	8000618 <__aeabi_dmul>
 800e49e:	460b      	mov	r3, r1
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f7f1 feff 	bl	80002a8 <__aeabi_dsub>
 800e4aa:	f7f2 fb65 	bl	8000b78 <__aeabi_d2iz>
 800e4ae:	f104 0b01 	add.w	fp, r4, #1
 800e4b2:	ab0c      	add	r3, sp, #48	; 0x30
 800e4b4:	f10a 0a18 	add.w	sl, sl, #24
 800e4b8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4bc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800e4c0:	e72b      	b.n	800e31a <__kernel_rem_pio2+0x2a2>
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	4639      	mov	r1, r7
 800e4c6:	f7f2 fb57 	bl	8000b78 <__aeabi_d2iz>
 800e4ca:	ab0c      	add	r3, sp, #48	; 0x30
 800e4cc:	46a3      	mov	fp, r4
 800e4ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4d2:	e722      	b.n	800e31a <__kernel_rem_pio2+0x2a2>
 800e4d4:	ab70      	add	r3, sp, #448	; 0x1c0
 800e4d6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800e4da:	ab0c      	add	r3, sp, #48	; 0x30
 800e4dc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e4e0:	f7f2 f830 	bl	8000544 <__aeabi_i2d>
 800e4e4:	4622      	mov	r2, r4
 800e4e6:	462b      	mov	r3, r5
 800e4e8:	f7f2 f896 	bl	8000618 <__aeabi_dmul>
 800e4ec:	4632      	mov	r2, r6
 800e4ee:	e9c9 0100 	strd	r0, r1, [r9]
 800e4f2:	463b      	mov	r3, r7
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f7f2 f88e 	bl	8000618 <__aeabi_dmul>
 800e4fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800e500:	4604      	mov	r4, r0
 800e502:	460d      	mov	r5, r1
 800e504:	e713      	b.n	800e32e <__kernel_rem_pio2+0x2b6>
 800e506:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e50a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e50e:	f7f2 f883 	bl	8000618 <__aeabi_dmul>
 800e512:	4602      	mov	r2, r0
 800e514:	460b      	mov	r3, r1
 800e516:	4620      	mov	r0, r4
 800e518:	4629      	mov	r1, r5
 800e51a:	f7f1 fec7 	bl	80002ac <__adddf3>
 800e51e:	3601      	adds	r6, #1
 800e520:	4604      	mov	r4, r0
 800e522:	460d      	mov	r5, r1
 800e524:	9b04      	ldr	r3, [sp, #16]
 800e526:	429e      	cmp	r6, r3
 800e528:	dc01      	bgt.n	800e52e <__kernel_rem_pio2+0x4b6>
 800e52a:	45b0      	cmp	r8, r6
 800e52c:	daeb      	bge.n	800e506 <__kernel_rem_pio2+0x48e>
 800e52e:	ab48      	add	r3, sp, #288	; 0x120
 800e530:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e534:	e9c3 4500 	strd	r4, r5, [r3]
 800e538:	3f01      	subs	r7, #1
 800e53a:	f108 0801 	add.w	r8, r8, #1
 800e53e:	e6ff      	b.n	800e340 <__kernel_rem_pio2+0x2c8>
 800e540:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e542:	2b02      	cmp	r3, #2
 800e544:	dc0b      	bgt.n	800e55e <__kernel_rem_pio2+0x4e6>
 800e546:	2b00      	cmp	r3, #0
 800e548:	dc6e      	bgt.n	800e628 <__kernel_rem_pio2+0x5b0>
 800e54a:	d045      	beq.n	800e5d8 <__kernel_rem_pio2+0x560>
 800e54c:	9b07      	ldr	r3, [sp, #28]
 800e54e:	f003 0007 	and.w	r0, r3, #7
 800e552:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e556:	ecbd 8b02 	vpop	{d8}
 800e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e560:	2b03      	cmp	r3, #3
 800e562:	d1f3      	bne.n	800e54c <__kernel_rem_pio2+0x4d4>
 800e564:	ab48      	add	r3, sp, #288	; 0x120
 800e566:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800e56a:	46d0      	mov	r8, sl
 800e56c:	46d9      	mov	r9, fp
 800e56e:	f1b9 0f00 	cmp.w	r9, #0
 800e572:	f1a8 0808 	sub.w	r8, r8, #8
 800e576:	dc64      	bgt.n	800e642 <__kernel_rem_pio2+0x5ca>
 800e578:	465c      	mov	r4, fp
 800e57a:	2c01      	cmp	r4, #1
 800e57c:	f1aa 0a08 	sub.w	sl, sl, #8
 800e580:	dc7e      	bgt.n	800e680 <__kernel_rem_pio2+0x608>
 800e582:	2000      	movs	r0, #0
 800e584:	2100      	movs	r1, #0
 800e586:	f1bb 0f01 	cmp.w	fp, #1
 800e58a:	f300 8097 	bgt.w	800e6bc <__kernel_rem_pio2+0x644>
 800e58e:	9b02      	ldr	r3, [sp, #8]
 800e590:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800e594:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f040 8099 	bne.w	800e6d0 <__kernel_rem_pio2+0x658>
 800e59e:	9b01      	ldr	r3, [sp, #4]
 800e5a0:	e9c3 5600 	strd	r5, r6, [r3]
 800e5a4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e5a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e5ac:	e7ce      	b.n	800e54c <__kernel_rem_pio2+0x4d4>
 800e5ae:	ab48      	add	r3, sp, #288	; 0x120
 800e5b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b8:	f7f1 fe78 	bl	80002ac <__adddf3>
 800e5bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e5c0:	f1bb 0f00 	cmp.w	fp, #0
 800e5c4:	daf3      	bge.n	800e5ae <__kernel_rem_pio2+0x536>
 800e5c6:	9b02      	ldr	r3, [sp, #8]
 800e5c8:	b113      	cbz	r3, 800e5d0 <__kernel_rem_pio2+0x558>
 800e5ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	9b01      	ldr	r3, [sp, #4]
 800e5d2:	e9c3 0100 	strd	r0, r1, [r3]
 800e5d6:	e7b9      	b.n	800e54c <__kernel_rem_pio2+0x4d4>
 800e5d8:	2000      	movs	r0, #0
 800e5da:	2100      	movs	r1, #0
 800e5dc:	e7f0      	b.n	800e5c0 <__kernel_rem_pio2+0x548>
 800e5de:	ab48      	add	r3, sp, #288	; 0x120
 800e5e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e8:	f7f1 fe60 	bl	80002ac <__adddf3>
 800e5ec:	3c01      	subs	r4, #1
 800e5ee:	2c00      	cmp	r4, #0
 800e5f0:	daf5      	bge.n	800e5de <__kernel_rem_pio2+0x566>
 800e5f2:	9b02      	ldr	r3, [sp, #8]
 800e5f4:	b1e3      	cbz	r3, 800e630 <__kernel_rem_pio2+0x5b8>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5fc:	9c01      	ldr	r4, [sp, #4]
 800e5fe:	e9c4 2300 	strd	r2, r3, [r4]
 800e602:	4602      	mov	r2, r0
 800e604:	460b      	mov	r3, r1
 800e606:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e60a:	f7f1 fe4d 	bl	80002a8 <__aeabi_dsub>
 800e60e:	ad4a      	add	r5, sp, #296	; 0x128
 800e610:	2401      	movs	r4, #1
 800e612:	45a3      	cmp	fp, r4
 800e614:	da0f      	bge.n	800e636 <__kernel_rem_pio2+0x5be>
 800e616:	9b02      	ldr	r3, [sp, #8]
 800e618:	b113      	cbz	r3, 800e620 <__kernel_rem_pio2+0x5a8>
 800e61a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e61e:	4619      	mov	r1, r3
 800e620:	9b01      	ldr	r3, [sp, #4]
 800e622:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e626:	e791      	b.n	800e54c <__kernel_rem_pio2+0x4d4>
 800e628:	465c      	mov	r4, fp
 800e62a:	2000      	movs	r0, #0
 800e62c:	2100      	movs	r1, #0
 800e62e:	e7de      	b.n	800e5ee <__kernel_rem_pio2+0x576>
 800e630:	4602      	mov	r2, r0
 800e632:	460b      	mov	r3, r1
 800e634:	e7e2      	b.n	800e5fc <__kernel_rem_pio2+0x584>
 800e636:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e63a:	f7f1 fe37 	bl	80002ac <__adddf3>
 800e63e:	3401      	adds	r4, #1
 800e640:	e7e7      	b.n	800e612 <__kernel_rem_pio2+0x59a>
 800e642:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e646:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e64a:	4620      	mov	r0, r4
 800e64c:	4632      	mov	r2, r6
 800e64e:	463b      	mov	r3, r7
 800e650:	4629      	mov	r1, r5
 800e652:	f7f1 fe2b 	bl	80002ac <__adddf3>
 800e656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e65a:	4602      	mov	r2, r0
 800e65c:	460b      	mov	r3, r1
 800e65e:	4620      	mov	r0, r4
 800e660:	4629      	mov	r1, r5
 800e662:	f7f1 fe21 	bl	80002a8 <__aeabi_dsub>
 800e666:	4632      	mov	r2, r6
 800e668:	463b      	mov	r3, r7
 800e66a:	f7f1 fe1f 	bl	80002ac <__adddf3>
 800e66e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e672:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e676:	ed88 7b00 	vstr	d7, [r8]
 800e67a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e67e:	e776      	b.n	800e56e <__kernel_rem_pio2+0x4f6>
 800e680:	e9da 8900 	ldrd	r8, r9, [sl]
 800e684:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e688:	4640      	mov	r0, r8
 800e68a:	4632      	mov	r2, r6
 800e68c:	463b      	mov	r3, r7
 800e68e:	4649      	mov	r1, r9
 800e690:	f7f1 fe0c 	bl	80002ac <__adddf3>
 800e694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	4640      	mov	r0, r8
 800e69e:	4649      	mov	r1, r9
 800e6a0:	f7f1 fe02 	bl	80002a8 <__aeabi_dsub>
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	463b      	mov	r3, r7
 800e6a8:	f7f1 fe00 	bl	80002ac <__adddf3>
 800e6ac:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e6b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6b4:	ed8a 7b00 	vstr	d7, [sl]
 800e6b8:	3c01      	subs	r4, #1
 800e6ba:	e75e      	b.n	800e57a <__kernel_rem_pio2+0x502>
 800e6bc:	ab48      	add	r3, sp, #288	; 0x120
 800e6be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c6:	f7f1 fdf1 	bl	80002ac <__adddf3>
 800e6ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e6ce:	e75a      	b.n	800e586 <__kernel_rem_pio2+0x50e>
 800e6d0:	9b01      	ldr	r3, [sp, #4]
 800e6d2:	9a01      	ldr	r2, [sp, #4]
 800e6d4:	601d      	str	r5, [r3, #0]
 800e6d6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e6da:	605c      	str	r4, [r3, #4]
 800e6dc:	609f      	str	r7, [r3, #8]
 800e6de:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e6e2:	60d3      	str	r3, [r2, #12]
 800e6e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6e8:	6110      	str	r0, [r2, #16]
 800e6ea:	6153      	str	r3, [r2, #20]
 800e6ec:	e72e      	b.n	800e54c <__kernel_rem_pio2+0x4d4>
 800e6ee:	bf00      	nop
 800e6f0:	41700000 	.word	0x41700000
 800e6f4:	3e700000 	.word	0x3e700000

0800e6f8 <__kernel_sin>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	ed2d 8b04 	vpush	{d8-d9}
 800e700:	eeb0 8a41 	vmov.f32	s16, s2
 800e704:	eef0 8a61 	vmov.f32	s17, s3
 800e708:	ec55 4b10 	vmov	r4, r5, d0
 800e70c:	b083      	sub	sp, #12
 800e70e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e712:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e716:	9001      	str	r0, [sp, #4]
 800e718:	da06      	bge.n	800e728 <__kernel_sin+0x30>
 800e71a:	ee10 0a10 	vmov	r0, s0
 800e71e:	4629      	mov	r1, r5
 800e720:	f7f2 fa2a 	bl	8000b78 <__aeabi_d2iz>
 800e724:	2800      	cmp	r0, #0
 800e726:	d051      	beq.n	800e7cc <__kernel_sin+0xd4>
 800e728:	4622      	mov	r2, r4
 800e72a:	462b      	mov	r3, r5
 800e72c:	4620      	mov	r0, r4
 800e72e:	4629      	mov	r1, r5
 800e730:	f7f1 ff72 	bl	8000618 <__aeabi_dmul>
 800e734:	4682      	mov	sl, r0
 800e736:	468b      	mov	fp, r1
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4620      	mov	r0, r4
 800e73e:	4629      	mov	r1, r5
 800e740:	f7f1 ff6a 	bl	8000618 <__aeabi_dmul>
 800e744:	a341      	add	r3, pc, #260	; (adr r3, 800e84c <__kernel_sin+0x154>)
 800e746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74a:	4680      	mov	r8, r0
 800e74c:	4689      	mov	r9, r1
 800e74e:	4650      	mov	r0, sl
 800e750:	4659      	mov	r1, fp
 800e752:	f7f1 ff61 	bl	8000618 <__aeabi_dmul>
 800e756:	a33f      	add	r3, pc, #252	; (adr r3, 800e854 <__kernel_sin+0x15c>)
 800e758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75c:	f7f1 fda4 	bl	80002a8 <__aeabi_dsub>
 800e760:	4652      	mov	r2, sl
 800e762:	465b      	mov	r3, fp
 800e764:	f7f1 ff58 	bl	8000618 <__aeabi_dmul>
 800e768:	a33c      	add	r3, pc, #240	; (adr r3, 800e85c <__kernel_sin+0x164>)
 800e76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76e:	f7f1 fd9d 	bl	80002ac <__adddf3>
 800e772:	4652      	mov	r2, sl
 800e774:	465b      	mov	r3, fp
 800e776:	f7f1 ff4f 	bl	8000618 <__aeabi_dmul>
 800e77a:	a33a      	add	r3, pc, #232	; (adr r3, 800e864 <__kernel_sin+0x16c>)
 800e77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e780:	f7f1 fd92 	bl	80002a8 <__aeabi_dsub>
 800e784:	4652      	mov	r2, sl
 800e786:	465b      	mov	r3, fp
 800e788:	f7f1 ff46 	bl	8000618 <__aeabi_dmul>
 800e78c:	a337      	add	r3, pc, #220	; (adr r3, 800e86c <__kernel_sin+0x174>)
 800e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e792:	f7f1 fd8b 	bl	80002ac <__adddf3>
 800e796:	9b01      	ldr	r3, [sp, #4]
 800e798:	4606      	mov	r6, r0
 800e79a:	460f      	mov	r7, r1
 800e79c:	b9eb      	cbnz	r3, 800e7da <__kernel_sin+0xe2>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4650      	mov	r0, sl
 800e7a4:	4659      	mov	r1, fp
 800e7a6:	f7f1 ff37 	bl	8000618 <__aeabi_dmul>
 800e7aa:	a325      	add	r3, pc, #148	; (adr r3, 800e840 <__kernel_sin+0x148>)
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	f7f1 fd7a 	bl	80002a8 <__aeabi_dsub>
 800e7b4:	4642      	mov	r2, r8
 800e7b6:	464b      	mov	r3, r9
 800e7b8:	f7f1 ff2e 	bl	8000618 <__aeabi_dmul>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	f7f1 fd72 	bl	80002ac <__adddf3>
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	460d      	mov	r5, r1
 800e7cc:	ec45 4b10 	vmov	d0, r4, r5
 800e7d0:	b003      	add	sp, #12
 800e7d2:	ecbd 8b04 	vpop	{d8-d9}
 800e7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7da:	4b1b      	ldr	r3, [pc, #108]	; (800e848 <__kernel_sin+0x150>)
 800e7dc:	ec51 0b18 	vmov	r0, r1, d8
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f7f1 ff19 	bl	8000618 <__aeabi_dmul>
 800e7e6:	4632      	mov	r2, r6
 800e7e8:	ec41 0b19 	vmov	d9, r0, r1
 800e7ec:	463b      	mov	r3, r7
 800e7ee:	4640      	mov	r0, r8
 800e7f0:	4649      	mov	r1, r9
 800e7f2:	f7f1 ff11 	bl	8000618 <__aeabi_dmul>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	ec51 0b19 	vmov	r0, r1, d9
 800e7fe:	f7f1 fd53 	bl	80002a8 <__aeabi_dsub>
 800e802:	4652      	mov	r2, sl
 800e804:	465b      	mov	r3, fp
 800e806:	f7f1 ff07 	bl	8000618 <__aeabi_dmul>
 800e80a:	ec53 2b18 	vmov	r2, r3, d8
 800e80e:	f7f1 fd4b 	bl	80002a8 <__aeabi_dsub>
 800e812:	a30b      	add	r3, pc, #44	; (adr r3, 800e840 <__kernel_sin+0x148>)
 800e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e818:	4606      	mov	r6, r0
 800e81a:	460f      	mov	r7, r1
 800e81c:	4640      	mov	r0, r8
 800e81e:	4649      	mov	r1, r9
 800e820:	f7f1 fefa 	bl	8000618 <__aeabi_dmul>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	4630      	mov	r0, r6
 800e82a:	4639      	mov	r1, r7
 800e82c:	f7f1 fd3e 	bl	80002ac <__adddf3>
 800e830:	4602      	mov	r2, r0
 800e832:	460b      	mov	r3, r1
 800e834:	4620      	mov	r0, r4
 800e836:	4629      	mov	r1, r5
 800e838:	f7f1 fd36 	bl	80002a8 <__aeabi_dsub>
 800e83c:	e7c4      	b.n	800e7c8 <__kernel_sin+0xd0>
 800e83e:	bf00      	nop
 800e840:	55555549 	.word	0x55555549
 800e844:	3fc55555 	.word	0x3fc55555
 800e848:	3fe00000 	.word	0x3fe00000
 800e84c:	5acfd57c 	.word	0x5acfd57c
 800e850:	3de5d93a 	.word	0x3de5d93a
 800e854:	8a2b9ceb 	.word	0x8a2b9ceb
 800e858:	3e5ae5e6 	.word	0x3e5ae5e6
 800e85c:	57b1fe7d 	.word	0x57b1fe7d
 800e860:	3ec71de3 	.word	0x3ec71de3
 800e864:	19c161d5 	.word	0x19c161d5
 800e868:	3f2a01a0 	.word	0x3f2a01a0
 800e86c:	1110f8a6 	.word	0x1110f8a6
 800e870:	3f811111 	.word	0x3f811111

0800e874 <__kernel_cosf>:
 800e874:	ee10 3a10 	vmov	r3, s0
 800e878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e87c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e880:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e884:	da05      	bge.n	800e892 <__kernel_cosf+0x1e>
 800e886:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e88a:	ee17 2a90 	vmov	r2, s15
 800e88e:	2a00      	cmp	r2, #0
 800e890:	d03d      	beq.n	800e90e <__kernel_cosf+0x9a>
 800e892:	ee60 5a00 	vmul.f32	s11, s0, s0
 800e896:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e914 <__kernel_cosf+0xa0>
 800e89a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e918 <__kernel_cosf+0xa4>
 800e89e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800e91c <__kernel_cosf+0xa8>
 800e8a2:	4a1f      	ldr	r2, [pc, #124]	; (800e920 <__kernel_cosf+0xac>)
 800e8a4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e924 <__kernel_cosf+0xb0>
 800e8ae:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e8b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e928 <__kernel_cosf+0xb4>
 800e8b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e8ba:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e92c <__kernel_cosf+0xb8>
 800e8be:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e8c2:	eeb0 7a66 	vmov.f32	s14, s13
 800e8c6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e8ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e8ce:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800e8d2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800e8d6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800e8da:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e8de:	dc04      	bgt.n	800e8ea <__kernel_cosf+0x76>
 800e8e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e8e4:	ee36 0a47 	vsub.f32	s0, s12, s14
 800e8e8:	4770      	bx	lr
 800e8ea:	4a11      	ldr	r2, [pc, #68]	; (800e930 <__kernel_cosf+0xbc>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	bfda      	itte	le
 800e8f0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e8f4:	ee06 3a90 	vmovle	s13, r3
 800e8f8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800e8fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e900:	ee36 0a66 	vsub.f32	s0, s12, s13
 800e904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e908:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e90c:	4770      	bx	lr
 800e90e:	eeb0 0a46 	vmov.f32	s0, s12
 800e912:	4770      	bx	lr
 800e914:	ad47d74e 	.word	0xad47d74e
 800e918:	310f74f6 	.word	0x310f74f6
 800e91c:	3d2aaaab 	.word	0x3d2aaaab
 800e920:	3e999999 	.word	0x3e999999
 800e924:	b493f27c 	.word	0xb493f27c
 800e928:	37d00d01 	.word	0x37d00d01
 800e92c:	bab60b61 	.word	0xbab60b61
 800e930:	3f480000 	.word	0x3f480000

0800e934 <__kernel_rem_pio2f>:
 800e934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e938:	ed2d 8b04 	vpush	{d8-d9}
 800e93c:	b0d7      	sub	sp, #348	; 0x15c
 800e93e:	4616      	mov	r6, r2
 800e940:	4698      	mov	r8, r3
 800e942:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e944:	4bbb      	ldr	r3, [pc, #748]	; (800ec34 <__kernel_rem_pio2f+0x300>)
 800e946:	9001      	str	r0, [sp, #4]
 800e948:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800e94c:	1d33      	adds	r3, r6, #4
 800e94e:	460d      	mov	r5, r1
 800e950:	f108 39ff 	add.w	r9, r8, #4294967295
 800e954:	db29      	blt.n	800e9aa <__kernel_rem_pio2f+0x76>
 800e956:	1ef1      	subs	r1, r6, #3
 800e958:	bf48      	it	mi
 800e95a:	1d31      	addmi	r1, r6, #4
 800e95c:	10c9      	asrs	r1, r1, #3
 800e95e:	1c4c      	adds	r4, r1, #1
 800e960:	00e3      	lsls	r3, r4, #3
 800e962:	9302      	str	r3, [sp, #8]
 800e964:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e966:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800ec44 <__kernel_rem_pio2f+0x310>
 800e96a:	eba1 0009 	sub.w	r0, r1, r9
 800e96e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800e972:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800e976:	eb07 0c09 	add.w	ip, r7, r9
 800e97a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800e97e:	2300      	movs	r3, #0
 800e980:	4563      	cmp	r3, ip
 800e982:	dd14      	ble.n	800e9ae <__kernel_rem_pio2f+0x7a>
 800e984:	ab1a      	add	r3, sp, #104	; 0x68
 800e986:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e98a:	46cc      	mov	ip, r9
 800e98c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800e990:	f1c8 0b01 	rsb	fp, r8, #1
 800e994:	eb0b 020c 	add.w	r2, fp, ip
 800e998:	4297      	cmp	r7, r2
 800e99a:	db27      	blt.n	800e9ec <__kernel_rem_pio2f+0xb8>
 800e99c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e9a0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800ec44 <__kernel_rem_pio2f+0x310>
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	e016      	b.n	800e9d8 <__kernel_rem_pio2f+0xa4>
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	e7d7      	b.n	800e95e <__kernel_rem_pio2f+0x2a>
 800e9ae:	42d8      	cmn	r0, r3
 800e9b0:	bf5d      	ittte	pl
 800e9b2:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800e9b6:	ee07 2a90 	vmovpl	s15, r2
 800e9ba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e9be:	eef0 7a47 	vmovmi.f32	s15, s14
 800e9c2:	ecea 7a01 	vstmia	sl!, {s15}
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	e7da      	b.n	800e980 <__kernel_rem_pio2f+0x4c>
 800e9ca:	ecfe 6a01 	vldmia	lr!, {s13}
 800e9ce:	ed90 7a00 	vldr	s14, [r0]
 800e9d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e9d6:	3201      	adds	r2, #1
 800e9d8:	454a      	cmp	r2, r9
 800e9da:	f1a0 0004 	sub.w	r0, r0, #4
 800e9de:	ddf4      	ble.n	800e9ca <__kernel_rem_pio2f+0x96>
 800e9e0:	ecea 7a01 	vstmia	sl!, {s15}
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	f10c 0c01 	add.w	ip, ip, #1
 800e9ea:	e7d3      	b.n	800e994 <__kernel_rem_pio2f+0x60>
 800e9ec:	ab06      	add	r3, sp, #24
 800e9ee:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800e9f2:	9304      	str	r3, [sp, #16]
 800e9f4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e9f6:	eddf 8a92 	vldr	s17, [pc, #584]	; 800ec40 <__kernel_rem_pio2f+0x30c>
 800e9fa:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800ec3c <__kernel_rem_pio2f+0x308>
 800e9fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ea02:	9303      	str	r3, [sp, #12]
 800ea04:	46ba      	mov	sl, r7
 800ea06:	ab56      	add	r3, sp, #344	; 0x158
 800ea08:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ea0c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800ea10:	ab06      	add	r3, sp, #24
 800ea12:	4618      	mov	r0, r3
 800ea14:	4652      	mov	r2, sl
 800ea16:	2a00      	cmp	r2, #0
 800ea18:	dc51      	bgt.n	800eabe <__kernel_rem_pio2f+0x18a>
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	9305      	str	r3, [sp, #20]
 800ea1e:	f000 fbbd 	bl	800f19c <scalbnf>
 800ea22:	eeb0 8a40 	vmov.f32	s16, s0
 800ea26:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ea2a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ea2e:	f000 fb6d 	bl	800f10c <floorf>
 800ea32:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ea36:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ea3a:	2c00      	cmp	r4, #0
 800ea3c:	9b05      	ldr	r3, [sp, #20]
 800ea3e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ea42:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ea46:	edcd 7a00 	vstr	s15, [sp]
 800ea4a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ea4e:	dd4b      	ble.n	800eae8 <__kernel_rem_pio2f+0x1b4>
 800ea50:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ea54:	aa06      	add	r2, sp, #24
 800ea56:	f1c4 0e08 	rsb	lr, r4, #8
 800ea5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ea5e:	ee17 1a90 	vmov	r1, s15
 800ea62:	fa42 f00e 	asr.w	r0, r2, lr
 800ea66:	4401      	add	r1, r0
 800ea68:	9100      	str	r1, [sp, #0]
 800ea6a:	fa00 f00e 	lsl.w	r0, r0, lr
 800ea6e:	a906      	add	r1, sp, #24
 800ea70:	1a12      	subs	r2, r2, r0
 800ea72:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ea76:	f1c4 0007 	rsb	r0, r4, #7
 800ea7a:	fa42 fb00 	asr.w	fp, r2, r0
 800ea7e:	f1bb 0f00 	cmp.w	fp, #0
 800ea82:	dd43      	ble.n	800eb0c <__kernel_rem_pio2f+0x1d8>
 800ea84:	9a00      	ldr	r2, [sp, #0]
 800ea86:	f04f 0e00 	mov.w	lr, #0
 800ea8a:	3201      	adds	r2, #1
 800ea8c:	9200      	str	r2, [sp, #0]
 800ea8e:	4670      	mov	r0, lr
 800ea90:	45f2      	cmp	sl, lr
 800ea92:	dc6c      	bgt.n	800eb6e <__kernel_rem_pio2f+0x23a>
 800ea94:	2c00      	cmp	r4, #0
 800ea96:	dd04      	ble.n	800eaa2 <__kernel_rem_pio2f+0x16e>
 800ea98:	2c01      	cmp	r4, #1
 800ea9a:	d079      	beq.n	800eb90 <__kernel_rem_pio2f+0x25c>
 800ea9c:	2c02      	cmp	r4, #2
 800ea9e:	f000 8082 	beq.w	800eba6 <__kernel_rem_pio2f+0x272>
 800eaa2:	f1bb 0f02 	cmp.w	fp, #2
 800eaa6:	d131      	bne.n	800eb0c <__kernel_rem_pio2f+0x1d8>
 800eaa8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eaac:	ee30 8a48 	vsub.f32	s16, s0, s16
 800eab0:	b360      	cbz	r0, 800eb0c <__kernel_rem_pio2f+0x1d8>
 800eab2:	4620      	mov	r0, r4
 800eab4:	f000 fb72 	bl	800f19c <scalbnf>
 800eab8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800eabc:	e026      	b.n	800eb0c <__kernel_rem_pio2f+0x1d8>
 800eabe:	ee60 7a28 	vmul.f32	s15, s0, s17
 800eac2:	3a01      	subs	r2, #1
 800eac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eac8:	a942      	add	r1, sp, #264	; 0x108
 800eaca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eace:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800ead2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ead6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eada:	eca0 0a01 	vstmia	r0!, {s0}
 800eade:	ed9c 0a00 	vldr	s0, [ip]
 800eae2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800eae6:	e796      	b.n	800ea16 <__kernel_rem_pio2f+0xe2>
 800eae8:	d107      	bne.n	800eafa <__kernel_rem_pio2f+0x1c6>
 800eaea:	f10a 32ff 	add.w	r2, sl, #4294967295
 800eaee:	a906      	add	r1, sp, #24
 800eaf0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800eaf4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800eaf8:	e7c1      	b.n	800ea7e <__kernel_rem_pio2f+0x14a>
 800eafa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eafe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800eb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb06:	da2f      	bge.n	800eb68 <__kernel_rem_pio2f+0x234>
 800eb08:	f04f 0b00 	mov.w	fp, #0
 800eb0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800eb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb14:	f040 8098 	bne.w	800ec48 <__kernel_rem_pio2f+0x314>
 800eb18:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eb1c:	469c      	mov	ip, r3
 800eb1e:	2200      	movs	r2, #0
 800eb20:	45bc      	cmp	ip, r7
 800eb22:	da48      	bge.n	800ebb6 <__kernel_rem_pio2f+0x282>
 800eb24:	2a00      	cmp	r2, #0
 800eb26:	d05f      	beq.n	800ebe8 <__kernel_rem_pio2f+0x2b4>
 800eb28:	aa06      	add	r2, sp, #24
 800eb2a:	3c08      	subs	r4, #8
 800eb2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800eb30:	2900      	cmp	r1, #0
 800eb32:	d07d      	beq.n	800ec30 <__kernel_rem_pio2f+0x2fc>
 800eb34:	4620      	mov	r0, r4
 800eb36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eb3a:	9301      	str	r3, [sp, #4]
 800eb3c:	f000 fb2e 	bl	800f19c <scalbnf>
 800eb40:	9b01      	ldr	r3, [sp, #4]
 800eb42:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800ec40 <__kernel_rem_pio2f+0x30c>
 800eb46:	4619      	mov	r1, r3
 800eb48:	2900      	cmp	r1, #0
 800eb4a:	f280 80af 	bge.w	800ecac <__kernel_rem_pio2f+0x378>
 800eb4e:	4618      	mov	r0, r3
 800eb50:	2400      	movs	r4, #0
 800eb52:	2800      	cmp	r0, #0
 800eb54:	f2c0 80d0 	blt.w	800ecf8 <__kernel_rem_pio2f+0x3c4>
 800eb58:	a942      	add	r1, sp, #264	; 0x108
 800eb5a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800eb5e:	4a36      	ldr	r2, [pc, #216]	; (800ec38 <__kernel_rem_pio2f+0x304>)
 800eb60:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ec44 <__kernel_rem_pio2f+0x310>
 800eb64:	2100      	movs	r1, #0
 800eb66:	e0bb      	b.n	800ece0 <__kernel_rem_pio2f+0x3ac>
 800eb68:	f04f 0b02 	mov.w	fp, #2
 800eb6c:	e78a      	b.n	800ea84 <__kernel_rem_pio2f+0x150>
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	b948      	cbnz	r0, 800eb86 <__kernel_rem_pio2f+0x252>
 800eb72:	b11a      	cbz	r2, 800eb7c <__kernel_rem_pio2f+0x248>
 800eb74:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f10e 0e01 	add.w	lr, lr, #1
 800eb80:	3304      	adds	r3, #4
 800eb82:	4610      	mov	r0, r2
 800eb84:	e784      	b.n	800ea90 <__kernel_rem_pio2f+0x15c>
 800eb86:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800eb8a:	601a      	str	r2, [r3, #0]
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	e7f5      	b.n	800eb7c <__kernel_rem_pio2f+0x248>
 800eb90:	f10a 3cff 	add.w	ip, sl, #4294967295
 800eb94:	ab06      	add	r3, sp, #24
 800eb96:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800eb9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb9e:	aa06      	add	r2, sp, #24
 800eba0:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800eba4:	e77d      	b.n	800eaa2 <__kernel_rem_pio2f+0x16e>
 800eba6:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ebaa:	ab06      	add	r3, sp, #24
 800ebac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ebb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebb4:	e7f3      	b.n	800eb9e <__kernel_rem_pio2f+0x26a>
 800ebb6:	a906      	add	r1, sp, #24
 800ebb8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800ebbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ebc0:	4302      	orrs	r2, r0
 800ebc2:	e7ad      	b.n	800eb20 <__kernel_rem_pio2f+0x1ec>
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ebca:	2a00      	cmp	r2, #0
 800ebcc:	d0fa      	beq.n	800ebc4 <__kernel_rem_pio2f+0x290>
 800ebce:	a91a      	add	r1, sp, #104	; 0x68
 800ebd0:	eb0a 0208 	add.w	r2, sl, r8
 800ebd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ebd8:	f10a 0301 	add.w	r3, sl, #1
 800ebdc:	eb0a 0100 	add.w	r1, sl, r0
 800ebe0:	4299      	cmp	r1, r3
 800ebe2:	da04      	bge.n	800ebee <__kernel_rem_pio2f+0x2ba>
 800ebe4:	468a      	mov	sl, r1
 800ebe6:	e70e      	b.n	800ea06 <__kernel_rem_pio2f+0xd2>
 800ebe8:	9b04      	ldr	r3, [sp, #16]
 800ebea:	2001      	movs	r0, #1
 800ebec:	e7eb      	b.n	800ebc6 <__kernel_rem_pio2f+0x292>
 800ebee:	9803      	ldr	r0, [sp, #12]
 800ebf0:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ebf4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ebf8:	9000      	str	r0, [sp, #0]
 800ebfa:	ee07 0a90 	vmov	s15, r0
 800ebfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec02:	2000      	movs	r0, #0
 800ec04:	ece2 7a01 	vstmia	r2!, {s15}
 800ec08:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ec44 <__kernel_rem_pio2f+0x310>
 800ec0c:	4696      	mov	lr, r2
 800ec0e:	4548      	cmp	r0, r9
 800ec10:	dd06      	ble.n	800ec20 <__kernel_rem_pio2f+0x2ec>
 800ec12:	a842      	add	r0, sp, #264	; 0x108
 800ec14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ec18:	edc0 7a00 	vstr	s15, [r0]
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	e7df      	b.n	800ebe0 <__kernel_rem_pio2f+0x2ac>
 800ec20:	ecfc 6a01 	vldmia	ip!, {s13}
 800ec24:	ed3e 7a01 	vldmdb	lr!, {s14}
 800ec28:	3001      	adds	r0, #1
 800ec2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ec2e:	e7ee      	b.n	800ec0e <__kernel_rem_pio2f+0x2da>
 800ec30:	3b01      	subs	r3, #1
 800ec32:	e779      	b.n	800eb28 <__kernel_rem_pio2f+0x1f4>
 800ec34:	0801383c 	.word	0x0801383c
 800ec38:	08013810 	.word	0x08013810
 800ec3c:	43800000 	.word	0x43800000
 800ec40:	3b800000 	.word	0x3b800000
 800ec44:	00000000 	.word	0x00000000
 800ec48:	9b02      	ldr	r3, [sp, #8]
 800ec4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ec4e:	1b98      	subs	r0, r3, r6
 800ec50:	f000 faa4 	bl	800f19c <scalbnf>
 800ec54:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ec3c <__kernel_rem_pio2f+0x308>
 800ec58:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ec5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec60:	db1b      	blt.n	800ec9a <__kernel_rem_pio2f+0x366>
 800ec62:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ec40 <__kernel_rem_pio2f+0x30c>
 800ec66:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ec6a:	aa06      	add	r2, sp, #24
 800ec6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec70:	a906      	add	r1, sp, #24
 800ec72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec76:	3408      	adds	r4, #8
 800ec78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ec7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec84:	ee10 3a10 	vmov	r3, s0
 800ec88:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800ec8c:	ee17 2a90 	vmov	r2, s15
 800ec90:	f10a 0301 	add.w	r3, sl, #1
 800ec94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ec98:	e74c      	b.n	800eb34 <__kernel_rem_pio2f+0x200>
 800ec9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec9e:	aa06      	add	r2, sp, #24
 800eca0:	ee10 3a10 	vmov	r3, s0
 800eca4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800eca8:	4653      	mov	r3, sl
 800ecaa:	e743      	b.n	800eb34 <__kernel_rem_pio2f+0x200>
 800ecac:	aa42      	add	r2, sp, #264	; 0x108
 800ecae:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800ecb2:	aa06      	add	r2, sp, #24
 800ecb4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ecb8:	9201      	str	r2, [sp, #4]
 800ecba:	ee07 2a90 	vmov	s15, r2
 800ecbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecc2:	3901      	subs	r1, #1
 800ecc4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ecc8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800eccc:	edc0 7a00 	vstr	s15, [r0]
 800ecd0:	e73a      	b.n	800eb48 <__kernel_rem_pio2f+0x214>
 800ecd2:	ecf2 6a01 	vldmia	r2!, {s13}
 800ecd6:	ecb6 7a01 	vldmia	r6!, {s14}
 800ecda:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ecde:	3101      	adds	r1, #1
 800ece0:	42b9      	cmp	r1, r7
 800ece2:	dc01      	bgt.n	800ece8 <__kernel_rem_pio2f+0x3b4>
 800ece4:	428c      	cmp	r4, r1
 800ece6:	daf4      	bge.n	800ecd2 <__kernel_rem_pio2f+0x39e>
 800ece8:	aa56      	add	r2, sp, #344	; 0x158
 800ecea:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800ecee:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ecf2:	3801      	subs	r0, #1
 800ecf4:	3401      	adds	r4, #1
 800ecf6:	e72c      	b.n	800eb52 <__kernel_rem_pio2f+0x21e>
 800ecf8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ecfa:	2a02      	cmp	r2, #2
 800ecfc:	dc0a      	bgt.n	800ed14 <__kernel_rem_pio2f+0x3e0>
 800ecfe:	2a00      	cmp	r2, #0
 800ed00:	dc61      	bgt.n	800edc6 <__kernel_rem_pio2f+0x492>
 800ed02:	d03c      	beq.n	800ed7e <__kernel_rem_pio2f+0x44a>
 800ed04:	9b00      	ldr	r3, [sp, #0]
 800ed06:	f003 0007 	and.w	r0, r3, #7
 800ed0a:	b057      	add	sp, #348	; 0x15c
 800ed0c:	ecbd 8b04 	vpop	{d8-d9}
 800ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed14:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ed16:	2a03      	cmp	r2, #3
 800ed18:	d1f4      	bne.n	800ed04 <__kernel_rem_pio2f+0x3d0>
 800ed1a:	aa2e      	add	r2, sp, #184	; 0xb8
 800ed1c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ed20:	4608      	mov	r0, r1
 800ed22:	461c      	mov	r4, r3
 800ed24:	2c00      	cmp	r4, #0
 800ed26:	f1a0 0004 	sub.w	r0, r0, #4
 800ed2a:	dc59      	bgt.n	800ede0 <__kernel_rem_pio2f+0x4ac>
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	2801      	cmp	r0, #1
 800ed30:	f1a1 0104 	sub.w	r1, r1, #4
 800ed34:	dc64      	bgt.n	800ee00 <__kernel_rem_pio2f+0x4cc>
 800ed36:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800ec44 <__kernel_rem_pio2f+0x310>
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	dc70      	bgt.n	800ee20 <__kernel_rem_pio2f+0x4ec>
 800ed3e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800ed42:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800ed46:	f1bb 0f00 	cmp.w	fp, #0
 800ed4a:	d172      	bne.n	800ee32 <__kernel_rem_pio2f+0x4fe>
 800ed4c:	edc5 6a00 	vstr	s13, [r5]
 800ed50:	ed85 7a01 	vstr	s14, [r5, #4]
 800ed54:	edc5 7a02 	vstr	s15, [r5, #8]
 800ed58:	e7d4      	b.n	800ed04 <__kernel_rem_pio2f+0x3d0>
 800ed5a:	aa2e      	add	r2, sp, #184	; 0xb8
 800ed5c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ed60:	ed91 7a00 	vldr	s14, [r1]
 800ed64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	daf5      	bge.n	800ed5a <__kernel_rem_pio2f+0x426>
 800ed6e:	f1bb 0f00 	cmp.w	fp, #0
 800ed72:	d001      	beq.n	800ed78 <__kernel_rem_pio2f+0x444>
 800ed74:	eef1 7a67 	vneg.f32	s15, s15
 800ed78:	edc5 7a00 	vstr	s15, [r5]
 800ed7c:	e7c2      	b.n	800ed04 <__kernel_rem_pio2f+0x3d0>
 800ed7e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800ec44 <__kernel_rem_pio2f+0x310>
 800ed82:	e7f2      	b.n	800ed6a <__kernel_rem_pio2f+0x436>
 800ed84:	aa2e      	add	r2, sp, #184	; 0xb8
 800ed86:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800ed8a:	edd0 7a00 	vldr	s15, [r0]
 800ed8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed92:	3901      	subs	r1, #1
 800ed94:	2900      	cmp	r1, #0
 800ed96:	daf5      	bge.n	800ed84 <__kernel_rem_pio2f+0x450>
 800ed98:	f1bb 0f00 	cmp.w	fp, #0
 800ed9c:	d017      	beq.n	800edce <__kernel_rem_pio2f+0x49a>
 800ed9e:	eef1 7a47 	vneg.f32	s15, s14
 800eda2:	edc5 7a00 	vstr	s15, [r5]
 800eda6:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800edaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edae:	a82f      	add	r0, sp, #188	; 0xbc
 800edb0:	2101      	movs	r1, #1
 800edb2:	428b      	cmp	r3, r1
 800edb4:	da0e      	bge.n	800edd4 <__kernel_rem_pio2f+0x4a0>
 800edb6:	f1bb 0f00 	cmp.w	fp, #0
 800edba:	d001      	beq.n	800edc0 <__kernel_rem_pio2f+0x48c>
 800edbc:	eef1 7a67 	vneg.f32	s15, s15
 800edc0:	edc5 7a01 	vstr	s15, [r5, #4]
 800edc4:	e79e      	b.n	800ed04 <__kernel_rem_pio2f+0x3d0>
 800edc6:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800ec44 <__kernel_rem_pio2f+0x310>
 800edca:	4619      	mov	r1, r3
 800edcc:	e7e2      	b.n	800ed94 <__kernel_rem_pio2f+0x460>
 800edce:	eef0 7a47 	vmov.f32	s15, s14
 800edd2:	e7e6      	b.n	800eda2 <__kernel_rem_pio2f+0x46e>
 800edd4:	ecb0 7a01 	vldmia	r0!, {s14}
 800edd8:	3101      	adds	r1, #1
 800edda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edde:	e7e8      	b.n	800edb2 <__kernel_rem_pio2f+0x47e>
 800ede0:	edd0 7a00 	vldr	s15, [r0]
 800ede4:	edd0 6a01 	vldr	s13, [r0, #4]
 800ede8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800edec:	3c01      	subs	r4, #1
 800edee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edf2:	ed80 7a00 	vstr	s14, [r0]
 800edf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edfa:	edc0 7a01 	vstr	s15, [r0, #4]
 800edfe:	e791      	b.n	800ed24 <__kernel_rem_pio2f+0x3f0>
 800ee00:	edd1 7a00 	vldr	s15, [r1]
 800ee04:	edd1 6a01 	vldr	s13, [r1, #4]
 800ee08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ee0c:	3801      	subs	r0, #1
 800ee0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee12:	ed81 7a00 	vstr	s14, [r1]
 800ee16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee1a:	edc1 7a01 	vstr	s15, [r1, #4]
 800ee1e:	e786      	b.n	800ed2e <__kernel_rem_pio2f+0x3fa>
 800ee20:	aa2e      	add	r2, sp, #184	; 0xb8
 800ee22:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ee26:	ed91 7a00 	vldr	s14, [r1]
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee30:	e783      	b.n	800ed3a <__kernel_rem_pio2f+0x406>
 800ee32:	eef1 6a66 	vneg.f32	s13, s13
 800ee36:	eeb1 7a47 	vneg.f32	s14, s14
 800ee3a:	edc5 6a00 	vstr	s13, [r5]
 800ee3e:	ed85 7a01 	vstr	s14, [r5, #4]
 800ee42:	eef1 7a67 	vneg.f32	s15, s15
 800ee46:	e785      	b.n	800ed54 <__kernel_rem_pio2f+0x420>

0800ee48 <__kernel_sinf>:
 800ee48:	ee10 3a10 	vmov	r3, s0
 800ee4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee50:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ee54:	da04      	bge.n	800ee60 <__kernel_sinf+0x18>
 800ee56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ee5a:	ee17 3a90 	vmov	r3, s15
 800ee5e:	b35b      	cbz	r3, 800eeb8 <__kernel_sinf+0x70>
 800ee60:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ee64:	eddf 7a15 	vldr	s15, [pc, #84]	; 800eebc <__kernel_sinf+0x74>
 800ee68:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800eec0 <__kernel_sinf+0x78>
 800ee6c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee70:	eddf 7a14 	vldr	s15, [pc, #80]	; 800eec4 <__kernel_sinf+0x7c>
 800ee74:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ee78:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800eec8 <__kernel_sinf+0x80>
 800ee7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ee80:	eddf 7a12 	vldr	s15, [pc, #72]	; 800eecc <__kernel_sinf+0x84>
 800ee84:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ee88:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ee8c:	b930      	cbnz	r0, 800ee9c <__kernel_sinf+0x54>
 800ee8e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800eed0 <__kernel_sinf+0x88>
 800ee92:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee96:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ee9a:	4770      	bx	lr
 800ee9c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800eea0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800eea4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800eea8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800eeac:	eddf 7a09 	vldr	s15, [pc, #36]	; 800eed4 <__kernel_sinf+0x8c>
 800eeb0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800eeb4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop
 800eebc:	2f2ec9d3 	.word	0x2f2ec9d3
 800eec0:	b2d72f34 	.word	0xb2d72f34
 800eec4:	3638ef1b 	.word	0x3638ef1b
 800eec8:	b9500d01 	.word	0xb9500d01
 800eecc:	3c088889 	.word	0x3c088889
 800eed0:	be2aaaab 	.word	0xbe2aaaab
 800eed4:	3e2aaaab 	.word	0x3e2aaaab

0800eed8 <fabs>:
 800eed8:	ec51 0b10 	vmov	r0, r1, d0
 800eedc:	ee10 2a10 	vmov	r2, s0
 800eee0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eee4:	ec43 2b10 	vmov	d0, r2, r3
 800eee8:	4770      	bx	lr
 800eeea:	0000      	movs	r0, r0
 800eeec:	0000      	movs	r0, r0
	...

0800eef0 <floor>:
 800eef0:	ec51 0b10 	vmov	r0, r1, d0
 800eef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800eefc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ef00:	2e13      	cmp	r6, #19
 800ef02:	ee10 5a10 	vmov	r5, s0
 800ef06:	ee10 8a10 	vmov	r8, s0
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	dc32      	bgt.n	800ef74 <floor+0x84>
 800ef0e:	2e00      	cmp	r6, #0
 800ef10:	da14      	bge.n	800ef3c <floor+0x4c>
 800ef12:	a333      	add	r3, pc, #204	; (adr r3, 800efe0 <floor+0xf0>)
 800ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef18:	f7f1 f9c8 	bl	80002ac <__adddf3>
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	2300      	movs	r3, #0
 800ef20:	f7f1 fe0a 	bl	8000b38 <__aeabi_dcmpgt>
 800ef24:	b138      	cbz	r0, 800ef36 <floor+0x46>
 800ef26:	2c00      	cmp	r4, #0
 800ef28:	da57      	bge.n	800efda <floor+0xea>
 800ef2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ef2e:	431d      	orrs	r5, r3
 800ef30:	d001      	beq.n	800ef36 <floor+0x46>
 800ef32:	4c2d      	ldr	r4, [pc, #180]	; (800efe8 <floor+0xf8>)
 800ef34:	2500      	movs	r5, #0
 800ef36:	4621      	mov	r1, r4
 800ef38:	4628      	mov	r0, r5
 800ef3a:	e025      	b.n	800ef88 <floor+0x98>
 800ef3c:	4f2b      	ldr	r7, [pc, #172]	; (800efec <floor+0xfc>)
 800ef3e:	4137      	asrs	r7, r6
 800ef40:	ea01 0307 	and.w	r3, r1, r7
 800ef44:	4303      	orrs	r3, r0
 800ef46:	d01f      	beq.n	800ef88 <floor+0x98>
 800ef48:	a325      	add	r3, pc, #148	; (adr r3, 800efe0 <floor+0xf0>)
 800ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4e:	f7f1 f9ad 	bl	80002ac <__adddf3>
 800ef52:	2200      	movs	r2, #0
 800ef54:	2300      	movs	r3, #0
 800ef56:	f7f1 fdef 	bl	8000b38 <__aeabi_dcmpgt>
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d0eb      	beq.n	800ef36 <floor+0x46>
 800ef5e:	2c00      	cmp	r4, #0
 800ef60:	bfbe      	ittt	lt
 800ef62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ef66:	fa43 f606 	asrlt.w	r6, r3, r6
 800ef6a:	19a4      	addlt	r4, r4, r6
 800ef6c:	ea24 0407 	bic.w	r4, r4, r7
 800ef70:	2500      	movs	r5, #0
 800ef72:	e7e0      	b.n	800ef36 <floor+0x46>
 800ef74:	2e33      	cmp	r6, #51	; 0x33
 800ef76:	dd0b      	ble.n	800ef90 <floor+0xa0>
 800ef78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ef7c:	d104      	bne.n	800ef88 <floor+0x98>
 800ef7e:	ee10 2a10 	vmov	r2, s0
 800ef82:	460b      	mov	r3, r1
 800ef84:	f7f1 f992 	bl	80002ac <__adddf3>
 800ef88:	ec41 0b10 	vmov	d0, r0, r1
 800ef8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ef94:	f04f 33ff 	mov.w	r3, #4294967295
 800ef98:	fa23 f707 	lsr.w	r7, r3, r7
 800ef9c:	4207      	tst	r7, r0
 800ef9e:	d0f3      	beq.n	800ef88 <floor+0x98>
 800efa0:	a30f      	add	r3, pc, #60	; (adr r3, 800efe0 <floor+0xf0>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	f7f1 f981 	bl	80002ac <__adddf3>
 800efaa:	2200      	movs	r2, #0
 800efac:	2300      	movs	r3, #0
 800efae:	f7f1 fdc3 	bl	8000b38 <__aeabi_dcmpgt>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d0bf      	beq.n	800ef36 <floor+0x46>
 800efb6:	2c00      	cmp	r4, #0
 800efb8:	da02      	bge.n	800efc0 <floor+0xd0>
 800efba:	2e14      	cmp	r6, #20
 800efbc:	d103      	bne.n	800efc6 <floor+0xd6>
 800efbe:	3401      	adds	r4, #1
 800efc0:	ea25 0507 	bic.w	r5, r5, r7
 800efc4:	e7b7      	b.n	800ef36 <floor+0x46>
 800efc6:	2301      	movs	r3, #1
 800efc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800efcc:	fa03 f606 	lsl.w	r6, r3, r6
 800efd0:	4435      	add	r5, r6
 800efd2:	4545      	cmp	r5, r8
 800efd4:	bf38      	it	cc
 800efd6:	18e4      	addcc	r4, r4, r3
 800efd8:	e7f2      	b.n	800efc0 <floor+0xd0>
 800efda:	2500      	movs	r5, #0
 800efdc:	462c      	mov	r4, r5
 800efde:	e7aa      	b.n	800ef36 <floor+0x46>
 800efe0:	8800759c 	.word	0x8800759c
 800efe4:	7e37e43c 	.word	0x7e37e43c
 800efe8:	bff00000 	.word	0xbff00000
 800efec:	000fffff 	.word	0x000fffff

0800eff0 <scalbn>:
 800eff0:	b570      	push	{r4, r5, r6, lr}
 800eff2:	ec55 4b10 	vmov	r4, r5, d0
 800eff6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800effa:	4606      	mov	r6, r0
 800effc:	462b      	mov	r3, r5
 800effe:	b99a      	cbnz	r2, 800f028 <scalbn+0x38>
 800f000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f004:	4323      	orrs	r3, r4
 800f006:	d036      	beq.n	800f076 <scalbn+0x86>
 800f008:	4b39      	ldr	r3, [pc, #228]	; (800f0f0 <scalbn+0x100>)
 800f00a:	4629      	mov	r1, r5
 800f00c:	ee10 0a10 	vmov	r0, s0
 800f010:	2200      	movs	r2, #0
 800f012:	f7f1 fb01 	bl	8000618 <__aeabi_dmul>
 800f016:	4b37      	ldr	r3, [pc, #220]	; (800f0f4 <scalbn+0x104>)
 800f018:	429e      	cmp	r6, r3
 800f01a:	4604      	mov	r4, r0
 800f01c:	460d      	mov	r5, r1
 800f01e:	da10      	bge.n	800f042 <scalbn+0x52>
 800f020:	a32b      	add	r3, pc, #172	; (adr r3, 800f0d0 <scalbn+0xe0>)
 800f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f026:	e03a      	b.n	800f09e <scalbn+0xae>
 800f028:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f02c:	428a      	cmp	r2, r1
 800f02e:	d10c      	bne.n	800f04a <scalbn+0x5a>
 800f030:	ee10 2a10 	vmov	r2, s0
 800f034:	4620      	mov	r0, r4
 800f036:	4629      	mov	r1, r5
 800f038:	f7f1 f938 	bl	80002ac <__adddf3>
 800f03c:	4604      	mov	r4, r0
 800f03e:	460d      	mov	r5, r1
 800f040:	e019      	b.n	800f076 <scalbn+0x86>
 800f042:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f046:	460b      	mov	r3, r1
 800f048:	3a36      	subs	r2, #54	; 0x36
 800f04a:	4432      	add	r2, r6
 800f04c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f050:	428a      	cmp	r2, r1
 800f052:	dd08      	ble.n	800f066 <scalbn+0x76>
 800f054:	2d00      	cmp	r5, #0
 800f056:	a120      	add	r1, pc, #128	; (adr r1, 800f0d8 <scalbn+0xe8>)
 800f058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f05c:	da1c      	bge.n	800f098 <scalbn+0xa8>
 800f05e:	a120      	add	r1, pc, #128	; (adr r1, 800f0e0 <scalbn+0xf0>)
 800f060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f064:	e018      	b.n	800f098 <scalbn+0xa8>
 800f066:	2a00      	cmp	r2, #0
 800f068:	dd08      	ble.n	800f07c <scalbn+0x8c>
 800f06a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f06e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f072:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f076:	ec45 4b10 	vmov	d0, r4, r5
 800f07a:	bd70      	pop	{r4, r5, r6, pc}
 800f07c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f080:	da19      	bge.n	800f0b6 <scalbn+0xc6>
 800f082:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f086:	429e      	cmp	r6, r3
 800f088:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f08c:	dd0a      	ble.n	800f0a4 <scalbn+0xb4>
 800f08e:	a112      	add	r1, pc, #72	; (adr r1, 800f0d8 <scalbn+0xe8>)
 800f090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d1e2      	bne.n	800f05e <scalbn+0x6e>
 800f098:	a30f      	add	r3, pc, #60	; (adr r3, 800f0d8 <scalbn+0xe8>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	f7f1 fabb 	bl	8000618 <__aeabi_dmul>
 800f0a2:	e7cb      	b.n	800f03c <scalbn+0x4c>
 800f0a4:	a10a      	add	r1, pc, #40	; (adr r1, 800f0d0 <scalbn+0xe0>)
 800f0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d0b8      	beq.n	800f020 <scalbn+0x30>
 800f0ae:	a10e      	add	r1, pc, #56	; (adr r1, 800f0e8 <scalbn+0xf8>)
 800f0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0b4:	e7b4      	b.n	800f020 <scalbn+0x30>
 800f0b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0ba:	3236      	adds	r2, #54	; 0x36
 800f0bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f0c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	4b0c      	ldr	r3, [pc, #48]	; (800f0f8 <scalbn+0x108>)
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	e7e8      	b.n	800f09e <scalbn+0xae>
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	c2f8f359 	.word	0xc2f8f359
 800f0d4:	01a56e1f 	.word	0x01a56e1f
 800f0d8:	8800759c 	.word	0x8800759c
 800f0dc:	7e37e43c 	.word	0x7e37e43c
 800f0e0:	8800759c 	.word	0x8800759c
 800f0e4:	fe37e43c 	.word	0xfe37e43c
 800f0e8:	c2f8f359 	.word	0xc2f8f359
 800f0ec:	81a56e1f 	.word	0x81a56e1f
 800f0f0:	43500000 	.word	0x43500000
 800f0f4:	ffff3cb0 	.word	0xffff3cb0
 800f0f8:	3c900000 	.word	0x3c900000

0800f0fc <fabsf>:
 800f0fc:	ee10 3a10 	vmov	r3, s0
 800f100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f104:	ee00 3a10 	vmov	s0, r3
 800f108:	4770      	bx	lr
	...

0800f10c <floorf>:
 800f10c:	ee10 3a10 	vmov	r3, s0
 800f110:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f114:	3a7f      	subs	r2, #127	; 0x7f
 800f116:	2a16      	cmp	r2, #22
 800f118:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f11c:	dc2a      	bgt.n	800f174 <floorf+0x68>
 800f11e:	2a00      	cmp	r2, #0
 800f120:	da11      	bge.n	800f146 <floorf+0x3a>
 800f122:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f184 <floorf+0x78>
 800f126:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f12a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f132:	dd05      	ble.n	800f140 <floorf+0x34>
 800f134:	2b00      	cmp	r3, #0
 800f136:	da23      	bge.n	800f180 <floorf+0x74>
 800f138:	4a13      	ldr	r2, [pc, #76]	; (800f188 <floorf+0x7c>)
 800f13a:	2900      	cmp	r1, #0
 800f13c:	bf18      	it	ne
 800f13e:	4613      	movne	r3, r2
 800f140:	ee00 3a10 	vmov	s0, r3
 800f144:	4770      	bx	lr
 800f146:	4911      	ldr	r1, [pc, #68]	; (800f18c <floorf+0x80>)
 800f148:	4111      	asrs	r1, r2
 800f14a:	420b      	tst	r3, r1
 800f14c:	d0fa      	beq.n	800f144 <floorf+0x38>
 800f14e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f184 <floorf+0x78>
 800f152:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f156:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15e:	ddef      	ble.n	800f140 <floorf+0x34>
 800f160:	2b00      	cmp	r3, #0
 800f162:	bfbe      	ittt	lt
 800f164:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f168:	fa40 f202 	asrlt.w	r2, r0, r2
 800f16c:	189b      	addlt	r3, r3, r2
 800f16e:	ea23 0301 	bic.w	r3, r3, r1
 800f172:	e7e5      	b.n	800f140 <floorf+0x34>
 800f174:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f178:	d3e4      	bcc.n	800f144 <floorf+0x38>
 800f17a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f17e:	4770      	bx	lr
 800f180:	2300      	movs	r3, #0
 800f182:	e7dd      	b.n	800f140 <floorf+0x34>
 800f184:	7149f2ca 	.word	0x7149f2ca
 800f188:	bf800000 	.word	0xbf800000
 800f18c:	007fffff 	.word	0x007fffff

0800f190 <nanf>:
 800f190:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f198 <nanf+0x8>
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	7fc00000 	.word	0x7fc00000

0800f19c <scalbnf>:
 800f19c:	ee10 3a10 	vmov	r3, s0
 800f1a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f1a4:	d025      	beq.n	800f1f2 <scalbnf+0x56>
 800f1a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f1aa:	d302      	bcc.n	800f1b2 <scalbnf+0x16>
 800f1ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f1b0:	4770      	bx	lr
 800f1b2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f1b6:	d122      	bne.n	800f1fe <scalbnf+0x62>
 800f1b8:	4b2a      	ldr	r3, [pc, #168]	; (800f264 <scalbnf+0xc8>)
 800f1ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f268 <scalbnf+0xcc>
 800f1be:	4298      	cmp	r0, r3
 800f1c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f1c4:	db16      	blt.n	800f1f4 <scalbnf+0x58>
 800f1c6:	ee10 3a10 	vmov	r3, s0
 800f1ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f1ce:	3a19      	subs	r2, #25
 800f1d0:	4402      	add	r2, r0
 800f1d2:	2afe      	cmp	r2, #254	; 0xfe
 800f1d4:	dd15      	ble.n	800f202 <scalbnf+0x66>
 800f1d6:	ee10 3a10 	vmov	r3, s0
 800f1da:	eddf 7a24 	vldr	s15, [pc, #144]	; 800f26c <scalbnf+0xd0>
 800f1de:	eddf 6a24 	vldr	s13, [pc, #144]	; 800f270 <scalbnf+0xd4>
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	eeb0 7a67 	vmov.f32	s14, s15
 800f1e8:	bfb8      	it	lt
 800f1ea:	eef0 7a66 	vmovlt.f32	s15, s13
 800f1ee:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f1f2:	4770      	bx	lr
 800f1f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f274 <scalbnf+0xd8>
 800f1f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f1fc:	4770      	bx	lr
 800f1fe:	0dd2      	lsrs	r2, r2, #23
 800f200:	e7e6      	b.n	800f1d0 <scalbnf+0x34>
 800f202:	2a00      	cmp	r2, #0
 800f204:	dd06      	ble.n	800f214 <scalbnf+0x78>
 800f206:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f20a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f20e:	ee00 3a10 	vmov	s0, r3
 800f212:	4770      	bx	lr
 800f214:	f112 0f16 	cmn.w	r2, #22
 800f218:	da1a      	bge.n	800f250 <scalbnf+0xb4>
 800f21a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f21e:	4298      	cmp	r0, r3
 800f220:	ee10 3a10 	vmov	r3, s0
 800f224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f228:	dd0a      	ble.n	800f240 <scalbnf+0xa4>
 800f22a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800f26c <scalbnf+0xd0>
 800f22e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f270 <scalbnf+0xd4>
 800f232:	eef0 7a40 	vmov.f32	s15, s0
 800f236:	2b00      	cmp	r3, #0
 800f238:	bf18      	it	ne
 800f23a:	eeb0 0a47 	vmovne.f32	s0, s14
 800f23e:	e7db      	b.n	800f1f8 <scalbnf+0x5c>
 800f240:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800f274 <scalbnf+0xd8>
 800f244:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f278 <scalbnf+0xdc>
 800f248:	eef0 7a40 	vmov.f32	s15, s0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	e7f3      	b.n	800f238 <scalbnf+0x9c>
 800f250:	3219      	adds	r2, #25
 800f252:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f256:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f25a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f27c <scalbnf+0xe0>
 800f25e:	ee07 3a10 	vmov	s14, r3
 800f262:	e7c4      	b.n	800f1ee <scalbnf+0x52>
 800f264:	ffff3cb0 	.word	0xffff3cb0
 800f268:	4c000000 	.word	0x4c000000
 800f26c:	7149f2ca 	.word	0x7149f2ca
 800f270:	f149f2ca 	.word	0xf149f2ca
 800f274:	0da24260 	.word	0x0da24260
 800f278:	8da24260 	.word	0x8da24260
 800f27c:	33000000 	.word	0x33000000

0800f280 <__errno>:
 800f280:	4b01      	ldr	r3, [pc, #4]	; (800f288 <__errno+0x8>)
 800f282:	6818      	ldr	r0, [r3, #0]
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	200002b0 	.word	0x200002b0

0800f28c <_close>:
 800f28c:	4b02      	ldr	r3, [pc, #8]	; (800f298 <_close+0xc>)
 800f28e:	2258      	movs	r2, #88	; 0x58
 800f290:	601a      	str	r2, [r3, #0]
 800f292:	f04f 30ff 	mov.w	r0, #4294967295
 800f296:	4770      	bx	lr
 800f298:	20000a58 	.word	0x20000a58

0800f29c <_fstat>:
 800f29c:	4b02      	ldr	r3, [pc, #8]	; (800f2a8 <_fstat+0xc>)
 800f29e:	2258      	movs	r2, #88	; 0x58
 800f2a0:	601a      	str	r2, [r3, #0]
 800f2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a6:	4770      	bx	lr
 800f2a8:	20000a58 	.word	0x20000a58

0800f2ac <_getpid>:
 800f2ac:	4b02      	ldr	r3, [pc, #8]	; (800f2b8 <_getpid+0xc>)
 800f2ae:	2258      	movs	r2, #88	; 0x58
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b6:	4770      	bx	lr
 800f2b8:	20000a58 	.word	0x20000a58

0800f2bc <_isatty>:
 800f2bc:	4b02      	ldr	r3, [pc, #8]	; (800f2c8 <_isatty+0xc>)
 800f2be:	2258      	movs	r2, #88	; 0x58
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	2000      	movs	r0, #0
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	20000a58 	.word	0x20000a58

0800f2cc <_kill>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <_kill+0xc>)
 800f2ce:	2258      	movs	r2, #88	; 0x58
 800f2d0:	601a      	str	r2, [r3, #0]
 800f2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d6:	4770      	bx	lr
 800f2d8:	20000a58 	.word	0x20000a58

0800f2dc <_lseek>:
 800f2dc:	4b02      	ldr	r3, [pc, #8]	; (800f2e8 <_lseek+0xc>)
 800f2de:	2258      	movs	r2, #88	; 0x58
 800f2e0:	601a      	str	r2, [r3, #0]
 800f2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e6:	4770      	bx	lr
 800f2e8:	20000a58 	.word	0x20000a58

0800f2ec <_read>:
 800f2ec:	4b02      	ldr	r3, [pc, #8]	; (800f2f8 <_read+0xc>)
 800f2ee:	2258      	movs	r2, #88	; 0x58
 800f2f0:	601a      	str	r2, [r3, #0]
 800f2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f6:	4770      	bx	lr
 800f2f8:	20000a58 	.word	0x20000a58

0800f2fc <_sbrk>:
 800f2fc:	4b04      	ldr	r3, [pc, #16]	; (800f310 <_sbrk+0x14>)
 800f2fe:	6819      	ldr	r1, [r3, #0]
 800f300:	4602      	mov	r2, r0
 800f302:	b909      	cbnz	r1, 800f308 <_sbrk+0xc>
 800f304:	4903      	ldr	r1, [pc, #12]	; (800f314 <_sbrk+0x18>)
 800f306:	6019      	str	r1, [r3, #0]
 800f308:	6818      	ldr	r0, [r3, #0]
 800f30a:	4402      	add	r2, r0
 800f30c:	601a      	str	r2, [r3, #0]
 800f30e:	4770      	bx	lr
 800f310:	20000890 	.word	0x20000890
 800f314:	20000a68 	.word	0x20000a68

0800f318 <_write>:
 800f318:	4b02      	ldr	r3, [pc, #8]	; (800f324 <_write+0xc>)
 800f31a:	2258      	movs	r2, #88	; 0x58
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	f04f 30ff 	mov.w	r0, #4294967295
 800f322:	4770      	bx	lr
 800f324:	20000a58 	.word	0x20000a58

0800f328 <_exit>:
 800f328:	e7fe      	b.n	800f328 <_exit>
	...

0800f32c <_init>:
 800f32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32e:	bf00      	nop
 800f330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f332:	bc08      	pop	{r3}
 800f334:	469e      	mov	lr, r3
 800f336:	4770      	bx	lr

0800f338 <_fini>:
 800f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33a:	bf00      	nop
 800f33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f33e:	bc08      	pop	{r3}
 800f340:	469e      	mov	lr, r3
 800f342:	4770      	bx	lr
