
demo_code_Cable_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c10  080089a4  080089a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5b4  0800b5b4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5bc  0800b5bc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5bc  0800b5bc  0001b5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5c0  0800b5c0  0001b5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  200001f8  0800b7bc  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  0800b7bc  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016419  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003307  00000000  00000000  00036641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00039948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264e1  00000000  00000000  0003c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c29  00000000  00000000  000624e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de7d8  00000000  00000000  0007910a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001578e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000577c  00000000  00000000  00157938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800898c 	.word	0x0800898c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	0800898c 	.word	0x0800898c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000588:	b598      	push	{r3, r4, r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 800058c:	f003 fc2c 	bl	8003de8 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 8000590:	f000 f8a0 	bl	80006d4 <SystemClock_Config>

	BSP_LCD_Init();						// Initialize the LCD display
 8000594:	f002 fbcc 	bl	8002d30 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000598:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800059c:	2001      	movs	r0, #1
 800059e:	f002 fc49 	bl	8002e34 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f002 fcaa 	bl	8002efc <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80005a8:	f002 ff52 	bl	8003450 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f002 fd00 	bl	8002fb4 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80005b4:	f002 fc26 	bl	8002e04 <BSP_LCD_GetXSize>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29c      	uxth	r4, r3
 80005bc:	f002 fc2e 	bl	8002e1c <BSP_LCD_GetYSize>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	4619      	mov	r1, r3
 80005c6:	4620      	mov	r0, r4
 80005c8:	f003 fb0a 	bl	8003be0 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 80005cc:	f001 fa66 	bl	8001a9c <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 80005d0:	f001 fa84 	bl	8001adc <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80005d4:	2000      	movs	r0, #0
 80005d6:	f001 ff93 	bl	8002500 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80005da:	2001      	movs	r0, #1
 80005dc:	f001 ff90 	bl	8002500 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 80005e0:	f001 f896 	bl	8001710 <MENU_draw>
	MENU_hint();						// Show hint at startup
 80005e4:	f001 f942 	bl	800186c <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 80005e8:	f000 f8f2 	bl	80007d0 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 80005ec:	f000 f9b0 	bl	8000950 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80005f0:	f000 facc 	bl	8000b8c <MEAS_timer_init>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80005f4:	2000      	movs	r0, #0
 80005f6:	f002 f80b 	bl	8002610 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <main+0x144>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d004      	beq.n	800060c <main+0x84>
			MEAS_data_ready = false;
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <main+0x144>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
			MEAS_show_data();
 8000608:	f000 ff92 	bl	8001530 <MEAS_show_data>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 800060c:	f001 fa98 	bl	8001b40 <PB_pressed>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01d      	beq.n	8000652 <main+0xca>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8000616:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <main+0x148>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf14      	ite	ne
 800061e:	2301      	movne	r3, #1
 8000620:	2300      	moveq	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f083 0301 	eor.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <main+0x148>)
 8000632:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <main+0x148>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <main+0xc0>
				DAC_init();
 800063c:	f000 f9ec 	bl	8000a18 <DAC_init>
				BSP_LED_On(LED4);
 8000640:	2001      	movs	r0, #1
 8000642:	f001 ffb1 	bl	80025a8 <BSP_LED_On>
 8000646:	e004      	b.n	8000652 <main+0xca>
			} else {
				DAC_reset();
 8000648:	f000 f9d0 	bl	80009ec <DAC_reset>
				BSP_LED_Off(LED4);
 800064c:	2001      	movs	r0, #1
 800064e:	f001 ffc5 	bl	80025dc <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8000652:	f001 f96b 	bl	800192c <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8000656:	f001 f957 	bl	8001908 <MENU_get_transition>
 800065a:	4603      	mov	r3, r0
 800065c:	2b06      	cmp	r3, #6
 800065e:	d82f      	bhi.n	80006c0 <main+0x138>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <main+0xe0>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000685 	.word	0x08000685
 800066c:	0800068f 	.word	0x0800068f
 8000670:	08000699 	.word	0x08000699
 8000674:	080006a3 	.word	0x080006a3
 8000678:	080006ad 	.word	0x080006ad
 800067c:	080006b7 	.word	0x080006b7
 8000680:	080006c1 	.word	0x080006c1
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:
			ADC3_IN4_single_init();
 8000684:	f000 fa24 	bl	8000ad0 <ADC3_IN4_single_init>
			ADC3_IN4_single_read();
 8000688:	f000 fa48 	bl	8000b1c <ADC3_IN4_single_read>
			break;
 800068c:	e019      	b.n	80006c2 <main+0x13a>
		case MENU_ONE:
			ADC3_IN4_timer_init();
 800068e:	f000 fab3 	bl	8000bf8 <ADC3_IN4_timer_init>
			ADC3_IN4_timer_start();
 8000692:	f000 fae9 	bl	8000c68 <ADC3_IN4_timer_start>
			break;
 8000696:	e014      	b.n	80006c2 <main+0x13a>
		case MENU_TWO:
			ADC3_IN4_DMA_init();
 8000698:	f000 fb00 	bl	8000c9c <ADC3_IN4_DMA_init>
			ADC3_IN4_DMA_start();
 800069c:	f000 fb8c 	bl	8000db8 <ADC3_IN4_DMA_start>
			break;
 80006a0:	e00f      	b.n	80006c2 <main+0x13a>
		case MENU_THREE:
			ADC1_IN13_ADC2_IN5_dual_init();
 80006a2:	f000 fbab 	bl	8000dfc <ADC1_IN13_ADC2_IN5_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 80006a6:	f000 fc53 	bl	8000f50 <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 80006aa:	e00a      	b.n	80006c2 <main+0x13a>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 80006ac:	f000 fc7a 	bl	8000fa4 <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 80006b0:	f000 fd18 	bl	80010e4 <ADC2_IN13_IN5_scan_start>
			break;
 80006b4:	e005      	b.n	80006c2 <main+0x13a>
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 80006b6:	f000 fd37 	bl	8001128 <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 80006ba:	f000 fdd5 	bl	8001268 <ADC3_IN13_IN4_scan_start>
			break;
 80006be:	e000      	b.n	80006c2 <main+0x13a>
		default:						// Should never occur
			break;
 80006c0:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 80006c2:	20c8      	movs	r0, #200	; 0xc8
 80006c4:	f003 fc0a 	bl	8003edc <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80006c8:	e794      	b.n	80005f4 <main+0x6c>
 80006ca:	bf00      	nop
 80006cc:	20000214 	.word	0x20000214
 80006d0:	20000215 	.word	0x20000215

080006d4 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0a0      	sub	sp, #128	; 0x80
 80006d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 fcfa 	bl	80080dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2230      	movs	r2, #48	; 0x30
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f007 fceb 	bl	80080dc <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <SystemClock_Config+0xf0>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <SystemClock_Config+0xf0>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <SystemClock_Config+0xf0>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <SystemClock_Config+0xf4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <SystemClock_Config+0xf4>)
 800072c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xf4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073e:	2301      	movs	r3, #1
 8000740:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000746:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000750:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000752:	2308      	movs	r3, #8
 8000754:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000756:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800075a:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000760:	2307      	movs	r3, #7
 8000762:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000764:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000768:	4618      	mov	r0, r3
 800076a:	f005 fe09 	bl	8006380 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800078a:	2105      	movs	r1, #5
 800078c:	4618      	mov	r0, r3
 800078e:	f006 f867 	bl	8006860 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000792:	2308      	movs	r3, #8
 8000794:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000796:	23c0      	movs	r3, #192	; 0xc0
 8000798:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800079a:	2304      	movs	r3, #4
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800079e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 fa41 	bl	8006c30 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <SystemClock_Config+0xf8>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	4a06      	ldr	r2, [pc, #24]	; (80007cc <SystemClock_Config+0xf8>)
 80007b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b8:	6053      	str	r3, [r2, #4]
}
 80007ba:	bf00      	nop
 80007bc:	3780      	adds	r7, #128	; 0x80
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000
 80007cc:	40012300 	.word	0x40012300

080007d0 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <gyro_disable+0xb4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <gyro_disable+0xb4>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <gyro_disable+0xb4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1; // Reset mode for PC1
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <gyro_disable+0xb8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <gyro_disable+0xb8>)
 80007f8:	f023 030c 	bic.w	r3, r3, #12
 80007fc:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0;	// Set PC1 as output
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <gyro_disable+0xb8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a21      	ldr	r2, [pc, #132]	; (8000888 <gyro_disable+0xb8>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <gyro_disable+0xb8>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <gyro_disable+0xb8>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8000816:	200a      	movs	r0, #10
 8000818:	f003 fb60 	bl	8003edc <HAL_Delay>
	GPIOC->MODER |= GPIO_MODER_MODER1_Msk; // Analog mode PC1 = ADC123_IN11
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <gyro_disable+0xb8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <gyro_disable+0xb8>)
 8000822:	f043 030c 	orr.w	r3, r3, #12
 8000826:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <gyro_disable+0xb4>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a14      	ldr	r2, [pc, #80]	; (8000884 <gyro_disable+0xb4>)
 8000832:	f043 0320 	orr.w	r3, r3, #32
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <gyro_disable+0xb4>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	f003 0320 	and.w	r3, r3, #32
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8;	// Reset speed of PF8
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <gyro_disable+0xbc>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	4a10      	ldr	r2, [pc, #64]	; (800088c <gyro_disable+0xbc>)
 800084a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800084e:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8;			// Reset alternate func. of PF8
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <gyro_disable+0xbc>)
 8000852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <gyro_disable+0xbc>)
 8000856:	f023 030f 	bic.w	r3, r3, #15
 800085a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8;			// Reset pulup/down of PF8
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <gyro_disable+0xbc>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <gyro_disable+0xbc>)
 8000862:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000866:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8000868:	200a      	movs	r0, #10
 800086a:	f003 fb37 	bl	8003edc <HAL_Delay>
	GPIOF->MODER |= GPIO_MODER_MODER8_Msk; // Analog mode for PF6 = ADC3_IN4
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <gyro_disable+0xbc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <gyro_disable+0xbc>)
 8000874:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000878:	6013      	str	r3, [r2, #0]
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40020800 	.word	0x40020800
 800088c:	40021400 	.word	0x40021400

08000890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	db0b      	blt.n	80008ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 021f 	and.w	r2, r3, #31
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <__NVIC_EnableIRQ+0x38>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	095b      	lsrs	r3, r3, #5
 80008b0:	2001      	movs	r0, #1
 80008b2:	fa00 f202 	lsl.w	r2, r0, r2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e100 	.word	0xe000e100

080008cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db12      	blt.n	8000904 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	490a      	ldr	r1, [pc, #40]	; (8000910 <__NVIC_DisableIRQ+0x44>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	3320      	adds	r3, #32
 80008f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008f8:	f3bf 8f4f 	dsb	sy
}
 80008fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008fe:	f3bf 8f6f 	isb	sy
}
 8000902:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0c      	blt.n	8000940 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_ClearPendingIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	3360      	adds	r3, #96	; 0x60
 800093c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000e100 	.word	0xe000e100

08000950 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (GPIO_MODER_MODER6_Msk);// Analog mode for PF6 = ADC3_IN4
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MEAS_GPIO_analog_init+0x90>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <MEAS_GPIO_analog_init+0x90>)
 8000978:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800097c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (GPIO_MODER_MODER3_Msk);// Analog mode for PC3 = ADC123_IN13
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MEAS_GPIO_analog_init+0x94>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <MEAS_GPIO_analog_init+0x94>)
 80009a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009a4:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MEAS_GPIO_analog_init+0x8c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (GPIO_MODER_MODER5_Msk);// Analog mode for PA5 ADC12_IN5
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MEAS_GPIO_analog_init+0x98>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <MEAS_GPIO_analog_init+0x98>)
 80009c8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80009cc:	6013      	str	r3, [r2, #0]
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021400 	.word	0x40021400
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020000 	.word	0x40020000

080009ec <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <DAC_reset+0x28>)
 80009f2:	6a1b      	ldr	r3, [r3, #32]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <DAC_reset+0x28>)
 80009f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009fa:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <DAC_reset+0x28>)
 80009fe:	6a1b      	ldr	r3, [r3, #32]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <DAC_reset+0x28>)
 8000a02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000a06:	6213      	str	r3, [r2, #32]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <DAC_init+0x3c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <DAC_init+0x3c>)
 8000a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <DAC_init+0x3c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <DAC_init+0x40>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <DAC_init+0x40>)
 8000a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007400 	.word	0x40007400

08000a5c <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <DAC_increment+0x30>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3314      	adds	r3, #20
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <DAC_increment+0x30>)
 8000a68:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <DAC_increment+0x30>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a72:	d302      	bcc.n	8000a7a <DAC_increment+0x1e>
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <DAC_increment+0x30>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <DAC_increment+0x34>)
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <DAC_increment+0x30>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6153      	str	r3, [r2, #20]
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	200003fc 	.word	0x200003fc
 8000a90:	40007400 	.word	0x40007400

08000a94 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <ADC_reset+0x38>)
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <ADC_reset+0x38>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <ADC_reset+0x38>)
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <ADC_reset+0x38>)
 8000aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aae:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8000ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <ADC3_IN4_single_init>:
 * @brief Initialize the ADC in single conversion mode
 *
 * The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_single_init(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <ADC3_IN4_single_init+0x40>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <ADC3_IN4_single_init+0x44>)
 8000ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <ADC3_IN4_single_init+0x44>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aea:	6453      	str	r3, [r2, #68]	; 0x44
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <ADC3_IN4_single_init+0x44>)
 8000aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <ADC3_IN4_single_init+0x48>)
 8000afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <ADC3_IN4_single_init+0x48>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20000000 	.word	0x20000000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40012200 	.word	0x40012200

08000b1c <ADC3_IN4_single_read>:
 * @brief Read one single value of the ADC in single conversion mode
 *
 * Start the conversion, wait in a while loop for end of conversion, read data.
 *****************************************************************************/
void ADC3_IN4_single_read(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <ADC3_IN4_single_read+0x60>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <ADC3_IN4_single_read+0x60>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);						// ADC needs some time to stabilize
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f003 f9d5 	bl	8003edc <HAL_Delay>
	ADC3->CR2 |= ADC_CR2_SWSTART;
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <ADC3_IN4_single_read+0x60>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <ADC3_IN4_single_read+0x60>)
 8000b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b3c:	6093      	str	r3, [r2, #8]
	while (!(ADC3->SR & ADC_SR_EOC)) { ; }	// Wait for end of conversion
 8000b3e:	bf00      	nop
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <ADC3_IN4_single_read+0x60>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f9      	beq.n	8000b40 <ADC3_IN4_single_read+0x24>
	ADC_samples[0] = ADC3->DR;			// Read the converted value
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <ADC3_IN4_single_read+0x60>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <ADC3_IN4_single_read+0x64>)
 8000b52:	6013      	str	r3, [r2, #0]
	ADC3->CR2 &= ~ADC_CR2_ADON;			// Disable ADC3
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <ADC3_IN4_single_read+0x60>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <ADC3_IN4_single_read+0x60>)
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	6093      	str	r3, [r2, #8]
	if (DAC_active) {
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <ADC3_IN4_single_read+0x68>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <ADC3_IN4_single_read+0x50>
		DAC_increment();
 8000b68:	f7ff ff78 	bl	8000a5c <DAC_increment>
	}
	ADC_reset();
 8000b6c:	f7ff ff92 	bl	8000a94 <ADC_reset>
	MEAS_data_ready = true;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <ADC3_IN4_single_read+0x6c>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40012200 	.word	0x40012200
 8000b80:	2000021c 	.word	0x2000021c
 8000b84:	20000215 	.word	0x20000215
 8000b88:	20000214 	.word	0x20000214

08000b8c <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MEAS_timer_init+0x68>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <MEAS_timer_init+0x68>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MEAS_timer_init+0x68>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8000bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb2:	f243 62af 	movw	r2, #13999	; 0x36af
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8000bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bbc:	2209      	movs	r2, #9
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8000bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8000be0:	201c      	movs	r0, #28
 8000be2:	f7ff fe97 	bl	8000914 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8000be6:	201c      	movs	r0, #28
 8000be8:	f7ff fe52 	bl	8000890 <__NVIC_EnableIRQ>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <ADC3_IN4_timer_init>:
 * and the timer starts the ADC directly without CPU intervention.
 * @n The ADC is configured for end of conversion interrupt.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_timer_init(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <ADC3_IN4_timer_init+0x64>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <ADC3_IN4_timer_init+0x68>)
 8000c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <ADC3_IN4_timer_init+0x68>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6453      	str	r3, [r2, #68]	; 0x44
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <ADC3_IN4_timer_init+0x68>)
 8000c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <ADC3_IN4_timer_init+0x6c>)
 8000c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <ADC3_IN4_timer_init+0x6c>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->CR1 |= ADC_CR1_EOCIE;			// Enable end of conversion interrupt
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <ADC3_IN4_timer_init+0x6c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <ADC3_IN4_timer_init+0x6c>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <ADC3_IN4_timer_init+0x6c>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <ADC3_IN4_timer_init+0x6c>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c42:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <ADC3_IN4_timer_init+0x6c>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <ADC3_IN4_timer_init+0x6c>)
 8000c4a:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000c4e:	6093      	str	r3, [r2, #8]

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40012200 	.word	0x40012200

08000c68 <ADC3_IN4_timer_start>:
 *
 * The ADC isues an end of conversion interrupt.
 * The converted value can be read in the associated interrupt handler.
 *****************************************************************************/
void ADC3_IN4_timer_start(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(ADC_IRQn);		// Clear pending interrupt on line 0
 8000c6c:	2012      	movs	r0, #18
 8000c6e:	f7ff fe51 	bl	8000914 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(ADC_IRQn);			// Enable interrupt line 0 in the NVIC
 8000c72:	2012      	movs	r0, #18
 8000c74:	f7ff fe0c 	bl	8000890 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <ADC3_IN4_timer_start+0x30>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <ADC3_IN4_timer_start+0x30>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8000c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40012200 	.word	0x40012200

08000c9c <ADC3_IN4_DMA_init>:
 * to memory without CPU intervention.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input is ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN4_DMA_init(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
	MEAS_input_count = 1;				// Only 1 input is converted
 8000ca2:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <ADC3_IN4_DMA_init+0x100>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <ADC3_IN4_DMA_init+0x104>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	4a3b      	ldr	r2, [pc, #236]	; (8000da0 <ADC3_IN4_DMA_init+0x104>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb8:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <ADC3_IN4_DMA_init+0x104>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = first conversion
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <ADC3_IN4_DMA_init+0x108>)
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc8:	4a36      	ldr	r2, [pc, #216]	; (8000da4 <ADC3_IN4_DMA_init+0x108>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000cd0:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <ADC3_IN4_DMA_init+0x108>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4a33      	ldr	r2, [pc, #204]	; (8000da4 <ADC3_IN4_DMA_init+0x108>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cda:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <ADC3_IN4_DMA_init+0x108>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	4a30      	ldr	r2, [pc, #192]	; (8000da4 <ADC3_IN4_DMA_init+0x108>)
 8000ce2:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000ce6:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <ADC3_IN4_DMA_init+0x108>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a2d      	ldr	r2, [pc, #180]	; (8000da4 <ADC3_IN4_DMA_init+0x108>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <ADC3_IN4_DMA_init+0x104>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <ADC3_IN4_DMA_init+0x104>)
 8000cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <ADC3_IN4_DMA_init+0x104>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d16:	f023 0301 	bic.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000d1c:	bf00      	nop
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f9      	bne.n	8000d1e <ADC3_IN4_DMA_init+0x82>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <ADC3_IN4_DMA_init+0x110>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	4a1f      	ldr	r2, [pc, #124]	; (8000dac <ADC3_IN4_DMA_init+0x110>)
 8000d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d34:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d40:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d70:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = ADC_NUMS;		// Number of data items to transfer
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d80:	223c      	movs	r2, #60	; 0x3c
 8000d82:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <ADC3_IN4_DMA_init+0x114>)
 8000d88:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <ADC3_IN4_DMA_init+0x10c>)
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <ADC3_IN4_DMA_init+0x118>)
 8000d8e:	60da      	str	r2, [r3, #12]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40012200 	.word	0x40012200
 8000da8:	40026428 	.word	0x40026428
 8000dac:	40026400 	.word	0x40026400
 8000db0:	4001224c 	.word	0x4001224c
 8000db4:	2000021c 	.word	0x2000021c

08000db8 <ADC3_IN4_DMA_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN4_DMA_start(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <ADC3_IN4_DMA_start+0x3c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <ADC3_IN4_DMA_start+0x3c>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8000dc8:	2039      	movs	r0, #57	; 0x39
 8000dca:	f7ff fda3 	bl	8000914 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8000dce:	2039      	movs	r0, #57	; 0x39
 8000dd0:	f7ff fd5e 	bl	8000890 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <ADC3_IN4_DMA_start+0x40>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <ADC3_IN4_DMA_start+0x40>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40026428 	.word	0x40026428
 8000df8:	40012200 	.word	0x40012200

08000dfc <ADC1_IN13_ADC2_IN5_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_init(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 8000e02:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <ADC1_IN13_ADC2_IN5_dual_init+0x130>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e10:	4a47      	ldr	r2, [pc, #284]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e16:	6453      	str	r3, [r2, #68]	; 0x44
 8000e18:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6453      	str	r3, [r2, #68]	; 0x44
 8000e34:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 8000e40:	4b3c      	ldr	r3, [pc, #240]	; (8000f34 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4a3b      	ldr	r2, [pc, #236]	; (8000f34 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8000e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4a:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2
 8000e4c:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	4a38      	ldr	r2, [pc, #224]	; (8000f34 <ADC1_IN13_ADC2_IN5_dual_init+0x138>)
 8000e52:	f043 0306 	orr.w	r3, r3, #6
 8000e56:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e62:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	4a33      	ldr	r2, [pc, #204]	; (8000f38 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000e6a:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000e6e:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e74:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <ADC1_IN13_ADC2_IN5_dual_init+0x13c>)
 8000e76:	f043 030d 	orr.w	r3, r3, #13
 8000e7a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ1_Pos);	// Input 5 = first conversion
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 8000e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e80:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <ADC1_IN13_ADC2_IN5_dual_init+0x140>)
 8000e82:	f043 0305 	orr.w	r3, r3, #5
 8000e86:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <ADC1_IN13_ADC2_IN5_dual_init+0x134>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a25      	ldr	r2, [pc, #148]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000eb0:	bf00      	nop
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f9      	bne.n	8000eb2 <ADC1_IN13_ADC2_IN5_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	4a20      	ldr	r2, [pc, #128]	; (8000f44 <ADC1_IN13_ADC2_IN5_dual_init+0x148>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ecc:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef4:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000efc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f00:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000f10:	223c      	movs	r2, #60	; 0x3c
 8000f12:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <ADC1_IN13_ADC2_IN5_dual_init+0x14c>)
 8000f18:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <ADC1_IN13_ADC2_IN5_dual_init+0x144>)
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <ADC1_IN13_ADC2_IN5_dual_init+0x150>)
 8000f1e:	60da      	str	r2, [r3, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40012300 	.word	0x40012300
 8000f38:	40012000 	.word	0x40012000
 8000f3c:	40012100 	.word	0x40012100
 8000f40:	40026470 	.word	0x40026470
 8000f44:	40026400 	.word	0x40026400
 8000f48:	40012308 	.word	0x40012308
 8000f4c:	2000021c 	.word	0x2000021c

08000f50 <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8000f60:	203c      	movs	r0, #60	; 0x3c
 8000f62:	f7ff fcd7 	bl	8000914 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8000f66:	203c      	movs	r0, #60	; 0x3c
 8000f68:	f7ff fc92 	bl	8000890 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8000f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40026470 	.word	0x40026470
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40012100 	.word	0x40012100

08000fa4 <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 8000faa:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <ADC2_IN13_IN5_scan_init+0x124>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	4b45      	ldr	r3, [pc, #276]	; (80010cc <ADC2_IN13_IN5_scan_init+0x128>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb8:	4a44      	ldr	r2, [pc, #272]	; (80010cc <ADC2_IN13_IN5_scan_init+0x128>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc0:	4b42      	ldr	r3, [pc, #264]	; (80010cc <ADC2_IN13_IN5_scan_init+0x128>)
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= ADC_SQR1_L_0;			// Convert 2 inputs
 8000fcc:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	4a3f      	ldr	r2, [pc, #252]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fd6:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8000fd8:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fdc:	4a3c      	ldr	r2, [pc, #240]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000fde:	f043 030d 	orr.w	r3, r3, #13
 8000fe2:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 8000fe4:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe8:	4a39      	ldr	r2, [pc, #228]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000fea:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000fee:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8000ff0:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a36      	ldr	r2, [pc, #216]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffa:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000ffc:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a33      	ldr	r2, [pc, #204]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a30      	ldr	r2, [pc, #192]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 800100e:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8001012:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001014:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a2d      	ldr	r2, [pc, #180]	; (80010d0 <ADC2_IN13_IN5_scan_init+0x12c>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <ADC2_IN13_IN5_scan_init+0x128>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a28      	ldr	r2, [pc, #160]	; (80010cc <ADC2_IN13_IN5_scan_init+0x128>)
 800102a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <ADC2_IN13_IN5_scan_init+0x128>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001048:	bf00      	nop
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f9      	bne.n	800104a <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <ADC2_IN13_IN5_scan_init+0x134>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	4a1f      	ldr	r2, [pc, #124]	; (80010d8 <ADC2_IN13_IN5_scan_init+0x134>)
 800105c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001060:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 800108c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001090:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 8001098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 80010ac:	2278      	movs	r2, #120	; 0x78
 80010ae:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <ADC2_IN13_IN5_scan_init+0x138>)
 80010b4:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <ADC2_IN13_IN5_scan_init+0x130>)
 80010b8:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <ADC2_IN13_IN5_scan_init+0x13c>)
 80010ba:	60da      	str	r2, [r3, #12]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40012100 	.word	0x40012100
 80010d4:	40026458 	.word	0x40026458
 80010d8:	40026400 	.word	0x40026400
 80010dc:	4001214c 	.word	0x4001214c
 80010e0:	2000021c 	.word	0x2000021c

080010e4 <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <ADC2_IN13_IN5_scan_start+0x3c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <ADC2_IN13_IN5_scan_start+0x3c>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 80010f4:	203b      	movs	r0, #59	; 0x3b
 80010f6:	f7ff fc0d 	bl	8000914 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 80010fa:	203b      	movs	r0, #59	; 0x3b
 80010fc:	f7ff fbc8 	bl	8000890 <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <ADC2_IN13_IN5_scan_start+0x40>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <ADC2_IN13_IN5_scan_start+0x40>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 800110c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40026458 	.word	0x40026458
 8001124:	40012100 	.word	0x40012100

08001128 <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <ADC3_IN13_IN4_scan_init+0x124>)
 8001130:	2202      	movs	r2, #2
 8001132:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <ADC3_IN13_IN4_scan_init+0x128>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	4a44      	ldr	r2, [pc, #272]	; (8001250 <ADC3_IN13_IN4_scan_init+0x128>)
 800113e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001142:	6453      	str	r3, [r2, #68]	; 0x44
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <ADC3_IN13_IN4_scan_init+0x128>)
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= ADC_SQR1_L_0;			// Convert 2 inputs
 8001150:	4b40      	ldr	r3, [pc, #256]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	4a3f      	ldr	r2, [pc, #252]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800115a:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 800115c:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 800115e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001160:	4a3c      	ldr	r2, [pc, #240]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001162:	f043 030d 	orr.w	r3, r3, #13
 8001166:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ2_Pos);	// Input 4 = second conversion
 8001168:	4b3a      	ldr	r3, [pc, #232]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	4a39      	ldr	r2, [pc, #228]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 800116e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001172:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8001174:	4b37      	ldr	r3, [pc, #220]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	4a36      	ldr	r2, [pc, #216]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4a33      	ldr	r2, [pc, #204]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118a:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a30      	ldr	r2, [pc, #192]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 8001192:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8001196:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <ADC3_IN13_IN4_scan_init+0x12c>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <ADC3_IN13_IN4_scan_init+0x128>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a28      	ldr	r2, [pc, #160]	; (8001250 <ADC3_IN13_IN4_scan_init+0x128>)
 80011ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <ADC3_IN13_IN4_scan_init+0x128>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80011cc:	bf00      	nop
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f9      	bne.n	80011ce <ADC3_IN13_IN4_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <ADC3_IN13_IN4_scan_init+0x134>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4a1f      	ldr	r2, [pc, #124]	; (800125c <ADC3_IN13_IN4_scan_init+0x134>)
 80011e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e4:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 80011ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011f0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 8001210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001214:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 800121c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001220:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 8001230:	2278      	movs	r2, #120	; 0x78
 8001232:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <ADC3_IN13_IN4_scan_init+0x138>)
 8001238:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <ADC3_IN13_IN4_scan_init+0x130>)
 800123c:	4a09      	ldr	r2, [pc, #36]	; (8001264 <ADC3_IN13_IN4_scan_init+0x13c>)
 800123e:	60da      	str	r2, [r3, #12]

}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	20000000 	.word	0x20000000
 8001250:	40023800 	.word	0x40023800
 8001254:	40012200 	.word	0x40012200
 8001258:	40026428 	.word	0x40026428
 800125c:	40026400 	.word	0x40026400
 8001260:	4001224c 	.word	0x4001224c
 8001264:	2000021c 	.word	0x2000021c

08001268 <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <ADC3_IN13_IN4_scan_start+0x3c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 8001278:	2039      	movs	r0, #57	; 0x39
 800127a:	f7ff fb4b 	bl	8000914 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 800127e:	2039      	movs	r0, #57	; 0x39
 8001280:	f7ff fb06 	bl	8000890 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <ADC3_IN13_IN4_scan_start+0x40>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <ADC3_IN13_IN4_scan_start+0x40>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40026428 	.word	0x40026428
 80012a8:	40012200 	.word	0x40012200

080012ac <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 80012b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <TIM2_IRQHandler+0x24>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <TIM2_IRQHandler+0x20>
		DAC_increment();
 80012c8:	f7ff fbc8 	bl	8000a5c <DAC_increment>
	}
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000215 	.word	0x20000215

080012d4 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <ADC_IRQHandler+0x58>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 80012e4:	4911      	ldr	r1, [pc, #68]	; (800132c <ADC_IRQHandler+0x58>)
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <ADC_IRQHandler+0x5c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	4810      	ldr	r0, [pc, #64]	; (8001330 <ADC_IRQHandler+0x5c>)
 80012ee:	6002      	str	r2, [r0, #0]
 80012f0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80012f2:	4910      	ldr	r1, [pc, #64]	; (8001334 <ADC_IRQHandler+0x60>)
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <ADC_IRQHandler+0x5c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b3b      	cmp	r3, #59	; 0x3b
 80012fe:	d912      	bls.n	8001326 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <ADC_IRQHandler+0x58>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <ADC_IRQHandler+0x58>)
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	6093      	str	r3, [r2, #8]
			ADC_reset();
 800131c:	f7ff fbba 	bl	8000a94 <ADC_reset>
			MEAS_data_ready = true;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <ADC_IRQHandler+0x64>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40012200 	.word	0x40012200
 8001330:	20000218 	.word	0x20000218
 8001334:	2000021c 	.word	0x2000021c
 8001338:	20000214 	.word	0x20000214

0800133c <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <DMA2_Stream1_IRQHandler+0x78>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001348:	2b00      	cmp	r3, #0
 800134a:	d031      	beq.n	80013b0 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 800134c:	2039      	movs	r0, #57	; 0x39
 800134e:	f7ff fabd 	bl	80008cc <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001352:	2039      	movs	r0, #57	; 0x39
 8001354:	f7ff fade 	bl	8000914 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <DMA2_Stream1_IRQHandler+0x7c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <DMA2_Stream1_IRQHandler+0x7c>)
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001364:	bf00      	nop
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <DMA2_Stream1_IRQHandler+0x7c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <DMA2_Stream1_IRQHandler+0x78>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <DMA2_Stream1_IRQHandler+0x78>)
 8001378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137c:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800137e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <DMA2_Stream1_IRQHandler+0x80>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <DMA2_Stream1_IRQHandler+0x80>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <DMA2_Stream1_IRQHandler+0x80>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4a07      	ldr	r2, [pc, #28]	; (80013bc <DMA2_Stream1_IRQHandler+0x80>)
 80013a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013a4:	6093      	str	r3, [r2, #8]
		ADC_reset();
 80013a6:	f7ff fb75 	bl	8000a94 <ADC_reset>
		MEAS_data_ready = true;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <DMA2_Stream1_IRQHandler+0x84>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
	}
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40026400 	.word	0x40026400
 80013b8:	40026428 	.word	0x40026428
 80013bc:	40012200 	.word	0x40012200
 80013c0:	20000214 	.word	0x20000214

080013c4 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <DMA2_Stream3_IRQHandler+0x78>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d031      	beq.n	8001438 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 80013d4:	203b      	movs	r0, #59	; 0x3b
 80013d6:	f7ff fa79 	bl	80008cc <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 80013da:	203b      	movs	r0, #59	; 0x3b
 80013dc:	f7ff fa9a 	bl	8000914 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <DMA2_Stream3_IRQHandler+0x7c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a16      	ldr	r2, [pc, #88]	; (8001440 <DMA2_Stream3_IRQHandler+0x7c>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80013ec:	bf00      	nop
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <DMA2_Stream3_IRQHandler+0x7c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f9      	bne.n	80013ee <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <DMA2_Stream3_IRQHandler+0x78>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <DMA2_Stream3_IRQHandler+0x78>)
 8001400:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001404:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <DMA2_Stream3_IRQHandler+0x80>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <DMA2_Stream3_IRQHandler+0x80>)
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <DMA2_Stream3_IRQHandler+0x80>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <DMA2_Stream3_IRQHandler+0x80>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800142c:	6093      	str	r3, [r2, #8]
		ADC_reset();
 800142e:	f7ff fb31 	bl	8000a94 <ADC_reset>
		MEAS_data_ready = true;
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <DMA2_Stream3_IRQHandler+0x84>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
	}
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40026400 	.word	0x40026400
 8001440:	40026458 	.word	0x40026458
 8001444:	40012100 	.word	0x40012100
 8001448:	20000214 	.word	0x20000214

0800144c <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <DMA2_Stream4_IRQHandler+0xc8>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	2b00      	cmp	r3, #0
 800145c:	d055      	beq.n	800150a <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 800145e:	203c      	movs	r0, #60	; 0x3c
 8001460:	f7ff fa34 	bl	80008cc <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001464:	203c      	movs	r0, #60	; 0x3c
 8001466:	f7ff fa55 	bl	8000914 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <DMA2_Stream4_IRQHandler+0xcc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <DMA2_Stream4_IRQHandler+0xcc>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001476:	bf00      	nop
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <DMA2_Stream4_IRQHandler+0xcc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f9      	bne.n	8001478 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <DMA2_Stream4_IRQHandler+0xc8>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <DMA2_Stream4_IRQHandler+0xc8>)
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <DMA2_Stream4_IRQHandler+0xd0>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a1d      	ldr	r2, [pc, #116]	; (800151c <DMA2_Stream4_IRQHandler+0xd0>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <DMA2_Stream4_IRQHandler+0xd4>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <DMA2_Stream4_IRQHandler+0xd4>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <DMA2_Stream4_IRQHandler+0xd8>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <DMA2_Stream4_IRQHandler+0xd8>)
 80014be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014c2:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 80014c4:	233b      	movs	r3, #59	; 0x3b
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	e017      	b.n	80014fa <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <DMA2_Stream4_IRQHandler+0xdc>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	3301      	adds	r3, #1
 80014d8:	0c12      	lsrs	r2, r2, #16
 80014da:	4913      	ldr	r1, [pc, #76]	; (8001528 <DMA2_Stream4_IRQHandler+0xdc>)
 80014dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <DMA2_Stream4_IRQHandler+0xdc>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	490e      	ldr	r1, [pc, #56]	; (8001528 <DMA2_Stream4_IRQHandler+0xdc>)
 80014f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	dae4      	bge.n	80014ca <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001500:	f7ff fac8 	bl	8000a94 <ADC_reset>
		MEAS_data_ready = true;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <DMA2_Stream4_IRQHandler+0xe0>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
	}
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40026400 	.word	0x40026400
 8001518:	40026470 	.word	0x40026470
 800151c:	40012000 	.word	0x40012000
 8001520:	40012100 	.word	0x40012100
 8001524:	40012300 	.word	0x40012300
 8001528:	2000021c 	.word	0x2000021c
 800152c:	20000214 	.word	0x20000214

08001530 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b08d      	sub	sp, #52	; 0x34
 8001534:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET = 260;
 8001536:	f44f 7382 	mov.w	r3, #260	; 0x104
 800153a:	61fb      	str	r3, [r7, #28]
	const uint32_t X_SIZE = 240;
 800153c:	23f0      	movs	r3, #240	; 0xf0
 800153e:	61bb      	str	r3, [r7, #24]
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8001540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
	uint32_t data;
	uint32_t data_last;
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800154e:	f04f 30ff 	mov.w	r0, #4294967295
 8001552:	f001 fce3 	bl	8002f1c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	b29a      	uxth	r2, r3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	b29b      	uxth	r3, r3
 800155e:	3301      	adds	r3, #1
 8001560:	b29b      	uxth	r3, r3
 8001562:	2100      	movs	r1, #0
 8001564:	2000      	movs	r0, #0
 8001566:	f001 ff19 	bl	800339c <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font24);
 800156a:	4861      	ldr	r0, [pc, #388]	; (80016f0 <MEAS_show_data+0x1c0>)
 800156c:	f001 fd08 	bl	8002f80 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f001 fcea 	bl	8002f4c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001578:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800157c:	f001 fcce 	bl	8002f1c <BSP_LCD_SetTextColor>
	char text[16];
	snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <MEAS_show_data+0x1c4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4638      	mov	r0, r7
 8001586:	4a5c      	ldr	r2, [pc, #368]	; (80016f8 <MEAS_show_data+0x1c8>)
 8001588:	210f      	movs	r1, #15
 800158a:	f006 fdaf 	bl	80080ec <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 800158e:	463a      	mov	r2, r7
 8001590:	2303      	movs	r3, #3
 8001592:	2132      	movs	r1, #50	; 0x32
 8001594:	2000      	movs	r0, #0
 8001596:	f001 fd79 	bl	800308c <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 800159a:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <MEAS_show_data+0x1c4>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4638      	mov	r0, r7
 80015a0:	4a56      	ldr	r2, [pc, #344]	; (80016fc <MEAS_show_data+0x1cc>)
 80015a2:	210f      	movs	r1, #15
 80015a4:	f006 fda2 	bl	80080ec <sniprintf>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 80015a8:	463a      	mov	r2, r7
 80015aa:	2303      	movs	r3, #3
 80015ac:	2150      	movs	r1, #80	; 0x50
 80015ae:	2000      	movs	r0, #0
 80015b0:	f001 fd6c 	bl	800308c <BSP_LCD_DisplayStringAt>
	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80015b4:	4852      	ldr	r0, [pc, #328]	; (8001700 <MEAS_show_data+0x1d0>)
 80015b6:	f001 fcb1 	bl	8002f1c <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 80015ba:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <MEAS_show_data+0x1c4>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ca:	e02e      	b.n	800162a <MEAS_show_data+0xfa>
		data_last = data;
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	613b      	str	r3, [r7, #16]
		data = (ADC_samples[MEAS_input_count*i]) / f;
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <MEAS_show_data+0x1d4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	4a46      	ldr	r2, [pc, #280]	; (80016f4 <MEAS_show_data+0x1c4>)
 80015dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 80015e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d901      	bls.n	80015f4 <MEAS_show_data+0xc4>
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	b298      	uxth	r0, r3
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	b29a      	uxth	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	b29b      	uxth	r3, r3
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	b299      	uxth	r1, r3
 800160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160c:	b29b      	uxth	r3, r3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	b29c      	uxth	r4, r3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	b29a      	uxth	r2, r3
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	b29b      	uxth	r3, r3
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	4622      	mov	r2, r4
 8001620:	f001 fdf2 	bl	8003208 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	3301      	adds	r3, #1
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	2b3b      	cmp	r3, #59	; 0x3b
 800162e:	d9cd      	bls.n	80015cc <MEAS_show_data+0x9c>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <MEAS_show_data+0x1d4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d13e      	bne.n	80016b6 <MEAS_show_data+0x186>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001638:	4833      	ldr	r0, [pc, #204]	; (8001708 <MEAS_show_data+0x1d8>)
 800163a:	f001 fc6f 	bl	8002f1c <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <MEAS_show_data+0x1c4>)
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 800164a:	2301      	movs	r3, #1
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	e02f      	b.n	80016b0 <MEAS_show_data+0x180>
			data_last = data;
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	613b      	str	r3, [r7, #16]
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <MEAS_show_data+0x1d4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	3301      	adds	r3, #1
 8001660:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <MEAS_show_data+0x1c4>)
 8001662:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 800166e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	429a      	cmp	r2, r3
 8001674:	d901      	bls.n	800167a <MEAS_show_data+0x14a>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	3b01      	subs	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	b298      	uxth	r0, r3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	b29a      	uxth	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	b29b      	uxth	r3, r3
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b299      	uxth	r1, r3
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	b29b      	uxth	r3, r3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	b29c      	uxth	r4, r3
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	b29a      	uxth	r2, r3
 800169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169e:	b29b      	uxth	r3, r3
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4622      	mov	r2, r4
 80016a6:	f001 fdaf 	bl	8003208 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	3301      	adds	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	2b3b      	cmp	r3, #59	; 0x3b
 80016b4:	d9cc      	bls.n	8001650 <MEAS_show_data+0x120>
		}
	}
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
 80016ba:	e00f      	b.n	80016dc <MEAS_show_data+0x1ac>
		ADC_samples[2*i] = 0;
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <MEAS_show_data+0x1c4>)
 80016c2:	2100      	movs	r1, #0
 80016c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <MEAS_show_data+0x1c4>)
 80016d0:	2100      	movs	r1, #0
 80016d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	3301      	adds	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	2b3b      	cmp	r3, #59	; 0x3b
 80016e0:	d9ec      	bls.n	80016bc <MEAS_show_data+0x18c>
	}
	ADC_sample_count = 0;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <MEAS_show_data+0x1dc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	3734      	adds	r7, #52	; 0x34
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	20000170 	.word	0x20000170
 80016f4:	2000021c 	.word	0x2000021c
 80016f8:	080089a4 	.word	0x080089a4
 80016fc:	080089b4 	.word	0x080089b4
 8001700:	ff0000ff 	.word	0xff0000ff
 8001704:	20000000 	.word	0x20000000
 8001708:	ffff0000 	.word	0xffff0000
 800170c:	20000218 	.word	0x20000218

08001710 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8001716:	4852      	ldr	r0, [pc, #328]	; (8001860 <MENU_draw+0x150>)
 8001718:	f001 fc32 	bl	8002f80 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 800171c:	f001 fb7e 	bl	8002e1c <BSP_LCD_GetYSize>
 8001720:	4603      	mov	r3, r0
 8001722:	3b28      	subs	r3, #40	; 0x28
 8001724:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8001726:	2302      	movs	r3, #2
 8001728:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 800172a:	f001 fb6b 	bl	8002e04 <BSP_LCD_GetXSize>
 800172e:	4603      	mov	r3, r0
 8001730:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <MENU_draw+0x154>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 800173a:	2328      	movs	r3, #40	; 0x28
 800173c:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e084      	b.n	800184e <MENU_draw+0x13e>
		x = i*w;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 800174e:	4946      	ldr	r1, [pc, #280]	; (8001868 <MENU_draw+0x158>)
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3324      	adds	r3, #36	; 0x24
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fbdb 	bl	8002f1c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b298      	uxth	r0, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b299      	uxth	r1, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	b29b      	uxth	r3, r3
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	b29b      	uxth	r3, r3
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b29c      	uxth	r4, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	b29b      	uxth	r3, r3
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	b29b      	uxth	r3, r3
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	b29b      	uxth	r3, r3
 800179e:	4622      	mov	r2, r4
 80017a0:	f001 fdfc 	bl	800339c <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 80017a4:	4930      	ldr	r1, [pc, #192]	; (8001868 <MENU_draw+0x158>)
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	3324      	adds	r3, #36	; 0x24
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fbc8 	bl	8002f4c <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 80017bc:	492a      	ldr	r1, [pc, #168]	; (8001868 <MENU_draw+0x158>)
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	3320      	adds	r3, #32
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fba4 	bl	8002f1c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	0052      	lsls	r2, r2, #1
 80017dc:	4413      	add	r3, r2
 80017de:	b29a      	uxth	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b298      	uxth	r0, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	0052      	lsls	r2, r2, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4a18      	ldr	r2, [pc, #96]	; (8001868 <MENU_draw+0x158>)
 8001808:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 800180a:	2303      	movs	r3, #3
 800180c:	f001 fc3e 	bl	800308c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	0052      	lsls	r2, r2, #1
 8001818:	4413      	add	r3, r2
 800181a:	b29a      	uxth	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	b298      	uxth	r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	b29b      	uxth	r3, r3
 800182e:	4413      	add	r3, r2
 8001830:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	3310      	adds	r3, #16
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <MENU_draw+0x158>)
 8001840:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001842:	2303      	movs	r3, #3
 8001844:	f001 fc22 	bl	800308c <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2b05      	cmp	r3, #5
 8001852:	f67f af77 	bls.w	8001744 <MENU_draw+0x34>
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	20000180 	.word	0x20000180
 8001864:	aaaaaaab 	.word	0xaaaaaaab
 8001868:	20000008 	.word	0x20000008

0800186c <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f001 fb6a 	bl	8002f4c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001878:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800187c:	f001 fb4e 	bl	8002f1c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8001880:	4818      	ldr	r0, [pc, #96]	; (80018e4 <MENU_hint+0x78>)
 8001882:	f001 fb7d 	bl	8002f80 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"DEMO-CODE", LEFT_MODE);
 8001886:	2303      	movs	r3, #3
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <MENU_hint+0x7c>)
 800188a:	210a      	movs	r1, #10
 800188c:	2005      	movs	r0, #5
 800188e:	f001 fbfd 	bl	800308c <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001892:	4816      	ldr	r0, [pc, #88]	; (80018ec <MENU_hint+0x80>)
 8001894:	f001 fb74 	bl	8002f80 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 8001898:	2303      	movs	r3, #3
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <MENU_hint+0x84>)
 800189c:	213c      	movs	r1, #60	; 0x3c
 800189e:	2005      	movs	r0, #5
 80018a0:	f001 fbf4 	bl	800308c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 80018a4:	2303      	movs	r3, #3
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <MENU_hint+0x88>)
 80018a8:	2150      	movs	r1, #80	; 0x50
 80018aa:	2005      	movs	r0, #5
 80018ac:	f001 fbee 	bl	800308c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 80018b0:	2303      	movs	r3, #3
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <MENU_hint+0x8c>)
 80018b4:	216e      	movs	r1, #110	; 0x6e
 80018b6:	2005      	movs	r0, #5
 80018b8:	f001 fbe8 	bl	800308c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 80018bc:	2303      	movs	r3, #3
 80018be:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <MENU_hint+0x90>)
 80018c0:	2182      	movs	r1, #130	; 0x82
 80018c2:	2005      	movs	r0, #5
 80018c4:	f001 fbe2 	bl	800308c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 80018c8:	2303      	movs	r3, #3
 80018ca:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <MENU_hint+0x94>)
 80018cc:	21a0      	movs	r1, #160	; 0xa0
 80018ce:	2005      	movs	r0, #5
 80018d0:	f001 fbdc 	bl	800308c <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 17.06.2021", LEFT_MODE);
 80018d4:	2303      	movs	r3, #3
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <MENU_hint+0x98>)
 80018d8:	21a0      	movs	r1, #160	; 0xa0
 80018da:	2005      	movs	r0, #5
 80018dc:	f001 fbd6 	bl	800308c <BSP_LCD_DisplayStringAt>
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000170 	.word	0x20000170
 80018e8:	080089c4 	.word	0x080089c4
 80018ec:	20000178 	.word	0x20000178
 80018f0:	080089d0 	.word	0x080089d0
 80018f4:	080089e4 	.word	0x080089e4
 80018f8:	080089fc 	.word	0x080089fc
 80018fc:	08008a10 	.word	0x08008a10
 8001900:	08008a28 	.word	0x08008a28
 8001904:	08008a3c 	.word	0x08008a3c

08001908 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MENU_get_transition+0x20>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <MENU_get_transition+0x20>)
 8001916:	2206      	movs	r2, #6
 8001918:	701a      	strb	r2, [r3, #0]
	return item;
 800191a:	79fb      	ldrb	r3, [r7, #7]
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	20000004 	.word	0x20000004

0800192c <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 800192c:	b598      	push	{r3, r4, r7, lr}
 800192e:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001930:	4826      	ldr	r0, [pc, #152]	; (80019cc <MENU_check_transition+0xa0>)
 8001932:	f002 f99b 	bl	8003c6c <BSP_TS_GetState>
#ifdef EVAL_REV_E
// Evalboard revision E (blue) has an inverted y-axis in the touch controller
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001936:	f001 fa71 	bl	8002e1c <BSP_LCD_GetYSize>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <MENU_check_transition+0xa0>)
 8001940:	889b      	ldrh	r3, [r3, #4]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <MENU_check_transition+0xa0>)
 8001948:	809a      	strh	r2, [r3, #4]
#endif
	if (TS_State.TouchDetected) {		// If a touch was detected
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <MENU_check_transition+0xa0>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d039      	beq.n	80019c6 <MENU_check_transition+0x9a>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MENU_check_transition+0xa4>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b06      	cmp	r3, #6
 8001958:	d135      	bne.n	80019c6 <MENU_check_transition+0x9a>
			item_old = item_new;		// Store old item
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MENU_check_transition+0xa8>)
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <MENU_check_transition+0xac>)
 8001960:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001962:	f001 fa5b 	bl	8002e1c <BSP_LCD_GetYSize>
 8001966:	4603      	mov	r3, r0
 8001968:	3b28      	subs	r3, #40	; 0x28
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <MENU_check_transition+0xa0>)
 800196c:	8892      	ldrh	r2, [r2, #4]
 800196e:	4293      	cmp	r3, r2
 8001970:	d229      	bcs.n	80019c6 <MENU_check_transition+0x9a>
 8001972:	f001 fa53 	bl	8002e1c <BSP_LCD_GetYSize>
 8001976:	4603      	mov	r3, r0
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <MENU_check_transition+0xa0>)
 800197a:	8892      	ldrh	r2, [r2, #4]
 800197c:	4293      	cmp	r3, r2
 800197e:	d922      	bls.n	80019c6 <MENU_check_transition+0x9a>
				item_new = TS_State.X	// Calculate new item
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MENU_check_transition+0xa0>)
 8001982:	885b      	ldrh	r3, [r3, #2]
 8001984:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8001986:	f001 fa3d 	bl	8002e04 <BSP_LCD_GetXSize>
 800198a:	4603      	mov	r3, r0
 800198c:	4a13      	ldr	r2, [pc, #76]	; (80019dc <MENU_check_transition+0xb0>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	fbb4 f3f3 	udiv	r3, r4, r3
 8001998:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MENU_check_transition+0xa8>)
 800199c:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <MENU_check_transition+0xa8>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d902      	bls.n	80019ac <MENU_check_transition+0x80>
					item_new = MENU_NONE;	// Out of bounds
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MENU_check_transition+0xa8>)
 80019a8:	2206      	movs	r2, #6
 80019aa:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MENU_check_transition+0xa8>)
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MENU_check_transition+0xac>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d106      	bne.n	80019c6 <MENU_check_transition+0x9a>
					item_new = MENU_NONE;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MENU_check_transition+0xa8>)
 80019ba:	2206      	movs	r2, #6
 80019bc:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MENU_check_transition+0xac>)
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <MENU_check_transition+0xa4>)
 80019c4:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 80019c6:	bf00      	nop
 80019c8:	bd98      	pop	{r3, r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000400 	.word	0x20000400
 80019d0:	20000004 	.word	0x20000004
 80019d4:	200000f8 	.word	0x200000f8
 80019d8:	200000f9 	.word	0x200000f9
 80019dc:	aaaaaaab 	.word	0xaaaaaaab

080019e0 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <EXTI15_10_IRQHandler+0x40>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d014      	beq.n	8001a1a <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <EXTI15_10_IRQHandler+0x40>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <EXTI15_10_IRQHandler+0x40>)
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fa:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 80019fc:	f002 f92a 	bl	8003c54 <BSP_TS_ITGetStatus>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8001a06:	f002 f9e3 	bl	8003dd0 <BSP_TS_ITClear>
			MENU_check_transition();
 8001a0a:	f7ff ff8f 	bl	800192c <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <EXTI15_10_IRQHandler+0x40>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <EXTI15_10_IRQHandler+0x40>)
 8001a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a18:	6153      	str	r3, [r2, #20]
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <__NVIC_EnableIRQ>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_ClearPendingIRQ>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0c      	blt.n	8001a8c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4907      	ldr	r1, [pc, #28]	; (8001a98 <__NVIC_ClearPendingIRQ+0x38>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	fa00 f202 	lsl.w	r2, r0, r2
 8001a86:	3360      	adds	r3, #96	; 0x60
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <PB_init+0x38>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <PB_init+0x38>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <PB_init+0x38>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <PB_init+0x3c>)
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <PB_init+0x3c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6013      	str	r3, [r2, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000

08001adc <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <PB_enableIRQ+0x58>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <PB_enableIRQ+0x58>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <PB_enableIRQ+0x58>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <PB_enableIRQ+0x5c>)
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <PB_enableIRQ+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <PB_enableIRQ+0x60>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <PB_enableIRQ+0x60>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <PB_enableIRQ+0x60>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <PB_enableIRQ+0x60>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8001b1e:	2006      	movs	r0, #6
 8001b20:	f7ff ff9e 	bl	8001a60 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8001b24:	2006      	movs	r0, #6
 8001b26:	f7ff ff7d 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <PB_pressed+0x20>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <PB_pressed+0x20>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
	return pressed;
 8001b52:	79fb      	ldrb	r3, [r7, #7]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000408 	.word	0x20000408

08001b64 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <EXTI0_IRQHandler+0x2c>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <EXTI0_IRQHandler+0x2c>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <EXTI0_IRQHandler+0x2c>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <EXTI0_IRQHandler+0x30>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
	}
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40013c00 	.word	0x40013c00
 8001b94:	20000408 	.word	0x20000408

08001b98 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb2 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8001bbc:	e7fe      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bbe <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001bec:	f002 f956 	bl	8003e9c <HAL_IncTick>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <SystemInit+0x60>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <SystemInit+0x60>)
 8001c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <SystemInit+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <SystemInit+0x64>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <SystemInit+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <SystemInit+0x64>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <SystemInit+0x64>)
 8001c20:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <SystemInit+0x64>)
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <SystemInit+0x68>)
 8001c2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <SystemInit+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <SystemInit+0x64>)
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <SystemInit+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SystemInit+0x60>)
 8001c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c48:	609a      	str	r2, [r3, #8]
#endif
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	24003010 	.word	0x24003010

08001c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c98 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c66:	e003      	b.n	8001c70 <LoopCopyDataInit>

08001c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c6e:	3104      	adds	r1, #4

08001c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c78:	d3f6      	bcc.n	8001c68 <CopyDataInit>
  ldr  r2, =_sbss
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c7c:	e002      	b.n	8001c84 <LoopFillZerobss>

08001c7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c80:	f842 3b04 	str.w	r3, [r2], #4

08001c84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c88:	d3f9      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c8a:	f7ff ffb3 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f006 fa01 	bl	8008094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c92:	f7fe fc79 	bl	8000588 <main>
  bx  lr    
 8001c96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c98:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c9c:	0800b5c4 	.word	0x0800b5c4
  ldr  r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ca4:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8001ca8:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8001cac:	200006e8 	.word	0x200006e8

08001cb0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <CAN1_RX0_IRQHandler>

08001cb2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001cb6:	f000 feed 	bl	8002a94 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001cba:	20ca      	movs	r0, #202	; 0xca
 8001cbc:	f000 f95d 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001cc0:	20c3      	movs	r0, #195	; 0xc3
 8001cc2:	f000 f967 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001cc6:	2008      	movs	r0, #8
 8001cc8:	f000 f964 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001ccc:	2050      	movs	r0, #80	; 0x50
 8001cce:	f000 f961 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001cd2:	20cf      	movs	r0, #207	; 0xcf
 8001cd4:	f000 f951 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 f95b 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001cde:	20c1      	movs	r0, #193	; 0xc1
 8001ce0:	f000 f958 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001ce4:	2030      	movs	r0, #48	; 0x30
 8001ce6:	f000 f955 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001cea:	20ed      	movs	r0, #237	; 0xed
 8001cec:	f000 f945 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001cf0:	2064      	movs	r0, #100	; 0x64
 8001cf2:	f000 f94f 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f000 f94c 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001cfc:	2012      	movs	r0, #18
 8001cfe:	f000 f949 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001d02:	2081      	movs	r0, #129	; 0x81
 8001d04:	f000 f946 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d08:	20e8      	movs	r0, #232	; 0xe8
 8001d0a:	f000 f936 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d0e:	2085      	movs	r0, #133	; 0x85
 8001d10:	f000 f940 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f000 f93d 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d1a:	2078      	movs	r0, #120	; 0x78
 8001d1c:	f000 f93a 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001d20:	20cb      	movs	r0, #203	; 0xcb
 8001d22:	f000 f92a 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001d26:	2039      	movs	r0, #57	; 0x39
 8001d28:	f000 f934 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001d2c:	202c      	movs	r0, #44	; 0x2c
 8001d2e:	f000 f931 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f92e 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001d38:	2034      	movs	r0, #52	; 0x34
 8001d3a:	f000 f92b 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f000 f928 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001d44:	20f7      	movs	r0, #247	; 0xf7
 8001d46:	f000 f918 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001d4a:	2020      	movs	r0, #32
 8001d4c:	f000 f922 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001d50:	20ea      	movs	r0, #234	; 0xea
 8001d52:	f000 f912 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f91c 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 f919 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001d62:	20b1      	movs	r0, #177	; 0xb1
 8001d64:	f000 f909 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f000 f913 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001d6e:	201b      	movs	r0, #27
 8001d70:	f000 f910 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d74:	20b6      	movs	r0, #182	; 0xb6
 8001d76:	f000 f900 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d7a:	200a      	movs	r0, #10
 8001d7c:	f000 f90a 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001d80:	20a2      	movs	r0, #162	; 0xa2
 8001d82:	f000 f907 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001d86:	20c0      	movs	r0, #192	; 0xc0
 8001d88:	f000 f8f7 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001d8c:	2010      	movs	r0, #16
 8001d8e:	f000 f901 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001d92:	20c1      	movs	r0, #193	; 0xc1
 8001d94:	f000 f8f1 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001d98:	2010      	movs	r0, #16
 8001d9a:	f000 f8fb 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001d9e:	20c5      	movs	r0, #197	; 0xc5
 8001da0:	f000 f8eb 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001da4:	2045      	movs	r0, #69	; 0x45
 8001da6:	f000 f8f5 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001daa:	2015      	movs	r0, #21
 8001dac:	f000 f8f2 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001db0:	20c7      	movs	r0, #199	; 0xc7
 8001db2:	f000 f8e2 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001db6:	2090      	movs	r0, #144	; 0x90
 8001db8:	f000 f8ec 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001dbc:	2036      	movs	r0, #54	; 0x36
 8001dbe:	f000 f8dc 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001dc2:	20c8      	movs	r0, #200	; 0xc8
 8001dc4:	f000 f8e6 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001dc8:	20f2      	movs	r0, #242	; 0xf2
 8001dca:	f000 f8d6 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 f8e0 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001dd4:	20b0      	movs	r0, #176	; 0xb0
 8001dd6:	f000 f8d0 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001dda:	20c2      	movs	r0, #194	; 0xc2
 8001ddc:	f000 f8da 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001de0:	20b6      	movs	r0, #182	; 0xb6
 8001de2:	f000 f8ca 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001de6:	200a      	movs	r0, #10
 8001de8:	f000 f8d4 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001dec:	20a7      	movs	r0, #167	; 0xa7
 8001dee:	f000 f8d1 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001df2:	2027      	movs	r0, #39	; 0x27
 8001df4:	f000 f8ce 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001df8:	2004      	movs	r0, #4
 8001dfa:	f000 f8cb 	bl	8001f94 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001dfe:	202a      	movs	r0, #42	; 0x2a
 8001e00:	f000 f8bb 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f000 f8c5 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f8c2 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f000 f8bf 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e16:	20ef      	movs	r0, #239	; 0xef
 8001e18:	f000 f8bc 	bl	8001f94 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001e1c:	202b      	movs	r0, #43	; 0x2b
 8001e1e:	f000 f8ac 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 f8b6 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f000 f8b3 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 f8b0 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001e34:	203f      	movs	r0, #63	; 0x3f
 8001e36:	f000 f8ad 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001e3a:	20f6      	movs	r0, #246	; 0xf6
 8001e3c:	f000 f89d 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f000 f8a7 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f8a4 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001e4c:	2006      	movs	r0, #6
 8001e4e:	f000 f8a1 	bl	8001f94 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001e52:	202c      	movs	r0, #44	; 0x2c
 8001e54:	f000 f891 	bl	8001f7a <ili9341_WriteReg>
  LCD_Delay(200);
 8001e58:	20c8      	movs	r0, #200	; 0xc8
 8001e5a:	f000 ff09 	bl	8002c70 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001e5e:	2026      	movs	r0, #38	; 0x26
 8001e60:	f000 f88b 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 f895 	bl	8001f94 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001e6a:	20e0      	movs	r0, #224	; 0xe0
 8001e6c:	f000 f885 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001e70:	200f      	movs	r0, #15
 8001e72:	f000 f88f 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001e76:	2029      	movs	r0, #41	; 0x29
 8001e78:	f000 f88c 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001e7c:	2024      	movs	r0, #36	; 0x24
 8001e7e:	f000 f889 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001e82:	200c      	movs	r0, #12
 8001e84:	f000 f886 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001e88:	200e      	movs	r0, #14
 8001e8a:	f000 f883 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001e8e:	2009      	movs	r0, #9
 8001e90:	f000 f880 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001e94:	204e      	movs	r0, #78	; 0x4e
 8001e96:	f000 f87d 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001e9a:	2078      	movs	r0, #120	; 0x78
 8001e9c:	f000 f87a 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ea0:	203c      	movs	r0, #60	; 0x3c
 8001ea2:	f000 f877 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ea6:	2009      	movs	r0, #9
 8001ea8:	f000 f874 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001eac:	2013      	movs	r0, #19
 8001eae:	f000 f871 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001eb2:	2005      	movs	r0, #5
 8001eb4:	f000 f86e 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001eb8:	2017      	movs	r0, #23
 8001eba:	f000 f86b 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ebe:	2011      	movs	r0, #17
 8001ec0:	f000 f868 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 f865 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001eca:	20e1      	movs	r0, #225	; 0xe1
 8001ecc:	f000 f855 	bl	8001f7a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f000 f85f 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001ed6:	2016      	movs	r0, #22
 8001ed8:	f000 f85c 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001edc:	201b      	movs	r0, #27
 8001ede:	f000 f859 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001ee2:	2004      	movs	r0, #4
 8001ee4:	f000 f856 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ee8:	2011      	movs	r0, #17
 8001eea:	f000 f853 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001eee:	2007      	movs	r0, #7
 8001ef0:	f000 f850 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001ef4:	2031      	movs	r0, #49	; 0x31
 8001ef6:	f000 f84d 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001efa:	2033      	movs	r0, #51	; 0x33
 8001efc:	f000 f84a 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001f00:	2042      	movs	r0, #66	; 0x42
 8001f02:	f000 f847 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f06:	2005      	movs	r0, #5
 8001f08:	f000 f844 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f0c:	200c      	movs	r0, #12
 8001f0e:	f000 f841 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f12:	200a      	movs	r0, #10
 8001f14:	f000 f83e 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f18:	2028      	movs	r0, #40	; 0x28
 8001f1a:	f000 f83b 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001f1e:	202f      	movs	r0, #47	; 0x2f
 8001f20:	f000 f838 	bl	8001f94 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001f24:	200f      	movs	r0, #15
 8001f26:	f000 f835 	bl	8001f94 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001f2a:	2011      	movs	r0, #17
 8001f2c:	f000 f825 	bl	8001f7a <ili9341_WriteReg>
  LCD_Delay(200);
 8001f30:	20c8      	movs	r0, #200	; 0xc8
 8001f32:	f000 fe9d 	bl	8002c70 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f36:	2029      	movs	r0, #41	; 0x29
 8001f38:	f000 f81f 	bl	8001f7a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001f3c:	202c      	movs	r0, #44	; 0x2c
 8001f3e:	f000 f81c 	bl	8001f7a <ili9341_WriteReg>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001f4a:	f000 fda3 	bl	8002a94 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001f4e:	2103      	movs	r1, #3
 8001f50:	20d3      	movs	r0, #211	; 0xd3
 8001f52:	f000 f82c 	bl	8001fae <ili9341_ReadData>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b29b      	uxth	r3, r3
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f62:	2029      	movs	r0, #41	; 0x29
 8001f64:	f000 f809 	bl	8001f7a <ili9341_WriteReg>
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001f70:	2028      	movs	r0, #40	; 0x28
 8001f72:	f000 f802 	bl	8001f7a <ili9341_WriteReg>
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fe1e 	bl	8002bc8 <LCD_IO_WriteReg>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fdef 	bl	8002b84 <LCD_IO_WriteData>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	80fb      	strh	r3, [r7, #6]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001fbe:	797a      	ldrb	r2, [r7, #5]
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fe21 	bl	8002c0c <LCD_IO_ReadData>
 8001fca:	4603      	mov	r3, r0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001fd8:	23f0      	movs	r3, #240	; 0xf0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001fe8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fa59 	bl	80024bc <stmpe811_GetInstance>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2bff      	cmp	r3, #255	; 0xff
 8002012:	d112      	bne.n	800203a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002014:	2000      	movs	r0, #0
 8002016:	f000 fa51 	bl	80024bc <stmpe811_GetInstance>
 800201a:	4603      	mov	r3, r0
 800201c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800201e:	7bbb      	ldrb	r3, [r7, #14]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d80a      	bhi.n	800203a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	b2d1      	uxtb	r1, r2
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <stmpe811_Init+0x4c>)
 800202c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800202e:	f000 fe2a 	bl	8002c86 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4618      	mov	r0, r3
 8002036:	f000 f807 	bl	8002048 <stmpe811_Reset>
    }
  }
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000040c 	.word	0x2000040c

08002048 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2202      	movs	r2, #2
 8002058:	2103      	movs	r1, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fe1f 	bl	8002c9e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002060:	200a      	movs	r0, #10
 8002062:	f000 fe59 	bl	8002d18 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2200      	movs	r2, #0
 800206c:	2103      	movs	r1, #3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fe15 	bl	8002c9e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002074:	2002      	movs	r0, #2
 8002076:	f000 fe4f 	bl	8002d18 <IOE_Delay>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002082:	b590      	push	{r4, r7, lr}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800208c:	f000 fdfb 	bl	8002c86 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fe14 	bl	8002cc4 <IOE_Read>
 800209c:	4603      	mov	r3, r0
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2101      	movs	r1, #1
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fe0b 	bl	8002cc4 <IOE_Read>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80020b2:	4323      	orrs	r3, r4
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	b29b      	uxth	r3, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}

080020c0 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2109      	movs	r1, #9
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fdf5 	bl	8002cc4 <IOE_Read>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	2109      	movs	r1, #9
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fdd5 	bl	8002c9e <IOE_Write>
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2109      	movs	r1, #9
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fdd7 	bl	8002cc4 <IOE_Read>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	2109      	movs	r1, #9
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fdb7 	bl	8002c9e <IOE_Write>
    
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	460a      	mov	r2, r1
 8002142:	80fb      	strh	r3, [r7, #6]
 8002144:	4613      	mov	r3, r2
 8002146:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	210a      	movs	r1, #10
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fdb6 	bl	8002cc4 <IOE_Read>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	797b      	ldrb	r3, [r7, #5]
 8002160:	4313      	orrs	r3, r2
 8002162:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	210a      	movs	r1, #10
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fd96 	bl	8002c9e <IOE_Write>
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	460a      	mov	r2, r1
 8002184:	80fb      	strh	r3, [r7, #6]
 8002186:	4613      	mov	r3, r2
 8002188:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	210a      	movs	r1, #10
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fd95 	bl	8002cc4 <IOE_Read>
 800219a:	4603      	mov	r3, r0
 800219c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800219e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	b25a      	sxtb	r2, r3
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4013      	ands	r3, r2
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	210a      	movs	r1, #10
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fd70 	bl	8002c9e <IOE_Write>
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	460a      	mov	r2, r1
 80021d0:	80fb      	strh	r3, [r7, #6]
 80021d2:	4613      	mov	r3, r2
 80021d4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	210b      	movs	r1, #11
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fd71 	bl	8002cc4 <IOE_Read>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	797b      	ldrb	r3, [r7, #5]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b2db      	uxtb	r3, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	80fb      	strh	r3, [r7, #6]
 8002200:	4613      	mov	r3, r2
 8002202:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	797a      	ldrb	r2, [r7, #5]
 800220a:	210b      	movs	r1, #11
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fd46 	bl	8002c9e <IOE_Write>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	6039      	str	r1, [r7, #0]
 8002224:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2117      	movs	r1, #23
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fd47 	bl	8002cc4 <IOE_Read>
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	2117      	movs	r1, #23
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fd22 	bl	8002c9e <IOE_Write>
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2104      	movs	r1, #4
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fd26 	bl	8002cc4 <IOE_Read>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	f023 0304 	bic.w	r3, r3, #4
 8002282:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	2104      	movs	r1, #4
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fd06 	bl	8002c9e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	21f0      	movs	r1, #240	; 0xf0
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ffbf 	bl	800221a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	2104      	movs	r1, #4
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fcf6 	bl	8002c9e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2249      	movs	r2, #73	; 0x49
 80022b8:	2120      	movs	r1, #32
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fcef 	bl	8002c9e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80022c0:	2002      	movs	r0, #2
 80022c2:	f000 fd29 	bl	8002d18 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2201      	movs	r2, #1
 80022cc:	2121      	movs	r1, #33	; 0x21
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fce5 	bl	8002c9e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	229a      	movs	r2, #154	; 0x9a
 80022da:	2141      	movs	r1, #65	; 0x41
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fcde 	bl	8002c9e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2201      	movs	r2, #1
 80022e8:	214a      	movs	r1, #74	; 0x4a
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fcd7 	bl	8002c9e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2201      	movs	r2, #1
 80022f6:	214b      	movs	r1, #75	; 0x4b
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fcd0 	bl	8002c9e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2200      	movs	r2, #0
 8002304:	214b      	movs	r1, #75	; 0x4b
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fcc9 	bl	8002c9e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2201      	movs	r2, #1
 8002312:	2156      	movs	r1, #86	; 0x56
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fcc2 	bl	8002c9e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2201      	movs	r2, #1
 8002320:	2158      	movs	r1, #88	; 0x58
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fcbb 	bl	8002c9e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2201      	movs	r2, #1
 800232e:	2140      	movs	r1, #64	; 0x40
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fcb4 	bl	8002c9e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	22ff      	movs	r2, #255	; 0xff
 800233c:	210b      	movs	r1, #11
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fcad 	bl	8002c9e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002344:	2002      	movs	r0, #2
 8002346:	f000 fce7 	bl	8002d18 <IOE_Delay>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2140      	movs	r1, #64	; 0x40
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fcac 	bl	8002cc4 <IOE_Read>
 800236c:	4603      	mov	r3, r0
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b80      	cmp	r3, #128	; 0x80
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800237e:	7bbb      	ldrb	r3, [r7, #14]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	214c      	movs	r1, #76	; 0x4c
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fc9a 	bl	8002cc4 <IOE_Read>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e00d      	b.n	80023b8 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2201      	movs	r2, #1
 80023a2:	214b      	movs	r1, #75	; 0x4b
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fc7a 	bl	8002c9e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2200      	movs	r2, #0
 80023b0:	214b      	movs	r1, #75	; 0x4b
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fc73 	bl	8002c9e <IOE_Write>
  }
  
  return ret;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80023d0:	89fb      	ldrh	r3, [r7, #14]
 80023d2:	b2d8      	uxtb	r0, r3
 80023d4:	f107 0210 	add.w	r2, r7, #16
 80023d8:	2304      	movs	r3, #4
 80023da:	21d7      	movs	r1, #215	; 0xd7
 80023dc:	f000 fc85 	bl	8002cea <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80023e0:	7c3b      	ldrb	r3, [r7, #16]
 80023e2:	061a      	lsls	r2, r3, #24
 80023e4:	7c7b      	ldrb	r3, [r7, #17]
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	431a      	orrs	r2, r3
 80023ea:	7cbb      	ldrb	r3, [r7, #18]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	4313      	orrs	r3, r2
 80023f0:	7cfa      	ldrb	r2, [r7, #19]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	0d1b      	lsrs	r3, r3, #20
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2201      	movs	r2, #1
 8002416:	214b      	movs	r1, #75	; 0x4b
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fc40 	bl	8002c9e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800241e:	89fb      	ldrh	r3, [r7, #14]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2200      	movs	r2, #0
 8002424:	214b      	movs	r1, #75	; 0x4b
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fc39 	bl	8002c9e <IOE_Write>
}
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800243e:	f000 fc28 	bl	8002c92 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	211f      	movs	r1, #31
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fe76 	bl	8002138 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fe36 	bl	80020c0 <stmpe811_EnableGlobalIT>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fe47 	bl	80020fc <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	211f      	movs	r1, #31
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fe81 	bl	800217a <stmpe811_DisableITSource>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	211f      	movs	r1, #31
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe99 	bl	80021c6 <stmpe811_ReadGITStatus>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	211f      	movs	r1, #31
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fea1 	bl	80021f4 <stmpe811_ClearGlobalIT>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e00b      	b.n	80024e8 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <stmpe811_GetInstance+0x40>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d101      	bne.n	80024e2 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	e006      	b.n	80024f0 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	3301      	adds	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d9f0      	bls.n	80024d0 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80024ee:	23ff      	movs	r3, #255	; 0xff
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	2000040c 	.word	0x2000040c

08002500 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10e      	bne.n	800252e <BSP_LED_Init+0x2e>
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <BSP_LED_Init+0x9c>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	4a20      	ldr	r2, [pc, #128]	; (800259c <BSP_LED_Init+0x9c>)
 800251a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251e:	6313      	str	r3, [r2, #48]	; 0x30
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <BSP_LED_Init+0x9c>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	e010      	b.n	8002550 <BSP_LED_Init+0x50>
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10d      	bne.n	8002550 <BSP_LED_Init+0x50>
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <BSP_LED_Init+0x9c>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <BSP_LED_Init+0x9c>)
 800253e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002542:	6313      	str	r3, [r2, #48]	; 0x30
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <BSP_LED_Init+0x9c>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <BSP_LED_Init+0xa0>)
 8002554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002562:	2302      	movs	r3, #2
 8002564:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <BSP_LED_Init+0xa4>)
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	f107 0214 	add.w	r2, r7, #20
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fa3b 	bl	80049f0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <BSP_LED_Init+0xa4>)
 800257e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <BSP_LED_Init+0xa0>)
 8002586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800258a:	2200      	movs	r2, #0
 800258c:	4619      	mov	r1, r3
 800258e:	f002 fbdb 	bl	8004d48 <HAL_GPIO_WritePin>
}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	08008a68 	.word	0x08008a68
 80025a4:	20000160 	.word	0x20000160

080025a8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <BSP_LED_On+0x2c>)
 80025b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <BSP_LED_On+0x30>)
 80025be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025c2:	2201      	movs	r2, #1
 80025c4:	4619      	mov	r1, r3
 80025c6:	f002 fbbf 	bl	8004d48 <HAL_GPIO_WritePin>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000160 	.word	0x20000160
 80025d8:	08008a68 	.word	0x08008a68

080025dc <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <BSP_LED_Off+0x2c>)
 80025ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <BSP_LED_Off+0x30>)
 80025f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f6:	2200      	movs	r2, #0
 80025f8:	4619      	mov	r1, r3
 80025fa:	f002 fba5 	bl	8004d48 <HAL_GPIO_WritePin>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000160 	.word	0x20000160
 800260c:	08008a68 	.word	0x08008a68

08002610 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <BSP_LED_Toggle+0x2c>)
 800261e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	4906      	ldr	r1, [pc, #24]	; (8002640 <BSP_LED_Toggle+0x30>)
 8002626:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f002 fba4 	bl	8004d7a <HAL_GPIO_TogglePin>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000160 	.word	0x20000160
 8002640:	08008a68 	.word	0x08008a68

08002644 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a33      	ldr	r2, [pc, #204]	; (8002720 <I2Cx_MspInit+0xdc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d15f      	bne.n	8002716 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b32      	ldr	r3, [pc, #200]	; (8002724 <I2Cx_MspInit+0xe0>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a31      	ldr	r2, [pc, #196]	; (8002724 <I2Cx_MspInit+0xe0>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <I2Cx_MspInit+0xe0>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <I2Cx_MspInit+0xe0>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <I2Cx_MspInit+0xe0>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <I2Cx_MspInit+0xe0>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800268e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002694:	2312      	movs	r3, #18
 8002696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800269c:	2302      	movs	r3, #2
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80026a0:	2304      	movs	r3, #4
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	4619      	mov	r1, r3
 80026aa:	481f      	ldr	r0, [pc, #124]	; (8002728 <I2Cx_MspInit+0xe4>)
 80026ac:	f002 f9a0 	bl	80049f0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80026b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	481b      	ldr	r0, [pc, #108]	; (800272c <I2Cx_MspInit+0xe8>)
 80026be:	f002 f997 	bl	80049f0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <I2Cx_MspInit+0xe0>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <I2Cx_MspInit+0xe0>)
 80026cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <I2Cx_MspInit+0xe0>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <I2Cx_MspInit+0xe0>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a10      	ldr	r2, [pc, #64]	; (8002724 <I2Cx_MspInit+0xe0>)
 80026e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026e8:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <I2Cx_MspInit+0xe0>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <I2Cx_MspInit+0xe0>)
 80026f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026f4:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	210f      	movs	r1, #15
 80026fa:	2048      	movs	r0, #72	; 0x48
 80026fc:	f001 fced 	bl	80040da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002700:	2048      	movs	r0, #72	; 0x48
 8002702:	f001 fd06 	bl	8004112 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	210f      	movs	r1, #15
 800270a:	2049      	movs	r0, #73	; 0x49
 800270c:	f001 fce5 	bl	80040da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002710:	2049      	movs	r0, #73	; 0x49
 8002712:	f001 fcfe 	bl	8004112 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40005c00 	.word	0x40005c00
 8002724:	40023800 	.word	0x40023800
 8002728:	40020000 	.word	0x40020000
 800272c:	40020800 	.word	0x40020800

08002730 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002734:	4814      	ldr	r0, [pc, #80]	; (8002788 <I2Cx_Init+0x58>)
 8002736:	f002 ffe3 	bl	8005700 <HAL_I2C_GetState>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d121      	bne.n	8002784 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <I2Cx_Init+0x58>)
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <I2Cx_Init+0x5c>)
 8002744:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <I2Cx_Init+0x58>)
 8002748:	4a11      	ldr	r2, [pc, #68]	; (8002790 <I2Cx_Init+0x60>)
 800274a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <I2Cx_Init+0x58>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <I2Cx_Init+0x58>)
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <I2Cx_Init+0x58>)
 800275a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <I2Cx_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <I2Cx_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <I2Cx_Init+0x58>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <I2Cx_Init+0x58>)
 8002774:	2200      	movs	r2, #0
 8002776:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <I2Cx_Init+0x58>)
 800277a:	f7ff ff63 	bl	8002644 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800277e:	4802      	ldr	r0, [pc, #8]	; (8002788 <I2Cx_Init+0x58>)
 8002780:	f002 fb16 	bl	8004db0 <HAL_I2C_Init>
  }
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200005d4 	.word	0x200005d4
 800278c:	40005c00 	.word	0x40005c00
 8002790:	000186a0 	.word	0x000186a0

08002794 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <I2Cx_ITConfig+0x58>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <I2Cx_ITConfig+0x58>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <I2Cx_ITConfig+0x58>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80027b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80027bc:	2301      	movs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <I2Cx_ITConfig+0x5c>)
 80027c6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	4809      	ldr	r0, [pc, #36]	; (80027f4 <I2Cx_ITConfig+0x60>)
 80027ce:	f002 f90f 	bl	80049f0 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80027d2:	2200      	movs	r2, #0
 80027d4:	210f      	movs	r1, #15
 80027d6:	2028      	movs	r0, #40	; 0x28
 80027d8:	f001 fc7f 	bl	80040da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80027dc:	2028      	movs	r0, #40	; 0x28
 80027de:	f001 fc98 	bl	8004112 <HAL_NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	10210000 	.word	0x10210000
 80027f4:	40020000 	.word	0x40020000

080027f8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af04      	add	r7, sp, #16
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	460b      	mov	r3, r1
 8002804:	71bb      	strb	r3, [r7, #6]
 8002806:	4613      	mov	r3, r2
 8002808:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	b299      	uxth	r1, r3
 8002812:	79bb      	ldrb	r3, [r7, #6]
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <I2Cx_WriteData+0x4c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	2301      	movs	r3, #1
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	1d7b      	adds	r3, r7, #5
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2301      	movs	r3, #1
 8002826:	4808      	ldr	r0, [pc, #32]	; (8002848 <I2Cx_WriteData+0x50>)
 8002828:	f002 fc4a 	bl	80050c0 <HAL_I2C_Mem_Write>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002836:	f000 f863 	bl	8002900 <I2Cx_Error>
  }        
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000168 	.word	0x20000168
 8002848:	200005d4 	.word	0x200005d4

0800284c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af04      	add	r7, sp, #16
 8002852:	4603      	mov	r3, r0
 8002854:	460a      	mov	r2, r1
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	4613      	mov	r3, r2
 800285a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	b299      	uxth	r1, r3
 8002868:	79bb      	ldrb	r3, [r7, #6]
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <I2Cx_ReadData+0x50>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	2301      	movs	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f107 030e 	add.w	r3, r7, #14
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	4808      	ldr	r0, [pc, #32]	; (80028a0 <I2Cx_ReadData+0x54>)
 8002880:	f002 fd18 	bl	80052b4 <HAL_I2C_Mem_Read>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800288e:	f000 f837 	bl	8002900 <I2Cx_Error>
  
  }
  return value;
 8002892:	7bbb      	ldrb	r3, [r7, #14]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000168 	.word	0x20000168
 80028a0:	200005d4 	.word	0x200005d4

080028a4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af04      	add	r7, sp, #16
 80028aa:	603a      	str	r2, [r7, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	460b      	mov	r3, r1
 80028b4:	71bb      	strb	r3, [r7, #6]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	b299      	uxth	r1, r3
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <I2Cx_ReadBuffer+0x54>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	88bb      	ldrh	r3, [r7, #4]
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2301      	movs	r3, #1
 80028d6:	4809      	ldr	r0, [pc, #36]	; (80028fc <I2Cx_ReadBuffer+0x58>)
 80028d8:	f002 fcec 	bl	80052b4 <HAL_I2C_Mem_Read>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e002      	b.n	80028f0 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80028ea:	f000 f809 	bl	8002900 <I2Cx_Error>

    return 1;
 80028ee:	2301      	movs	r3, #1
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000168 	.word	0x20000168
 80028fc:	200005d4 	.word	0x200005d4

08002900 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002904:	4803      	ldr	r0, [pc, #12]	; (8002914 <I2Cx_Error+0x14>)
 8002906:	f002 fb97 	bl	8005038 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800290a:	f7ff ff11 	bl	8002730 <I2Cx_Init>
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200005d4 	.word	0x200005d4

08002918 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800291c:	4819      	ldr	r0, [pc, #100]	; (8002984 <SPIx_Init+0x6c>)
 800291e:	f005 f958 	bl	8007bd2 <HAL_SPI_GetState>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d12b      	bne.n	8002980 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <SPIx_Init+0x6c>)
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <SPIx_Init+0x70>)
 800292c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <SPIx_Init+0x6c>)
 8002930:	2218      	movs	r2, #24
 8002932:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <SPIx_Init+0x6c>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <SPIx_Init+0x6c>)
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <SPIx_Init+0x6c>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <SPIx_Init+0x6c>)
 8002948:	2200      	movs	r2, #0
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <SPIx_Init+0x6c>)
 800294e:	2207      	movs	r2, #7
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <SPIx_Init+0x6c>)
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <SPIx_Init+0x6c>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <SPIx_Init+0x6c>)
 8002960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002964:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <SPIx_Init+0x6c>)
 8002968:	2200      	movs	r2, #0
 800296a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <SPIx_Init+0x6c>)
 800296e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002972:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002974:	4803      	ldr	r0, [pc, #12]	; (8002984 <SPIx_Init+0x6c>)
 8002976:	f000 f853 	bl	8002a20 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800297a:	4802      	ldr	r0, [pc, #8]	; (8002984 <SPIx_Init+0x6c>)
 800297c:	f004 fb9f 	bl	80070be <HAL_SPI_Init>
  } 
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000410 	.word	0x20000410
 8002988:	40015000 	.word	0x40015000

0800298c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	b29a      	uxth	r2, r3
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <SPIx_Read+0x38>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f107 0108 	add.w	r1, r7, #8
 80029a6:	4808      	ldr	r0, [pc, #32]	; (80029c8 <SPIx_Read+0x3c>)
 80029a8:	f004 fd86 	bl	80074b8 <HAL_SPI_Receive>
 80029ac:	4603      	mov	r3, r0
 80029ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80029b6:	f000 f827 	bl	8002a08 <SPIx_Error>
  }
  
  return readvalue;
 80029ba:	68bb      	ldr	r3, [r7, #8]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000016c 	.word	0x2000016c
 80029c8:	20000410 	.word	0x20000410

080029cc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <SPIx_Write+0x34>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1db9      	adds	r1, r7, #6
 80029e0:	2201      	movs	r2, #1
 80029e2:	4808      	ldr	r0, [pc, #32]	; (8002a04 <SPIx_Write+0x38>)
 80029e4:	f004 fc12 	bl	800720c <HAL_SPI_Transmit>
 80029e8:	4603      	mov	r3, r0
 80029ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80029f2:	f000 f809 	bl	8002a08 <SPIx_Error>
  }
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000016c 	.word	0x2000016c
 8002a04:	20000410 	.word	0x20000410

08002a08 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002a0c:	4803      	ldr	r0, [pc, #12]	; (8002a1c <SPIx_Error+0x14>)
 8002a0e:	f004 fbc1 	bl	8007194 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002a12:	f7ff ff81 	bl	8002918 <SPIx_Init>
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000410 	.word	0x20000410

08002a20 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <SPIx_MspInit+0x6c>)
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <SPIx_MspInit+0x6c>)
 8002a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a36:	6453      	str	r3, [r2, #68]	; 0x44
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <SPIx_MspInit+0x6c>)
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <SPIx_MspInit+0x6c>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <SPIx_MspInit+0x6c>)
 8002a4e:	f043 0320 	orr.w	r3, r3, #32
 8002a52:	6313      	str	r3, [r2, #48]	; 0x30
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <SPIx_MspInit+0x6c>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002a60:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002a72:	2305      	movs	r3, #5
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4804      	ldr	r0, [pc, #16]	; (8002a90 <SPIx_MspInit+0x70>)
 8002a7e:	f001 ffb7 	bl	80049f0 <HAL_GPIO_Init>
}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021400 	.word	0x40021400

08002a94 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <LCD_IO_Init+0xe0>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d164      	bne.n	8002b6c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002aa2:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <LCD_IO_Init+0xe0>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	4a31      	ldr	r2, [pc, #196]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab8:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002aca:	2301      	movs	r3, #1
 8002acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	4619      	mov	r1, r3
 8002adc:	4827      	ldr	r0, [pc, #156]	; (8002b7c <LCD_IO_Init+0xe8>)
 8002ade:	f001 ff87 	bl	80049f0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002b04:	2301      	movs	r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	4619      	mov	r1, r3
 8002b16:	4819      	ldr	r0, [pc, #100]	; (8002b7c <LCD_IO_Init+0xe8>)
 8002b18:	f001 ff6a 	bl	80049f0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <LCD_IO_Init+0xe4>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002b44:	2302      	movs	r3, #2
 8002b46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002b48:	f107 030c 	add.w	r3, r7, #12
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480c      	ldr	r0, [pc, #48]	; (8002b80 <LCD_IO_Init+0xec>)
 8002b50:	f001 ff4e 	bl	80049f0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002b54:	2200      	movs	r2, #0
 8002b56:	2104      	movs	r1, #4
 8002b58:	4809      	ldr	r0, [pc, #36]	; (8002b80 <LCD_IO_Init+0xec>)
 8002b5a:	f002 f8f5 	bl	8004d48 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002b5e:	2201      	movs	r2, #1
 8002b60:	2104      	movs	r1, #4
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <LCD_IO_Init+0xec>)
 8002b64:	f002 f8f0 	bl	8004d48 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002b68:	f7ff fed6 	bl	8002918 <SPIx_Init>
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000468 	.word	0x20000468
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020c00 	.word	0x40020c00
 8002b80:	40020800 	.word	0x40020800

08002b84 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b94:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <LCD_IO_WriteData+0x3c>)
 8002b96:	f002 f8d7 	bl	8004d48 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <LCD_IO_WriteData+0x40>)
 8002ba0:	f002 f8d2 	bl	8004d48 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff10 	bl	80029cc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002bac:	2201      	movs	r2, #1
 8002bae:	2104      	movs	r1, #4
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <LCD_IO_WriteData+0x40>)
 8002bb2:	f002 f8c9 	bl	8004d48 <HAL_GPIO_WritePin>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40020c00 	.word	0x40020c00
 8002bc4:	40020800 	.word	0x40020800

08002bc8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bd8:	480a      	ldr	r0, [pc, #40]	; (8002c04 <LCD_IO_WriteReg+0x3c>)
 8002bda:	f002 f8b5 	bl	8004d48 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002bde:	2200      	movs	r2, #0
 8002be0:	2104      	movs	r1, #4
 8002be2:	4809      	ldr	r0, [pc, #36]	; (8002c08 <LCD_IO_WriteReg+0x40>)
 8002be4:	f002 f8b0 	bl	8004d48 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff feed 	bl	80029cc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4804      	ldr	r0, [pc, #16]	; (8002c08 <LCD_IO_WriteReg+0x40>)
 8002bf8:	f002 f8a6 	bl	8004d48 <HAL_GPIO_WritePin>
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40020c00 	.word	0x40020c00
 8002c08:	40020800 	.word	0x40020800

08002c0c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	460a      	mov	r2, r1
 8002c16:	80fb      	strh	r3, [r7, #6]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002c20:	2200      	movs	r2, #0
 8002c22:	2104      	movs	r1, #4
 8002c24:	4810      	ldr	r0, [pc, #64]	; (8002c68 <LCD_IO_ReadData+0x5c>)
 8002c26:	f002 f88f 	bl	8004d48 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c30:	480e      	ldr	r0, [pc, #56]	; (8002c6c <LCD_IO_ReadData+0x60>)
 8002c32:	f002 f889 	bl	8004d48 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fec7 	bl	80029cc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002c3e:	797b      	ldrb	r3, [r7, #5]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fea3 	bl	800298c <SPIx_Read>
 8002c46:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c4e:	4807      	ldr	r0, [pc, #28]	; (8002c6c <LCD_IO_ReadData+0x60>)
 8002c50:	f002 f87a 	bl	8004d48 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002c54:	2201      	movs	r2, #1
 8002c56:	2104      	movs	r1, #4
 8002c58:	4803      	ldr	r0, [pc, #12]	; (8002c68 <LCD_IO_ReadData+0x5c>)
 8002c5a:	f002 f875 	bl	8004d48 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00

08002c70 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f001 f92f 	bl	8003edc <HAL_Delay>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002c8a:	f7ff fd51 	bl	8002730 <I2Cx_Init>
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002c96:	f7ff fd7d 	bl	8002794 <I2Cx_ITConfig>
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	71bb      	strb	r3, [r7, #6]
 8002cac:	4613      	mov	r3, r2
 8002cae:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002cb0:	797a      	ldrb	r2, [r7, #5]
 8002cb2:	79b9      	ldrb	r1, [r7, #6]
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fd9e 	bl	80027f8 <I2Cx_WriteData>
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	460a      	mov	r2, r1
 8002cce:	71fb      	strb	r3, [r7, #7]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002cd4:	79ba      	ldrb	r2, [r7, #6]
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fdb6 	bl	800284c <I2Cx_ReadData>
 8002ce0:	4603      	mov	r3, r0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	603a      	str	r2, [r7, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	71fb      	strb	r3, [r7, #7]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	71bb      	strb	r3, [r7, #6]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002d00:	88bb      	ldrh	r3, [r7, #4]
 8002d02:	79b9      	ldrb	r1, [r7, #6]
 8002d04:	79f8      	ldrb	r0, [r7, #7]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	f7ff fdcc 	bl	80028a4 <I2Cx_ReadBuffer>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	b29b      	uxth	r3, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f001 f8db 	bl	8003edc <HAL_Delay>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d36:	4a2e      	ldr	r2, [pc, #184]	; (8002df0 <BSP_LCD_Init+0xc0>)
 8002d38:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002d3a:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d3c:	2209      	movs	r2, #9
 8002d3e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d48:	221d      	movs	r2, #29
 8002d4a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002d4c:	4b27      	ldr	r3, [pc, #156]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d4e:	2203      	movs	r2, #3
 8002d50:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d54:	f240 120d 	movw	r2, #269	; 0x10d
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d5c:	f240 1243 	movw	r2, #323	; 0x143
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d64:	f240 1217 	movw	r2, #279	; 0x117
 8002d68:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d6c:	f240 1247 	movw	r2, #327	; 0x147
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002d72:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <BSP_LCD_Init+0xc4>)
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <BSP_LCD_Init+0xc4>)
 8002d92:	22c0      	movs	r2, #192	; 0xc0
 8002d94:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <BSP_LCD_Init+0xc4>)
 8002d98:	2204      	movs	r2, #4
 8002d9a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <BSP_LCD_Init+0xc4>)
 8002d9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002da4:	4813      	ldr	r0, [pc, #76]	; (8002df4 <BSP_LCD_Init+0xc4>)
 8002da6:	f003 ff43 	bl	8006c30 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002dc2:	f000 fb55 	bl	8003470 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002dc6:	4809      	ldr	r0, [pc, #36]	; (8002dec <BSP_LCD_Init+0xbc>)
 8002dc8:	f003 f800 	bl	8005dcc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <BSP_LCD_Init+0xc8>)
 8002dce:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <BSP_LCD_Init+0xcc>)
 8002dd0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <BSP_LCD_Init+0xc8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002dda:	f000 fd37 	bl	800384c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002dde:	4808      	ldr	r0, [pc, #32]	; (8002e00 <BSP_LCD_Init+0xd0>)
 8002de0:	f000 f8ce 	bl	8002f80 <BSP_LCD_SetFont>

  return LCD_OK;
 8002de4:	2300      	movs	r3, #0
}  
 8002de6:	4618      	mov	r0, r3
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000628 	.word	0x20000628
 8002df0:	40016800 	.word	0x40016800
 8002df4:	200004ac 	.word	0x200004ac
 8002df8:	200006d0 	.word	0x200006d0
 8002dfc:	20000100 	.word	0x20000100
 8002e00:	20000170 	.word	0x20000170

08002e04 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <BSP_LCD_GetXSize+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	4798      	blx	r3
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200006d0 	.word	0x200006d0

08002e1c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <BSP_LCD_GetYSize+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	4798      	blx	r3
 8002e28:	4603      	mov	r3, r0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200006d0 	.word	0x200006d0

08002e34 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b090      	sub	sp, #64	; 0x40
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002e44:	f7ff ffde 	bl	8002e04 <BSP_LCD_GetXSize>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e50:	f7ff ffe4 	bl	8002e1c <BSP_LCD_GetYSize>
 8002e54:	4603      	mov	r3, r0
 8002e56:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002e60:	23ff      	movs	r3, #255	; 0xff
 8002e62:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e80:	2307      	movs	r3, #7
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002e84:	f7ff ffbe 	bl	8002e04 <BSP_LCD_GetXSize>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002e8c:	f7ff ffc6 	bl	8002e1c <BSP_LCD_GetYSize>
 8002e90:	4603      	mov	r3, r0
 8002e92:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4814      	ldr	r0, [pc, #80]	; (8002ef0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e9e:	f003 f86f 	bl	8005f80 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	4913      	ldr	r1, [pc, #76]	; (8002ef4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002eb8:	88fa      	ldrh	r2, [r7, #6]
 8002eba:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002eca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	4909      	ldr	r1, [pc, #36]	; (8002ef4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ede:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002ee2:	f003 f88b 	bl	8005ffc <HAL_LTDC_EnableDither>
}
 8002ee6:	bf00      	nop
 8002ee8:	3740      	adds	r7, #64	; 0x40
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000628 	.word	0x20000628
 8002ef4:	200004e0 	.word	0x200004e0
 8002ef8:	20000170 	.word	0x20000170

08002efc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <BSP_LCD_SelectLayer+0x1c>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	200004dc 	.word	0x200004dc

08002f1c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <BSP_LCD_SetTextColor+0x28>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4907      	ldr	r1, [pc, #28]	; (8002f48 <BSP_LCD_SetTextColor+0x2c>)
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	601a      	str	r2, [r3, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	200004dc 	.word	0x200004dc
 8002f48:	200004e0 	.word	0x200004e0

08002f4c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <BSP_LCD_SetBackColor+0x2c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4908      	ldr	r1, [pc, #32]	; (8002f7c <BSP_LCD_SetBackColor+0x30>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3304      	adds	r3, #4
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	200004dc 	.word	0x200004dc
 8002f7c:	200004e0 	.word	0x200004e0

08002f80 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <BSP_LCD_SetFont+0x2c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4908      	ldr	r1, [pc, #32]	; (8002fb0 <BSP_LCD_SetFont+0x30>)
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3308      	adds	r3, #8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	200004dc 	.word	0x200004dc
 8002fb0:	200004e0 	.word	0x200004e0

08002fb4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <BSP_LCD_Clear+0x48>)
 8002fbe:	681c      	ldr	r4, [r3, #0]
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <BSP_LCD_Clear+0x48>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <BSP_LCD_Clear+0x4c>)
 8002fc6:	2134      	movs	r1, #52	; 0x34
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	335c      	adds	r3, #92	; 0x5c
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461e      	mov	r6, r3
 8002fd4:	f7ff ff16 	bl	8002e04 <BSP_LCD_GetXSize>
 8002fd8:	4605      	mov	r5, r0
 8002fda:	f7ff ff1f 	bl	8002e1c <BSP_LCD_GetYSize>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	462a      	mov	r2, r5
 8002fec:	4631      	mov	r1, r6
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f000 fbf4 	bl	80037dc <FillBuffer>
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffc:	200004dc 	.word	0x200004dc
 8003000:	20000628 	.word	0x20000628

08003004 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
 800300e:	460b      	mov	r3, r1
 8003010:	80bb      	strh	r3, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003016:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <BSP_LCD_DisplayChar+0x80>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	491b      	ldr	r1, [pc, #108]	; (8003088 <BSP_LCD_DisplayChar+0x84>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3308      	adds	r3, #8
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6819      	ldr	r1, [r3, #0]
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <BSP_LCD_DisplayChar+0x80>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4c14      	ldr	r4, [pc, #80]	; (8003088 <BSP_LCD_DisplayChar+0x84>)
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4423      	add	r3, r4
 8003042:	3308      	adds	r3, #8
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003048:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <BSP_LCD_DisplayChar+0x80>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <BSP_LCD_DisplayChar+0x84>)
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4423      	add	r3, r4
 800305c:	3308      	adds	r3, #8
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	889b      	ldrh	r3, [r3, #4]
 8003062:	3307      	adds	r3, #7
 8003064:	2b00      	cmp	r3, #0
 8003066:	da00      	bge.n	800306a <BSP_LCD_DisplayChar+0x66>
 8003068:	3307      	adds	r3, #7
 800306a:	10db      	asrs	r3, r3, #3
 800306c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003070:	18ca      	adds	r2, r1, r3
 8003072:	88b9      	ldrh	r1, [r7, #4]
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 faf6 	bl	8003668 <DrawChar>
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	200004dc 	.word	0x200004dc
 8003088:	200004e0 	.word	0x200004e0

0800308c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	60ba      	str	r2, [r7, #8]
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	81fb      	strh	r3, [r7, #14]
 800309a:	460b      	mov	r3, r1
 800309c:	81bb      	strh	r3, [r7, #12]
 800309e:	4613      	mov	r3, r2
 80030a0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80030a2:	2301      	movs	r3, #1
 80030a4:	83fb      	strh	r3, [r7, #30]
 80030a6:	2300      	movs	r3, #0
 80030a8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80030b6:	e002      	b.n	80030be <BSP_LCD_DisplayStringAt+0x32>
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	3301      	adds	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	617a      	str	r2, [r7, #20]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f6      	bne.n	80030b8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80030ca:	f7ff fe9b 	bl	8002e04 <BSP_LCD_GetXSize>
 80030ce:	4601      	mov	r1, r0
 80030d0:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <BSP_LCD_DisplayStringAt+0x174>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	484b      	ldr	r0, [pc, #300]	; (8003204 <BSP_LCD_DisplayStringAt+0x178>)
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4403      	add	r3, r0
 80030e0:	3308      	adds	r3, #8
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	889b      	ldrh	r3, [r3, #4]
 80030e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ea:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d01c      	beq.n	800312c <BSP_LCD_DisplayStringAt+0xa0>
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	dc33      	bgt.n	800315e <BSP_LCD_DisplayStringAt+0xd2>
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d002      	beq.n	8003100 <BSP_LCD_DisplayStringAt+0x74>
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d019      	beq.n	8003132 <BSP_LCD_DisplayStringAt+0xa6>
 80030fe:	e02e      	b.n	800315e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	1ad1      	subs	r1, r2, r3
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <BSP_LCD_DisplayStringAt+0x174>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	483e      	ldr	r0, [pc, #248]	; (8003204 <BSP_LCD_DisplayStringAt+0x178>)
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4403      	add	r3, r0
 8003116:	3308      	adds	r3, #8
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	889b      	ldrh	r3, [r3, #4]
 800311c:	fb03 f301 	mul.w	r3, r3, r1
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	89fb      	ldrh	r3, [r7, #14]
 8003126:	4413      	add	r3, r2
 8003128:	83fb      	strh	r3, [r7, #30]
      break;
 800312a:	e01b      	b.n	8003164 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800312c:	89fb      	ldrh	r3, [r7, #14]
 800312e:	83fb      	strh	r3, [r7, #30]
      break;
 8003130:	e018      	b.n	8003164 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	b299      	uxth	r1, r3
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <BSP_LCD_DisplayStringAt+0x174>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4831      	ldr	r0, [pc, #196]	; (8003204 <BSP_LCD_DisplayStringAt+0x178>)
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4403      	add	r3, r0
 800314a:	3308      	adds	r3, #8
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	889b      	ldrh	r3, [r3, #4]
 8003150:	fb11 f303 	smulbb	r3, r1, r3
 8003154:	b29a      	uxth	r2, r3
 8003156:	89fb      	ldrh	r3, [r7, #14]
 8003158:	4413      	add	r3, r2
 800315a:	83fb      	strh	r3, [r7, #30]
      break;
 800315c:	e002      	b.n	8003164 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800315e:	89fb      	ldrh	r3, [r7, #14]
 8003160:	83fb      	strh	r3, [r7, #30]
      break;
 8003162:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003164:	e01a      	b.n	800319c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	89b9      	ldrh	r1, [r7, #12]
 800316c:	8bfb      	ldrh	r3, [r7, #30]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff48 	bl	8003004 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <BSP_LCD_DisplayStringAt+0x174>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4922      	ldr	r1, [pc, #136]	; (8003204 <BSP_LCD_DisplayStringAt+0x178>)
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3308      	adds	r3, #8
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	889a      	ldrh	r2, [r3, #4]
 800318a:	8bfb      	ldrh	r3, [r7, #30]
 800318c:	4413      	add	r3, r2
 800318e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	3301      	adds	r3, #1
 8003194:	60bb      	str	r3, [r7, #8]
    i++;
 8003196:	8bbb      	ldrh	r3, [r7, #28]
 8003198:	3301      	adds	r3, #1
 800319a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2dc      	uxtb	r4, r3
 80031aa:	f7ff fe2b 	bl	8002e04 <BSP_LCD_GetXSize>
 80031ae:	8bb9      	ldrh	r1, [r7, #28]
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <BSP_LCD_DisplayStringAt+0x174>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4d13      	ldr	r5, [pc, #76]	; (8003204 <BSP_LCD_DisplayStringAt+0x178>)
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	442b      	add	r3, r5
 80031c0:	3308      	adds	r3, #8
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	889b      	ldrh	r3, [r3, #4]
 80031c6:	fb03 f301 	mul.w	r3, r3, r1
 80031ca:	1ac3      	subs	r3, r0, r3
 80031cc:	b299      	uxth	r1, r3
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <BSP_LCD_DisplayStringAt+0x174>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	480c      	ldr	r0, [pc, #48]	; (8003204 <BSP_LCD_DisplayStringAt+0x178>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4403      	add	r3, r0
 80031de:	3308      	adds	r3, #8
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	889b      	ldrh	r3, [r3, #4]
 80031e4:	4299      	cmp	r1, r3
 80031e6:	bf2c      	ite	cs
 80031e8:	2301      	movcs	r3, #1
 80031ea:	2300      	movcc	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4023      	ands	r3, r4
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1b7      	bne.n	8003166 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003200:	200004dc 	.word	0x200004dc
 8003204:	200004e0 	.word	0x200004e0

08003208 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b08b      	sub	sp, #44	; 0x2c
 800320c:	af00      	add	r7, sp, #0
 800320e:	4604      	mov	r4, r0
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	4623      	mov	r3, r4
 8003218:	80fb      	strh	r3, [r7, #6]
 800321a:	4603      	mov	r3, r0
 800321c:	80bb      	strh	r3, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	807b      	strh	r3, [r7, #2]
 8003222:	4613      	mov	r3, r2
 8003224:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003226:	2300      	movs	r3, #0
 8003228:	823b      	strh	r3, [r7, #16]
 800322a:	2300      	movs	r3, #0
 800322c:	81fb      	strh	r3, [r7, #14]
 800322e:	2300      	movs	r3, #0
 8003230:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003232:	2300      	movs	r3, #0
 8003234:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003236:	2300      	movs	r3, #0
 8003238:	847b      	strh	r3, [r7, #34]	; 0x22
 800323a:	2300      	movs	r3, #0
 800323c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800323e:	2300      	movs	r3, #0
 8003240:	83fb      	strh	r3, [r7, #30]
 8003242:	2300      	movs	r3, #0
 8003244:	83bb      	strh	r3, [r7, #28]
 8003246:	2300      	movs	r3, #0
 8003248:	837b      	strh	r3, [r7, #26]
 800324a:	2300      	movs	r3, #0
 800324c:	833b      	strh	r3, [r7, #24]
 800324e:	2300      	movs	r3, #0
 8003250:	82fb      	strh	r3, [r7, #22]
 8003252:	2300      	movs	r3, #0
 8003254:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	bfb8      	it	lt
 8003264:	425b      	neglt	r3, r3
 8003266:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003268:	883a      	ldrh	r2, [r7, #0]
 800326a:	88bb      	ldrh	r3, [r7, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	bfb8      	it	lt
 8003272:	425b      	neglt	r3, r3
 8003274:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800327a:	88bb      	ldrh	r3, [r7, #4]
 800327c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	429a      	cmp	r2, r3
 8003284:	d304      	bcc.n	8003290 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	843b      	strh	r3, [r7, #32]
 800328e:	e005      	b.n	800329c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003294:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800329a:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 800329c:	883a      	ldrh	r2, [r7, #0]
 800329e:	88bb      	ldrh	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d304      	bcc.n	80032ae <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80032a4:	2301      	movs	r3, #1
 80032a6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	83bb      	strh	r3, [r7, #28]
 80032ac:	e005      	b.n	80032ba <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80032ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032b2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80032b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032b8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80032ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80032be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	db10      	blt.n	80032e8 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80032c6:	2300      	movs	r3, #0
 80032c8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80032ca:	2300      	movs	r3, #0
 80032cc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80032ce:	8a3b      	ldrh	r3, [r7, #16]
 80032d0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80032d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032d6:	0fda      	lsrs	r2, r3, #31
 80032d8:	4413      	add	r3, r2
 80032da:	105b      	asrs	r3, r3, #1
 80032dc:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80032de:	89fb      	ldrh	r3, [r7, #14]
 80032e0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80032e2:	8a3b      	ldrh	r3, [r7, #16]
 80032e4:	82bb      	strh	r3, [r7, #20]
 80032e6:	e00f      	b.n	8003308 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80032e8:	2300      	movs	r3, #0
 80032ea:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80032ec:	2300      	movs	r3, #0
 80032ee:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80032f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032f8:	0fda      	lsrs	r2, r3, #31
 80032fa:	4413      	add	r3, r2
 80032fc:	105b      	asrs	r3, r3, #1
 80032fe:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003300:	8a3b      	ldrh	r3, [r7, #16]
 8003302:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003304:	89fb      	ldrh	r3, [r7, #14]
 8003306:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003308:	2300      	movs	r3, #0
 800330a:	827b      	strh	r3, [r7, #18]
 800330c:	e037      	b.n	800337e <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800330e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003310:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <BSP_LCD_DrawLine+0x18c>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4c20      	ldr	r4, [pc, #128]	; (8003398 <BSP_LCD_DrawLine+0x190>)
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4423      	add	r3, r4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	f000 f979 	bl	800361c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800332a:	8b3a      	ldrh	r2, [r7, #24]
 800332c:	8afb      	ldrh	r3, [r7, #22]
 800332e:	4413      	add	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003334:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003338:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800333c:	429a      	cmp	r2, r3
 800333e:	db0e      	blt.n	800335e <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003340:	8b3a      	ldrh	r2, [r7, #24]
 8003342:	8b7b      	ldrh	r3, [r7, #26]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800334a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800334c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800334e:	4413      	add	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003356:	8bfb      	ldrh	r3, [r7, #30]
 8003358:	4413      	add	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800335e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003360:	8c3b      	ldrh	r3, [r7, #32]
 8003362:	4413      	add	r3, r2
 8003364:	b29b      	uxth	r3, r3
 8003366:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003368:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800336a:	8bbb      	ldrh	r3, [r7, #28]
 800336c:	4413      	add	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003372:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003376:	b29b      	uxth	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	b29b      	uxth	r3, r3
 800337c:	827b      	strh	r3, [r7, #18]
 800337e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003382:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003386:	429a      	cmp	r2, r3
 8003388:	ddc1      	ble.n	800330e <BSP_LCD_DrawLine+0x106>
  }
}
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	372c      	adds	r7, #44	; 0x2c
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	200004dc 	.word	0x200004dc
 8003398:	200004e0 	.word	0x200004e0

0800339c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af02      	add	r7, sp, #8
 80033a4:	4604      	mov	r4, r0
 80033a6:	4608      	mov	r0, r1
 80033a8:	4611      	mov	r1, r2
 80033aa:	461a      	mov	r2, r3
 80033ac:	4623      	mov	r3, r4
 80033ae:	80fb      	strh	r3, [r7, #6]
 80033b0:	4603      	mov	r3, r0
 80033b2:	80bb      	strh	r3, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <BSP_LCD_FillRect+0xa8>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4920      	ldr	r1, [pc, #128]	; (8003448 <BSP_LCD_FillRect+0xac>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fda2 	bl	8002f1c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <BSP_LCD_FillRect+0xa8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <BSP_LCD_FillRect+0xb0>)
 80033de:	2134      	movs	r1, #52	; 0x34
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	335c      	adds	r3, #92	; 0x5c
 80033e8:	681c      	ldr	r4, [r3, #0]
 80033ea:	f7ff fd0b 	bl	8002e04 <BSP_LCD_GetXSize>
 80033ee:	4602      	mov	r2, r0
 80033f0:	88bb      	ldrh	r3, [r7, #4]
 80033f2:	fb03 f202 	mul.w	r2, r3, r2
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4423      	add	r3, r4
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <BSP_LCD_FillRect+0xa8>)
 8003402:	681c      	ldr	r4, [r3, #0]
 8003404:	68fd      	ldr	r5, [r7, #12]
 8003406:	887e      	ldrh	r6, [r7, #2]
 8003408:	f8b7 8000 	ldrh.w	r8, [r7]
 800340c:	f7ff fcfa 	bl	8002e04 <BSP_LCD_GetXSize>
 8003410:	4602      	mov	r2, r0
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	1ad1      	subs	r1, r2, r3
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <BSP_LCD_FillRect+0xa8>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	480b      	ldr	r0, [pc, #44]	; (8003448 <BSP_LCD_FillRect+0xac>)
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4403      	add	r3, r0
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	9100      	str	r1, [sp, #0]
 800342c:	4643      	mov	r3, r8
 800342e:	4632      	mov	r2, r6
 8003430:	4629      	mov	r1, r5
 8003432:	4620      	mov	r0, r4
 8003434:	f000 f9d2 	bl	80037dc <FillBuffer>
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003442:	bf00      	nop
 8003444:	200004dc 	.word	0x200004dc
 8003448:	200004e0 	.word	0x200004e0
 800344c:	20000628 	.word	0x20000628

08003450 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <BSP_LCD_DisplayOn+0x1c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800345e:	4b03      	ldr	r3, [pc, #12]	; (800346c <BSP_LCD_DisplayOn+0x1c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4798      	blx	r3
  }
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200006d0 	.word	0x200006d0

08003470 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	4b61      	ldr	r3, [pc, #388]	; (8003600 <BSP_LCD_MspInit+0x190>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	4a60      	ldr	r2, [pc, #384]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003484:	6453      	str	r3, [r2, #68]	; 0x44
 8003486:	4b5e      	ldr	r3, [pc, #376]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <BSP_LCD_MspInit+0x190>)
 800349c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	4b53      	ldr	r3, [pc, #332]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a52      	ldr	r2, [pc, #328]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	61bb      	str	r3, [r7, #24]
 80034c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a4b      	ldr	r2, [pc, #300]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b49      	ldr	r3, [pc, #292]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	4b45      	ldr	r3, [pc, #276]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a44      	ldr	r2, [pc, #272]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b42      	ldr	r3, [pc, #264]	; (8003600 <BSP_LCD_MspInit+0x190>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <BSP_LCD_MspInit+0x190>)
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	6313      	str	r3, [r2, #48]	; 0x30
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	4a36      	ldr	r2, [pc, #216]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	6313      	str	r3, [r2, #48]	; 0x30
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <BSP_LCD_MspInit+0x190>)
 8003544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <BSP_LCD_MspInit+0x190>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003556:	f641 0358 	movw	r3, #6232	; 0x1858
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003564:	2302      	movs	r3, #2
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003568:	230e      	movs	r3, #14
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800356c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003570:	4619      	mov	r1, r3
 8003572:	4824      	ldr	r0, [pc, #144]	; (8003604 <BSP_LCD_MspInit+0x194>)
 8003574:	f001 fa3c 	bl	80049f0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003578:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800357e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003582:	4619      	mov	r1, r3
 8003584:	4820      	ldr	r0, [pc, #128]	; (8003608 <BSP_LCD_MspInit+0x198>)
 8003586:	f001 fa33 	bl	80049f0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800358a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003594:	4619      	mov	r1, r3
 8003596:	481d      	ldr	r0, [pc, #116]	; (800360c <BSP_LCD_MspInit+0x19c>)
 8003598:	f001 fa2a 	bl	80049f0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800359c:	2348      	movs	r3, #72	; 0x48
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80035a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a4:	4619      	mov	r1, r3
 80035a6:	481a      	ldr	r0, [pc, #104]	; (8003610 <BSP_LCD_MspInit+0x1a0>)
 80035a8:	f001 fa22 	bl	80049f0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80035ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80035b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b6:	4619      	mov	r1, r3
 80035b8:	4816      	ldr	r0, [pc, #88]	; (8003614 <BSP_LCD_MspInit+0x1a4>)
 80035ba:	f001 fa19 	bl	80049f0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80035be:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80035c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c8:	4619      	mov	r1, r3
 80035ca:	4813      	ldr	r0, [pc, #76]	; (8003618 <BSP_LCD_MspInit+0x1a8>)
 80035cc:	f001 fa10 	bl	80049f0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80035d0:	2303      	movs	r3, #3
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80035d4:	2309      	movs	r3, #9
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035dc:	4619      	mov	r1, r3
 80035de:	480a      	ldr	r0, [pc, #40]	; (8003608 <BSP_LCD_MspInit+0x198>)
 80035e0:	f001 fa06 	bl	80049f0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80035e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80035ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ee:	4619      	mov	r1, r3
 80035f0:	4809      	ldr	r0, [pc, #36]	; (8003618 <BSP_LCD_MspInit+0x1a8>)
 80035f2:	f001 f9fd 	bl	80049f0 <HAL_GPIO_Init>
}
 80035f6:	bf00      	nop
 80035f8:	3738      	adds	r7, #56	; 0x38
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	40020000 	.word	0x40020000
 8003608:	40020400 	.word	0x40020400
 800360c:	40020800 	.word	0x40020800
 8003610:	40020c00 	.word	0x40020c00
 8003614:	40021400 	.word	0x40021400
 8003618:	40021800 	.word	0x40021800

0800361c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800361c:	b5b0      	push	{r4, r5, r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	603a      	str	r2, [r7, #0]
 8003626:	80fb      	strh	r3, [r7, #6]
 8003628:	460b      	mov	r3, r1
 800362a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <BSP_LCD_DrawPixel+0x44>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <BSP_LCD_DrawPixel+0x48>)
 8003632:	2134      	movs	r1, #52	; 0x34
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	335c      	adds	r3, #92	; 0x5c
 800363c:	681c      	ldr	r4, [r3, #0]
 800363e:	88bd      	ldrh	r5, [r7, #4]
 8003640:	f7ff fbe0 	bl	8002e04 <BSP_LCD_GetXSize>
 8003644:	4603      	mov	r3, r0
 8003646:	fb03 f205 	mul.w	r2, r3, r5
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4423      	add	r3, r4
 8003652:	461a      	mov	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bdb0      	pop	{r4, r5, r7, pc}
 8003660:	200004dc 	.word	0x200004dc
 8003664:	20000628 	.word	0x20000628

08003668 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	603a      	str	r2, [r7, #0]
 8003672:	80fb      	strh	r3, [r7, #6]
 8003674:	460b      	mov	r3, r1
 8003676:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <DrawChar+0x16c>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4953      	ldr	r1, [pc, #332]	; (80037d8 <DrawChar+0x170>)
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3308      	adds	r3, #8
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	88db      	ldrh	r3, [r3, #6]
 800369a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800369c:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <DrawChar+0x16c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	494d      	ldr	r1, [pc, #308]	; (80037d8 <DrawChar+0x170>)
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	889b      	ldrh	r3, [r3, #4]
 80036b2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80036b4:	8a3b      	ldrh	r3, [r7, #16]
 80036b6:	3307      	adds	r3, #7
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da00      	bge.n	80036be <DrawChar+0x56>
 80036bc:	3307      	adds	r3, #7
 80036be:	10db      	asrs	r3, r3, #3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	8a3b      	ldrh	r3, [r7, #16]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e076      	b.n	80037c2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80036d4:	8a3b      	ldrh	r3, [r7, #16]
 80036d6:	3307      	adds	r3, #7
 80036d8:	2b00      	cmp	r3, #0
 80036da:	da00      	bge.n	80036de <DrawChar+0x76>
 80036dc:	3307      	adds	r3, #7
 80036de:	10db      	asrs	r3, r3, #3
 80036e0:	461a      	mov	r2, r3
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fb03 f302 	mul.w	r3, r3, r2
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80036ee:	8a3b      	ldrh	r3, [r7, #16]
 80036f0:	3307      	adds	r3, #7
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da00      	bge.n	80036f8 <DrawChar+0x90>
 80036f6:	3307      	adds	r3, #7
 80036f8:	10db      	asrs	r3, r3, #3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d002      	beq.n	8003704 <DrawChar+0x9c>
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d004      	beq.n	800370c <DrawChar+0xa4>
 8003702:	e00c      	b.n	800371e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
      break;
 800370a:	e016      	b.n	800373a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	3201      	adds	r2, #1
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
      break;
 800371c:	e00d      	b.n	800373a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	041a      	lsls	r2, r3, #16
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3301      	adds	r3, #1
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	4313      	orrs	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	3202      	adds	r2, #2
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
      break;
 8003738:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e036      	b.n	80037ae <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003740:	8a3a      	ldrh	r2, [r7, #16]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	4413      	add	r3, r2
 800374a:	3b01      	subs	r3, #1
 800374c:	2201      	movs	r2, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	461a      	mov	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	b29a      	uxth	r2, r3
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	4413      	add	r3, r2
 8003764:	b298      	uxth	r0, r3
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <DrawChar+0x16c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	491b      	ldr	r1, [pc, #108]	; (80037d8 <DrawChar+0x170>)
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	88bb      	ldrh	r3, [r7, #4]
 800377a:	4619      	mov	r1, r3
 800377c:	f7ff ff4e 	bl	800361c <BSP_LCD_DrawPixel>
 8003780:	e012      	b.n	80037a8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	b29a      	uxth	r2, r3
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	4413      	add	r3, r2
 800378a:	b298      	uxth	r0, r3
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <DrawChar+0x16c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4911      	ldr	r1, [pc, #68]	; (80037d8 <DrawChar+0x170>)
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3304      	adds	r3, #4
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	88bb      	ldrh	r3, [r7, #4]
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7ff ff3a 	bl	800361c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	8a3b      	ldrh	r3, [r7, #16]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d3c4      	bcc.n	8003740 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80037b6:	88bb      	ldrh	r3, [r7, #4]
 80037b8:	3301      	adds	r3, #1
 80037ba:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3301      	adds	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	8a7b      	ldrh	r3, [r7, #18]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d384      	bcc.n	80036d4 <DrawChar+0x6c>
  }
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200004dc 	.word	0x200004dc
 80037d8:	200004e0 	.word	0x200004e0

080037dc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <FillBuffer+0x68>)
 80037ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037f0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <FillBuffer+0x68>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80037f8:	4a12      	ldr	r2, [pc, #72]	; (8003844 <FillBuffer+0x68>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <FillBuffer+0x68>)
 8003800:	4a11      	ldr	r2, [pc, #68]	; (8003848 <FillBuffer+0x6c>)
 8003802:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003804:	480f      	ldr	r0, [pc, #60]	; (8003844 <FillBuffer+0x68>)
 8003806:	f000 fe5d 	bl	80044c4 <HAL_DMA2D_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d115      	bne.n	800383c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	480c      	ldr	r0, [pc, #48]	; (8003844 <FillBuffer+0x68>)
 8003814:	f000 ffbe 	bl	8004794 <HAL_DMA2D_ConfigLayer>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10e      	bne.n	800383c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69f9      	ldr	r1, [r7, #28]
 8003828:	4806      	ldr	r0, [pc, #24]	; (8003844 <FillBuffer+0x68>)
 800382a:	f000 fe9e 	bl	800456a <HAL_DMA2D_Start>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003834:	210a      	movs	r1, #10
 8003836:	4803      	ldr	r0, [pc, #12]	; (8003844 <FillBuffer+0x68>)
 8003838:	f000 fec2 	bl	80045c0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	2000046c 	.word	0x2000046c
 8003848:	4002b000 	.word	0x4002b000

0800384c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003850:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <BSP_SDRAM_Init+0xb0>)
 8003854:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 8003858:	2202      	movs	r2, #2
 800385a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 800385e:	2207      	movs	r2, #7
 8003860:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 8003864:	2204      	movs	r2, #4
 8003866:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 800386a:	2207      	movs	r2, #7
 800386c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800386e:	4b24      	ldr	r3, [pc, #144]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 8003870:	2202      	movs	r2, #2
 8003872:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 8003876:	2202      	movs	r2, #2
 8003878:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 800387c:	2202      	movs	r2, #2
 800387e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 8003882:	2201      	movs	r2, #1
 8003884:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 800388e:	2204      	movs	r2, #4
 8003890:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 8003894:	2210      	movs	r2, #16
 8003896:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038a0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80038a4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80038c2:	2100      	movs	r1, #0
 80038c4:	480c      	ldr	r0, [pc, #48]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038c6:	f000 f87f 	bl	80039c8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <BSP_SDRAM_Init+0xb4>)
 80038cc:	480a      	ldr	r0, [pc, #40]	; (80038f8 <BSP_SDRAM_Init+0xac>)
 80038ce:	f003 fb6d 	bl	8006fac <HAL_SDRAM_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <BSP_SDRAM_Init+0xb8>)
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e002      	b.n	80038e6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <BSP_SDRAM_Init+0xb8>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80038e6:	f240 506a 	movw	r0, #1386	; 0x56a
 80038ea:	f000 f80d 	bl	8003908 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <BSP_SDRAM_Init+0xb8>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200004f8 	.word	0x200004f8
 80038fc:	a0000140 	.word	0xa0000140
 8003900:	2000052c 	.word	0x2000052c
 8003904:	20000188 	.word	0x20000188

08003908 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800391c:	2208      	movs	r2, #8
 800391e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003922:	2201      	movs	r2, #1
 8003924:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003926:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800392c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003930:	4923      	ldr	r1, [pc, #140]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003932:	4824      	ldr	r0, [pc, #144]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003934:	f003 fb78 	bl	8007028 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003938:	2001      	movs	r0, #1
 800393a:	f000 facf 	bl	8003edc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003940:	2202      	movs	r2, #2
 8003942:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003946:	2208      	movs	r2, #8
 8003948:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800394c:	2201      	movs	r2, #1
 800394e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003952:	2200      	movs	r2, #0
 8003954:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800395a:	4919      	ldr	r1, [pc, #100]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800395c:	4819      	ldr	r0, [pc, #100]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800395e:	f003 fb63 	bl	8007028 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003964:	2203      	movs	r2, #3
 8003966:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800396a:	2208      	movs	r2, #8
 800396c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003970:	2204      	movs	r2, #4
 8003972:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003976:	2200      	movs	r2, #0
 8003978:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800397a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800397e:	4910      	ldr	r1, [pc, #64]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003980:	4810      	ldr	r0, [pc, #64]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003982:	f003 fb51 	bl	8007028 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003986:	f44f 730c 	mov.w	r3, #560	; 0x230
 800398a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800398e:	2204      	movs	r2, #4
 8003990:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003994:	2208      	movs	r2, #8
 8003996:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800399a:	2201      	movs	r2, #1
 800399c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039a2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80039a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039a8:	4905      	ldr	r1, [pc, #20]	; (80039c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039aa:	4806      	ldr	r0, [pc, #24]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039ac:	f003 fb3c 	bl	8007028 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4804      	ldr	r0, [pc, #16]	; (80039c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039b4:	f003 fb63 	bl	800707e <HAL_SDRAM_ProgramRefreshRate>
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000548 	.word	0x20000548
 80039c4:	200004f8 	.word	0x200004f8

080039c8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b090      	sub	sp, #64	; 0x40
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80ec 	beq.w	8003bb2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039de:	4b77      	ldr	r3, [pc, #476]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	4a76      	ldr	r2, [pc, #472]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6393      	str	r3, [r2, #56]	; 0x38
 80039ea:	4b74      	ldr	r3, [pc, #464]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	4b70      	ldr	r3, [pc, #448]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4a6f      	ldr	r2, [pc, #444]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a04:	6313      	str	r3, [r2, #48]	; 0x30
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	4b69      	ldr	r3, [pc, #420]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a68      	ldr	r2, [pc, #416]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	4b62      	ldr	r3, [pc, #392]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a61      	ldr	r2, [pc, #388]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	4b54      	ldr	r3, [pc, #336]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a53      	ldr	r2, [pc, #332]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a70:	f043 0310 	orr.w	r3, r3, #16
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b51      	ldr	r3, [pc, #324]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	4b4d      	ldr	r3, [pc, #308]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a4c      	ldr	r2, [pc, #304]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a8c:	f043 0320 	orr.w	r3, r3, #32
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4b46      	ldr	r3, [pc, #280]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a45      	ldr	r2, [pc, #276]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <BSP_SDRAM_MspInit+0x1f4>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003aca:	2360      	movs	r3, #96	; 0x60
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	483a      	ldr	r0, [pc, #232]	; (8003bc0 <BSP_SDRAM_MspInit+0x1f8>)
 8003ad6:	f000 ff8b 	bl	80049f0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003ada:	2301      	movs	r3, #1
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4837      	ldr	r0, [pc, #220]	; (8003bc4 <BSP_SDRAM_MspInit+0x1fc>)
 8003ae6:	f000 ff83 	bl	80049f0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003aea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003af4:	4619      	mov	r1, r3
 8003af6:	4834      	ldr	r0, [pc, #208]	; (8003bc8 <BSP_SDRAM_MspInit+0x200>)
 8003af8:	f000 ff7a 	bl	80049f0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003afc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b06:	4619      	mov	r1, r3
 8003b08:	4830      	ldr	r0, [pc, #192]	; (8003bcc <BSP_SDRAM_MspInit+0x204>)
 8003b0a:	f000 ff71 	bl	80049f0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003b0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b18:	4619      	mov	r1, r3
 8003b1a:	482d      	ldr	r0, [pc, #180]	; (8003bd0 <BSP_SDRAM_MspInit+0x208>)
 8003b1c:	f000 ff68 	bl	80049f0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003b20:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4829      	ldr	r0, [pc, #164]	; (8003bd4 <BSP_SDRAM_MspInit+0x20c>)
 8003b2e:	f000 ff5f 	bl	80049f0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003b32:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003b3e:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b44:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b4c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b54:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b5c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b6a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003b72:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b74:	2203      	movs	r2, #3
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003b78:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <BSP_SDRAM_MspInit+0x214>)
 8003b88:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b90:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003b96:	4810      	ldr	r0, [pc, #64]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b98:	f000 fb84 	bl	80042a4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003b9c:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <BSP_SDRAM_MspInit+0x210>)
 8003b9e:	f000 fad3 	bl	8004148 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	210f      	movs	r1, #15
 8003ba6:	2038      	movs	r0, #56	; 0x38
 8003ba8:	f000 fa97 	bl	80040da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003bac:	2038      	movs	r0, #56	; 0x38
 8003bae:	f000 fab0 	bl	8004112 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003bb2:	bf00      	nop
 8003bb4:	3740      	adds	r7, #64	; 0x40
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020400 	.word	0x40020400
 8003bc4:	40020800 	.word	0x40020800
 8003bc8:	40020c00 	.word	0x40020c00
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40021400 	.word	0x40021400
 8003bd4:	40021800 	.word	0x40021800
 8003bd8:	20000558 	.word	0x20000558
 8003bdc:	40026410 	.word	0x40026410

08003be0 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	460a      	mov	r2, r1
 8003bea:	80fb      	strh	r3, [r7, #6]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003bf4:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <BSP_TS_Init+0x64>)
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003bfa:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <BSP_TS_Init+0x68>)
 8003bfc:	88bb      	ldrh	r3, [r7, #4]
 8003bfe:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <BSP_TS_Init+0x6c>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2082      	movs	r0, #130	; 0x82
 8003c06:	4798      	blx	r3
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f640 0311 	movw	r3, #2065	; 0x811
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d104      	bne.n	8003c1e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <BSP_TS_Init+0x70>)
 8003c16:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <BSP_TS_Init+0x6c>)
 8003c18:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <BSP_TS_Init+0x70>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2082      	movs	r0, #130	; 0x82
 8003c2c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <BSP_TS_Init+0x70>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2082      	movs	r0, #130	; 0x82
 8003c36:	4798      	blx	r3
  }

  return ret;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200005bc 	.word	0x200005bc
 8003c48:	200005be 	.word	0x200005be
 8003c4c:	20000138 	.word	0x20000138
 8003c50:	200005b8 	.word	0x200005b8

08003c54 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <BSP_TS_ITGetStatus+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	2082      	movs	r0, #130	; 0x82
 8003c60:	4798      	blx	r3
 8003c62:	4603      	mov	r3, r0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200005b8 	.word	0x200005b8

08003c6c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003c74:	4b4f      	ldr	r3, [pc, #316]	; (8003db4 <BSP_TS_GetState+0x148>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2082      	movs	r0, #130	; 0x82
 8003c7c:	4798      	blx	r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 808d 	beq.w	8003daa <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003c90:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <BSP_TS_GetState+0x148>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f107 020c 	add.w	r2, r7, #12
 8003c9a:	f107 010e 	add.w	r1, r7, #14
 8003c9e:	2082      	movs	r0, #130	; 0x82
 8003ca0:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003ca2:	89bb      	ldrh	r3, [r7, #12]
 8003ca4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003cac:	89bb      	ldrh	r3, [r7, #12]
 8003cae:	4a42      	ldr	r2, [pc, #264]	; (8003db8 <BSP_TS_GetState+0x14c>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	08db      	lsrs	r3, r3, #3
 8003cb6:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003cb8:	8abb      	ldrh	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	82bb      	strh	r3, [r7, #20]
 8003cc2:	e008      	b.n	8003cd6 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003cc4:	4b3d      	ldr	r3, [pc, #244]	; (8003dbc <BSP_TS_GetState+0x150>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	8aba      	ldrh	r2, [r7, #20]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d903      	bls.n	8003cd6 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <BSP_TS_GetState+0x150>)
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003cd6:	8abb      	ldrh	r3, [r7, #20]
 8003cd8:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d806      	bhi.n	8003cf2 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003ce4:	89fb      	ldrh	r3, [r7, #14]
 8003ce6:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003cea:	330e      	adds	r3, #14
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	81fb      	strh	r3, [r7, #14]
 8003cf0:	e005      	b.n	8003cfe <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003cf2:	89fb      	ldrh	r3, [r7, #14]
 8003cf4:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	4a2f      	ldr	r2, [pc, #188]	; (8003dc0 <BSP_TS_GetState+0x154>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	08db      	lsrs	r3, r3, #3
 8003d08:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003d0a:	8afb      	ldrh	r3, [r7, #22]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	82fb      	strh	r3, [r7, #22]
 8003d14:	e008      	b.n	8003d28 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <BSP_TS_GetState+0x158>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	8afa      	ldrh	r2, [r7, #22]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d903      	bls.n	8003d28 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <BSP_TS_GetState+0x158>)
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003d28:	8afb      	ldrh	r3, [r7, #22]
 8003d2a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003d2c:	89fb      	ldrh	r3, [r7, #14]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <BSP_TS_GetState+0x15c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d906      	bls.n	8003d46 <BSP_TS_GetState+0xda>
 8003d38:	89fa      	ldrh	r2, [r7, #14]
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <BSP_TS_GetState+0x15c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	e005      	b.n	8003d52 <BSP_TS_GetState+0xe6>
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <BSP_TS_GetState+0x15c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	89fb      	ldrh	r3, [r7, #14]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003d54:	89bb      	ldrh	r3, [r7, #12]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <BSP_TS_GetState+0x160>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d906      	bls.n	8003d6e <BSP_TS_GetState+0x102>
 8003d60:	89ba      	ldrh	r2, [r7, #12]
 8003d62:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <BSP_TS_GetState+0x160>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	e005      	b.n	8003d7a <BSP_TS_GetState+0x10e>
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <BSP_TS_GetState+0x160>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	89bb      	ldrh	r3, [r7, #12]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003d7c:	8a7a      	ldrh	r2, [r7, #18]
 8003d7e:	8a3b      	ldrh	r3, [r7, #16]
 8003d80:	4413      	add	r3, r2
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	dd07      	ble.n	8003d96 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003d86:	89fb      	ldrh	r3, [r7, #14]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <BSP_TS_GetState+0x15c>)
 8003d8c:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003d8e:	89bb      	ldrh	r3, [r7, #12]
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <BSP_TS_GetState+0x160>)
 8003d94:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <BSP_TS_GetState+0x15c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <BSP_TS_GetState+0x160>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	809a      	strh	r2, [r3, #4]
  }
}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200005b8 	.word	0x200005b8
 8003db8:	ba2e8ba3 	.word	0xba2e8ba3
 8003dbc:	200005be 	.word	0x200005be
 8003dc0:	88888889 	.word	0x88888889
 8003dc4:	200005bc 	.word	0x200005bc
 8003dc8:	200005c0 	.word	0x200005c0
 8003dcc:	200005c4 	.word	0x200005c4

08003dd0 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <BSP_TS_ITClear+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	2082      	movs	r0, #130	; 0x82
 8003ddc:	4798      	blx	r3
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200005b8 	.word	0x200005b8

08003de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <HAL_Init+0x40>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0d      	ldr	r2, [pc, #52]	; (8003e28 <HAL_Init+0x40>)
 8003df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_Init+0x40>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_Init+0x40>)
 8003dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e04:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <HAL_Init+0x40>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a07      	ldr	r2, [pc, #28]	; (8003e28 <HAL_Init+0x40>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e10:	2003      	movs	r0, #3
 8003e12:	f000 f957 	bl	80040c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e16:	200f      	movs	r0, #15
 8003e18:	f000 f810 	bl	8003e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e1c:	f000 f806 	bl	8003e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023c00 	.word	0x40023c00

08003e2c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_InitTick+0x54>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_InitTick+0x58>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f967 	bl	800412e <HAL_SYSTICK_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00e      	b.n	8003e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b0f      	cmp	r3, #15
 8003e6e:	d80a      	bhi.n	8003e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e70:	2200      	movs	r2, #0
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	f000 f92f 	bl	80040da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e7c:	4a06      	ldr	r2, [pc, #24]	; (8003e98 <HAL_InitTick+0x5c>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	200000fc 	.word	0x200000fc
 8003e94:	20000190 	.word	0x20000190
 8003e98:	2000018c 	.word	0x2000018c

08003e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_IncTick+0x20>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_IncTick+0x24>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_IncTick+0x24>)
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000190 	.word	0x20000190
 8003ec0:	200006d4 	.word	0x200006d4

08003ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_GetTick+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	200006d4 	.word	0x200006d4

08003edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7ff ffee 	bl	8003ec4 <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d005      	beq.n	8003f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_Delay+0x44>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f02:	bf00      	nop
 8003f04:	f7ff ffde 	bl	8003ec4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d8f7      	bhi.n	8003f04 <HAL_Delay+0x28>
  {
  }
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000190 	.word	0x20000190

08003f24 <__NVIC_SetPriorityGrouping>:
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <__NVIC_SetPriorityGrouping+0x44>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f40:	4013      	ands	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f56:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <__NVIC_SetPriorityGrouping+0x44>)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	60d3      	str	r3, [r2, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <__NVIC_GetPriorityGrouping>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <__NVIC_GetPriorityGrouping+0x18>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	f003 0307 	and.w	r3, r3, #7
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <__NVIC_EnableIRQ>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	db0b      	blt.n	8003fb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	f003 021f 	and.w	r2, r3, #31
 8003fa0:	4907      	ldr	r1, [pc, #28]	; (8003fc0 <__NVIC_EnableIRQ+0x38>)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2001      	movs	r0, #1
 8003faa:	fa00 f202 	lsl.w	r2, r0, r2
 8003fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000e100 	.word	0xe000e100

08003fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	db0a      	blt.n	8003fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	490c      	ldr	r1, [pc, #48]	; (8004010 <__NVIC_SetPriority+0x4c>)
 8003fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe2:	0112      	lsls	r2, r2, #4
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fec:	e00a      	b.n	8004004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4908      	ldr	r1, [pc, #32]	; (8004014 <__NVIC_SetPriority+0x50>)
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	3b04      	subs	r3, #4
 8003ffc:	0112      	lsls	r2, r2, #4
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	440b      	add	r3, r1
 8004002:	761a      	strb	r2, [r3, #24]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000e100 	.word	0xe000e100
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004018:	b480      	push	{r7}
 800401a:	b089      	sub	sp, #36	; 0x24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f1c3 0307 	rsb	r3, r3, #7
 8004032:	2b04      	cmp	r3, #4
 8004034:	bf28      	it	cs
 8004036:	2304      	movcs	r3, #4
 8004038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3304      	adds	r3, #4
 800403e:	2b06      	cmp	r3, #6
 8004040:	d902      	bls.n	8004048 <NVIC_EncodePriority+0x30>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3b03      	subs	r3, #3
 8004046:	e000      	b.n	800404a <NVIC_EncodePriority+0x32>
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800404c:	f04f 32ff 	mov.w	r2, #4294967295
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43da      	mvns	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	401a      	ands	r2, r3
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004060:	f04f 31ff 	mov.w	r1, #4294967295
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	fa01 f303 	lsl.w	r3, r1, r3
 800406a:	43d9      	mvns	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004070:	4313      	orrs	r3, r2
         );
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3b01      	subs	r3, #1
 800408c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004090:	d301      	bcc.n	8004096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004092:	2301      	movs	r3, #1
 8004094:	e00f      	b.n	80040b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <SysTick_Config+0x40>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800409e:	210f      	movs	r1, #15
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	f7ff ff8e 	bl	8003fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <SysTick_Config+0x40>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <SysTick_Config+0x40>)
 80040b0:	2207      	movs	r2, #7
 80040b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000e010 	.word	0xe000e010

080040c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff29 	bl	8003f24 <__NVIC_SetPriorityGrouping>
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	4603      	mov	r3, r0
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040ec:	f7ff ff3e 	bl	8003f6c <__NVIC_GetPriorityGrouping>
 80040f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7ff ff8e 	bl	8004018 <NVIC_EncodePriority>
 80040fc:	4602      	mov	r2, r0
 80040fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff5d 	bl	8003fc4 <__NVIC_SetPriority>
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	4603      	mov	r3, r0
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800411c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff31 	bl	8003f88 <__NVIC_EnableIRQ>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffa2 	bl	8004080 <SysTick_Config>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff feb6 	bl	8003ec4 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e099      	b.n	8004298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004184:	e00f      	b.n	80041a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004186:	f7ff fe9d 	bl	8003ec4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b05      	cmp	r3, #5
 8004192:	d908      	bls.n	80041a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2203      	movs	r2, #3
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e078      	b.n	8004298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e8      	bne.n	8004186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4b38      	ldr	r3, [pc, #224]	; (80042a0 <HAL_DMA_Init+0x158>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d107      	bne.n	8004210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	4313      	orrs	r3, r2
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0307 	bic.w	r3, r3, #7
 8004226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2b04      	cmp	r3, #4
 8004238:	d117      	bne.n	800426a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00e      	beq.n	800426a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8bd 	bl	80043cc <DMA_CheckFifoParam>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004266:	2301      	movs	r3, #1
 8004268:	e016      	b.n	8004298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f874 	bl	8004360 <DMA_CalcBaseAndBitshift>
 8004278:	4603      	mov	r3, r0
 800427a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	223f      	movs	r2, #63	; 0x3f
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	f010803f 	.word	0xf010803f

080042a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e050      	b.n	8004358 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d101      	bne.n	80042c6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
 80042c4:	e048      	b.n	8004358 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2221      	movs	r2, #33	; 0x21
 8004304:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f82a 	bl	8004360 <DMA_CalcBaseAndBitshift>
 800430c:	4603      	mov	r3, r0
 800430e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	223f      	movs	r2, #63	; 0x3f
 800433a:	409a      	lsls	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	3b10      	subs	r3, #16
 8004370:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <DMA_CalcBaseAndBitshift+0x64>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <DMA_CalcBaseAndBitshift+0x68>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d909      	bls.n	80043a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	659a      	str	r2, [r3, #88]	; 0x58
 80043a0:	e007      	b.n	80043b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	aaaaaaab 	.word	0xaaaaaaab
 80043c8:	0800b578 	.word	0x0800b578

080043cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11f      	bne.n	8004426 <DMA_CheckFifoParam+0x5a>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d856      	bhi.n	800449a <DMA_CheckFifoParam+0xce>
 80043ec:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <DMA_CheckFifoParam+0x28>)
 80043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f2:	bf00      	nop
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004417 	.word	0x08004417
 80043fc:	08004405 	.word	0x08004405
 8004400:	0800449b 	.word	0x0800449b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d046      	beq.n	800449e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004414:	e043      	b.n	800449e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800441e:	d140      	bne.n	80044a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004424:	e03d      	b.n	80044a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442e:	d121      	bne.n	8004474 <DMA_CheckFifoParam+0xa8>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d837      	bhi.n	80044a6 <DMA_CheckFifoParam+0xda>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <DMA_CheckFifoParam+0x70>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	0800444d 	.word	0x0800444d
 8004440:	08004453 	.word	0x08004453
 8004444:	0800444d 	.word	0x0800444d
 8004448:	08004465 	.word	0x08004465
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      break;
 8004450:	e030      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d025      	beq.n	80044aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004462:	e022      	b.n	80044aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800446c:	d11f      	bne.n	80044ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004472:	e01c      	b.n	80044ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d903      	bls.n	8004482 <DMA_CheckFifoParam+0xb6>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d003      	beq.n	8004488 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004480:	e018      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
      break;
 8004486:	e015      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00e      	beq.n	80044b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e00b      	b.n	80044b2 <DMA_CheckFifoParam+0xe6>
      break;
 800449a:	bf00      	nop
 800449c:	e00a      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 800449e:	bf00      	nop
 80044a0:	e008      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 80044a2:	bf00      	nop
 80044a4:	e006      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 80044a6:	bf00      	nop
 80044a8:	e004      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
      break;
 80044b2:	bf00      	nop
    }
  } 
  
  return status; 
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop

080044c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e03b      	b.n	800454e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f833 	bl	8004556 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	f023 0107 	bic.w	r1, r3, #7
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800452e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68d1      	ldr	r1, [r2, #12]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	430b      	orrs	r3, r1
 800453c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af02      	add	r7, sp, #8
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_DMA2D_Start+0x1c>
 8004582:	2302      	movs	r3, #2
 8004584:	e018      	b.n	80045b8 <HAL_DMA2D_Start+0x4e>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f989 	bl	80048b8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d056      	beq.n	800468a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80045dc:	f7ff fc72 	bl	8003ec4 <HAL_GetTick>
 80045e0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80045e2:	e04b      	b.n	800467c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d023      	beq.n	800463e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	f043 0202 	orr.w	r2, r3, #2
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	f043 0201 	orr.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2221      	movs	r2, #33	; 0x21
 8004628:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2204      	movs	r2, #4
 800462e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0a5      	b.n	800478a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d01a      	beq.n	800467c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004646:	f7ff fc3d 	bl	8003ec4 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <HAL_DMA2D_PollForTransfer+0x9c>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10f      	bne.n	800467c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2203      	movs	r2, #3
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e086      	b.n	800478a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ac      	beq.n	80045e4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d061      	beq.n	8004770 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80046ac:	f7ff fc0a 	bl	8003ec4 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80046b2:	e056      	b.n	8004762 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d02e      	beq.n	8004724 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	f043 0204 	orr.w	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	f043 0202 	orr.w	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	f043 0201 	orr.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2229      	movs	r2, #41	; 0x29
 800470e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2204      	movs	r2, #4
 8004714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e032      	b.n	800478a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d01a      	beq.n	8004762 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800472c:	f7ff fbca 	bl	8003ec4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <HAL_DMA2D_PollForTransfer+0x182>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2203      	movs	r2, #3
 8004752:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e013      	b.n	800478a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0a1      	beq.n	80046b4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2212      	movs	r2, #18
 8004776:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA2D_ConfigLayer+0x20>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e079      	b.n	80048a8 <HAL_DMA2D_ConfigLayer+0x114>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	3318      	adds	r3, #24
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80047de:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <HAL_DMA2D_ConfigLayer+0x120>)
 80047e0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b0a      	cmp	r3, #10
 80047e8:	d003      	beq.n	80047f2 <HAL_DMA2D_ConfigLayer+0x5e>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b09      	cmp	r3, #9
 80047f0:	d107      	bne.n	8004802 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e005      	b.n	800480e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d120      	bne.n	8004856 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	43db      	mvns	r3, r3
 800481e:	ea02 0103 	and.w	r1, r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	430a      	orrs	r2, r1
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b0a      	cmp	r3, #10
 800483c:	d003      	beq.n	8004846 <HAL_DMA2D_ConfigLayer+0xb2>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b09      	cmp	r3, #9
 8004844:	d127      	bne.n	8004896 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004852:	629a      	str	r2, [r3, #40]	; 0x28
 8004854:	e01f      	b.n	8004896 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	43db      	mvns	r3, r3
 8004860:	ea02 0103 	and.w	r1, r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	430a      	orrs	r2, r1
 800486c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b0a      	cmp	r3, #10
 800487e:	d003      	beq.n	8004888 <HAL_DMA2D_ConfigLayer+0xf4>
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b09      	cmp	r3, #9
 8004886:	d106      	bne.n	8004896 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004894:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	ff03000f 	.word	0xff03000f

080048b8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b08b      	sub	sp, #44	; 0x2c
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	041a      	lsls	r2, r3, #16
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048f0:	d174      	bne.n	80049dc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004900:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004908:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	431a      	orrs	r2, r3
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	4313      	orrs	r3, r2
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
 8004928:	e053      	b.n	80049d2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d106      	bne.n	8004940 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	4313      	orrs	r3, r2
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	e048      	b.n	80049d2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d111      	bne.n	800496c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	0cdb      	lsrs	r3, r3, #19
 800494c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	0a9b      	lsrs	r3, r3, #10
 8004952:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	08db      	lsrs	r3, r3, #3
 8004958:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	02db      	lsls	r3, r3, #11
 8004962:	4313      	orrs	r3, r2
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
 800496a:	e032      	b.n	80049d2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d117      	bne.n	80049a4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	0fdb      	lsrs	r3, r3, #31
 8004978:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	0cdb      	lsrs	r3, r3, #19
 800497e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	0adb      	lsrs	r3, r3, #11
 8004984:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	029b      	lsls	r3, r3, #10
 8004994:	431a      	orrs	r2, r3
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	03db      	lsls	r3, r3, #15
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
 80049a2:	e016      	b.n	80049d2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	0f1b      	lsrs	r3, r3, #28
 80049a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	0d1b      	lsrs	r3, r3, #20
 80049ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	0b1b      	lsrs	r3, r3, #12
 80049b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	011a      	lsls	r2, r3, #4
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	431a      	orrs	r2, r3
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	031b      	lsls	r3, r3, #12
 80049ca:	4313      	orrs	r3, r2
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80049da:	e003      	b.n	80049e4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	60da      	str	r2, [r3, #12]
}
 80049e4:	bf00      	nop
 80049e6:	372c      	adds	r7, #44	; 0x2c
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	; 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	e177      	b.n	8004cfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	f040 8166 	bne.w	8004cf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d00b      	beq.n	8004a4a <HAL_GPIO_Init+0x5a>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d007      	beq.n	8004a4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a3e:	2b11      	cmp	r3, #17
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b12      	cmp	r3, #18
 8004a48:	d130      	bne.n	8004aac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	2203      	movs	r2, #3
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a80:	2201      	movs	r2, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 0201 	and.w	r2, r3, #1
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0xfc>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b12      	cmp	r3, #18
 8004aea:	d123      	bne.n	8004b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	08da      	lsrs	r2, r3, #3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3208      	adds	r2, #8
 8004af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	220f      	movs	r2, #15
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	08da      	lsrs	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3208      	adds	r2, #8
 8004b2e:	69b9      	ldr	r1, [r7, #24]
 8004b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2203      	movs	r2, #3
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0203 	and.w	r2, r3, #3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80c0 	beq.w	8004cf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	4b66      	ldr	r3, [pc, #408]	; (8004d14 <HAL_GPIO_Init+0x324>)
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	4a65      	ldr	r2, [pc, #404]	; (8004d14 <HAL_GPIO_Init+0x324>)
 8004b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b84:	6453      	str	r3, [r2, #68]	; 0x44
 8004b86:	4b63      	ldr	r3, [pc, #396]	; (8004d14 <HAL_GPIO_Init+0x324>)
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b92:	4a61      	ldr	r2, [pc, #388]	; (8004d18 <HAL_GPIO_Init+0x328>)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	3302      	adds	r3, #2
 8004b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	220f      	movs	r2, #15
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a58      	ldr	r2, [pc, #352]	; (8004d1c <HAL_GPIO_Init+0x32c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d037      	beq.n	8004c2e <HAL_GPIO_Init+0x23e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a57      	ldr	r2, [pc, #348]	; (8004d20 <HAL_GPIO_Init+0x330>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d031      	beq.n	8004c2a <HAL_GPIO_Init+0x23a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a56      	ldr	r2, [pc, #344]	; (8004d24 <HAL_GPIO_Init+0x334>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02b      	beq.n	8004c26 <HAL_GPIO_Init+0x236>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a55      	ldr	r2, [pc, #340]	; (8004d28 <HAL_GPIO_Init+0x338>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d025      	beq.n	8004c22 <HAL_GPIO_Init+0x232>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a54      	ldr	r2, [pc, #336]	; (8004d2c <HAL_GPIO_Init+0x33c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01f      	beq.n	8004c1e <HAL_GPIO_Init+0x22e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a53      	ldr	r2, [pc, #332]	; (8004d30 <HAL_GPIO_Init+0x340>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d019      	beq.n	8004c1a <HAL_GPIO_Init+0x22a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a52      	ldr	r2, [pc, #328]	; (8004d34 <HAL_GPIO_Init+0x344>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_GPIO_Init+0x226>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a51      	ldr	r2, [pc, #324]	; (8004d38 <HAL_GPIO_Init+0x348>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00d      	beq.n	8004c12 <HAL_GPIO_Init+0x222>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a50      	ldr	r2, [pc, #320]	; (8004d3c <HAL_GPIO_Init+0x34c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d007      	beq.n	8004c0e <HAL_GPIO_Init+0x21e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a4f      	ldr	r2, [pc, #316]	; (8004d40 <HAL_GPIO_Init+0x350>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <HAL_GPIO_Init+0x21a>
 8004c06:	2309      	movs	r3, #9
 8004c08:	e012      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	e010      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	e00e      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c12:	2307      	movs	r3, #7
 8004c14:	e00c      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c16:	2306      	movs	r3, #6
 8004c18:	e00a      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c1a:	2305      	movs	r3, #5
 8004c1c:	e008      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c1e:	2304      	movs	r3, #4
 8004c20:	e006      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c22:	2303      	movs	r3, #3
 8004c24:	e004      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e002      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <HAL_GPIO_Init+0x240>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	f002 0203 	and.w	r2, r2, #3
 8004c36:	0092      	lsls	r2, r2, #2
 8004c38:	4093      	lsls	r3, r2
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c40:	4935      	ldr	r1, [pc, #212]	; (8004d18 <HAL_GPIO_Init+0x328>)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	3302      	adds	r3, #2
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c4e:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <HAL_GPIO_Init+0x354>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c72:	4a34      	ldr	r2, [pc, #208]	; (8004d44 <HAL_GPIO_Init+0x354>)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c78:	4b32      	ldr	r3, [pc, #200]	; (8004d44 <HAL_GPIO_Init+0x354>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c9c:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <HAL_GPIO_Init+0x354>)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ca2:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <HAL_GPIO_Init+0x354>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cc6:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <HAL_GPIO_Init+0x354>)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ccc:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <HAL_GPIO_Init+0x354>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf0:	4a14      	ldr	r2, [pc, #80]	; (8004d44 <HAL_GPIO_Init+0x354>)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	f67f ae84 	bls.w	8004a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	3724      	adds	r7, #36	; 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40013800 	.word	0x40013800
 8004d1c:	40020000 	.word	0x40020000
 8004d20:	40020400 	.word	0x40020400
 8004d24:	40020800 	.word	0x40020800
 8004d28:	40020c00 	.word	0x40020c00
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40021400 	.word	0x40021400
 8004d34:	40021800 	.word	0x40021800
 8004d38:	40021c00 	.word	0x40021c00
 8004d3c:	40022000 	.word	0x40022000
 8004d40:	40022400 	.word	0x40022400
 8004d44:	40013c00 	.word	0x40013c00

08004d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
 8004d54:	4613      	mov	r3, r2
 8004d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d58:	787b      	ldrb	r3, [r7, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d5e:	887a      	ldrh	r2, [r7, #2]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d64:	e003      	b.n	8004d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d66:	887b      	ldrh	r3, [r7, #2]
 8004d68:	041a      	lsls	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	619a      	str	r2, [r3, #24]
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d104      	bne.n	8004d9e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d94:	887b      	ldrh	r3, [r7, #2]
 8004d96:	041a      	lsls	r2, r3, #16
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d9c:	e002      	b.n	8004da4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d9e:	887a      	ldrh	r2, [r7, #2]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	619a      	str	r2, [r3, #24]
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e12b      	b.n	800501a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f95d 	bl	8005096 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	; 0x24
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e14:	f001 fef8 	bl	8006c08 <HAL_RCC_GetPCLK1Freq>
 8004e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4a81      	ldr	r2, [pc, #516]	; (8005024 <HAL_I2C_Init+0x274>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d807      	bhi.n	8004e34 <HAL_I2C_Init+0x84>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a80      	ldr	r2, [pc, #512]	; (8005028 <HAL_I2C_Init+0x278>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	bf94      	ite	ls
 8004e2c:	2301      	movls	r3, #1
 8004e2e:	2300      	movhi	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e006      	b.n	8004e42 <HAL_I2C_Init+0x92>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a7d      	ldr	r2, [pc, #500]	; (800502c <HAL_I2C_Init+0x27c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	bf94      	ite	ls
 8004e3c:	2301      	movls	r3, #1
 8004e3e:	2300      	movhi	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0e7      	b.n	800501a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a78      	ldr	r2, [pc, #480]	; (8005030 <HAL_I2C_Init+0x280>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	0c9b      	lsrs	r3, r3, #18
 8004e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4a6a      	ldr	r2, [pc, #424]	; (8005024 <HAL_I2C_Init+0x274>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d802      	bhi.n	8004e84 <HAL_I2C_Init+0xd4>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3301      	adds	r3, #1
 8004e82:	e009      	b.n	8004e98 <HAL_I2C_Init+0xe8>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	4a69      	ldr	r2, [pc, #420]	; (8005034 <HAL_I2C_Init+0x284>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	3301      	adds	r3, #1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	495c      	ldr	r1, [pc, #368]	; (8005024 <HAL_I2C_Init+0x274>)
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	d819      	bhi.n	8004eec <HAL_I2C_Init+0x13c>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1e59      	subs	r1, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ec6:	1c59      	adds	r1, r3, #1
 8004ec8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ecc:	400b      	ands	r3, r1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_I2C_Init+0x138>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1e59      	subs	r1, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee6:	e051      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	e04f      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d111      	bne.n	8004f18 <HAL_I2C_Init+0x168>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1e58      	subs	r0, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	440b      	add	r3, r1
 8004f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f06:	3301      	adds	r3, #1
 8004f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	e012      	b.n	8004f3e <HAL_I2C_Init+0x18e>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1e58      	subs	r0, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	0099      	lsls	r1, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Init+0x196>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e022      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10e      	bne.n	8004f6c <HAL_I2C_Init+0x1bc>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1e58      	subs	r0, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	440b      	add	r3, r1
 8004f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6a:	e00f      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1e58      	subs	r0, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	0099      	lsls	r1, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	6809      	ldr	r1, [r1, #0]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6911      	ldr	r1, [r2, #16]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68d2      	ldr	r2, [r2, #12]
 8004fc6:	4311      	orrs	r1, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	000186a0 	.word	0x000186a0
 8005028:	001e847f 	.word	0x001e847f
 800502c:	003d08ff 	.word	0x003d08ff
 8005030:	431bde83 	.word	0x431bde83
 8005034:	10624dd3 	.word	0x10624dd3

08005038 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e021      	b.n	800508e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2224      	movs	r2, #36	; 0x24
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f821 	bl	80050aa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
	...

080050c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	817b      	strh	r3, [r7, #10]
 80050d2:	460b      	mov	r3, r1
 80050d4:	813b      	strh	r3, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050da:	f7fe fef3 	bl	8003ec4 <HAL_GetTick>
 80050de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	f040 80d9 	bne.w	80052a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2319      	movs	r3, #25
 80050f4:	2201      	movs	r2, #1
 80050f6:	496d      	ldr	r1, [pc, #436]	; (80052ac <HAL_I2C_Mem_Write+0x1ec>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fc89 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
 8005106:	e0cc      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Mem_Write+0x56>
 8005112:	2302      	movs	r3, #2
 8005114:	e0c5      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d007      	beq.n	800513c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800514a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2221      	movs	r2, #33	; 0x21
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2240      	movs	r2, #64	; 0x40
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800516c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a4d      	ldr	r2, [pc, #308]	; (80052b0 <HAL_I2C_Mem_Write+0x1f0>)
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800517e:	88f8      	ldrh	r0, [r7, #6]
 8005180:	893a      	ldrh	r2, [r7, #8]
 8005182:	8979      	ldrh	r1, [r7, #10]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4603      	mov	r3, r0
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fac4 	bl	800571c <I2C_RequestMemoryWrite>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d052      	beq.n	8005240 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e081      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fd0a 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d107      	bne.n	80051c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06b      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	781a      	ldrb	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b04      	cmp	r3, #4
 8005206:	d11b      	bne.n	8005240 <HAL_I2C_Mem_Write+0x180>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d017      	beq.n	8005240 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1aa      	bne.n	800519e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fcf6 	bl	8005c3e <I2C_WaitOnBTFFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2b04      	cmp	r3, #4
 800525e:	d107      	bne.n	8005270 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e016      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	e000      	b.n	80052a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
  }
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	00100002 	.word	0x00100002
 80052b0:	ffff0000 	.word	0xffff0000

080052b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08c      	sub	sp, #48	; 0x30
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	817b      	strh	r3, [r7, #10]
 80052c6:	460b      	mov	r3, r1
 80052c8:	813b      	strh	r3, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052ce:	f7fe fdf9 	bl	8003ec4 <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b20      	cmp	r3, #32
 80052de:	f040 8208 	bne.w	80056f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	2319      	movs	r3, #25
 80052e8:	2201      	movs	r2, #1
 80052ea:	497b      	ldr	r1, [pc, #492]	; (80054d8 <HAL_I2C_Mem_Read+0x224>)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fb8f 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
 80052fa:	e1fb      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_I2C_Mem_Read+0x56>
 8005306:	2302      	movs	r3, #2
 8005308:	e1f4      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d007      	beq.n	8005330 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2222      	movs	r2, #34	; 0x22
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2240      	movs	r2, #64	; 0x40
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005360:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a5b      	ldr	r2, [pc, #364]	; (80054dc <HAL_I2C_Mem_Read+0x228>)
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005372:	88f8      	ldrh	r0, [r7, #6]
 8005374:	893a      	ldrh	r2, [r7, #8]
 8005376:	8979      	ldrh	r1, [r7, #10]
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	4603      	mov	r3, r0
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fa5e 	bl	8005844 <I2C_RequestMemoryRead>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e1b0      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d113      	bne.n	80053c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800539a:	2300      	movs	r3, #0
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	623b      	str	r3, [r7, #32]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	e184      	b.n	80056cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d11b      	bne.n	8005402 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e164      	b.n	80056cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005406:	2b02      	cmp	r3, #2
 8005408:	d11b      	bne.n	8005442 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005418:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542a:	2300      	movs	r3, #0
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	e144      	b.n	80056cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005458:	e138      	b.n	80056cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545e:	2b03      	cmp	r3, #3
 8005460:	f200 80f1 	bhi.w	8005646 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	2b01      	cmp	r3, #1
 800546a:	d123      	bne.n	80054b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fc25 	bl	8005cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e139      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054b2:	e10b      	b.n	80056cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d14e      	bne.n	800555a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	2200      	movs	r2, #0
 80054c4:	4906      	ldr	r1, [pc, #24]	; (80054e0 <HAL_I2C_Mem_Read+0x22c>)
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 faa2 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e10e      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
 80054d6:	bf00      	nop
 80054d8:	00100002 	.word	0x00100002
 80054dc:	ffff0000 	.word	0xffff0000
 80054e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005558:	e0b8      	b.n	80056cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	2200      	movs	r2, #0
 8005562:	4966      	ldr	r1, [pc, #408]	; (80056fc <HAL_I2C_Mem_Read+0x448>)
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fa53 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0bf      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2200      	movs	r2, #0
 80055be:	494f      	ldr	r1, [pc, #316]	; (80056fc <HAL_I2C_Mem_Read+0x448>)
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fa25 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e091      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005644:	e042      	b.n	80056cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005648:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fb38 	bl	8005cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e04c      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b04      	cmp	r3, #4
 8005698:	d118      	bne.n	80056cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f47f aec2 	bne.w	800545a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
  }
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3728      	adds	r7, #40	; 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	00010004 	.word	0x00010004

08005700 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570e:	b2db      	uxtb	r3, r3
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	4608      	mov	r0, r1
 8005726:	4611      	mov	r1, r2
 8005728:	461a      	mov	r2, r3
 800572a:	4603      	mov	r3, r0
 800572c:	817b      	strh	r3, [r7, #10]
 800572e:	460b      	mov	r3, r1
 8005730:	813b      	strh	r3, [r7, #8]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005744:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	2200      	movs	r2, #0
 800574e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f95c 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e05f      	b.n	8005838 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005778:	897b      	ldrh	r3, [r7, #10]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005786:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	492c      	ldr	r1, [pc, #176]	; (8005840 <I2C_RequestMemoryWrite+0x124>)
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f995 	bl	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e04c      	b.n	8005838 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b6:	6a39      	ldr	r1, [r7, #32]
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f9ff 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00d      	beq.n	80057e0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d107      	bne.n	80057dc <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e02b      	b.n	8005838 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d105      	bne.n	80057f2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057e6:	893b      	ldrh	r3, [r7, #8]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	611a      	str	r2, [r3, #16]
 80057f0:	e021      	b.n	8005836 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057f2:	893b      	ldrh	r3, [r7, #8]
 80057f4:	0a1b      	lsrs	r3, r3, #8
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005802:	6a39      	ldr	r1, [r7, #32]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f9d9 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00d      	beq.n	800582c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	2b04      	cmp	r3, #4
 8005816:	d107      	bne.n	8005828 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005826:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e005      	b.n	8005838 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800582c:	893b      	ldrh	r3, [r7, #8]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	00010002 	.word	0x00010002

08005844 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	4603      	mov	r3, r0
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	460b      	mov	r3, r1
 8005858:	813b      	strh	r3, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800586c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800587c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	2200      	movs	r2, #0
 8005886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f8c0 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e0a9      	b.n	8005a04 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058b0:	897b      	ldrh	r3, [r7, #10]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	6a3a      	ldr	r2, [r7, #32]
 80058c4:	4951      	ldr	r1, [pc, #324]	; (8005a0c <I2C_RequestMemoryRead+0x1c8>)
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f8f9 	bl	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e096      	b.n	8005a04 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ee:	6a39      	ldr	r1, [r7, #32]
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f963 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00d      	beq.n	8005918 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	2b04      	cmp	r3, #4
 8005902:	d107      	bne.n	8005914 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005912:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e075      	b.n	8005a04 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d105      	bne.n	800592a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800591e:	893b      	ldrh	r3, [r7, #8]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	611a      	str	r2, [r3, #16]
 8005928:	e021      	b.n	800596e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800592a:	893b      	ldrh	r3, [r7, #8]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	b29b      	uxth	r3, r3
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593a:	6a39      	ldr	r1, [r7, #32]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f93d 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00d      	beq.n	8005964 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b04      	cmp	r3, #4
 800594e:	d107      	bne.n	8005960 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e04f      	b.n	8005a04 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005964:	893b      	ldrh	r3, [r7, #8]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800596e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005970:	6a39      	ldr	r1, [r7, #32]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f922 	bl	8005bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00d      	beq.n	800599a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b04      	cmp	r3, #4
 8005984:	d107      	bne.n	8005996 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005994:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e034      	b.n	8005a04 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f82a 	bl	8005a10 <I2C_WaitOnFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e013      	b.n	8005a04 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059dc:	897b      	ldrh	r3, [r7, #10]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	4906      	ldr	r1, [pc, #24]	; (8005a0c <I2C_RequestMemoryRead+0x1c8>)
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f863 	bl	8005abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	00010002 	.word	0x00010002

08005a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a20:	e025      	b.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d021      	beq.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fe fa4b 	bl	8003ec4 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e023      	b.n	8005ab6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d10d      	bne.n	8005a94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	43da      	mvns	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf0c      	ite	eq
 8005a8a:	2301      	moveq	r3, #1
 8005a8c:	2300      	movne	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	e00c      	b.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	43da      	mvns	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2301      	moveq	r3, #1
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d0b6      	beq.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005acc:	e051      	b.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005adc:	d123      	bne.n	8005b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005af6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	f043 0204 	orr.w	r2, r3, #4
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e046      	b.n	8005bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d021      	beq.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fe f9c9 	bl	8003ec4 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d116      	bne.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e020      	b.n	8005bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10c      	bne.n	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	43da      	mvns	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	bf14      	ite	ne
 8005b8e:	2301      	movne	r3, #1
 8005b90:	2300      	moveq	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	e00b      	b.n	8005bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	43da      	mvns	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d18d      	bne.n	8005ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bc8:	e02d      	b.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f8ce 	bl	8005d6c <I2C_IsAcknowledgeFailed>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e02d      	b.n	8005c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d021      	beq.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be2:	f7fe f96f 	bl	8003ec4 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d116      	bne.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f043 0220 	orr.w	r2, r3, #32
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e007      	b.n	8005c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d1ca      	bne.n	8005bca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c4a:	e02d      	b.n	8005ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f88d 	bl	8005d6c <I2C_IsAcknowledgeFailed>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e02d      	b.n	8005cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d021      	beq.n	8005ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c64:	f7fe f92e 	bl	8003ec4 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d302      	bcc.n	8005c7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d116      	bne.n	8005ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e007      	b.n	8005cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d1ca      	bne.n	8005c4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ccc:	e042      	b.n	8005d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d119      	bne.n	8005d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0210 	mvn.w	r2, #16
 8005ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e029      	b.n	8005d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d10:	f7fe f8d8 	bl	8003ec4 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d302      	bcc.n	8005d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d116      	bne.n	8005d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e007      	b.n	8005d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d1b5      	bne.n	8005cce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d82:	d11b      	bne.n	8005dbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f043 0204 	orr.w	r2, r3, #4
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e0bf      	b.n	8005f5e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8ba 	bl	8005f6c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005e0e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e24:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6899      	ldr	r1, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b4a      	ldr	r3, [pc, #296]	; (8005f68 <HAL_LTDC_Init+0x19c>)
 8005e40:	400b      	ands	r3, r1
 8005e42:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6899      	ldr	r1, [r3, #8]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68d9      	ldr	r1, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b3e      	ldr	r3, [pc, #248]	; (8005f68 <HAL_LTDC_Init+0x19c>)
 8005e6e:	400b      	ands	r3, r1
 8005e70:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68d9      	ldr	r1, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6919      	ldr	r1, [r3, #16]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b33      	ldr	r3, [pc, #204]	; (8005f68 <HAL_LTDC_Init+0x19c>)
 8005e9c:	400b      	ands	r3, r1
 8005e9e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	041b      	lsls	r3, r3, #16
 8005ea6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6919      	ldr	r1, [r3, #16]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6959      	ldr	r1, [r3, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b27      	ldr	r3, [pc, #156]	; (8005f68 <HAL_LTDC_Init+0x19c>)
 8005eca:	400b      	ands	r3, r1
 8005ecc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6959      	ldr	r1, [r3, #20]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005efc:	041b      	lsls	r3, r3, #16
 8005efe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0206 	orr.w	r2, r2, #6
 8005f3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	f000f800 	.word	0xf000f800

08005f6c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f80:	b5b0      	push	{r4, r5, r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_LTDC_ConfigLayer+0x1a>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e02c      	b.n	8005ff4 <HAL_LTDC_ConfigLayer+0x74>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2134      	movs	r1, #52	; 0x34
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f83b 	bl	8006050 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bdb0      	pop	{r4, r5, r7, pc}

08005ffc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_LTDC_EnableDither+0x16>
 800600e:	2302      	movs	r3, #2
 8006010:	e016      	b.n	8006040 <HAL_LTDC_EnableDither+0x44>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <HAL_LTDC_EnableDither+0x50>)
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	4a09      	ldr	r2, [pc, #36]	; (800604c <HAL_LTDC_EnableDither+0x50>)
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	40016800 	.word	0x40016800

08006050 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006050:	b480      	push	{r7}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800606c:	4413      	add	r3, r2
 800606e:	041b      	lsls	r3, r3, #16
 8006070:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	01db      	lsls	r3, r3, #7
 800607c:	4413      	add	r3, r2
 800607e:	3384      	adds	r3, #132	; 0x84
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	4611      	mov	r1, r2
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	01d2      	lsls	r2, r2, #7
 800608c:	440a      	add	r2, r1
 800608e:	3284      	adds	r2, #132	; 0x84
 8006090:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006094:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	0c1b      	lsrs	r3, r3, #16
 80060a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a6:	4413      	add	r3, r2
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4619      	mov	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	01db      	lsls	r3, r3, #7
 80060b4:	440b      	add	r3, r1
 80060b6:	3384      	adds	r3, #132	; 0x84
 80060b8:	4619      	mov	r1, r3
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ce:	4413      	add	r3, r2
 80060d0:	041b      	lsls	r3, r3, #16
 80060d2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	01db      	lsls	r3, r3, #7
 80060de:	4413      	add	r3, r2
 80060e0:	3384      	adds	r3, #132	; 0x84
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	4611      	mov	r1, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	01d2      	lsls	r2, r2, #7
 80060ee:	440a      	add	r2, r1
 80060f0:	3284      	adds	r2, #132	; 0x84
 80060f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060f6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006106:	4413      	add	r3, r2
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	440b      	add	r3, r1
 8006116:	3384      	adds	r3, #132	; 0x84
 8006118:	4619      	mov	r1, r3
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4313      	orrs	r3, r2
 800611e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	01db      	lsls	r3, r3, #7
 800612a:	4413      	add	r3, r2
 800612c:	3384      	adds	r3, #132	; 0x84
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	4611      	mov	r1, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	01d2      	lsls	r2, r2, #7
 800613a:	440a      	add	r2, r1
 800613c:	3284      	adds	r2, #132	; 0x84
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	01db      	lsls	r3, r3, #7
 800614e:	4413      	add	r3, r2
 8006150:	3384      	adds	r3, #132	; 0x84
 8006152:	461a      	mov	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	061b      	lsls	r3, r3, #24
 8006174:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	4413      	add	r3, r2
 8006182:	3384      	adds	r3, #132	; 0x84
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	01db      	lsls	r3, r3, #7
 8006190:	4413      	add	r3, r2
 8006192:	3384      	adds	r3, #132	; 0x84
 8006194:	461a      	mov	r2, r3
 8006196:	2300      	movs	r3, #0
 8006198:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061a0:	461a      	mov	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4619      	mov	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	01db      	lsls	r3, r3, #7
 80061b4:	440b      	add	r3, r1
 80061b6:	3384      	adds	r3, #132	; 0x84
 80061b8:	4619      	mov	r1, r3
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	01db      	lsls	r3, r3, #7
 80061ca:	4413      	add	r3, r2
 80061cc:	3384      	adds	r3, #132	; 0x84
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	4611      	mov	r1, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	01d2      	lsls	r2, r2, #7
 80061da:	440a      	add	r2, r1
 80061dc:	3284      	adds	r2, #132	; 0x84
 80061de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	01db      	lsls	r3, r3, #7
 80061ee:	4413      	add	r3, r2
 80061f0:	3384      	adds	r3, #132	; 0x84
 80061f2:	461a      	mov	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	01db      	lsls	r3, r3, #7
 8006204:	4413      	add	r3, r2
 8006206:	3384      	adds	r3, #132	; 0x84
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	4611      	mov	r1, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	01d2      	lsls	r2, r2, #7
 8006214:	440a      	add	r2, r1
 8006216:	3284      	adds	r2, #132	; 0x84
 8006218:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	69da      	ldr	r2, [r3, #28]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	6809      	ldr	r1, [r1, #0]
 800622e:	4608      	mov	r0, r1
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	01c9      	lsls	r1, r1, #7
 8006234:	4401      	add	r1, r0
 8006236:	3184      	adds	r1, #132	; 0x84
 8006238:	4313      	orrs	r3, r2
 800623a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	01db      	lsls	r3, r3, #7
 8006246:	4413      	add	r3, r2
 8006248:	3384      	adds	r3, #132	; 0x84
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	01db      	lsls	r3, r3, #7
 8006256:	4413      	add	r3, r2
 8006258:	3384      	adds	r3, #132	; 0x84
 800625a:	461a      	mov	r2, r3
 800625c:	2300      	movs	r3, #0
 800625e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	01db      	lsls	r3, r3, #7
 800626a:	4413      	add	r3, r2
 800626c:	3384      	adds	r3, #132	; 0x84
 800626e:	461a      	mov	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800627e:	2304      	movs	r3, #4
 8006280:	61fb      	str	r3, [r7, #28]
 8006282:	e01b      	b.n	80062bc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d102      	bne.n	8006292 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800628c:	2303      	movs	r3, #3
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e014      	b.n	80062bc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b04      	cmp	r3, #4
 8006298:	d00b      	beq.n	80062b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d007      	beq.n	80062b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d003      	beq.n	80062b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80062ae:	2b07      	cmp	r3, #7
 80062b0:	d102      	bne.n	80062b8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80062b2:	2302      	movs	r3, #2
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	e001      	b.n	80062bc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80062b8:	2301      	movs	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	01db      	lsls	r3, r3, #7
 80062c6:	4413      	add	r3, r2
 80062c8:	3384      	adds	r3, #132	; 0x84
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	4611      	mov	r1, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	01d2      	lsls	r2, r2, #7
 80062d6:	440a      	add	r2, r1
 80062d8:	3284      	adds	r2, #132	; 0x84
 80062da:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80062de:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	041a      	lsls	r2, r3, #16
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	1acb      	subs	r3, r1, r3
 80062f6:	69f9      	ldr	r1, [r7, #28]
 80062f8:	fb01 f303 	mul.w	r3, r1, r3
 80062fc:	3303      	adds	r3, #3
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	6809      	ldr	r1, [r1, #0]
 8006302:	4608      	mov	r0, r1
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	01c9      	lsls	r1, r1, #7
 8006308:	4401      	add	r1, r0
 800630a:	3184      	adds	r1, #132	; 0x84
 800630c:	4313      	orrs	r3, r2
 800630e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	01db      	lsls	r3, r3, #7
 800631a:	4413      	add	r3, r2
 800631c:	3384      	adds	r3, #132	; 0x84
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	4611      	mov	r1, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	01d2      	lsls	r2, r2, #7
 800632a:	440a      	add	r2, r1
 800632c:	3284      	adds	r2, #132	; 0x84
 800632e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006332:	f023 0307 	bic.w	r3, r3, #7
 8006336:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	01db      	lsls	r3, r3, #7
 8006342:	4413      	add	r3, r2
 8006344:	3384      	adds	r3, #132	; 0x84
 8006346:	461a      	mov	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	01db      	lsls	r3, r3, #7
 8006358:	4413      	add	r3, r2
 800635a:	3384      	adds	r3, #132	; 0x84
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	4611      	mov	r1, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	01d2      	lsls	r2, r2, #7
 8006368:	440a      	add	r2, r1
 800636a:	3284      	adds	r2, #132	; 0x84
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	6013      	str	r3, [r2, #0]
}
 8006372:	bf00      	nop
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e25b      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d075      	beq.n	800648a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800639e:	4ba3      	ldr	r3, [pc, #652]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 030c 	and.w	r3, r3, #12
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d00c      	beq.n	80063c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063aa:	4ba0      	ldr	r3, [pc, #640]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d112      	bne.n	80063dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063b6:	4b9d      	ldr	r3, [pc, #628]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063c2:	d10b      	bne.n	80063dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c4:	4b99      	ldr	r3, [pc, #612]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d05b      	beq.n	8006488 <HAL_RCC_OscConfig+0x108>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d157      	bne.n	8006488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e236      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e4:	d106      	bne.n	80063f4 <HAL_RCC_OscConfig+0x74>
 80063e6:	4b91      	ldr	r3, [pc, #580]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a90      	ldr	r2, [pc, #576]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e01d      	b.n	8006430 <HAL_RCC_OscConfig+0xb0>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063fc:	d10c      	bne.n	8006418 <HAL_RCC_OscConfig+0x98>
 80063fe:	4b8b      	ldr	r3, [pc, #556]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a8a      	ldr	r2, [pc, #552]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4b88      	ldr	r3, [pc, #544]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a87      	ldr	r2, [pc, #540]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e00b      	b.n	8006430 <HAL_RCC_OscConfig+0xb0>
 8006418:	4b84      	ldr	r3, [pc, #528]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a83      	ldr	r2, [pc, #524]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 800641e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	4b81      	ldr	r3, [pc, #516]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a80      	ldr	r2, [pc, #512]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 800642a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800642e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d013      	beq.n	8006460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006438:	f7fd fd44 	bl	8003ec4 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006440:	f7fd fd40 	bl	8003ec4 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e1fb      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006452:	4b76      	ldr	r3, [pc, #472]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0f0      	beq.n	8006440 <HAL_RCC_OscConfig+0xc0>
 800645e:	e014      	b.n	800648a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006460:	f7fd fd30 	bl	8003ec4 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006468:	f7fd fd2c 	bl	8003ec4 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b64      	cmp	r3, #100	; 0x64
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e1e7      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800647a:	4b6c      	ldr	r3, [pc, #432]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1f0      	bne.n	8006468 <HAL_RCC_OscConfig+0xe8>
 8006486:	e000      	b.n	800648a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d063      	beq.n	800655e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006496:	4b65      	ldr	r3, [pc, #404]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064a2:	4b62      	ldr	r3, [pc, #392]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d11c      	bne.n	80064e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ae:	4b5f      	ldr	r3, [pc, #380]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d116      	bne.n	80064e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ba:	4b5c      	ldr	r3, [pc, #368]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_RCC_OscConfig+0x152>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d001      	beq.n	80064d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e1bb      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d2:	4b56      	ldr	r3, [pc, #344]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4952      	ldr	r1, [pc, #328]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064e6:	e03a      	b.n	800655e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d020      	beq.n	8006532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f0:	4b4f      	ldr	r3, [pc, #316]	; (8006630 <HAL_RCC_OscConfig+0x2b0>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f6:	f7fd fce5 	bl	8003ec4 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064fe:	f7fd fce1 	bl	8003ec4 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e19c      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006510:	4b46      	ldr	r3, [pc, #280]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f0      	beq.n	80064fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651c:	4b43      	ldr	r3, [pc, #268]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4940      	ldr	r1, [pc, #256]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 800652c:	4313      	orrs	r3, r2
 800652e:	600b      	str	r3, [r1, #0]
 8006530:	e015      	b.n	800655e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006532:	4b3f      	ldr	r3, [pc, #252]	; (8006630 <HAL_RCC_OscConfig+0x2b0>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fd fcc4 	bl	8003ec4 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006540:	f7fd fcc0 	bl	8003ec4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e17b      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d030      	beq.n	80065cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d016      	beq.n	80065a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006572:	4b30      	ldr	r3, [pc, #192]	; (8006634 <HAL_RCC_OscConfig+0x2b4>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006578:	f7fd fca4 	bl	8003ec4 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006580:	f7fd fca0 	bl	8003ec4 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e15b      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006592:	4b26      	ldr	r3, [pc, #152]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 8006594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCC_OscConfig+0x200>
 800659e:	e015      	b.n	80065cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a0:	4b24      	ldr	r3, [pc, #144]	; (8006634 <HAL_RCC_OscConfig+0x2b4>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a6:	f7fd fc8d 	bl	8003ec4 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ae:	f7fd fc89 	bl	8003ec4 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e144      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80065c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1f0      	bne.n	80065ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 80a0 	beq.w	800671a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065de:	4b13      	ldr	r3, [pc, #76]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	4a0e      	ldr	r2, [pc, #56]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f8:	6413      	str	r3, [r2, #64]	; 0x40
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <HAL_RCC_OscConfig+0x2ac>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <HAL_RCC_OscConfig+0x2b8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006612:	2b00      	cmp	r3, #0
 8006614:	d121      	bne.n	800665a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <HAL_RCC_OscConfig+0x2b8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a07      	ldr	r2, [pc, #28]	; (8006638 <HAL_RCC_OscConfig+0x2b8>)
 800661c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006622:	f7fd fc4f 	bl	8003ec4 <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006628:	e011      	b.n	800664e <HAL_RCC_OscConfig+0x2ce>
 800662a:	bf00      	nop
 800662c:	40023800 	.word	0x40023800
 8006630:	42470000 	.word	0x42470000
 8006634:	42470e80 	.word	0x42470e80
 8006638:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663c:	f7fd fc42 	bl	8003ec4 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e0fd      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664e:	4b81      	ldr	r3, [pc, #516]	; (8006854 <HAL_RCC_OscConfig+0x4d4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d106      	bne.n	8006670 <HAL_RCC_OscConfig+0x2f0>
 8006662:	4b7d      	ldr	r3, [pc, #500]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 8006664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006666:	4a7c      	ldr	r2, [pc, #496]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 8006668:	f043 0301 	orr.w	r3, r3, #1
 800666c:	6713      	str	r3, [r2, #112]	; 0x70
 800666e:	e01c      	b.n	80066aa <HAL_RCC_OscConfig+0x32a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b05      	cmp	r3, #5
 8006676:	d10c      	bne.n	8006692 <HAL_RCC_OscConfig+0x312>
 8006678:	4b77      	ldr	r3, [pc, #476]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 800667a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667c:	4a76      	ldr	r2, [pc, #472]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	6713      	str	r3, [r2, #112]	; 0x70
 8006684:	4b74      	ldr	r3, [pc, #464]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 8006686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006688:	4a73      	ldr	r2, [pc, #460]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6713      	str	r3, [r2, #112]	; 0x70
 8006690:	e00b      	b.n	80066aa <HAL_RCC_OscConfig+0x32a>
 8006692:	4b71      	ldr	r3, [pc, #452]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	4a70      	ldr	r2, [pc, #448]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	6713      	str	r3, [r2, #112]	; 0x70
 800669e:	4b6e      	ldr	r3, [pc, #440]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	4a6d      	ldr	r2, [pc, #436]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 80066a4:	f023 0304 	bic.w	r3, r3, #4
 80066a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d015      	beq.n	80066de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b2:	f7fd fc07 	bl	8003ec4 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fd fc03 	bl	8003ec4 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0bc      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d0:	4b61      	ldr	r3, [pc, #388]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ee      	beq.n	80066ba <HAL_RCC_OscConfig+0x33a>
 80066dc:	e014      	b.n	8006708 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066de:	f7fd fbf1 	bl	8003ec4 <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e4:	e00a      	b.n	80066fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fd fbed 	bl	8003ec4 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e0a6      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fc:	4b56      	ldr	r3, [pc, #344]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ee      	bne.n	80066e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d105      	bne.n	800671a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800670e:	4b52      	ldr	r3, [pc, #328]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	4a51      	ldr	r2, [pc, #324]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 8006714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 8092 	beq.w	8006848 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006724:	4b4c      	ldr	r3, [pc, #304]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 030c 	and.w	r3, r3, #12
 800672c:	2b08      	cmp	r3, #8
 800672e:	d05c      	beq.n	80067ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d141      	bne.n	80067bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006738:	4b48      	ldr	r3, [pc, #288]	; (800685c <HAL_RCC_OscConfig+0x4dc>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673e:	f7fd fbc1 	bl	8003ec4 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006746:	f7fd fbbd 	bl	8003ec4 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e078      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006758:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f0      	bne.n	8006746 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	019b      	lsls	r3, r3, #6
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	3b01      	subs	r3, #1
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	061b      	lsls	r3, r3, #24
 8006788:	4933      	ldr	r1, [pc, #204]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800678e:	4b33      	ldr	r3, [pc, #204]	; (800685c <HAL_RCC_OscConfig+0x4dc>)
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fd fb96 	bl	8003ec4 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679c:	f7fd fb92 	bl	8003ec4 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e04d      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	4b2a      	ldr	r3, [pc, #168]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0f0      	beq.n	800679c <HAL_RCC_OscConfig+0x41c>
 80067ba:	e045      	b.n	8006848 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067bc:	4b27      	ldr	r3, [pc, #156]	; (800685c <HAL_RCC_OscConfig+0x4dc>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c2:	f7fd fb7f 	bl	8003ec4 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ca:	f7fd fb7b 	bl	8003ec4 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e036      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067dc:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f0      	bne.n	80067ca <HAL_RCC_OscConfig+0x44a>
 80067e8:	e02e      	b.n	8006848 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e029      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067f6:	4b18      	ldr	r3, [pc, #96]	; (8006858 <HAL_RCC_OscConfig+0x4d8>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	429a      	cmp	r2, r3
 8006808:	d11c      	bne.n	8006844 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006814:	429a      	cmp	r2, r3
 8006816:	d115      	bne.n	8006844 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800681e:	4013      	ands	r3, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006824:	4293      	cmp	r3, r2
 8006826:	d10d      	bne.n	8006844 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006832:	429a      	cmp	r2, r3
 8006834:	d106      	bne.n	8006844 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006840:	429a      	cmp	r2, r3
 8006842:	d001      	beq.n	8006848 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40007000 	.word	0x40007000
 8006858:	40023800 	.word	0x40023800
 800685c:	42470060 	.word	0x42470060

08006860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0cc      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006874:	4b68      	ldr	r3, [pc, #416]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d90c      	bls.n	800689c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006882:	4b65      	ldr	r3, [pc, #404]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800688a:	4b63      	ldr	r3, [pc, #396]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d001      	beq.n	800689c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e0b8      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d020      	beq.n	80068ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068b4:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4a58      	ldr	r2, [pc, #352]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068cc:	4b53      	ldr	r3, [pc, #332]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4a52      	ldr	r2, [pc, #328]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d8:	4b50      	ldr	r3, [pc, #320]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	494d      	ldr	r1, [pc, #308]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d044      	beq.n	8006980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d107      	bne.n	800690e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068fe:	4b47      	ldr	r3, [pc, #284]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d119      	bne.n	800693e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e07f      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d003      	beq.n	800691e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800691a:	2b03      	cmp	r3, #3
 800691c:	d107      	bne.n	800692e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800691e:	4b3f      	ldr	r3, [pc, #252]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e06f      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800692e:	4b3b      	ldr	r3, [pc, #236]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e067      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800693e:	4b37      	ldr	r3, [pc, #220]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f023 0203 	bic.w	r2, r3, #3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	4934      	ldr	r1, [pc, #208]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	4313      	orrs	r3, r2
 800694e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006950:	f7fd fab8 	bl	8003ec4 <HAL_GetTick>
 8006954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	e00a      	b.n	800696e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006958:	f7fd fab4 	bl	8003ec4 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f241 3288 	movw	r2, #5000	; 0x1388
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e04f      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696e:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 020c 	and.w	r2, r3, #12
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	429a      	cmp	r2, r3
 800697e:	d1eb      	bne.n	8006958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d20c      	bcs.n	80069a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698e:	4b22      	ldr	r3, [pc, #136]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006996:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d001      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e032      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b4:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4916      	ldr	r1, [pc, #88]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	490e      	ldr	r1, [pc, #56]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069e6:	f000 f821 	bl	8006a2c <HAL_RCC_GetSysClockFreq>
 80069ea:	4602      	mov	r2, r0
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	490a      	ldr	r1, [pc, #40]	; (8006a20 <HAL_RCC_ClockConfig+0x1c0>)
 80069f8:	5ccb      	ldrb	r3, [r1, r3]
 80069fa:	fa22 f303 	lsr.w	r3, r2, r3
 80069fe:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a02:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <HAL_RCC_ClockConfig+0x1c8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fd fa18 	bl	8003e3c <HAL_InitTick>

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40023c00 	.word	0x40023c00
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	08008a50 	.word	0x08008a50
 8006a24:	200000fc 	.word	0x200000fc
 8006a28:	2000018c 	.word	0x2000018c

08006a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	607b      	str	r3, [r7, #4]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a44:	4b67      	ldr	r3, [pc, #412]	; (8006be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 030c 	and.w	r3, r3, #12
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d00d      	beq.n	8006a6c <HAL_RCC_GetSysClockFreq+0x40>
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	f200 80bd 	bhi.w	8006bd0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_RCC_GetSysClockFreq+0x34>
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d003      	beq.n	8006a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a5e:	e0b7      	b.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a60:	4b61      	ldr	r3, [pc, #388]	; (8006be8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a62:	60bb      	str	r3, [r7, #8]
       break;
 8006a64:	e0b7      	b.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a66:	4b61      	ldr	r3, [pc, #388]	; (8006bec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006a68:	60bb      	str	r3, [r7, #8]
      break;
 8006a6a:	e0b4      	b.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a6c:	4b5d      	ldr	r3, [pc, #372]	; (8006be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a76:	4b5b      	ldr	r3, [pc, #364]	; (8006be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d04d      	beq.n	8006b1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a82:	4b58      	ldr	r3, [pc, #352]	; (8006be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a92:	f04f 0100 	mov.w	r1, #0
 8006a96:	ea02 0800 	and.w	r8, r2, r0
 8006a9a:	ea03 0901 	and.w	r9, r3, r1
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	f04f 0200 	mov.w	r2, #0
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	014b      	lsls	r3, r1, #5
 8006aac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ab0:	0142      	lsls	r2, r0, #5
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	ebb0 0008 	subs.w	r0, r0, r8
 8006aba:	eb61 0109 	sbc.w	r1, r1, r9
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	018b      	lsls	r3, r1, #6
 8006ac8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006acc:	0182      	lsls	r2, r0, #6
 8006ace:	1a12      	subs	r2, r2, r0
 8006ad0:	eb63 0301 	sbc.w	r3, r3, r1
 8006ad4:	f04f 0000 	mov.w	r0, #0
 8006ad8:	f04f 0100 	mov.w	r1, #0
 8006adc:	00d9      	lsls	r1, r3, #3
 8006ade:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ae2:	00d0      	lsls	r0, r2, #3
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	eb12 0208 	adds.w	r2, r2, r8
 8006aec:	eb43 0309 	adc.w	r3, r3, r9
 8006af0:	f04f 0000 	mov.w	r0, #0
 8006af4:	f04f 0100 	mov.w	r1, #0
 8006af8:	0259      	lsls	r1, r3, #9
 8006afa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006afe:	0250      	lsls	r0, r2, #9
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4610      	mov	r0, r2
 8006b06:	4619      	mov	r1, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	f7f9 fbbe 	bl	8000290 <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4613      	mov	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	e04a      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b1e:	4b31      	ldr	r3, [pc, #196]	; (8006be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	099b      	lsrs	r3, r3, #6
 8006b24:	461a      	mov	r2, r3
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b2e:	f04f 0100 	mov.w	r1, #0
 8006b32:	ea02 0400 	and.w	r4, r2, r0
 8006b36:	ea03 0501 	and.w	r5, r3, r1
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	f04f 0300 	mov.w	r3, #0
 8006b46:	014b      	lsls	r3, r1, #5
 8006b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b4c:	0142      	lsls	r2, r0, #5
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	1b00      	subs	r0, r0, r4
 8006b54:	eb61 0105 	sbc.w	r1, r1, r5
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	018b      	lsls	r3, r1, #6
 8006b62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b66:	0182      	lsls	r2, r0, #6
 8006b68:	1a12      	subs	r2, r2, r0
 8006b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b6e:	f04f 0000 	mov.w	r0, #0
 8006b72:	f04f 0100 	mov.w	r1, #0
 8006b76:	00d9      	lsls	r1, r3, #3
 8006b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b7c:	00d0      	lsls	r0, r2, #3
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	1912      	adds	r2, r2, r4
 8006b84:	eb45 0303 	adc.w	r3, r5, r3
 8006b88:	f04f 0000 	mov.w	r0, #0
 8006b8c:	f04f 0100 	mov.w	r1, #0
 8006b90:	0299      	lsls	r1, r3, #10
 8006b92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b96:	0290      	lsls	r0, r2, #10
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	f7f9 fb72 	bl	8000290 <__aeabi_uldivmod>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	0c1b      	lsrs	r3, r3, #16
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	60bb      	str	r3, [r7, #8]
      break;
 8006bce:	e002      	b.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006bd2:	60bb      	str	r3, [r7, #8]
      break;
 8006bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006be2:	bf00      	nop
 8006be4:	40023800 	.word	0x40023800
 8006be8:	00f42400 	.word	0x00f42400
 8006bec:	007a1200 	.word	0x007a1200

08006bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bf4:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	200000fc 	.word	0x200000fc

08006c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c0c:	f7ff fff0 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c10:	4602      	mov	r2, r0
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	0a9b      	lsrs	r3, r3, #10
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	4903      	ldr	r1, [pc, #12]	; (8006c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c1e:	5ccb      	ldrb	r3, [r1, r3]
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	08008a60 	.word	0x08008a60

08006c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d105      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d075      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c64:	4bad      	ldr	r3, [pc, #692]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c6a:	f7fd f92b 	bl	8003ec4 <HAL_GetTick>
 8006c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c70:	e008      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c72:	f7fd f927 	bl	8003ec4 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e18b      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c84:	4ba6      	ldr	r3, [pc, #664]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f0      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d009      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	019a      	lsls	r2, r3, #6
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	071b      	lsls	r3, r3, #28
 8006ca8:	499d      	ldr	r1, [pc, #628]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01f      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cbc:	4b98      	ldr	r3, [pc, #608]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc2:	0f1b      	lsrs	r3, r3, #28
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	019a      	lsls	r2, r3, #6
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	061b      	lsls	r3, r3, #24
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	071b      	lsls	r3, r3, #28
 8006cdc:	4990      	ldr	r1, [pc, #576]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ce4:	4b8e      	ldr	r3, [pc, #568]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cea:	f023 021f 	bic.w	r2, r3, #31
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	498a      	ldr	r1, [pc, #552]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	019a      	lsls	r2, r3, #6
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	061b      	lsls	r3, r3, #24
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	071b      	lsls	r3, r3, #28
 8006d1c:	4980      	ldr	r1, [pc, #512]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d24:	4b7d      	ldr	r3, [pc, #500]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006d26:	2201      	movs	r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d2a:	f7fd f8cb 	bl	8003ec4 <HAL_GetTick>
 8006d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d30:	e008      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d32:	f7fd f8c7 	bl	8003ec4 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e12b      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d44:	4b76      	ldr	r3, [pc, #472]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0f0      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d079      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d68:	4b6e      	ldr	r3, [pc, #440]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d6e:	f7fd f8a9 	bl	8003ec4 <HAL_GetTick>
 8006d72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d74:	e008      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d76:	f7fd f8a5 	bl	8003ec4 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e109      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d88:	4b65      	ldr	r3, [pc, #404]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d94:	d0ef      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d020      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006da2:	4b5f      	ldr	r3, [pc, #380]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da8:	0f1b      	lsrs	r3, r3, #28
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	019a      	lsls	r2, r3, #6
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	061b      	lsls	r3, r3, #24
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	071b      	lsls	r3, r3, #28
 8006dc2:	4957      	ldr	r1, [pc, #348]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006dca:	4b55      	ldr	r3, [pc, #340]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	4950      	ldr	r1, [pc, #320]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01e      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006df0:	4b4b      	ldr	r3, [pc, #300]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df6:	0e1b      	lsrs	r3, r3, #24
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	019a      	lsls	r2, r3, #6
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	061b      	lsls	r3, r3, #24
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	071b      	lsls	r3, r3, #28
 8006e10:	4943      	ldr	r1, [pc, #268]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006e18:	4b41      	ldr	r3, [pc, #260]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	493e      	ldr	r1, [pc, #248]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e2e:	4b3d      	ldr	r3, [pc, #244]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e34:	f7fd f846 	bl	8003ec4 <HAL_GetTick>
 8006e38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e3c:	f7fd f842 	bl	8003ec4 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e0a6      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e4e:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5a:	d1ef      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 808d 	beq.w	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	4b2c      	ldr	r3, [pc, #176]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	4a2b      	ldr	r2, [pc, #172]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e78:	6413      	str	r3, [r2, #64]	; 0x40
 8006e7a:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e86:	4b28      	ldr	r3, [pc, #160]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a27      	ldr	r2, [pc, #156]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e92:	f7fd f817 	bl	8003ec4 <HAL_GetTick>
 8006e96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e98:	e008      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e9a:	f7fd f813 	bl	8003ec4 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e077      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006eac:	4b1e      	ldr	r3, [pc, #120]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eb8:	4b19      	ldr	r3, [pc, #100]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d039      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d032      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ed6:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ede:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ee0:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006eec:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d11e      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006efe:	f7fc ffe1 	bl	8003ec4 <HAL_GetTick>
 8006f02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f04:	e014      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f7fc ffdd 	bl	8003ec4 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d90b      	bls.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e03f      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006f1c:	42470068 	.word	0x42470068
 8006f20:	40023800 	.word	0x40023800
 8006f24:	42470070 	.word	0x42470070
 8006f28:	40007000 	.word	0x40007000
 8006f2c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0e4      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f48:	d10d      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006f4a:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	4911      	ldr	r1, [pc, #68]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	608b      	str	r3, [r1, #8]
 8006f64:	e005      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f66:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f70:	6093      	str	r3, [r2, #8]
 8006f72:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f7e:	4909      	ldr	r1, [pc, #36]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006f96:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006f98:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	424711e0 	.word	0x424711e0

08006fac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e025      	b.n	800700c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f81d 	bl	8007014 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f000 ff0f 	bl	8007e10 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	f000 ff7a 	bl	8007ef6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d101      	bne.n	8007044 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007040:	2302      	movs	r3, #2
 8007042:	e018      	b.n	8007076 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 ffcd 	bl	8007ff4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d104      	bne.n	800706c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2205      	movs	r2, #5
 8007066:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800706a:	e003      	b.n	8007074 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d101      	bne.n	8007098 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
 8007096:	e00e      	b.n	80070b6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 ffe0 	bl	800806c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e05d      	b.n	800718c <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f87d 	bl	80071e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007100:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	ea42 0103 	orr.w	r1, r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	f003 0104 	and.w	r1, r3, #4
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007160:	d104      	bne.n	800716c <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800716a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69da      	ldr	r2, [r3, #28]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800717a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e01a      	b.n	80071dc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2202      	movs	r2, #2
 80071aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f81a 	bl	80071f8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_SPI_Transmit+0x22>
 800722a:	2302      	movs	r3, #2
 800722c:	e140      	b.n	80074b0 <HAL_SPI_Transmit+0x2a4>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007236:	f7fc fe45 	bl	8003ec4 <HAL_GetTick>
 800723a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d002      	beq.n	8007252 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800724c:	2302      	movs	r3, #2
 800724e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007250:	e125      	b.n	800749e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <HAL_SPI_Transmit+0x52>
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d102      	bne.n	8007264 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007262:	e11c      	b.n	800749e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2203      	movs	r2, #3
 8007268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072aa:	d107      	bne.n	80072bc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ba:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c4:	d10f      	bne.n	80072e6 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072e4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d007      	beq.n	8007304 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730c:	d14b      	bne.n	80073a6 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_SPI_Transmit+0x110>
 8007316:	8afb      	ldrh	r3, [r7, #22]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d13e      	bne.n	800739a <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	881a      	ldrh	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	1c9a      	adds	r2, r3, #2
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007340:	e02b      	b.n	800739a <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b02      	cmp	r3, #2
 800734e:	d112      	bne.n	8007376 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	86da      	strh	r2, [r3, #54]	; 0x36
 8007374:	e011      	b.n	800739a <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007376:	f7fc fda5 	bl	8003ec4 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d803      	bhi.n	800738e <HAL_SPI_Transmit+0x182>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d102      	bne.n	8007394 <HAL_SPI_Transmit+0x188>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007398:	e081      	b.n	800749e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1ce      	bne.n	8007342 <HAL_SPI_Transmit+0x136>
 80073a4:	e04c      	b.n	8007440 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <HAL_SPI_Transmit+0x1a8>
 80073ae:	8afb      	ldrh	r3, [r7, #22]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d140      	bne.n	8007436 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	330c      	adds	r3, #12
 80073be:	7812      	ldrb	r2, [r2, #0]
 80073c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073da:	e02c      	b.n	8007436 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d113      	bne.n	8007412 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	330c      	adds	r3, #12
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007410:	e011      	b.n	8007436 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007412:	f7fc fd57 	bl	8003ec4 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d803      	bhi.n	800742a <HAL_SPI_Transmit+0x21e>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007428:	d102      	bne.n	8007430 <HAL_SPI_Transmit+0x224>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007434:	e033      	b.n	800749e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1cd      	bne.n	80073dc <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007448:	d107      	bne.n	800745a <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007458:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fc94 	bl	8007d8c <SPI_EndRxTxTransaction>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10a      	bne.n	800748e <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007478:	2300      	movs	r3, #0
 800747a:	613b      	str	r3, [r7, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e000      	b.n	800749e <HAL_SPI_Transmit+0x292>
  }

error:
 800749c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3720      	adds	r7, #32
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af02      	add	r7, sp, #8
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074d4:	d112      	bne.n	80074fc <HAL_SPI_Receive+0x44>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10e      	bne.n	80074fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2204      	movs	r2, #4
 80074e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	4613      	mov	r3, r2
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f95f 	bl	80077b6 <HAL_SPI_TransmitReceive>
 80074f8:	4603      	mov	r3, r0
 80074fa:	e158      	b.n	80077ae <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_SPI_Receive+0x52>
 8007506:	2302      	movs	r3, #2
 8007508:	e151      	b.n	80077ae <HAL_SPI_Receive+0x2f6>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007512:	f7fc fcd7 	bl	8003ec4 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d002      	beq.n	800752a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007524:	2302      	movs	r3, #2
 8007526:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007528:	e138      	b.n	800779c <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_SPI_Receive+0x7e>
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	75fb      	strb	r3, [r7, #23]
    goto error;
 800753a:	e12f      	b.n	800779c <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2204      	movs	r2, #4
 8007540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	88fa      	ldrh	r2, [r7, #6]
 800755a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007582:	d116      	bne.n	80075b2 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075a2:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ba:	d107      	bne.n	80075cc <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d007      	beq.n	80075ea <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d162      	bne.n	80076b8 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075f2:	e02e      	b.n	8007652 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d115      	bne.n	800762e <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f103 020c 	add.w	r2, r3, #12
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800762c:	e011      	b.n	8007652 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800762e:	f7fc fc49 	bl	8003ec4 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d803      	bhi.n	8007646 <HAL_SPI_Receive+0x18e>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d102      	bne.n	800764c <HAL_SPI_Receive+0x194>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007650:	e0a4      	b.n	800779c <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1cb      	bne.n	80075f4 <HAL_SPI_Receive+0x13c>
 800765c:	e031      	b.n	80076c2 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b01      	cmp	r3, #1
 800766a:	d113      	bne.n	8007694 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	b292      	uxth	r2, r2
 8007678:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	1c9a      	adds	r2, r3, #2
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007692:	e011      	b.n	80076b8 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007694:	f7fc fc16 	bl	8003ec4 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d803      	bhi.n	80076ac <HAL_SPI_Receive+0x1f4>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d102      	bne.n	80076b2 <HAL_SPI_Receive+0x1fa>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076b6:	e071      	b.n	800779c <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1cd      	bne.n	800765e <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ca:	d142      	bne.n	8007752 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076da:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2201      	movs	r2, #1
 80076e4:	2101      	movs	r1, #1
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fa81 	bl	8007bee <SPI_WaitFlagStateUntilTimeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	75fb      	strb	r3, [r7, #23]
      goto error;
 80076f6:	e051      	b.n	800779c <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007700:	d107      	bne.n	8007712 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770c:	b292      	uxth	r2, r2
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e008      	b.n	8007724 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f103 020c 	add.w	r2, r3, #12
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2201      	movs	r2, #1
 800772c:	2101      	movs	r1, #1
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fa5d 	bl	8007bee <SPI_WaitFlagStateUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d008      	beq.n	800774c <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	f043 0202 	orr.w	r2, r3, #2
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	75fb      	strb	r3, [r7, #23]
      goto error;
 800774a:	e027      	b.n	800779c <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 fab3 	bl	8007cc2 <SPI_EndRxTransaction>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	2b10      	cmp	r3, #16
 8007774:	d10a      	bne.n	800778c <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	f043 0202 	orr.w	r2, r3, #2
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800778a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
 8007798:	e000      	b.n	800779c <HAL_SPI_Receive+0x2e4>
  }

error :
 800779a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b08e      	sub	sp, #56	; 0x38
 80077ba:	af02      	add	r7, sp, #8
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077c4:	2301      	movs	r3, #1
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x26>
 80077d8:	2302      	movs	r3, #2
 80077da:	e1f6      	b.n	8007bca <HAL_SPI_TransmitReceive+0x414>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077e4:	f7fc fb6e 	bl	8003ec4 <HAL_GetTick>
 80077e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077fa:	887b      	ldrh	r3, [r7, #2]
 80077fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007802:	2b01      	cmp	r3, #1
 8007804:	d00f      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x70>
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780c:	d107      	bne.n	800781e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <HAL_SPI_TransmitReceive+0x68>
 8007816:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800781a:	2b04      	cmp	r3, #4
 800781c:	d003      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800781e:	2302      	movs	r3, #2
 8007820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007824:	e1c7      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_SPI_TransmitReceive+0x82>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_SPI_TransmitReceive+0x82>
 8007832:	887b      	ldrh	r3, [r7, #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d103      	bne.n	8007840 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800783e:	e1ba      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b04      	cmp	r3, #4
 800784a:	d003      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2205      	movs	r2, #5
 8007850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	887a      	ldrh	r2, [r7, #2]
 8007864:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	887a      	ldrh	r2, [r7, #2]
 800786a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	887a      	ldrh	r2, [r7, #2]
 8007876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	887a      	ldrh	r2, [r7, #2]
 800787c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007892:	d10f      	bne.n	80078b4 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078b2:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d007      	beq.n	80078d2 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078da:	f040 808b 	bne.w	80079f4 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x136>
 80078e6:	8b7b      	ldrh	r3, [r7, #26]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d178      	bne.n	80079de <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	881a      	ldrh	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007910:	e065      	b.n	80079de <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b02      	cmp	r3, #2
 800791e:	d12d      	bne.n	800797c <HAL_SPI_TransmitReceive+0x1c6>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d028      	beq.n	800797c <HAL_SPI_TransmitReceive+0x1c6>
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d125      	bne.n	800797c <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	881a      	ldrh	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	1c9a      	adds	r2, r3, #2
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10c      	bne.n	800797c <HAL_SPI_TransmitReceive+0x1c6>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800796a:	d107      	bne.n	800797c <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800797a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b01      	cmp	r3, #1
 8007988:	d119      	bne.n	80079be <HAL_SPI_TransmitReceive+0x208>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798e:	b29b      	uxth	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d014      	beq.n	80079be <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	b292      	uxth	r2, r2
 80079a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	1c9a      	adds	r2, r3, #2
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079ba:	2301      	movs	r3, #1
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079be:	f7fc fa81 	bl	8003ec4 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d807      	bhi.n	80079de <HAL_SPI_TransmitReceive+0x228>
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d003      	beq.n	80079de <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079dc:	e0eb      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d194      	bne.n	8007912 <HAL_SPI_TransmitReceive+0x15c>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d18f      	bne.n	8007912 <HAL_SPI_TransmitReceive+0x15c>
 80079f2:	e08e      	b.n	8007b12 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <HAL_SPI_TransmitReceive+0x24c>
 80079fc:	8b7b      	ldrh	r3, [r7, #26]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d17d      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a28:	e069      	b.n	8007afe <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d12e      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x2e0>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d029      	beq.n	8007a96 <HAL_SPI_TransmitReceive+0x2e0>
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d126      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10c      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x2e0>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a84:	d107      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a94:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d119      	bne.n	8007ad8 <HAL_SPI_TransmitReceive+0x322>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d014      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ad8:	f7fc f9f4 	bl	8003ec4 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d803      	bhi.n	8007af0 <HAL_SPI_TransmitReceive+0x33a>
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aee:	d102      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x340>
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007afc:	e05b      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d190      	bne.n	8007a2a <HAL_SPI_TransmitReceive+0x274>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d18b      	bne.n	8007a2a <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1a:	d117      	bne.n	8007b4c <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	2201      	movs	r2, #1
 8007b24:	2101      	movs	r1, #1
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f861 	bl	8007bee <SPI_WaitFlagStateUntilTimeout>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b36:	f043 0202 	orr.w	r2, r3, #2
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8007b44:	e037      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 0310 	and.w	r3, r3, #16
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	d10d      	bne.n	8007b76 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f043 0202 	orr.w	r2, r3, #2
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007b6e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 f906 	bl	8007d8c <SPI_EndRxTxTransaction>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d006      	beq.n	8007b94 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b92:	e010      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10b      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	e000      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8007bb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3730      	adds	r7, #48	; 0x30
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007be0:	b2db      	uxtb	r3, r3
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	603b      	str	r3, [r7, #0]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bfe:	e04c      	b.n	8007c9a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d048      	beq.n	8007c9a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007c08:	f7fc f95c 	bl	8003ec4 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d902      	bls.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0x30>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d13d      	bne.n	8007c9a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c36:	d111      	bne.n	8007c5c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c40:	d004      	beq.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4a:	d107      	bne.n	8007c5c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c64:	d10f      	bne.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e00f      	b.n	8007cba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d1a3      	bne.n	8007c00 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b086      	sub	sp, #24
 8007cc6:	af02      	add	r7, sp, #8
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cd6:	d111      	bne.n	8007cfc <SPI_EndRxTransaction+0x3a>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce0:	d004      	beq.n	8007cec <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cea:	d107      	bne.n	8007cfc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cfa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d04:	d12a      	bne.n	8007d5c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d0e:	d012      	beq.n	8007d36 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	2180      	movs	r1, #128	; 0x80
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff ff67 	bl	8007bee <SPI_WaitFlagStateUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d02d      	beq.n	8007d82 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	f043 0220 	orr.w	r2, r3, #32
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e026      	b.n	8007d84 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2101      	movs	r1, #1
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff ff54 	bl	8007bee <SPI_WaitFlagStateUntilTimeout>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01a      	beq.n	8007d82 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d50:	f043 0220 	orr.w	r2, r3, #32
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e013      	b.n	8007d84 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2200      	movs	r2, #0
 8007d64:	2101      	movs	r1, #1
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f7ff ff41 	bl	8007bee <SPI_WaitFlagStateUntilTimeout>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	f043 0220 	orr.w	r2, r3, #32
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e000      	b.n	8007d84 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d98:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <SPI_EndRxTxTransaction+0x7c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1b      	ldr	r2, [pc, #108]	; (8007e0c <SPI_EndRxTxTransaction+0x80>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	0d5b      	lsrs	r3, r3, #21
 8007da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007da8:	fb02 f303 	mul.w	r3, r2, r3
 8007dac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db6:	d112      	bne.n	8007dde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2180      	movs	r1, #128	; 0x80
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7ff ff13 	bl	8007bee <SPI_WaitFlagStateUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d016      	beq.n	8007dfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f043 0220 	orr.w	r2, r3, #32
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e00f      	b.n	8007dfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df4:	2b80      	cmp	r3, #128	; 0x80
 8007df6:	d0f2      	beq.n	8007dde <SPI_EndRxTxTransaction+0x52>
 8007df8:	e000      	b.n	8007dfc <SPI_EndRxTxTransaction+0x70>
        break;
 8007dfa:	bf00      	nop
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	200000fc 	.word	0x200000fc
 8007e0c:	165e9f81 	.word	0x165e9f81

08007e10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d029      	beq.n	8007e7e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e3a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e44:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007e4a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007e50:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007e56:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007e5c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007e62:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007e68:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007e6e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	e034      	b.n	8007ee8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e8a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e94:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007e9a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007eae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007eb2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ebc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007ec2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007ec8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007ece:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007ed4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b087      	sub	sp, #28
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d02e      	beq.n	8007f6e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f1c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007f2c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007f36:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007f40:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f4a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007f54:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	609a      	str	r2, [r3, #8]
 8007f6c:	e03b      	b.n	8007fe6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f7e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f90:	4313      	orrs	r3, r2
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007fa4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007fb4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007fbe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007fc8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008010:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	3b01      	subs	r3, #1
 8008018:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800801a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800802c:	f7fb ff4a 	bl	8003ec4 <HAL_GetTick>
 8008030:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008032:	e010      	b.n	8008056 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d00c      	beq.n	8008056 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <FMC_SDRAM_SendCommand+0x5e>
 8008042:	f7fb ff3f 	bl	8003ec4 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	429a      	cmp	r2, r3
 8008050:	d201      	bcs.n	8008056 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e006      	b.n	8008064 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b20      	cmp	r3, #32
 8008060:	d0e8      	beq.n	8008034 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	695a      	ldr	r2, [r3, #20]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
	...

08008094 <__libc_init_array>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	4d0d      	ldr	r5, [pc, #52]	; (80080cc <__libc_init_array+0x38>)
 8008098:	4c0d      	ldr	r4, [pc, #52]	; (80080d0 <__libc_init_array+0x3c>)
 800809a:	1b64      	subs	r4, r4, r5
 800809c:	10a4      	asrs	r4, r4, #2
 800809e:	2600      	movs	r6, #0
 80080a0:	42a6      	cmp	r6, r4
 80080a2:	d109      	bne.n	80080b8 <__libc_init_array+0x24>
 80080a4:	4d0b      	ldr	r5, [pc, #44]	; (80080d4 <__libc_init_array+0x40>)
 80080a6:	4c0c      	ldr	r4, [pc, #48]	; (80080d8 <__libc_init_array+0x44>)
 80080a8:	f000 fc70 	bl	800898c <_init>
 80080ac:	1b64      	subs	r4, r4, r5
 80080ae:	10a4      	asrs	r4, r4, #2
 80080b0:	2600      	movs	r6, #0
 80080b2:	42a6      	cmp	r6, r4
 80080b4:	d105      	bne.n	80080c2 <__libc_init_array+0x2e>
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080bc:	4798      	blx	r3
 80080be:	3601      	adds	r6, #1
 80080c0:	e7ee      	b.n	80080a0 <__libc_init_array+0xc>
 80080c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c6:	4798      	blx	r3
 80080c8:	3601      	adds	r6, #1
 80080ca:	e7f2      	b.n	80080b2 <__libc_init_array+0x1e>
 80080cc:	0800b5bc 	.word	0x0800b5bc
 80080d0:	0800b5bc 	.word	0x0800b5bc
 80080d4:	0800b5bc 	.word	0x0800b5bc
 80080d8:	0800b5c0 	.word	0x0800b5c0

080080dc <memset>:
 80080dc:	4402      	add	r2, r0
 80080de:	4603      	mov	r3, r0
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d100      	bne.n	80080e6 <memset+0xa>
 80080e4:	4770      	bx	lr
 80080e6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ea:	e7f9      	b.n	80080e0 <memset+0x4>

080080ec <sniprintf>:
 80080ec:	b40c      	push	{r2, r3}
 80080ee:	b530      	push	{r4, r5, lr}
 80080f0:	4b17      	ldr	r3, [pc, #92]	; (8008150 <sniprintf+0x64>)
 80080f2:	1e0c      	subs	r4, r1, #0
 80080f4:	681d      	ldr	r5, [r3, #0]
 80080f6:	b09d      	sub	sp, #116	; 0x74
 80080f8:	da08      	bge.n	800810c <sniprintf+0x20>
 80080fa:	238b      	movs	r3, #139	; 0x8b
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008102:	b01d      	add	sp, #116	; 0x74
 8008104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008108:	b002      	add	sp, #8
 800810a:	4770      	bx	lr
 800810c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008110:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008114:	bf14      	ite	ne
 8008116:	f104 33ff 	addne.w	r3, r4, #4294967295
 800811a:	4623      	moveq	r3, r4
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	9307      	str	r3, [sp, #28]
 8008120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008124:	9002      	str	r0, [sp, #8]
 8008126:	9006      	str	r0, [sp, #24]
 8008128:	f8ad 3016 	strh.w	r3, [sp, #22]
 800812c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800812e:	ab21      	add	r3, sp, #132	; 0x84
 8008130:	a902      	add	r1, sp, #8
 8008132:	4628      	mov	r0, r5
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	f000 f869 	bl	800820c <_svfiprintf_r>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	bfbc      	itt	lt
 800813e:	238b      	movlt	r3, #139	; 0x8b
 8008140:	602b      	strlt	r3, [r5, #0]
 8008142:	2c00      	cmp	r4, #0
 8008144:	d0dd      	beq.n	8008102 <sniprintf+0x16>
 8008146:	9b02      	ldr	r3, [sp, #8]
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e7d9      	b.n	8008102 <sniprintf+0x16>
 800814e:	bf00      	nop
 8008150:	20000194 	.word	0x20000194

08008154 <__ssputs_r>:
 8008154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	688e      	ldr	r6, [r1, #8]
 800815a:	429e      	cmp	r6, r3
 800815c:	4682      	mov	sl, r0
 800815e:	460c      	mov	r4, r1
 8008160:	4690      	mov	r8, r2
 8008162:	461f      	mov	r7, r3
 8008164:	d838      	bhi.n	80081d8 <__ssputs_r+0x84>
 8008166:	898a      	ldrh	r2, [r1, #12]
 8008168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800816c:	d032      	beq.n	80081d4 <__ssputs_r+0x80>
 800816e:	6825      	ldr	r5, [r4, #0]
 8008170:	6909      	ldr	r1, [r1, #16]
 8008172:	eba5 0901 	sub.w	r9, r5, r1
 8008176:	6965      	ldr	r5, [r4, #20]
 8008178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800817c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008180:	3301      	adds	r3, #1
 8008182:	444b      	add	r3, r9
 8008184:	106d      	asrs	r5, r5, #1
 8008186:	429d      	cmp	r5, r3
 8008188:	bf38      	it	cc
 800818a:	461d      	movcc	r5, r3
 800818c:	0553      	lsls	r3, r2, #21
 800818e:	d531      	bpl.n	80081f4 <__ssputs_r+0xa0>
 8008190:	4629      	mov	r1, r5
 8008192:	f000 fb47 	bl	8008824 <_malloc_r>
 8008196:	4606      	mov	r6, r0
 8008198:	b950      	cbnz	r0, 80081b0 <__ssputs_r+0x5c>
 800819a:	230c      	movs	r3, #12
 800819c:	f8ca 3000 	str.w	r3, [sl]
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081a6:	81a3      	strh	r3, [r4, #12]
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b0:	6921      	ldr	r1, [r4, #16]
 80081b2:	464a      	mov	r2, r9
 80081b4:	f000 fabe 	bl	8008734 <memcpy>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	6126      	str	r6, [r4, #16]
 80081c6:	6165      	str	r5, [r4, #20]
 80081c8:	444e      	add	r6, r9
 80081ca:	eba5 0509 	sub.w	r5, r5, r9
 80081ce:	6026      	str	r6, [r4, #0]
 80081d0:	60a5      	str	r5, [r4, #8]
 80081d2:	463e      	mov	r6, r7
 80081d4:	42be      	cmp	r6, r7
 80081d6:	d900      	bls.n	80081da <__ssputs_r+0x86>
 80081d8:	463e      	mov	r6, r7
 80081da:	4632      	mov	r2, r6
 80081dc:	6820      	ldr	r0, [r4, #0]
 80081de:	4641      	mov	r1, r8
 80081e0:	f000 fab6 	bl	8008750 <memmove>
 80081e4:	68a3      	ldr	r3, [r4, #8]
 80081e6:	6822      	ldr	r2, [r4, #0]
 80081e8:	1b9b      	subs	r3, r3, r6
 80081ea:	4432      	add	r2, r6
 80081ec:	60a3      	str	r3, [r4, #8]
 80081ee:	6022      	str	r2, [r4, #0]
 80081f0:	2000      	movs	r0, #0
 80081f2:	e7db      	b.n	80081ac <__ssputs_r+0x58>
 80081f4:	462a      	mov	r2, r5
 80081f6:	f000 fb6f 	bl	80088d8 <_realloc_r>
 80081fa:	4606      	mov	r6, r0
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d1e1      	bne.n	80081c4 <__ssputs_r+0x70>
 8008200:	6921      	ldr	r1, [r4, #16]
 8008202:	4650      	mov	r0, sl
 8008204:	f000 fabe 	bl	8008784 <_free_r>
 8008208:	e7c7      	b.n	800819a <__ssputs_r+0x46>
	...

0800820c <_svfiprintf_r>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	4698      	mov	r8, r3
 8008212:	898b      	ldrh	r3, [r1, #12]
 8008214:	061b      	lsls	r3, r3, #24
 8008216:	b09d      	sub	sp, #116	; 0x74
 8008218:	4607      	mov	r7, r0
 800821a:	460d      	mov	r5, r1
 800821c:	4614      	mov	r4, r2
 800821e:	d50e      	bpl.n	800823e <_svfiprintf_r+0x32>
 8008220:	690b      	ldr	r3, [r1, #16]
 8008222:	b963      	cbnz	r3, 800823e <_svfiprintf_r+0x32>
 8008224:	2140      	movs	r1, #64	; 0x40
 8008226:	f000 fafd 	bl	8008824 <_malloc_r>
 800822a:	6028      	str	r0, [r5, #0]
 800822c:	6128      	str	r0, [r5, #16]
 800822e:	b920      	cbnz	r0, 800823a <_svfiprintf_r+0x2e>
 8008230:	230c      	movs	r3, #12
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e0d1      	b.n	80083de <_svfiprintf_r+0x1d2>
 800823a:	2340      	movs	r3, #64	; 0x40
 800823c:	616b      	str	r3, [r5, #20]
 800823e:	2300      	movs	r3, #0
 8008240:	9309      	str	r3, [sp, #36]	; 0x24
 8008242:	2320      	movs	r3, #32
 8008244:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008248:	f8cd 800c 	str.w	r8, [sp, #12]
 800824c:	2330      	movs	r3, #48	; 0x30
 800824e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083f8 <_svfiprintf_r+0x1ec>
 8008252:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008256:	f04f 0901 	mov.w	r9, #1
 800825a:	4623      	mov	r3, r4
 800825c:	469a      	mov	sl, r3
 800825e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008262:	b10a      	cbz	r2, 8008268 <_svfiprintf_r+0x5c>
 8008264:	2a25      	cmp	r2, #37	; 0x25
 8008266:	d1f9      	bne.n	800825c <_svfiprintf_r+0x50>
 8008268:	ebba 0b04 	subs.w	fp, sl, r4
 800826c:	d00b      	beq.n	8008286 <_svfiprintf_r+0x7a>
 800826e:	465b      	mov	r3, fp
 8008270:	4622      	mov	r2, r4
 8008272:	4629      	mov	r1, r5
 8008274:	4638      	mov	r0, r7
 8008276:	f7ff ff6d 	bl	8008154 <__ssputs_r>
 800827a:	3001      	adds	r0, #1
 800827c:	f000 80aa 	beq.w	80083d4 <_svfiprintf_r+0x1c8>
 8008280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008282:	445a      	add	r2, fp
 8008284:	9209      	str	r2, [sp, #36]	; 0x24
 8008286:	f89a 3000 	ldrb.w	r3, [sl]
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 80a2 	beq.w	80083d4 <_svfiprintf_r+0x1c8>
 8008290:	2300      	movs	r3, #0
 8008292:	f04f 32ff 	mov.w	r2, #4294967295
 8008296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800829a:	f10a 0a01 	add.w	sl, sl, #1
 800829e:	9304      	str	r3, [sp, #16]
 80082a0:	9307      	str	r3, [sp, #28]
 80082a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082a6:	931a      	str	r3, [sp, #104]	; 0x68
 80082a8:	4654      	mov	r4, sl
 80082aa:	2205      	movs	r2, #5
 80082ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b0:	4851      	ldr	r0, [pc, #324]	; (80083f8 <_svfiprintf_r+0x1ec>)
 80082b2:	f7f7 ff9d 	bl	80001f0 <memchr>
 80082b6:	9a04      	ldr	r2, [sp, #16]
 80082b8:	b9d8      	cbnz	r0, 80082f2 <_svfiprintf_r+0xe6>
 80082ba:	06d0      	lsls	r0, r2, #27
 80082bc:	bf44      	itt	mi
 80082be:	2320      	movmi	r3, #32
 80082c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082c4:	0711      	lsls	r1, r2, #28
 80082c6:	bf44      	itt	mi
 80082c8:	232b      	movmi	r3, #43	; 0x2b
 80082ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ce:	f89a 3000 	ldrb.w	r3, [sl]
 80082d2:	2b2a      	cmp	r3, #42	; 0x2a
 80082d4:	d015      	beq.n	8008302 <_svfiprintf_r+0xf6>
 80082d6:	9a07      	ldr	r2, [sp, #28]
 80082d8:	4654      	mov	r4, sl
 80082da:	2000      	movs	r0, #0
 80082dc:	f04f 0c0a 	mov.w	ip, #10
 80082e0:	4621      	mov	r1, r4
 80082e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082e6:	3b30      	subs	r3, #48	; 0x30
 80082e8:	2b09      	cmp	r3, #9
 80082ea:	d94e      	bls.n	800838a <_svfiprintf_r+0x17e>
 80082ec:	b1b0      	cbz	r0, 800831c <_svfiprintf_r+0x110>
 80082ee:	9207      	str	r2, [sp, #28]
 80082f0:	e014      	b.n	800831c <_svfiprintf_r+0x110>
 80082f2:	eba0 0308 	sub.w	r3, r0, r8
 80082f6:	fa09 f303 	lsl.w	r3, r9, r3
 80082fa:	4313      	orrs	r3, r2
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	46a2      	mov	sl, r4
 8008300:	e7d2      	b.n	80082a8 <_svfiprintf_r+0x9c>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	1d19      	adds	r1, r3, #4
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	9103      	str	r1, [sp, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	bfbb      	ittet	lt
 800830e:	425b      	neglt	r3, r3
 8008310:	f042 0202 	orrlt.w	r2, r2, #2
 8008314:	9307      	strge	r3, [sp, #28]
 8008316:	9307      	strlt	r3, [sp, #28]
 8008318:	bfb8      	it	lt
 800831a:	9204      	strlt	r2, [sp, #16]
 800831c:	7823      	ldrb	r3, [r4, #0]
 800831e:	2b2e      	cmp	r3, #46	; 0x2e
 8008320:	d10c      	bne.n	800833c <_svfiprintf_r+0x130>
 8008322:	7863      	ldrb	r3, [r4, #1]
 8008324:	2b2a      	cmp	r3, #42	; 0x2a
 8008326:	d135      	bne.n	8008394 <_svfiprintf_r+0x188>
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	9203      	str	r2, [sp, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	bfb8      	it	lt
 8008334:	f04f 33ff 	movlt.w	r3, #4294967295
 8008338:	3402      	adds	r4, #2
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008408 <_svfiprintf_r+0x1fc>
 8008340:	7821      	ldrb	r1, [r4, #0]
 8008342:	2203      	movs	r2, #3
 8008344:	4650      	mov	r0, sl
 8008346:	f7f7 ff53 	bl	80001f0 <memchr>
 800834a:	b140      	cbz	r0, 800835e <_svfiprintf_r+0x152>
 800834c:	2340      	movs	r3, #64	; 0x40
 800834e:	eba0 000a 	sub.w	r0, r0, sl
 8008352:	fa03 f000 	lsl.w	r0, r3, r0
 8008356:	9b04      	ldr	r3, [sp, #16]
 8008358:	4303      	orrs	r3, r0
 800835a:	3401      	adds	r4, #1
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008362:	4826      	ldr	r0, [pc, #152]	; (80083fc <_svfiprintf_r+0x1f0>)
 8008364:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008368:	2206      	movs	r2, #6
 800836a:	f7f7 ff41 	bl	80001f0 <memchr>
 800836e:	2800      	cmp	r0, #0
 8008370:	d038      	beq.n	80083e4 <_svfiprintf_r+0x1d8>
 8008372:	4b23      	ldr	r3, [pc, #140]	; (8008400 <_svfiprintf_r+0x1f4>)
 8008374:	bb1b      	cbnz	r3, 80083be <_svfiprintf_r+0x1b2>
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	3307      	adds	r3, #7
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	3308      	adds	r3, #8
 8008380:	9303      	str	r3, [sp, #12]
 8008382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008384:	4433      	add	r3, r6
 8008386:	9309      	str	r3, [sp, #36]	; 0x24
 8008388:	e767      	b.n	800825a <_svfiprintf_r+0x4e>
 800838a:	fb0c 3202 	mla	r2, ip, r2, r3
 800838e:	460c      	mov	r4, r1
 8008390:	2001      	movs	r0, #1
 8008392:	e7a5      	b.n	80082e0 <_svfiprintf_r+0xd4>
 8008394:	2300      	movs	r3, #0
 8008396:	3401      	adds	r4, #1
 8008398:	9305      	str	r3, [sp, #20]
 800839a:	4619      	mov	r1, r3
 800839c:	f04f 0c0a 	mov.w	ip, #10
 80083a0:	4620      	mov	r0, r4
 80083a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083a6:	3a30      	subs	r2, #48	; 0x30
 80083a8:	2a09      	cmp	r2, #9
 80083aa:	d903      	bls.n	80083b4 <_svfiprintf_r+0x1a8>
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0c5      	beq.n	800833c <_svfiprintf_r+0x130>
 80083b0:	9105      	str	r1, [sp, #20]
 80083b2:	e7c3      	b.n	800833c <_svfiprintf_r+0x130>
 80083b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b8:	4604      	mov	r4, r0
 80083ba:	2301      	movs	r3, #1
 80083bc:	e7f0      	b.n	80083a0 <_svfiprintf_r+0x194>
 80083be:	ab03      	add	r3, sp, #12
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	462a      	mov	r2, r5
 80083c4:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <_svfiprintf_r+0x1f8>)
 80083c6:	a904      	add	r1, sp, #16
 80083c8:	4638      	mov	r0, r7
 80083ca:	f3af 8000 	nop.w
 80083ce:	1c42      	adds	r2, r0, #1
 80083d0:	4606      	mov	r6, r0
 80083d2:	d1d6      	bne.n	8008382 <_svfiprintf_r+0x176>
 80083d4:	89ab      	ldrh	r3, [r5, #12]
 80083d6:	065b      	lsls	r3, r3, #25
 80083d8:	f53f af2c 	bmi.w	8008234 <_svfiprintf_r+0x28>
 80083dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083de:	b01d      	add	sp, #116	; 0x74
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	ab03      	add	r3, sp, #12
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	462a      	mov	r2, r5
 80083ea:	4b06      	ldr	r3, [pc, #24]	; (8008404 <_svfiprintf_r+0x1f8>)
 80083ec:	a904      	add	r1, sp, #16
 80083ee:	4638      	mov	r0, r7
 80083f0:	f000 f87a 	bl	80084e8 <_printf_i>
 80083f4:	e7eb      	b.n	80083ce <_svfiprintf_r+0x1c2>
 80083f6:	bf00      	nop
 80083f8:	0800b580 	.word	0x0800b580
 80083fc:	0800b58a 	.word	0x0800b58a
 8008400:	00000000 	.word	0x00000000
 8008404:	08008155 	.word	0x08008155
 8008408:	0800b586 	.word	0x0800b586

0800840c <_printf_common>:
 800840c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	4616      	mov	r6, r2
 8008412:	4699      	mov	r9, r3
 8008414:	688a      	ldr	r2, [r1, #8]
 8008416:	690b      	ldr	r3, [r1, #16]
 8008418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800841c:	4293      	cmp	r3, r2
 800841e:	bfb8      	it	lt
 8008420:	4613      	movlt	r3, r2
 8008422:	6033      	str	r3, [r6, #0]
 8008424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008428:	4607      	mov	r7, r0
 800842a:	460c      	mov	r4, r1
 800842c:	b10a      	cbz	r2, 8008432 <_printf_common+0x26>
 800842e:	3301      	adds	r3, #1
 8008430:	6033      	str	r3, [r6, #0]
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	0699      	lsls	r1, r3, #26
 8008436:	bf42      	ittt	mi
 8008438:	6833      	ldrmi	r3, [r6, #0]
 800843a:	3302      	addmi	r3, #2
 800843c:	6033      	strmi	r3, [r6, #0]
 800843e:	6825      	ldr	r5, [r4, #0]
 8008440:	f015 0506 	ands.w	r5, r5, #6
 8008444:	d106      	bne.n	8008454 <_printf_common+0x48>
 8008446:	f104 0a19 	add.w	sl, r4, #25
 800844a:	68e3      	ldr	r3, [r4, #12]
 800844c:	6832      	ldr	r2, [r6, #0]
 800844e:	1a9b      	subs	r3, r3, r2
 8008450:	42ab      	cmp	r3, r5
 8008452:	dc26      	bgt.n	80084a2 <_printf_common+0x96>
 8008454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008458:	1e13      	subs	r3, r2, #0
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	bf18      	it	ne
 800845e:	2301      	movne	r3, #1
 8008460:	0692      	lsls	r2, r2, #26
 8008462:	d42b      	bmi.n	80084bc <_printf_common+0xb0>
 8008464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008468:	4649      	mov	r1, r9
 800846a:	4638      	mov	r0, r7
 800846c:	47c0      	blx	r8
 800846e:	3001      	adds	r0, #1
 8008470:	d01e      	beq.n	80084b0 <_printf_common+0xa4>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	68e5      	ldr	r5, [r4, #12]
 8008476:	6832      	ldr	r2, [r6, #0]
 8008478:	f003 0306 	and.w	r3, r3, #6
 800847c:	2b04      	cmp	r3, #4
 800847e:	bf08      	it	eq
 8008480:	1aad      	subeq	r5, r5, r2
 8008482:	68a3      	ldr	r3, [r4, #8]
 8008484:	6922      	ldr	r2, [r4, #16]
 8008486:	bf0c      	ite	eq
 8008488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800848c:	2500      	movne	r5, #0
 800848e:	4293      	cmp	r3, r2
 8008490:	bfc4      	itt	gt
 8008492:	1a9b      	subgt	r3, r3, r2
 8008494:	18ed      	addgt	r5, r5, r3
 8008496:	2600      	movs	r6, #0
 8008498:	341a      	adds	r4, #26
 800849a:	42b5      	cmp	r5, r6
 800849c:	d11a      	bne.n	80084d4 <_printf_common+0xc8>
 800849e:	2000      	movs	r0, #0
 80084a0:	e008      	b.n	80084b4 <_printf_common+0xa8>
 80084a2:	2301      	movs	r3, #1
 80084a4:	4652      	mov	r2, sl
 80084a6:	4649      	mov	r1, r9
 80084a8:	4638      	mov	r0, r7
 80084aa:	47c0      	blx	r8
 80084ac:	3001      	adds	r0, #1
 80084ae:	d103      	bne.n	80084b8 <_printf_common+0xac>
 80084b0:	f04f 30ff 	mov.w	r0, #4294967295
 80084b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b8:	3501      	adds	r5, #1
 80084ba:	e7c6      	b.n	800844a <_printf_common+0x3e>
 80084bc:	18e1      	adds	r1, r4, r3
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	2030      	movs	r0, #48	; 0x30
 80084c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084c6:	4422      	add	r2, r4
 80084c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084d0:	3302      	adds	r3, #2
 80084d2:	e7c7      	b.n	8008464 <_printf_common+0x58>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4622      	mov	r2, r4
 80084d8:	4649      	mov	r1, r9
 80084da:	4638      	mov	r0, r7
 80084dc:	47c0      	blx	r8
 80084de:	3001      	adds	r0, #1
 80084e0:	d0e6      	beq.n	80084b0 <_printf_common+0xa4>
 80084e2:	3601      	adds	r6, #1
 80084e4:	e7d9      	b.n	800849a <_printf_common+0x8e>
	...

080084e8 <_printf_i>:
 80084e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	460c      	mov	r4, r1
 80084ee:	4691      	mov	r9, r2
 80084f0:	7e27      	ldrb	r7, [r4, #24]
 80084f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084f4:	2f78      	cmp	r7, #120	; 0x78
 80084f6:	4680      	mov	r8, r0
 80084f8:	469a      	mov	sl, r3
 80084fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084fe:	d807      	bhi.n	8008510 <_printf_i+0x28>
 8008500:	2f62      	cmp	r7, #98	; 0x62
 8008502:	d80a      	bhi.n	800851a <_printf_i+0x32>
 8008504:	2f00      	cmp	r7, #0
 8008506:	f000 80d8 	beq.w	80086ba <_printf_i+0x1d2>
 800850a:	2f58      	cmp	r7, #88	; 0x58
 800850c:	f000 80a3 	beq.w	8008656 <_printf_i+0x16e>
 8008510:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008518:	e03a      	b.n	8008590 <_printf_i+0xa8>
 800851a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800851e:	2b15      	cmp	r3, #21
 8008520:	d8f6      	bhi.n	8008510 <_printf_i+0x28>
 8008522:	a001      	add	r0, pc, #4	; (adr r0, 8008528 <_printf_i+0x40>)
 8008524:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008528:	08008581 	.word	0x08008581
 800852c:	08008595 	.word	0x08008595
 8008530:	08008511 	.word	0x08008511
 8008534:	08008511 	.word	0x08008511
 8008538:	08008511 	.word	0x08008511
 800853c:	08008511 	.word	0x08008511
 8008540:	08008595 	.word	0x08008595
 8008544:	08008511 	.word	0x08008511
 8008548:	08008511 	.word	0x08008511
 800854c:	08008511 	.word	0x08008511
 8008550:	08008511 	.word	0x08008511
 8008554:	080086a1 	.word	0x080086a1
 8008558:	080085c5 	.word	0x080085c5
 800855c:	08008683 	.word	0x08008683
 8008560:	08008511 	.word	0x08008511
 8008564:	08008511 	.word	0x08008511
 8008568:	080086c3 	.word	0x080086c3
 800856c:	08008511 	.word	0x08008511
 8008570:	080085c5 	.word	0x080085c5
 8008574:	08008511 	.word	0x08008511
 8008578:	08008511 	.word	0x08008511
 800857c:	0800868b 	.word	0x0800868b
 8008580:	680b      	ldr	r3, [r1, #0]
 8008582:	1d1a      	adds	r2, r3, #4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	600a      	str	r2, [r1, #0]
 8008588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800858c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008590:	2301      	movs	r3, #1
 8008592:	e0a3      	b.n	80086dc <_printf_i+0x1f4>
 8008594:	6825      	ldr	r5, [r4, #0]
 8008596:	6808      	ldr	r0, [r1, #0]
 8008598:	062e      	lsls	r6, r5, #24
 800859a:	f100 0304 	add.w	r3, r0, #4
 800859e:	d50a      	bpl.n	80085b6 <_printf_i+0xce>
 80085a0:	6805      	ldr	r5, [r0, #0]
 80085a2:	600b      	str	r3, [r1, #0]
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	da03      	bge.n	80085b0 <_printf_i+0xc8>
 80085a8:	232d      	movs	r3, #45	; 0x2d
 80085aa:	426d      	negs	r5, r5
 80085ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b0:	485e      	ldr	r0, [pc, #376]	; (800872c <_printf_i+0x244>)
 80085b2:	230a      	movs	r3, #10
 80085b4:	e019      	b.n	80085ea <_printf_i+0x102>
 80085b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085ba:	6805      	ldr	r5, [r0, #0]
 80085bc:	600b      	str	r3, [r1, #0]
 80085be:	bf18      	it	ne
 80085c0:	b22d      	sxthne	r5, r5
 80085c2:	e7ef      	b.n	80085a4 <_printf_i+0xbc>
 80085c4:	680b      	ldr	r3, [r1, #0]
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	1d18      	adds	r0, r3, #4
 80085ca:	6008      	str	r0, [r1, #0]
 80085cc:	0628      	lsls	r0, r5, #24
 80085ce:	d501      	bpl.n	80085d4 <_printf_i+0xec>
 80085d0:	681d      	ldr	r5, [r3, #0]
 80085d2:	e002      	b.n	80085da <_printf_i+0xf2>
 80085d4:	0669      	lsls	r1, r5, #25
 80085d6:	d5fb      	bpl.n	80085d0 <_printf_i+0xe8>
 80085d8:	881d      	ldrh	r5, [r3, #0]
 80085da:	4854      	ldr	r0, [pc, #336]	; (800872c <_printf_i+0x244>)
 80085dc:	2f6f      	cmp	r7, #111	; 0x6f
 80085de:	bf0c      	ite	eq
 80085e0:	2308      	moveq	r3, #8
 80085e2:	230a      	movne	r3, #10
 80085e4:	2100      	movs	r1, #0
 80085e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ea:	6866      	ldr	r6, [r4, #4]
 80085ec:	60a6      	str	r6, [r4, #8]
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	bfa2      	ittt	ge
 80085f2:	6821      	ldrge	r1, [r4, #0]
 80085f4:	f021 0104 	bicge.w	r1, r1, #4
 80085f8:	6021      	strge	r1, [r4, #0]
 80085fa:	b90d      	cbnz	r5, 8008600 <_printf_i+0x118>
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	d04d      	beq.n	800869c <_printf_i+0x1b4>
 8008600:	4616      	mov	r6, r2
 8008602:	fbb5 f1f3 	udiv	r1, r5, r3
 8008606:	fb03 5711 	mls	r7, r3, r1, r5
 800860a:	5dc7      	ldrb	r7, [r0, r7]
 800860c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008610:	462f      	mov	r7, r5
 8008612:	42bb      	cmp	r3, r7
 8008614:	460d      	mov	r5, r1
 8008616:	d9f4      	bls.n	8008602 <_printf_i+0x11a>
 8008618:	2b08      	cmp	r3, #8
 800861a:	d10b      	bne.n	8008634 <_printf_i+0x14c>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	07df      	lsls	r7, r3, #31
 8008620:	d508      	bpl.n	8008634 <_printf_i+0x14c>
 8008622:	6923      	ldr	r3, [r4, #16]
 8008624:	6861      	ldr	r1, [r4, #4]
 8008626:	4299      	cmp	r1, r3
 8008628:	bfde      	ittt	le
 800862a:	2330      	movle	r3, #48	; 0x30
 800862c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008630:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008634:	1b92      	subs	r2, r2, r6
 8008636:	6122      	str	r2, [r4, #16]
 8008638:	f8cd a000 	str.w	sl, [sp]
 800863c:	464b      	mov	r3, r9
 800863e:	aa03      	add	r2, sp, #12
 8008640:	4621      	mov	r1, r4
 8008642:	4640      	mov	r0, r8
 8008644:	f7ff fee2 	bl	800840c <_printf_common>
 8008648:	3001      	adds	r0, #1
 800864a:	d14c      	bne.n	80086e6 <_printf_i+0x1fe>
 800864c:	f04f 30ff 	mov.w	r0, #4294967295
 8008650:	b004      	add	sp, #16
 8008652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008656:	4835      	ldr	r0, [pc, #212]	; (800872c <_printf_i+0x244>)
 8008658:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	680e      	ldr	r6, [r1, #0]
 8008660:	061f      	lsls	r7, r3, #24
 8008662:	f856 5b04 	ldr.w	r5, [r6], #4
 8008666:	600e      	str	r6, [r1, #0]
 8008668:	d514      	bpl.n	8008694 <_printf_i+0x1ac>
 800866a:	07d9      	lsls	r1, r3, #31
 800866c:	bf44      	itt	mi
 800866e:	f043 0320 	orrmi.w	r3, r3, #32
 8008672:	6023      	strmi	r3, [r4, #0]
 8008674:	b91d      	cbnz	r5, 800867e <_printf_i+0x196>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	f023 0320 	bic.w	r3, r3, #32
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	2310      	movs	r3, #16
 8008680:	e7b0      	b.n	80085e4 <_printf_i+0xfc>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	f043 0320 	orr.w	r3, r3, #32
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	2378      	movs	r3, #120	; 0x78
 800868c:	4828      	ldr	r0, [pc, #160]	; (8008730 <_printf_i+0x248>)
 800868e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008692:	e7e3      	b.n	800865c <_printf_i+0x174>
 8008694:	065e      	lsls	r6, r3, #25
 8008696:	bf48      	it	mi
 8008698:	b2ad      	uxthmi	r5, r5
 800869a:	e7e6      	b.n	800866a <_printf_i+0x182>
 800869c:	4616      	mov	r6, r2
 800869e:	e7bb      	b.n	8008618 <_printf_i+0x130>
 80086a0:	680b      	ldr	r3, [r1, #0]
 80086a2:	6826      	ldr	r6, [r4, #0]
 80086a4:	6960      	ldr	r0, [r4, #20]
 80086a6:	1d1d      	adds	r5, r3, #4
 80086a8:	600d      	str	r5, [r1, #0]
 80086aa:	0635      	lsls	r5, r6, #24
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	d501      	bpl.n	80086b4 <_printf_i+0x1cc>
 80086b0:	6018      	str	r0, [r3, #0]
 80086b2:	e002      	b.n	80086ba <_printf_i+0x1d2>
 80086b4:	0671      	lsls	r1, r6, #25
 80086b6:	d5fb      	bpl.n	80086b0 <_printf_i+0x1c8>
 80086b8:	8018      	strh	r0, [r3, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	6123      	str	r3, [r4, #16]
 80086be:	4616      	mov	r6, r2
 80086c0:	e7ba      	b.n	8008638 <_printf_i+0x150>
 80086c2:	680b      	ldr	r3, [r1, #0]
 80086c4:	1d1a      	adds	r2, r3, #4
 80086c6:	600a      	str	r2, [r1, #0]
 80086c8:	681e      	ldr	r6, [r3, #0]
 80086ca:	6862      	ldr	r2, [r4, #4]
 80086cc:	2100      	movs	r1, #0
 80086ce:	4630      	mov	r0, r6
 80086d0:	f7f7 fd8e 	bl	80001f0 <memchr>
 80086d4:	b108      	cbz	r0, 80086da <_printf_i+0x1f2>
 80086d6:	1b80      	subs	r0, r0, r6
 80086d8:	6060      	str	r0, [r4, #4]
 80086da:	6863      	ldr	r3, [r4, #4]
 80086dc:	6123      	str	r3, [r4, #16]
 80086de:	2300      	movs	r3, #0
 80086e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e4:	e7a8      	b.n	8008638 <_printf_i+0x150>
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	4632      	mov	r2, r6
 80086ea:	4649      	mov	r1, r9
 80086ec:	4640      	mov	r0, r8
 80086ee:	47d0      	blx	sl
 80086f0:	3001      	adds	r0, #1
 80086f2:	d0ab      	beq.n	800864c <_printf_i+0x164>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	079b      	lsls	r3, r3, #30
 80086f8:	d413      	bmi.n	8008722 <_printf_i+0x23a>
 80086fa:	68e0      	ldr	r0, [r4, #12]
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	4298      	cmp	r0, r3
 8008700:	bfb8      	it	lt
 8008702:	4618      	movlt	r0, r3
 8008704:	e7a4      	b.n	8008650 <_printf_i+0x168>
 8008706:	2301      	movs	r3, #1
 8008708:	4632      	mov	r2, r6
 800870a:	4649      	mov	r1, r9
 800870c:	4640      	mov	r0, r8
 800870e:	47d0      	blx	sl
 8008710:	3001      	adds	r0, #1
 8008712:	d09b      	beq.n	800864c <_printf_i+0x164>
 8008714:	3501      	adds	r5, #1
 8008716:	68e3      	ldr	r3, [r4, #12]
 8008718:	9903      	ldr	r1, [sp, #12]
 800871a:	1a5b      	subs	r3, r3, r1
 800871c:	42ab      	cmp	r3, r5
 800871e:	dcf2      	bgt.n	8008706 <_printf_i+0x21e>
 8008720:	e7eb      	b.n	80086fa <_printf_i+0x212>
 8008722:	2500      	movs	r5, #0
 8008724:	f104 0619 	add.w	r6, r4, #25
 8008728:	e7f5      	b.n	8008716 <_printf_i+0x22e>
 800872a:	bf00      	nop
 800872c:	0800b591 	.word	0x0800b591
 8008730:	0800b5a2 	.word	0x0800b5a2

08008734 <memcpy>:
 8008734:	440a      	add	r2, r1
 8008736:	4291      	cmp	r1, r2
 8008738:	f100 33ff 	add.w	r3, r0, #4294967295
 800873c:	d100      	bne.n	8008740 <memcpy+0xc>
 800873e:	4770      	bx	lr
 8008740:	b510      	push	{r4, lr}
 8008742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800874a:	4291      	cmp	r1, r2
 800874c:	d1f9      	bne.n	8008742 <memcpy+0xe>
 800874e:	bd10      	pop	{r4, pc}

08008750 <memmove>:
 8008750:	4288      	cmp	r0, r1
 8008752:	b510      	push	{r4, lr}
 8008754:	eb01 0402 	add.w	r4, r1, r2
 8008758:	d902      	bls.n	8008760 <memmove+0x10>
 800875a:	4284      	cmp	r4, r0
 800875c:	4623      	mov	r3, r4
 800875e:	d807      	bhi.n	8008770 <memmove+0x20>
 8008760:	1e43      	subs	r3, r0, #1
 8008762:	42a1      	cmp	r1, r4
 8008764:	d008      	beq.n	8008778 <memmove+0x28>
 8008766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800876a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800876e:	e7f8      	b.n	8008762 <memmove+0x12>
 8008770:	4402      	add	r2, r0
 8008772:	4601      	mov	r1, r0
 8008774:	428a      	cmp	r2, r1
 8008776:	d100      	bne.n	800877a <memmove+0x2a>
 8008778:	bd10      	pop	{r4, pc}
 800877a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800877e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008782:	e7f7      	b.n	8008774 <memmove+0x24>

08008784 <_free_r>:
 8008784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008786:	2900      	cmp	r1, #0
 8008788:	d048      	beq.n	800881c <_free_r+0x98>
 800878a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878e:	9001      	str	r0, [sp, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f1a1 0404 	sub.w	r4, r1, #4
 8008796:	bfb8      	it	lt
 8008798:	18e4      	addlt	r4, r4, r3
 800879a:	f000 f8d3 	bl	8008944 <__malloc_lock>
 800879e:	4a20      	ldr	r2, [pc, #128]	; (8008820 <_free_r+0x9c>)
 80087a0:	9801      	ldr	r0, [sp, #4]
 80087a2:	6813      	ldr	r3, [r2, #0]
 80087a4:	4615      	mov	r5, r2
 80087a6:	b933      	cbnz	r3, 80087b6 <_free_r+0x32>
 80087a8:	6063      	str	r3, [r4, #4]
 80087aa:	6014      	str	r4, [r2, #0]
 80087ac:	b003      	add	sp, #12
 80087ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087b2:	f000 b8cd 	b.w	8008950 <__malloc_unlock>
 80087b6:	42a3      	cmp	r3, r4
 80087b8:	d90b      	bls.n	80087d2 <_free_r+0x4e>
 80087ba:	6821      	ldr	r1, [r4, #0]
 80087bc:	1862      	adds	r2, r4, r1
 80087be:	4293      	cmp	r3, r2
 80087c0:	bf04      	itt	eq
 80087c2:	681a      	ldreq	r2, [r3, #0]
 80087c4:	685b      	ldreq	r3, [r3, #4]
 80087c6:	6063      	str	r3, [r4, #4]
 80087c8:	bf04      	itt	eq
 80087ca:	1852      	addeq	r2, r2, r1
 80087cc:	6022      	streq	r2, [r4, #0]
 80087ce:	602c      	str	r4, [r5, #0]
 80087d0:	e7ec      	b.n	80087ac <_free_r+0x28>
 80087d2:	461a      	mov	r2, r3
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	b10b      	cbz	r3, 80087dc <_free_r+0x58>
 80087d8:	42a3      	cmp	r3, r4
 80087da:	d9fa      	bls.n	80087d2 <_free_r+0x4e>
 80087dc:	6811      	ldr	r1, [r2, #0]
 80087de:	1855      	adds	r5, r2, r1
 80087e0:	42a5      	cmp	r5, r4
 80087e2:	d10b      	bne.n	80087fc <_free_r+0x78>
 80087e4:	6824      	ldr	r4, [r4, #0]
 80087e6:	4421      	add	r1, r4
 80087e8:	1854      	adds	r4, r2, r1
 80087ea:	42a3      	cmp	r3, r4
 80087ec:	6011      	str	r1, [r2, #0]
 80087ee:	d1dd      	bne.n	80087ac <_free_r+0x28>
 80087f0:	681c      	ldr	r4, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	6053      	str	r3, [r2, #4]
 80087f6:	4421      	add	r1, r4
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	e7d7      	b.n	80087ac <_free_r+0x28>
 80087fc:	d902      	bls.n	8008804 <_free_r+0x80>
 80087fe:	230c      	movs	r3, #12
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	e7d3      	b.n	80087ac <_free_r+0x28>
 8008804:	6825      	ldr	r5, [r4, #0]
 8008806:	1961      	adds	r1, r4, r5
 8008808:	428b      	cmp	r3, r1
 800880a:	bf04      	itt	eq
 800880c:	6819      	ldreq	r1, [r3, #0]
 800880e:	685b      	ldreq	r3, [r3, #4]
 8008810:	6063      	str	r3, [r4, #4]
 8008812:	bf04      	itt	eq
 8008814:	1949      	addeq	r1, r1, r5
 8008816:	6021      	streq	r1, [r4, #0]
 8008818:	6054      	str	r4, [r2, #4]
 800881a:	e7c7      	b.n	80087ac <_free_r+0x28>
 800881c:	b003      	add	sp, #12
 800881e:	bd30      	pop	{r4, r5, pc}
 8008820:	200005c8 	.word	0x200005c8

08008824 <_malloc_r>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	1ccd      	adds	r5, r1, #3
 8008828:	f025 0503 	bic.w	r5, r5, #3
 800882c:	3508      	adds	r5, #8
 800882e:	2d0c      	cmp	r5, #12
 8008830:	bf38      	it	cc
 8008832:	250c      	movcc	r5, #12
 8008834:	2d00      	cmp	r5, #0
 8008836:	4606      	mov	r6, r0
 8008838:	db01      	blt.n	800883e <_malloc_r+0x1a>
 800883a:	42a9      	cmp	r1, r5
 800883c:	d903      	bls.n	8008846 <_malloc_r+0x22>
 800883e:	230c      	movs	r3, #12
 8008840:	6033      	str	r3, [r6, #0]
 8008842:	2000      	movs	r0, #0
 8008844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008846:	f000 f87d 	bl	8008944 <__malloc_lock>
 800884a:	4921      	ldr	r1, [pc, #132]	; (80088d0 <_malloc_r+0xac>)
 800884c:	680a      	ldr	r2, [r1, #0]
 800884e:	4614      	mov	r4, r2
 8008850:	b99c      	cbnz	r4, 800887a <_malloc_r+0x56>
 8008852:	4f20      	ldr	r7, [pc, #128]	; (80088d4 <_malloc_r+0xb0>)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	b923      	cbnz	r3, 8008862 <_malloc_r+0x3e>
 8008858:	4621      	mov	r1, r4
 800885a:	4630      	mov	r0, r6
 800885c:	f000 f862 	bl	8008924 <_sbrk_r>
 8008860:	6038      	str	r0, [r7, #0]
 8008862:	4629      	mov	r1, r5
 8008864:	4630      	mov	r0, r6
 8008866:	f000 f85d 	bl	8008924 <_sbrk_r>
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	d123      	bne.n	80088b6 <_malloc_r+0x92>
 800886e:	230c      	movs	r3, #12
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	4630      	mov	r0, r6
 8008874:	f000 f86c 	bl	8008950 <__malloc_unlock>
 8008878:	e7e3      	b.n	8008842 <_malloc_r+0x1e>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	1b5b      	subs	r3, r3, r5
 800887e:	d417      	bmi.n	80088b0 <_malloc_r+0x8c>
 8008880:	2b0b      	cmp	r3, #11
 8008882:	d903      	bls.n	800888c <_malloc_r+0x68>
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	441c      	add	r4, r3
 8008888:	6025      	str	r5, [r4, #0]
 800888a:	e004      	b.n	8008896 <_malloc_r+0x72>
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	42a2      	cmp	r2, r4
 8008890:	bf0c      	ite	eq
 8008892:	600b      	streq	r3, [r1, #0]
 8008894:	6053      	strne	r3, [r2, #4]
 8008896:	4630      	mov	r0, r6
 8008898:	f000 f85a 	bl	8008950 <__malloc_unlock>
 800889c:	f104 000b 	add.w	r0, r4, #11
 80088a0:	1d23      	adds	r3, r4, #4
 80088a2:	f020 0007 	bic.w	r0, r0, #7
 80088a6:	1ac2      	subs	r2, r0, r3
 80088a8:	d0cc      	beq.n	8008844 <_malloc_r+0x20>
 80088aa:	1a1b      	subs	r3, r3, r0
 80088ac:	50a3      	str	r3, [r4, r2]
 80088ae:	e7c9      	b.n	8008844 <_malloc_r+0x20>
 80088b0:	4622      	mov	r2, r4
 80088b2:	6864      	ldr	r4, [r4, #4]
 80088b4:	e7cc      	b.n	8008850 <_malloc_r+0x2c>
 80088b6:	1cc4      	adds	r4, r0, #3
 80088b8:	f024 0403 	bic.w	r4, r4, #3
 80088bc:	42a0      	cmp	r0, r4
 80088be:	d0e3      	beq.n	8008888 <_malloc_r+0x64>
 80088c0:	1a21      	subs	r1, r4, r0
 80088c2:	4630      	mov	r0, r6
 80088c4:	f000 f82e 	bl	8008924 <_sbrk_r>
 80088c8:	3001      	adds	r0, #1
 80088ca:	d1dd      	bne.n	8008888 <_malloc_r+0x64>
 80088cc:	e7cf      	b.n	800886e <_malloc_r+0x4a>
 80088ce:	bf00      	nop
 80088d0:	200005c8 	.word	0x200005c8
 80088d4:	200005cc 	.word	0x200005cc

080088d8 <_realloc_r>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	4607      	mov	r7, r0
 80088dc:	4614      	mov	r4, r2
 80088de:	460e      	mov	r6, r1
 80088e0:	b921      	cbnz	r1, 80088ec <_realloc_r+0x14>
 80088e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088e6:	4611      	mov	r1, r2
 80088e8:	f7ff bf9c 	b.w	8008824 <_malloc_r>
 80088ec:	b922      	cbnz	r2, 80088f8 <_realloc_r+0x20>
 80088ee:	f7ff ff49 	bl	8008784 <_free_r>
 80088f2:	4625      	mov	r5, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f8:	f000 f830 	bl	800895c <_malloc_usable_size_r>
 80088fc:	42a0      	cmp	r0, r4
 80088fe:	d20f      	bcs.n	8008920 <_realloc_r+0x48>
 8008900:	4621      	mov	r1, r4
 8008902:	4638      	mov	r0, r7
 8008904:	f7ff ff8e 	bl	8008824 <_malloc_r>
 8008908:	4605      	mov	r5, r0
 800890a:	2800      	cmp	r0, #0
 800890c:	d0f2      	beq.n	80088f4 <_realloc_r+0x1c>
 800890e:	4631      	mov	r1, r6
 8008910:	4622      	mov	r2, r4
 8008912:	f7ff ff0f 	bl	8008734 <memcpy>
 8008916:	4631      	mov	r1, r6
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff ff33 	bl	8008784 <_free_r>
 800891e:	e7e9      	b.n	80088f4 <_realloc_r+0x1c>
 8008920:	4635      	mov	r5, r6
 8008922:	e7e7      	b.n	80088f4 <_realloc_r+0x1c>

08008924 <_sbrk_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d06      	ldr	r5, [pc, #24]	; (8008940 <_sbrk_r+0x1c>)
 8008928:	2300      	movs	r3, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	f000 f81e 	bl	8008970 <_sbrk>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_sbrk_r+0x1a>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_sbrk_r+0x1a>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	200006d8 	.word	0x200006d8

08008944 <__malloc_lock>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__malloc_lock+0x8>)
 8008946:	f000 b811 	b.w	800896c <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	200006e0 	.word	0x200006e0

08008950 <__malloc_unlock>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__malloc_unlock+0x8>)
 8008952:	f000 b80c 	b.w	800896e <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	200006e0 	.word	0x200006e0

0800895c <_malloc_usable_size_r>:
 800895c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008960:	1f18      	subs	r0, r3, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfbc      	itt	lt
 8008966:	580b      	ldrlt	r3, [r1, r0]
 8008968:	18c0      	addlt	r0, r0, r3
 800896a:	4770      	bx	lr

0800896c <__retarget_lock_acquire_recursive>:
 800896c:	4770      	bx	lr

0800896e <__retarget_lock_release_recursive>:
 800896e:	4770      	bx	lr

08008970 <_sbrk>:
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <_sbrk+0x14>)
 8008972:	6819      	ldr	r1, [r3, #0]
 8008974:	4602      	mov	r2, r0
 8008976:	b909      	cbnz	r1, 800897c <_sbrk+0xc>
 8008978:	4903      	ldr	r1, [pc, #12]	; (8008988 <_sbrk+0x18>)
 800897a:	6019      	str	r1, [r3, #0]
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	4402      	add	r2, r0
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	4770      	bx	lr
 8008984:	200005d0 	.word	0x200005d0
 8008988:	200006e8 	.word	0x200006e8

0800898c <_init>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr

08008998 <_fini>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	bf00      	nop
 800899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899e:	bc08      	pop	{r3}
 80089a0:	469e      	mov	lr, r3
 80089a2:	4770      	bx	lr
